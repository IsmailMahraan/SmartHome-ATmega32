
SmartHomeApp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000aae8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000044e  00800060  0000aae8  0000ab7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  008004ae  008004ae  0000afca  2**0
                  ALLOC
  3 .stab         0000ba48  00000000  00000000  0000afcc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003fcb  00000000  00000000  00016a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0001a9df  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000210  00000000  00000000  0001ab9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268a  00000000  00000000  0001adaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014e0  00000000  00000000  0001d439  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012a9  00000000  00000000  0001e919  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0001fbc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fe  00000000  00000000  0001fda4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009aa  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00020a4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 c7 17 	jmp	0x2f8e	; 0x2f8e <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 e8 14 	jmp	0x29d0	; 0x29d0 <__vector_6>
      1c:	0c 94 b5 14 	jmp	0x296a	; 0x296a <__vector_7>
      20:	0c 94 82 14 	jmp	0x2904	; 0x2904 <__vector_8>
      24:	0c 94 4f 14 	jmp	0x289e	; 0x289e <__vector_9>
      28:	0c 94 a7 15 	jmp	0x2b4e	; 0x2b4e <__vector_10>
      2c:	0c 94 da 15 	jmp	0x2bb4	; 0x2bb4 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	14 e0       	ldi	r17, 0x04	; 4
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ee       	ldi	r30, 0xE8	; 232
      68:	fa ea       	ldi	r31, 0xAA	; 170
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3a       	cpi	r26, 0xAE	; 174
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	ae ea       	ldi	r26, 0xAE	; 174
      7a:	b4 e0       	ldi	r27, 0x04	; 4
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3c       	cpi	r26, 0xC7	; 199
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 42 4c 	call	0x9884	; 0x9884 <main>
      8a:	0c 94 72 55 	jmp	0xaae4	; 0xaae4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3b 55 	jmp	0xaa76	; 0xaa76 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e8       	ldi	r26, 0x82	; 130
     128:	b3 e0       	ldi	r27, 0x03	; 3
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 57 55 	jmp	0xaaae	; 0xaaae <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 47 55 	jmp	0xaa8e	; 0xaa8e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 63 55 	jmp	0xaac6	; 0xaac6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 47 55 	jmp	0xaa8e	; 0xaa8e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 63 55 	jmp	0xaac6	; 0xaac6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3b 55 	jmp	0xaa76	; 0xaa76 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e8       	ldi	r24, 0x82	; 130
     496:	93 e0       	ldi	r25, 0x03	; 3
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 57 55 	jmp	0xaaae	; 0xaaae <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 43 55 	jmp	0xaa86	; 0xaa86 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 e8       	ldi	r22, 0x82	; 130
     69c:	73 e0       	ldi	r23, 0x03	; 3
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 5f 55 	jmp	0xaabe	; 0xaabe <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 47 55 	jmp	0xaa8e	; 0xaa8e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 63 55 	jmp	0xaac6	; 0xaac6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 47 55 	jmp	0xaa8e	; 0xaa8e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 63 55 	jmp	0xaac6	; 0xaac6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 47 55 	jmp	0xaa8e	; 0xaa8e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 63 55 	jmp	0xaac6	; 0xaac6 <__epilogue_restores__+0x18>

000008aa <__lesf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 47 55 	jmp	0xaa8e	; 0xaa8e <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__lesf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__lesf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__lesf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 63 55 	jmp	0xaac6	; 0xaac6 <__epilogue_restores__+0x18>

0000090a <__fixsfsi>:
     90a:	ac e0       	ldi	r26, 0x0C	; 12
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 4b 55 	jmp	0xaa96	; 0xaa96 <__prologue_saves__+0x20>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	be 01       	movw	r22, r28
     924:	6b 5f       	subi	r22, 0xFB	; 251
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	61 f1       	breq	.+88     	; 0x98a <__fixsfsi+0x80>
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	50 f1       	brcs	.+84     	; 0x98a <__fixsfsi+0x80>
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	21 f4       	brne	.+8      	; 0x942 <__fixsfsi+0x38>
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	88 23       	and	r24, r24
     93e:	51 f1       	breq	.+84     	; 0x994 <__fixsfsi+0x8a>
     940:	2e c0       	rjmp	.+92     	; 0x99e <__fixsfsi+0x94>
     942:	2f 81       	ldd	r18, Y+7	; 0x07
     944:	38 85       	ldd	r19, Y+8	; 0x08
     946:	37 fd       	sbrc	r19, 7
     948:	20 c0       	rjmp	.+64     	; 0x98a <__fixsfsi+0x80>
     94a:	6e 81       	ldd	r22, Y+6	; 0x06
     94c:	2f 31       	cpi	r18, 0x1F	; 31
     94e:	31 05       	cpc	r19, r1
     950:	1c f0       	brlt	.+6      	; 0x958 <__fixsfsi+0x4e>
     952:	66 23       	and	r22, r22
     954:	f9 f0       	breq	.+62     	; 0x994 <__fixsfsi+0x8a>
     956:	23 c0       	rjmp	.+70     	; 0x99e <__fixsfsi+0x94>
     958:	8e e1       	ldi	r24, 0x1E	; 30
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	82 1b       	sub	r24, r18
     95e:	93 0b       	sbc	r25, r19
     960:	29 85       	ldd	r18, Y+9	; 0x09
     962:	3a 85       	ldd	r19, Y+10	; 0x0a
     964:	4b 85       	ldd	r20, Y+11	; 0x0b
     966:	5c 85       	ldd	r21, Y+12	; 0x0c
     968:	04 c0       	rjmp	.+8      	; 0x972 <__fixsfsi+0x68>
     96a:	56 95       	lsr	r21
     96c:	47 95       	ror	r20
     96e:	37 95       	ror	r19
     970:	27 95       	ror	r18
     972:	8a 95       	dec	r24
     974:	d2 f7       	brpl	.-12     	; 0x96a <__fixsfsi+0x60>
     976:	66 23       	and	r22, r22
     978:	b1 f0       	breq	.+44     	; 0x9a6 <__fixsfsi+0x9c>
     97a:	50 95       	com	r21
     97c:	40 95       	com	r20
     97e:	30 95       	com	r19
     980:	21 95       	neg	r18
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	4f 4f       	sbci	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <__fixsfsi+0x9c>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__fixsfsi+0x9c>
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	3f ef       	ldi	r19, 0xFF	; 255
     998:	4f ef       	ldi	r20, 0xFF	; 255
     99a:	5f e7       	ldi	r21, 0x7F	; 127
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__fixsfsi+0x9c>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e8       	ldi	r21, 0x80	; 128
     9a6:	b9 01       	movw	r22, r18
     9a8:	ca 01       	movw	r24, r20
     9aa:	2c 96       	adiw	r28, 0x0c	; 12
     9ac:	e2 e0       	ldi	r30, 0x02	; 2
     9ae:	0c 94 67 55 	jmp	0xaace	; 0xaace <__epilogue_restores__+0x20>

000009b2 <__floatunsisf>:
     9b2:	a8 e0       	ldi	r26, 0x08	; 8
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	ef ed       	ldi	r30, 0xDF	; 223
     9b8:	f4 e0       	ldi	r31, 0x04	; 4
     9ba:	0c 94 43 55 	jmp	0xaa86	; 0xaa86 <__prologue_saves__+0x10>
     9be:	7b 01       	movw	r14, r22
     9c0:	8c 01       	movw	r16, r24
     9c2:	61 15       	cp	r22, r1
     9c4:	71 05       	cpc	r23, r1
     9c6:	81 05       	cpc	r24, r1
     9c8:	91 05       	cpc	r25, r1
     9ca:	19 f4       	brne	.+6      	; 0x9d2 <__floatunsisf+0x20>
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	60 c0       	rjmp	.+192    	; 0xa92 <__floatunsisf+0xe0>
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	8e e1       	ldi	r24, 0x1E	; 30
     9d8:	c8 2e       	mov	r12, r24
     9da:	d1 2c       	mov	r13, r1
     9dc:	dc 82       	std	Y+4, r13	; 0x04
     9de:	cb 82       	std	Y+3, r12	; 0x03
     9e0:	ed 82       	std	Y+5, r14	; 0x05
     9e2:	fe 82       	std	Y+6, r15	; 0x06
     9e4:	0f 83       	std	Y+7, r16	; 0x07
     9e6:	18 87       	std	Y+8, r17	; 0x08
     9e8:	c8 01       	movw	r24, r16
     9ea:	b7 01       	movw	r22, r14
     9ec:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__clzsi2>
     9f0:	fc 01       	movw	r30, r24
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	f7 ff       	sbrs	r31, 7
     9f6:	3b c0       	rjmp	.+118    	; 0xa6e <__floatunsisf+0xbc>
     9f8:	22 27       	eor	r18, r18
     9fa:	33 27       	eor	r19, r19
     9fc:	2e 1b       	sub	r18, r30
     9fe:	3f 0b       	sbc	r19, r31
     a00:	57 01       	movw	r10, r14
     a02:	68 01       	movw	r12, r16
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__floatunsisf+0x5e>
     a08:	d6 94       	lsr	r13
     a0a:	c7 94       	ror	r12
     a0c:	b7 94       	ror	r11
     a0e:	a7 94       	ror	r10
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__floatunsisf+0x56>
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__floatunsisf+0x7c>
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	aa 1f       	adc	r26, r26
     a2c:	bb 1f       	adc	r27, r27
     a2e:	2a 95       	dec	r18
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__floatunsisf+0x74>
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	a1 09       	sbc	r26, r1
     a36:	b1 09       	sbc	r27, r1
     a38:	8e 21       	and	r24, r14
     a3a:	9f 21       	and	r25, r15
     a3c:	a0 23       	and	r26, r16
     a3e:	b1 23       	and	r27, r17
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	a1 05       	cpc	r26, r1
     a44:	b1 05       	cpc	r27, r1
     a46:	21 f0       	breq	.+8      	; 0xa50 <__floatunsisf+0x9e>
     a48:	41 e0       	ldi	r20, 0x01	; 1
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	4a 29       	or	r20, r10
     a52:	5b 29       	or	r21, r11
     a54:	6c 29       	or	r22, r12
     a56:	7d 29       	or	r23, r13
     a58:	4d 83       	std	Y+5, r20	; 0x05
     a5a:	5e 83       	std	Y+6, r21	; 0x06
     a5c:	6f 83       	std	Y+7, r22	; 0x07
     a5e:	78 87       	std	Y+8, r23	; 0x08
     a60:	8e e1       	ldi	r24, 0x1E	; 30
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	8e 1b       	sub	r24, r30
     a66:	9f 0b       	sbc	r25, r31
     a68:	9c 83       	std	Y+4, r25	; 0x04
     a6a:	8b 83       	std	Y+3, r24	; 0x03
     a6c:	12 c0       	rjmp	.+36     	; 0xa92 <__floatunsisf+0xe0>
     a6e:	30 97       	sbiw	r30, 0x00	; 0
     a70:	81 f0       	breq	.+32     	; 0xa92 <__floatunsisf+0xe0>
     a72:	0e 2e       	mov	r0, r30
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__floatunsisf+0xcc>
     a76:	ee 0c       	add	r14, r14
     a78:	ff 1c       	adc	r15, r15
     a7a:	00 1f       	adc	r16, r16
     a7c:	11 1f       	adc	r17, r17
     a7e:	0a 94       	dec	r0
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__floatunsisf+0xc4>
     a82:	ed 82       	std	Y+5, r14	; 0x05
     a84:	fe 82       	std	Y+6, r15	; 0x06
     a86:	0f 83       	std	Y+7, r16	; 0x07
     a88:	18 87       	std	Y+8, r17	; 0x08
     a8a:	ce 1a       	sub	r12, r30
     a8c:	df 0a       	sbc	r13, r31
     a8e:	dc 82       	std	Y+4, r13	; 0x04
     a90:	cb 82       	std	Y+3, r12	; 0x03
     a92:	1a 82       	std	Y+2, r1	; 0x02
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     a9c:	28 96       	adiw	r28, 0x08	; 8
     a9e:	ea e0       	ldi	r30, 0x0A	; 10
     aa0:	0c 94 5f 55 	jmp	0xaabe	; 0xaabe <__epilogue_restores__+0x10>

00000aa4 <__clzsi2>:
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	7b 01       	movw	r14, r22
     aae:	8c 01       	movw	r16, r24
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	e8 16       	cp	r14, r24
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	f8 06       	cpc	r15, r24
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	08 07       	cpc	r16, r24
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	18 07       	cpc	r17, r24
     ac0:	88 f4       	brcc	.+34     	; 0xae4 <__clzsi2+0x40>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	e8 16       	cp	r14, r24
     ac6:	f1 04       	cpc	r15, r1
     ac8:	01 05       	cpc	r16, r1
     aca:	11 05       	cpc	r17, r1
     acc:	31 f0       	breq	.+12     	; 0xada <__clzsi2+0x36>
     ace:	28 f0       	brcs	.+10     	; 0xada <__clzsi2+0x36>
     ad0:	88 e0       	ldi	r24, 0x08	; 8
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	17 c0       	rjmp	.+46     	; 0xb08 <__clzsi2+0x64>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	12 c0       	rjmp	.+36     	; 0xb08 <__clzsi2+0x64>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	e8 16       	cp	r14, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	f8 06       	cpc	r15, r24
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	08 07       	cpc	r16, r24
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	18 07       	cpc	r17, r24
     af4:	28 f0       	brcs	.+10     	; 0xb00 <__clzsi2+0x5c>
     af6:	88 e1       	ldi	r24, 0x18	; 24
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__clzsi2+0x64>
     b00:	80 e1       	ldi	r24, 0x10	; 16
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	20 e2       	ldi	r18, 0x20	; 32
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	28 1b       	sub	r18, r24
     b12:	39 0b       	sbc	r19, r25
     b14:	4a 0b       	sbc	r20, r26
     b16:	5b 0b       	sbc	r21, r27
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__clzsi2+0x7e>
     b1a:	16 95       	lsr	r17
     b1c:	07 95       	ror	r16
     b1e:	f7 94       	ror	r15
     b20:	e7 94       	ror	r14
     b22:	8a 95       	dec	r24
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__clzsi2+0x76>
     b26:	f7 01       	movw	r30, r14
     b28:	e6 57       	subi	r30, 0x76	; 118
     b2a:	fc 4f       	sbci	r31, 0xFC	; 252
     b2c:	80 81       	ld	r24, Z
     b2e:	28 1b       	sub	r18, r24
     b30:	31 09       	sbc	r19, r1
     b32:	41 09       	sbc	r20, r1
     b34:	51 09       	sbc	r21, r1
     b36:	c9 01       	movw	r24, r18
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	08 95       	ret

00000b42 <__pack_f>:
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	fc 01       	movw	r30, r24
     b4e:	e4 80       	ldd	r14, Z+4	; 0x04
     b50:	f5 80       	ldd	r15, Z+5	; 0x05
     b52:	06 81       	ldd	r16, Z+6	; 0x06
     b54:	17 81       	ldd	r17, Z+7	; 0x07
     b56:	d1 80       	ldd	r13, Z+1	; 0x01
     b58:	80 81       	ld	r24, Z
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	48 f4       	brcc	.+18     	; 0xb70 <__pack_f+0x2e>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a0 e1       	ldi	r26, 0x10	; 16
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e8 2a       	or	r14, r24
     b68:	f9 2a       	or	r15, r25
     b6a:	0a 2b       	or	r16, r26
     b6c:	1b 2b       	or	r17, r27
     b6e:	a5 c0       	rjmp	.+330    	; 0xcba <__pack_f+0x178>
     b70:	84 30       	cpi	r24, 0x04	; 4
     b72:	09 f4       	brne	.+2      	; 0xb76 <__pack_f+0x34>
     b74:	9f c0       	rjmp	.+318    	; 0xcb4 <__pack_f+0x172>
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	21 f4       	brne	.+8      	; 0xb82 <__pack_f+0x40>
     b7a:	ee 24       	eor	r14, r14
     b7c:	ff 24       	eor	r15, r15
     b7e:	87 01       	movw	r16, r14
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <__pack_f+0x4a>
     b82:	e1 14       	cp	r14, r1
     b84:	f1 04       	cpc	r15, r1
     b86:	01 05       	cpc	r16, r1
     b88:	11 05       	cpc	r17, r1
     b8a:	19 f4       	brne	.+6      	; 0xb92 <__pack_f+0x50>
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	96 c0       	rjmp	.+300    	; 0xcbe <__pack_f+0x17c>
     b92:	62 81       	ldd	r22, Z+2	; 0x02
     b94:	73 81       	ldd	r23, Z+3	; 0x03
     b96:	9f ef       	ldi	r25, 0xFF	; 255
     b98:	62 38       	cpi	r22, 0x82	; 130
     b9a:	79 07       	cpc	r23, r25
     b9c:	0c f0       	brlt	.+2      	; 0xba0 <__pack_f+0x5e>
     b9e:	5b c0       	rjmp	.+182    	; 0xc56 <__pack_f+0x114>
     ba0:	22 e8       	ldi	r18, 0x82	; 130
     ba2:	3f ef       	ldi	r19, 0xFF	; 255
     ba4:	26 1b       	sub	r18, r22
     ba6:	37 0b       	sbc	r19, r23
     ba8:	2a 31       	cpi	r18, 0x1A	; 26
     baa:	31 05       	cpc	r19, r1
     bac:	2c f0       	brlt	.+10     	; 0xbb8 <__pack_f+0x76>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	2a c0       	rjmp	.+84     	; 0xc0c <__pack_f+0xca>
     bb8:	b8 01       	movw	r22, r16
     bba:	a7 01       	movw	r20, r14
     bbc:	02 2e       	mov	r0, r18
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0x86>
     bc0:	76 95       	lsr	r23
     bc2:	67 95       	ror	r22
     bc4:	57 95       	ror	r21
     bc6:	47 95       	ror	r20
     bc8:	0a 94       	dec	r0
     bca:	d2 f7       	brpl	.-12     	; 0xbc0 <__pack_f+0x7e>
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a0 e0       	ldi	r26, 0x00	; 0
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__pack_f+0x9c>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	aa 1f       	adc	r26, r26
     bdc:	bb 1f       	adc	r27, r27
     bde:	2a 95       	dec	r18
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__pack_f+0x94>
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	a1 09       	sbc	r26, r1
     be6:	b1 09       	sbc	r27, r1
     be8:	8e 21       	and	r24, r14
     bea:	9f 21       	and	r25, r15
     bec:	a0 23       	and	r26, r16
     bee:	b1 23       	and	r27, r17
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	a1 05       	cpc	r26, r1
     bf4:	b1 05       	cpc	r27, r1
     bf6:	21 f0       	breq	.+8      	; 0xc00 <__pack_f+0xbe>
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	9a 01       	movw	r18, r20
     c02:	ab 01       	movw	r20, r22
     c04:	28 2b       	or	r18, r24
     c06:	39 2b       	or	r19, r25
     c08:	4a 2b       	or	r20, r26
     c0a:	5b 2b       	or	r21, r27
     c0c:	da 01       	movw	r26, r20
     c0e:	c9 01       	movw	r24, r18
     c10:	8f 77       	andi	r24, 0x7F	; 127
     c12:	90 70       	andi	r25, 0x00	; 0
     c14:	a0 70       	andi	r26, 0x00	; 0
     c16:	b0 70       	andi	r27, 0x00	; 0
     c18:	80 34       	cpi	r24, 0x40	; 64
     c1a:	91 05       	cpc	r25, r1
     c1c:	a1 05       	cpc	r26, r1
     c1e:	b1 05       	cpc	r27, r1
     c20:	39 f4       	brne	.+14     	; 0xc30 <__pack_f+0xee>
     c22:	27 ff       	sbrs	r18, 7
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <__pack_f+0xf6>
     c26:	20 5c       	subi	r18, 0xC0	; 192
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	4f 4f       	sbci	r20, 0xFF	; 255
     c2c:	5f 4f       	sbci	r21, 0xFF	; 255
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__pack_f+0xf6>
     c30:	21 5c       	subi	r18, 0xC1	; 193
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	4f 4f       	sbci	r20, 0xFF	; 255
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	e0 e0       	ldi	r30, 0x00	; 0
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	20 30       	cpi	r18, 0x00	; 0
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	3a 07       	cpc	r19, r26
     c42:	a0 e0       	ldi	r26, 0x00	; 0
     c44:	4a 07       	cpc	r20, r26
     c46:	a0 e4       	ldi	r26, 0x40	; 64
     c48:	5a 07       	cpc	r21, r26
     c4a:	10 f0       	brcs	.+4      	; 0xc50 <__pack_f+0x10e>
     c4c:	e1 e0       	ldi	r30, 0x01	; 1
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	79 01       	movw	r14, r18
     c52:	8a 01       	movw	r16, r20
     c54:	27 c0       	rjmp	.+78     	; 0xca4 <__pack_f+0x162>
     c56:	60 38       	cpi	r22, 0x80	; 128
     c58:	71 05       	cpc	r23, r1
     c5a:	64 f5       	brge	.+88     	; 0xcb4 <__pack_f+0x172>
     c5c:	fb 01       	movw	r30, r22
     c5e:	e1 58       	subi	r30, 0x81	; 129
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	d8 01       	movw	r26, r16
     c64:	c7 01       	movw	r24, r14
     c66:	8f 77       	andi	r24, 0x7F	; 127
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	a0 70       	andi	r26, 0x00	; 0
     c6c:	b0 70       	andi	r27, 0x00	; 0
     c6e:	80 34       	cpi	r24, 0x40	; 64
     c70:	91 05       	cpc	r25, r1
     c72:	a1 05       	cpc	r26, r1
     c74:	b1 05       	cpc	r27, r1
     c76:	39 f4       	brne	.+14     	; 0xc86 <__pack_f+0x144>
     c78:	e7 fe       	sbrs	r14, 7
     c7a:	0d c0       	rjmp	.+26     	; 0xc96 <__pack_f+0x154>
     c7c:	80 e4       	ldi	r24, 0x40	; 64
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a0 e0       	ldi	r26, 0x00	; 0
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <__pack_f+0x14c>
     c86:	8f e3       	ldi	r24, 0x3F	; 63
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e8 0e       	add	r14, r24
     c90:	f9 1e       	adc	r15, r25
     c92:	0a 1f       	adc	r16, r26
     c94:	1b 1f       	adc	r17, r27
     c96:	17 ff       	sbrs	r17, 7
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <__pack_f+0x162>
     c9a:	16 95       	lsr	r17
     c9c:	07 95       	ror	r16
     c9e:	f7 94       	ror	r15
     ca0:	e7 94       	ror	r14
     ca2:	31 96       	adiw	r30, 0x01	; 1
     ca4:	87 e0       	ldi	r24, 0x07	; 7
     ca6:	16 95       	lsr	r17
     ca8:	07 95       	ror	r16
     caa:	f7 94       	ror	r15
     cac:	e7 94       	ror	r14
     cae:	8a 95       	dec	r24
     cb0:	d1 f7       	brne	.-12     	; 0xca6 <__pack_f+0x164>
     cb2:	05 c0       	rjmp	.+10     	; 0xcbe <__pack_f+0x17c>
     cb4:	ee 24       	eor	r14, r14
     cb6:	ff 24       	eor	r15, r15
     cb8:	87 01       	movw	r16, r14
     cba:	ef ef       	ldi	r30, 0xFF	; 255
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	6e 2f       	mov	r22, r30
     cc0:	67 95       	ror	r22
     cc2:	66 27       	eor	r22, r22
     cc4:	67 95       	ror	r22
     cc6:	90 2f       	mov	r25, r16
     cc8:	9f 77       	andi	r25, 0x7F	; 127
     cca:	d7 94       	ror	r13
     ccc:	dd 24       	eor	r13, r13
     cce:	d7 94       	ror	r13
     cd0:	8e 2f       	mov	r24, r30
     cd2:	86 95       	lsr	r24
     cd4:	49 2f       	mov	r20, r25
     cd6:	46 2b       	or	r20, r22
     cd8:	58 2f       	mov	r21, r24
     cda:	5d 29       	or	r21, r13
     cdc:	b7 01       	movw	r22, r14
     cde:	ca 01       	movw	r24, r20
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	08 95       	ret

00000cec <__unpack_f>:
     cec:	fc 01       	movw	r30, r24
     cee:	db 01       	movw	r26, r22
     cf0:	40 81       	ld	r20, Z
     cf2:	51 81       	ldd	r21, Z+1	; 0x01
     cf4:	22 81       	ldd	r18, Z+2	; 0x02
     cf6:	62 2f       	mov	r22, r18
     cf8:	6f 77       	andi	r22, 0x7F	; 127
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	22 1f       	adc	r18, r18
     cfe:	22 27       	eor	r18, r18
     d00:	22 1f       	adc	r18, r18
     d02:	93 81       	ldd	r25, Z+3	; 0x03
     d04:	89 2f       	mov	r24, r25
     d06:	88 0f       	add	r24, r24
     d08:	82 2b       	or	r24, r18
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	99 1f       	adc	r25, r25
     d10:	99 27       	eor	r25, r25
     d12:	99 1f       	adc	r25, r25
     d14:	11 96       	adiw	r26, 0x01	; 1
     d16:	9c 93       	st	X, r25
     d18:	11 97       	sbiw	r26, 0x01	; 1
     d1a:	21 15       	cp	r18, r1
     d1c:	31 05       	cpc	r19, r1
     d1e:	a9 f5       	brne	.+106    	; 0xd8a <__unpack_f+0x9e>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	11 f4       	brne	.+4      	; 0xd2e <__unpack_f+0x42>
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	37 c0       	rjmp	.+110    	; 0xd9c <__unpack_f+0xb0>
     d2e:	82 e8       	ldi	r24, 0x82	; 130
     d30:	9f ef       	ldi	r25, 0xFF	; 255
     d32:	13 96       	adiw	r26, 0x03	; 3
     d34:	9c 93       	st	X, r25
     d36:	8e 93       	st	-X, r24
     d38:	12 97       	sbiw	r26, 0x02	; 2
     d3a:	9a 01       	movw	r18, r20
     d3c:	ab 01       	movw	r20, r22
     d3e:	67 e0       	ldi	r22, 0x07	; 7
     d40:	22 0f       	add	r18, r18
     d42:	33 1f       	adc	r19, r19
     d44:	44 1f       	adc	r20, r20
     d46:	55 1f       	adc	r21, r21
     d48:	6a 95       	dec	r22
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__unpack_f+0x54>
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	8c 93       	st	X, r24
     d50:	0d c0       	rjmp	.+26     	; 0xd6c <__unpack_f+0x80>
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	44 1f       	adc	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	12 96       	adiw	r26, 0x02	; 2
     d5c:	8d 91       	ld	r24, X+
     d5e:	9c 91       	ld	r25, X
     d60:	13 97       	sbiw	r26, 0x03	; 3
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	13 96       	adiw	r26, 0x03	; 3
     d66:	9c 93       	st	X, r25
     d68:	8e 93       	st	-X, r24
     d6a:	12 97       	sbiw	r26, 0x02	; 2
     d6c:	20 30       	cpi	r18, 0x00	; 0
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	38 07       	cpc	r19, r24
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	48 07       	cpc	r20, r24
     d76:	80 e4       	ldi	r24, 0x40	; 64
     d78:	58 07       	cpc	r21, r24
     d7a:	58 f3       	brcs	.-42     	; 0xd52 <__unpack_f+0x66>
     d7c:	14 96       	adiw	r26, 0x04	; 4
     d7e:	2d 93       	st	X+, r18
     d80:	3d 93       	st	X+, r19
     d82:	4d 93       	st	X+, r20
     d84:	5c 93       	st	X, r21
     d86:	17 97       	sbiw	r26, 0x07	; 7
     d88:	08 95       	ret
     d8a:	2f 3f       	cpi	r18, 0xFF	; 255
     d8c:	31 05       	cpc	r19, r1
     d8e:	79 f4       	brne	.+30     	; 0xdae <__unpack_f+0xc2>
     d90:	41 15       	cp	r20, r1
     d92:	51 05       	cpc	r21, r1
     d94:	61 05       	cpc	r22, r1
     d96:	71 05       	cpc	r23, r1
     d98:	19 f4       	brne	.+6      	; 0xda0 <__unpack_f+0xb4>
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	8c 93       	st	X, r24
     d9e:	08 95       	ret
     da0:	64 ff       	sbrs	r22, 4
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <__unpack_f+0xbe>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	8c 93       	st	X, r24
     da8:	12 c0       	rjmp	.+36     	; 0xdce <__unpack_f+0xe2>
     daa:	1c 92       	st	X, r1
     dac:	10 c0       	rjmp	.+32     	; 0xdce <__unpack_f+0xe2>
     dae:	2f 57       	subi	r18, 0x7F	; 127
     db0:	30 40       	sbci	r19, 0x00	; 0
     db2:	13 96       	adiw	r26, 0x03	; 3
     db4:	3c 93       	st	X, r19
     db6:	2e 93       	st	-X, r18
     db8:	12 97       	sbiw	r26, 0x02	; 2
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	8c 93       	st	X, r24
     dbe:	87 e0       	ldi	r24, 0x07	; 7
     dc0:	44 0f       	add	r20, r20
     dc2:	55 1f       	adc	r21, r21
     dc4:	66 1f       	adc	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	8a 95       	dec	r24
     dca:	d1 f7       	brne	.-12     	; 0xdc0 <__unpack_f+0xd4>
     dcc:	70 64       	ori	r23, 0x40	; 64
     dce:	14 96       	adiw	r26, 0x04	; 4
     dd0:	4d 93       	st	X+, r20
     dd2:	5d 93       	st	X+, r21
     dd4:	6d 93       	st	X+, r22
     dd6:	7c 93       	st	X, r23
     dd8:	17 97       	sbiw	r26, 0x07	; 7
     dda:	08 95       	ret

00000ddc <__fpcmp_parts_f>:
     ddc:	1f 93       	push	r17
     dde:	dc 01       	movw	r26, r24
     de0:	fb 01       	movw	r30, r22
     de2:	9c 91       	ld	r25, X
     de4:	92 30       	cpi	r25, 0x02	; 2
     de6:	08 f4       	brcc	.+2      	; 0xdea <__fpcmp_parts_f+0xe>
     de8:	47 c0       	rjmp	.+142    	; 0xe78 <__fpcmp_parts_f+0x9c>
     dea:	80 81       	ld	r24, Z
     dec:	82 30       	cpi	r24, 0x02	; 2
     dee:	08 f4       	brcc	.+2      	; 0xdf2 <__fpcmp_parts_f+0x16>
     df0:	43 c0       	rjmp	.+134    	; 0xe78 <__fpcmp_parts_f+0x9c>
     df2:	94 30       	cpi	r25, 0x04	; 4
     df4:	51 f4       	brne	.+20     	; 0xe0a <__fpcmp_parts_f+0x2e>
     df6:	11 96       	adiw	r26, 0x01	; 1
     df8:	1c 91       	ld	r17, X
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	99 f5       	brne	.+102    	; 0xe64 <__fpcmp_parts_f+0x88>
     dfe:	81 81       	ldd	r24, Z+1	; 0x01
     e00:	68 2f       	mov	r22, r24
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	61 1b       	sub	r22, r17
     e06:	71 09       	sbc	r23, r1
     e08:	3f c0       	rjmp	.+126    	; 0xe88 <__fpcmp_parts_f+0xac>
     e0a:	84 30       	cpi	r24, 0x04	; 4
     e0c:	21 f0       	breq	.+8      	; 0xe16 <__fpcmp_parts_f+0x3a>
     e0e:	92 30       	cpi	r25, 0x02	; 2
     e10:	31 f4       	brne	.+12     	; 0xe1e <__fpcmp_parts_f+0x42>
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	b9 f1       	breq	.+110    	; 0xe84 <__fpcmp_parts_f+0xa8>
     e16:	81 81       	ldd	r24, Z+1	; 0x01
     e18:	88 23       	and	r24, r24
     e1a:	89 f1       	breq	.+98     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e1c:	2d c0       	rjmp	.+90     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	1c 91       	ld	r17, X
     e22:	11 97       	sbiw	r26, 0x01	; 1
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	f1 f0       	breq	.+60     	; 0xe64 <__fpcmp_parts_f+0x88>
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	18 17       	cp	r17, r24
     e2c:	d9 f4       	brne	.+54     	; 0xe64 <__fpcmp_parts_f+0x88>
     e2e:	12 96       	adiw	r26, 0x02	; 2
     e30:	2d 91       	ld	r18, X+
     e32:	3c 91       	ld	r19, X
     e34:	13 97       	sbiw	r26, 0x03	; 3
     e36:	82 81       	ldd	r24, Z+2	; 0x02
     e38:	93 81       	ldd	r25, Z+3	; 0x03
     e3a:	82 17       	cp	r24, r18
     e3c:	93 07       	cpc	r25, r19
     e3e:	94 f0       	brlt	.+36     	; 0xe64 <__fpcmp_parts_f+0x88>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	bc f0       	brlt	.+46     	; 0xe74 <__fpcmp_parts_f+0x98>
     e46:	14 96       	adiw	r26, 0x04	; 4
     e48:	8d 91       	ld	r24, X+
     e4a:	9d 91       	ld	r25, X+
     e4c:	0d 90       	ld	r0, X+
     e4e:	bc 91       	ld	r27, X
     e50:	a0 2d       	mov	r26, r0
     e52:	24 81       	ldd	r18, Z+4	; 0x04
     e54:	35 81       	ldd	r19, Z+5	; 0x05
     e56:	46 81       	ldd	r20, Z+6	; 0x06
     e58:	57 81       	ldd	r21, Z+7	; 0x07
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	4a 07       	cpc	r20, r26
     e60:	5b 07       	cpc	r21, r27
     e62:	18 f4       	brcc	.+6      	; 0xe6a <__fpcmp_parts_f+0x8e>
     e64:	11 23       	and	r17, r17
     e66:	41 f0       	breq	.+16     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e68:	0a c0       	rjmp	.+20     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e6a:	82 17       	cp	r24, r18
     e6c:	93 07       	cpc	r25, r19
     e6e:	a4 07       	cpc	r26, r20
     e70:	b5 07       	cpc	r27, r21
     e72:	40 f4       	brcc	.+16     	; 0xe84 <__fpcmp_parts_f+0xa8>
     e74:	11 23       	and	r17, r17
     e76:	19 f0       	breq	.+6      	; 0xe7e <__fpcmp_parts_f+0xa2>
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <__fpcmp_parts_f+0xac>
     e7e:	6f ef       	ldi	r22, 0xFF	; 255
     e80:	7f ef       	ldi	r23, 0xFF	; 255
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <__fpcmp_parts_f+0xac>
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	cb 01       	movw	r24, r22
     e8a:	1f 91       	pop	r17
     e8c:	08 95       	ret

00000e8e <MUSART_Init>:
#include"MUSART_Private.h"
#include"MUSART_Config.h"
#include<util/delay.h>
#include"../../LIB/BIT_MATH.h"
void MUSART_Init()
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	0f 92       	push	r0
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
	u8 Loc_UCSRC=0;
     e98:	19 82       	std	Y+1, r1	; 0x01

	/*Set Mode*/

#if MUSART_OPERATING_MODE==MUSART_ASYNCHRONOUS_MODE
	CLR_BIT(Loc_UCSRC,6);
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	8f 7b       	andi	r24, 0xBF	; 191
     e9e:	89 83       	std	Y+1, r24	; 0x01
	/*Set Parity*/
#if MUSART_PARITY_MODE==MUSART_PARITY_DISABLED
	CLR_BIT(Loc_UCSRC,4);
	CLR_BIT(Loc_UCSRC,5);
#elif MUSART_PARITY_MODE==MUSART_PARITY_EVEN
	CLR_BIT(Loc_UCSRC,4);
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	8f 7e       	andi	r24, 0xEF	; 239
     ea4:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Loc_UCSRC,5);
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	80 62       	ori	r24, 0x20	; 32
     eaa:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Loc_UCSRC,5);
#endif

	/*Set Stop Bits*/
#if MUSART_STOP_MODE==MUSART_ONE_STOP_BIT
	CLR_BIT(Loc_UCSRC,3);
     eac:	89 81       	ldd	r24, Y+1	; 0x01
     eae:	87 7f       	andi	r24, 0xF7	; 247
     eb0:	89 83       	std	Y+1, r24	; 0x01
#elif MUSART_DATA_SIZE==MUSART_SEVEN_DATA_BITS
	CLR_BIT(Loc_UCSRC,1);
	SET_BIT(Loc_UCSRC,2);
	CLR_BIT(UCSRB,2);
#elif MUSART_DATA_SIZE==MUSART_EIGHT_DATA_BITS
	SET_BIT(Loc_UCSRC,1);
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	82 60       	ori	r24, 0x02	; 2
     eb6:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Loc_UCSRC,2);
     eb8:	89 81       	ldd	r24, Y+1	; 0x01
     eba:	84 60       	ori	r24, 0x04	; 4
     ebc:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRB,2);
     ebe:	aa e2       	ldi	r26, 0x2A	; 42
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	ea e2       	ldi	r30, 0x2A	; 42
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	8b 7f       	andi	r24, 0xFB	; 251
     eca:	8c 93       	st	X, r24
	SET_BIT(Loc_UCSRC,2);
	SET_BIT(UCSRB,2);
#endif

	/*Set Bit 7 in Local Variable*/
	SET_BIT(Loc_UCSRC,7);
     ecc:	89 81       	ldd	r24, Y+1	; 0x01
     ece:	80 68       	ori	r24, 0x80	; 128
     ed0:	89 83       	std	Y+1, r24	; 0x01

	UCSRC=Loc_UCSRC;
     ed2:	e0 e4       	ldi	r30, 0x40	; 64
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	80 83       	st	Z, r24



	//UBRRL=LocBaud&(0x0FF);
	//UBRRH=LocBaud>>8;
	UBRRL=MUSART_BAUD_RATE;
     eda:	e9 e2       	ldi	r30, 0x29	; 41
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	88 e6       	ldi	r24, 0x68	; 104
     ee0:	80 83       	st	Z, r24

	/*Enable RXEN and TXEN*/
	SET_BIT(UCSRB,3);
     ee2:	aa e2       	ldi	r26, 0x2A	; 42
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	ea e2       	ldi	r30, 0x2A	; 42
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	88 60       	ori	r24, 0x08	; 8
     eee:	8c 93       	st	X, r24
	SET_BIT(UCSRB,4);
     ef0:	aa e2       	ldi	r26, 0x2A	; 42
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	ea e2       	ldi	r30, 0x2A	; 42
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	80 61       	ori	r24, 0x10	; 16
     efc:	8c 93       	st	X, r24
	MDIO_Set_PIN_DIR(MDIO_PORTD,PIN0,PIN_INPUT);
     efe:	83 e0       	ldi	r24, 0x03	; 3
     f00:	60 e0       	ldi	r22, 0x00	; 0
     f02:	40 e0       	ldi	r20, 0x00	; 0
     f04:	0e 94 20 18 	call	0x3040	; 0x3040 <MDIO_Set_PIN_DIR>
	MDIO_Set_PIN_DIR(MDIO_PORTD,PIN1,PIN_OUTPUT);
     f08:	83 e0       	ldi	r24, 0x03	; 3
     f0a:	61 e0       	ldi	r22, 0x01	; 1
     f0c:	41 e0       	ldi	r20, 0x01	; 1
     f0e:	0e 94 20 18 	call	0x3040	; 0x3040 <MDIO_Set_PIN_DIR>
}
     f12:	0f 90       	pop	r0
     f14:	cf 91       	pop	r28
     f16:	df 91       	pop	r29
     f18:	08 95       	ret

00000f1a <MUSART_SendChar>:


void MUSART_SendChar(u8 TransmitValue)
{
     f1a:	df 93       	push	r29
     f1c:	cf 93       	push	r28
     f1e:	0f 92       	push	r0
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
     f24:	89 83       	std	Y+1, r24	; 0x01
	/*Poll on UDRE Flag*/
	while(GET_BIT(UCSRA,5)==0)
     f26:	eb e2       	ldi	r30, 0x2B	; 43
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	82 95       	swap	r24
     f2e:	86 95       	lsr	r24
     f30:	87 70       	andi	r24, 0x07	; 7
     f32:	88 2f       	mov	r24, r24
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	81 70       	andi	r24, 0x01	; 1
     f38:	90 70       	andi	r25, 0x00	; 0
     f3a:	00 97       	sbiw	r24, 0x00	; 0
     f3c:	a1 f3       	breq	.-24     	; 0xf26 <MUSART_SendChar+0xc>
	{
		/*Do Nothing */
	}
	//Send Value to UDR
	UDR=TransmitValue;
     f3e:	ec e2       	ldi	r30, 0x2C	; 44
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	80 83       	st	Z, r24
}
     f46:	0f 90       	pop	r0
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <MUSART_ReceiveChar>:


/*For Simplicity The Pointer is removed and the Function is made
 *To Return the UDR Value Normally */
u8 MUSART_ReceiveChar()
{
     f4e:	df 93       	push	r29
     f50:	cf 93       	push	r28
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
	/*Poll on RXC Flag*/
	while(GET_BIT(UCSRA,7)==0)
     f56:	eb e2       	ldi	r30, 0x2B	; 43
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	88 23       	and	r24, r24
     f5e:	dc f7       	brge	.-10     	; 0xf56 <MUSART_ReceiveChar+0x8>
	{
		/*Do Nothing */
	}
	//Save UDR Content
	return UDR;
     f60:	ec e2       	ldi	r30, 0x2C	; 44
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
}
     f66:	cf 91       	pop	r28
     f68:	df 91       	pop	r29
     f6a:	08 95       	ret

00000f6c <MUSART_SendString>:



void MUSART_SendString(u8* P_TransmitString)
{
     f6c:	df 93       	push	r29
     f6e:	cf 93       	push	r28
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
     f74:	61 97       	sbiw	r28, 0x11	; 17
     f76:	0f b6       	in	r0, 0x3f	; 63
     f78:	f8 94       	cli
     f7a:	de bf       	out	0x3e, r29	; 62
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	cd bf       	out	0x3d, r28	; 61
     f80:	99 8b       	std	Y+17, r25	; 0x11
     f82:	88 8b       	std	Y+16, r24	; 0x10
	u8 Loc_TransmitCounter=0;
     f84:	1f 86       	std	Y+15, r1	; 0x0f
     f86:	80 c0       	rjmp	.+256    	; 0x1088 <MUSART_SendString+0x11c>

	while(P_TransmitString[Loc_TransmitCounter]!='\0')
	{
		MUSART_SendChar(P_TransmitString[Loc_TransmitCounter]);
     f88:	8f 85       	ldd	r24, Y+15	; 0x0f
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	88 89       	ldd	r24, Y+16	; 0x10
     f90:	99 89       	ldd	r25, Y+17	; 0x11
     f92:	fc 01       	movw	r30, r24
     f94:	e2 0f       	add	r30, r18
     f96:	f3 1f       	adc	r31, r19
     f98:	80 81       	ld	r24, Z
     f9a:	0e 94 8d 07 	call	0xf1a	; 0xf1a <MUSART_SendChar>
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	a8 e4       	ldi	r26, 0x48	; 72
     fa4:	b2 e4       	ldi	r27, 0x42	; 66
     fa6:	8b 87       	std	Y+11, r24	; 0x0b
     fa8:	9c 87       	std	Y+12, r25	; 0x0c
     faa:	ad 87       	std	Y+13, r26	; 0x0d
     fac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fae:	6b 85       	ldd	r22, Y+11	; 0x0b
     fb0:	7c 85       	ldd	r23, Y+12	; 0x0c
     fb2:	8d 85       	ldd	r24, Y+13	; 0x0d
     fb4:	9e 85       	ldd	r25, Y+14	; 0x0e
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	4a e7       	ldi	r20, 0x7A	; 122
     fbc:	55 e4       	ldi	r21, 0x45	; 69
     fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fc2:	dc 01       	movw	r26, r24
     fc4:	cb 01       	movw	r24, r22
     fc6:	8f 83       	std	Y+7, r24	; 0x07
     fc8:	98 87       	std	Y+8, r25	; 0x08
     fca:	a9 87       	std	Y+9, r26	; 0x09
     fcc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fce:	6f 81       	ldd	r22, Y+7	; 0x07
     fd0:	78 85       	ldd	r23, Y+8	; 0x08
     fd2:	89 85       	ldd	r24, Y+9	; 0x09
     fd4:	9a 85       	ldd	r25, Y+10	; 0x0a
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	40 e8       	ldi	r20, 0x80	; 128
     fdc:	5f e3       	ldi	r21, 0x3F	; 63
     fde:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     fe2:	88 23       	and	r24, r24
     fe4:	2c f4       	brge	.+10     	; 0xff0 <MUSART_SendString+0x84>
		__ticks = 1;
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	9e 83       	std	Y+6, r25	; 0x06
     fec:	8d 83       	std	Y+5, r24	; 0x05
     fee:	3f c0       	rjmp	.+126    	; 0x106e <MUSART_SendString+0x102>
	else if (__tmp > 65535)
     ff0:	6f 81       	ldd	r22, Y+7	; 0x07
     ff2:	78 85       	ldd	r23, Y+8	; 0x08
     ff4:	89 85       	ldd	r24, Y+9	; 0x09
     ff6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	3f ef       	ldi	r19, 0xFF	; 255
     ffc:	4f e7       	ldi	r20, 0x7F	; 127
     ffe:	57 e4       	ldi	r21, 0x47	; 71
    1000:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1004:	18 16       	cp	r1, r24
    1006:	4c f5       	brge	.+82     	; 0x105a <MUSART_SendString+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1008:	6b 85       	ldd	r22, Y+11	; 0x0b
    100a:	7c 85       	ldd	r23, Y+12	; 0x0c
    100c:	8d 85       	ldd	r24, Y+13	; 0x0d
    100e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	40 e2       	ldi	r20, 0x20	; 32
    1016:	51 e4       	ldi	r21, 0x41	; 65
    1018:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    101c:	dc 01       	movw	r26, r24
    101e:	cb 01       	movw	r24, r22
    1020:	bc 01       	movw	r22, r24
    1022:	cd 01       	movw	r24, r26
    1024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1028:	dc 01       	movw	r26, r24
    102a:	cb 01       	movw	r24, r22
    102c:	9e 83       	std	Y+6, r25	; 0x06
    102e:	8d 83       	std	Y+5, r24	; 0x05
    1030:	0f c0       	rjmp	.+30     	; 0x1050 <MUSART_SendString+0xe4>
    1032:	80 e9       	ldi	r24, 0x90	; 144
    1034:	91 e0       	ldi	r25, 0x01	; 1
    1036:	9c 83       	std	Y+4, r25	; 0x04
    1038:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	9c 81       	ldd	r25, Y+4	; 0x04
    103e:	01 97       	sbiw	r24, 0x01	; 1
    1040:	f1 f7       	brne	.-4      	; 0x103e <MUSART_SendString+0xd2>
    1042:	9c 83       	std	Y+4, r25	; 0x04
    1044:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1046:	8d 81       	ldd	r24, Y+5	; 0x05
    1048:	9e 81       	ldd	r25, Y+6	; 0x06
    104a:	01 97       	sbiw	r24, 0x01	; 1
    104c:	9e 83       	std	Y+6, r25	; 0x06
    104e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1050:	8d 81       	ldd	r24, Y+5	; 0x05
    1052:	9e 81       	ldd	r25, Y+6	; 0x06
    1054:	00 97       	sbiw	r24, 0x00	; 0
    1056:	69 f7       	brne	.-38     	; 0x1032 <MUSART_SendString+0xc6>
    1058:	14 c0       	rjmp	.+40     	; 0x1082 <MUSART_SendString+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    105a:	6f 81       	ldd	r22, Y+7	; 0x07
    105c:	78 85       	ldd	r23, Y+8	; 0x08
    105e:	89 85       	ldd	r24, Y+9	; 0x09
    1060:	9a 85       	ldd	r25, Y+10	; 0x0a
    1062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1066:	dc 01       	movw	r26, r24
    1068:	cb 01       	movw	r24, r22
    106a:	9e 83       	std	Y+6, r25	; 0x06
    106c:	8d 83       	std	Y+5, r24	; 0x05
    106e:	8d 81       	ldd	r24, Y+5	; 0x05
    1070:	9e 81       	ldd	r25, Y+6	; 0x06
    1072:	9a 83       	std	Y+2, r25	; 0x02
    1074:	89 83       	std	Y+1, r24	; 0x01
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	9a 81       	ldd	r25, Y+2	; 0x02
    107a:	01 97       	sbiw	r24, 0x01	; 1
    107c:	f1 f7       	brne	.-4      	; 0x107a <MUSART_SendString+0x10e>
    107e:	9a 83       	std	Y+2, r25	; 0x02
    1080:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
		Loc_TransmitCounter++;
    1082:	8f 85       	ldd	r24, Y+15	; 0x0f
    1084:	8f 5f       	subi	r24, 0xFF	; 255
    1086:	8f 87       	std	Y+15, r24	; 0x0f

void MUSART_SendString(u8* P_TransmitString)
{
	u8 Loc_TransmitCounter=0;

	while(P_TransmitString[Loc_TransmitCounter]!='\0')
    1088:	8f 85       	ldd	r24, Y+15	; 0x0f
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	88 89       	ldd	r24, Y+16	; 0x10
    1090:	99 89       	ldd	r25, Y+17	; 0x11
    1092:	fc 01       	movw	r30, r24
    1094:	e2 0f       	add	r30, r18
    1096:	f3 1f       	adc	r31, r19
    1098:	80 81       	ld	r24, Z
    109a:	88 23       	and	r24, r24
    109c:	09 f0       	breq	.+2      	; 0x10a0 <MUSART_SendString+0x134>
    109e:	74 cf       	rjmp	.-280    	; 0xf88 <MUSART_SendString+0x1c>
	{
		MUSART_SendChar(P_TransmitString[Loc_TransmitCounter]);
		_delay_ms(50);
		Loc_TransmitCounter++;
	}
}
    10a0:	61 96       	adiw	r28, 0x11	; 17
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	f8 94       	cli
    10a6:	de bf       	out	0x3e, r29	; 62
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	cd bf       	out	0x3d, r28	; 61
    10ac:	cf 91       	pop	r28
    10ae:	df 91       	pop	r29
    10b0:	08 95       	ret

000010b2 <MUSART_ReceiveString>:

/*Implementation is Changed instead of Checking On the Received element
 *a While(1) is used instead and its Exit Condition is when
 *the Received Element is ('\n')*/
void MUSART_ReceiveString(u8* P_ReceiveString)
{
    10b2:	0f 93       	push	r16
    10b4:	1f 93       	push	r17
    10b6:	df 93       	push	r29
    10b8:	cf 93       	push	r28
    10ba:	00 d0       	rcall	.+0      	; 0x10bc <MUSART_ReceiveString+0xa>
    10bc:	0f 92       	push	r0
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
    10c2:	9b 83       	std	Y+3, r25	; 0x03
    10c4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_ReceiveCounter=0;
    10c6:	19 82       	std	Y+1, r1	; 0x01

	while(1)
		{
			//Receive
		P_ReceiveString[Loc_ReceiveCounter]=MUSART_ReceiveChar();
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	8a 81       	ldd	r24, Y+2	; 0x02
    10d0:	9b 81       	ldd	r25, Y+3	; 0x03
    10d2:	8c 01       	movw	r16, r24
    10d4:	02 0f       	add	r16, r18
    10d6:	13 1f       	adc	r17, r19
    10d8:	0e 94 a7 07 	call	0xf4e	; 0xf4e <MUSART_ReceiveChar>
    10dc:	f8 01       	movw	r30, r16
    10de:	80 83       	st	Z, r24

		if(P_ReceiveString[Loc_ReceiveCounter]=='\n')
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	8a 81       	ldd	r24, Y+2	; 0x02
    10e8:	9b 81       	ldd	r25, Y+3	; 0x03
    10ea:	fc 01       	movw	r30, r24
    10ec:	e2 0f       	add	r30, r18
    10ee:	f3 1f       	adc	r31, r19
    10f0:	80 81       	ld	r24, Z
    10f2:	8a 30       	cpi	r24, 0x0A	; 10
    10f4:	21 f0       	breq	.+8      	; 0x10fe <MUSART_ReceiveString+0x4c>
		{
			break;
		}
		Loc_ReceiveCounter++;
    10f6:	89 81       	ldd	r24, Y+1	; 0x01
    10f8:	8f 5f       	subi	r24, 0xFF	; 255
    10fa:	89 83       	std	Y+1, r24	; 0x01
    10fc:	e5 cf       	rjmp	.-54     	; 0x10c8 <MUSART_ReceiveString+0x16>
		}
}
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	cf 91       	pop	r28
    1106:	df 91       	pop	r29
    1108:	1f 91       	pop	r17
    110a:	0f 91       	pop	r16
    110c:	08 95       	ret

0000110e <M_Uart_Write>:


void M_Uart_Write(u8 Local_u8_Data)
{
    110e:	df 93       	push	r29
    1110:	cf 93       	push	r28
    1112:	0f 92       	push	r0
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
    1118:	89 83       	std	Y+1, r24	; 0x01
	UDR = Local_u8_Data;
    111a:	ec e2       	ldi	r30, 0x2C	; 44
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	80 83       	st	Z, r24
	while(GET_BIT(UCSRA,6) == 0);
    1122:	eb e2       	ldi	r30, 0x2B	; 43
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	82 95       	swap	r24
    112a:	86 95       	lsr	r24
    112c:	86 95       	lsr	r24
    112e:	83 70       	andi	r24, 0x03	; 3
    1130:	88 2f       	mov	r24, r24
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	81 70       	andi	r24, 0x01	; 1
    1136:	90 70       	andi	r25, 0x00	; 0
    1138:	00 97       	sbiw	r24, 0x00	; 0
    113a:	99 f3       	breq	.-26     	; 0x1122 <M_Uart_Write+0x14>
}
    113c:	0f 90       	pop	r0
    113e:	cf 91       	pop	r28
    1140:	df 91       	pop	r29
    1142:	08 95       	ret

00001144 <M_Uart_Read>:
u8   M_Uart_Read(void)
{
    1144:	df 93       	push	r29
    1146:	cf 93       	push	r28
    1148:	cd b7       	in	r28, 0x3d	; 61
    114a:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(UCSRA,7) == 0);
    114c:	eb e2       	ldi	r30, 0x2B	; 43
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	88 23       	and	r24, r24
    1154:	dc f7       	brge	.-10     	; 0x114c <M_Uart_Read+0x8>
	return UDR;
    1156:	ec e2       	ldi	r30, 0x2C	; 44
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
}
    115c:	cf 91       	pop	r28
    115e:	df 91       	pop	r29
    1160:	08 95       	ret

00001162 <MTWI_MasterInit>:
#include"MTWI_Config.h"
#include"MTWI_Interface.h"
#include<util\delay.h>


TWI_ErrorState MTWI_MasterInit(u8 Copy_u8SelfSlaveAddress){
    1162:	df 93       	push	r29
    1164:	cf 93       	push	r28
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
    116a:	60 97       	sbiw	r28, 0x10	; 16
    116c:	0f b6       	in	r0, 0x3f	; 63
    116e:	f8 94       	cli
    1170:	de bf       	out	0x3e, r29	; 62
    1172:	0f be       	out	0x3f, r0	; 63
    1174:	cd bf       	out	0x3d, r28	; 61
    1176:	88 8b       	std	Y+16, r24	; 0x10
	CLR_BIT(TWCR,2);
    1178:	a6 e5       	ldi	r26, 0x56	; 86
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e6 e5       	ldi	r30, 0x56	; 86
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	8b 7f       	andi	r24, 0xFB	; 251
    1184:	8c 93       	st	X, r24
	TWI_ErrorState ReturnErrorState=NoError;
    1186:	1f 86       	std	Y+15, r1	; 0x0f
	//SET_BIT(TWCR,6);
	/*set interrupt mode*/
#if MTWI_INTERUPT_MODE==MTWI_INTERUPT_DISABLED
	CLR_BIT(TWCR,0);
    1188:	a6 e5       	ldi	r26, 0x56	; 86
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e6 e5       	ldi	r30, 0x56	; 86
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	8e 7f       	andi	r24, 0xFE	; 254
    1194:	8c 93       	st	X, r24
	/*SET BIT RATE OF TWI BUS*/
	/*1-WRITE ON TWSR(1,0)
	 *
	 */
#if MTWI_PRESCALER_MODE==MTWI_PRESCALER_BY_1
	CLR_BIT(TWSR,0);
    1196:	a1 e2       	ldi	r26, 0x21	; 33
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	e1 e2       	ldi	r30, 0x21	; 33
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	8e 7f       	andi	r24, 0xFE	; 254
    11a2:	8c 93       	st	X, r24
	CLR_BIT(TWSR,1);
    11a4:	a1 e2       	ldi	r26, 0x21	; 33
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	e1 e2       	ldi	r30, 0x21	; 33
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	8d 7f       	andi	r24, 0xFD	; 253
    11b0:	8c 93       	st	X, r24
	SET_BIT(TWSR,1);
#else
#error "Wrong prescaler Mode Chosen"
#endif
	/*WRITE THE VALUE AT TWBR*/
	TWBR = 12;           // to make Fscl = 400 Khz
    11b2:	e0 e2       	ldi	r30, 0x20	; 32
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	8c e0       	ldi	r24, 0x0C	; 12
    11b8:	80 83       	st	Z, r24
	if(Copy_u8SelfSlaveAddress!=0){
    11ba:	88 89       	ldd	r24, Y+16	; 0x10
    11bc:	88 23       	and	r24, r24
    11be:	a9 f0       	breq	.+42     	; 0x11ea <MTWI_MasterInit+0x88>
		TWAR&=MTWI_TWAR_ADD_MASK;
    11c0:	a2 e2       	ldi	r26, 0x22	; 34
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	e2 e2       	ldi	r30, 0x22	; 34
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	81 70       	andi	r24, 0x01	; 1
    11cc:	8c 93       	st	X, r24
		TWAR|=(Copy_u8SelfSlaveAddress<<1);
    11ce:	a2 e2       	ldi	r26, 0x22	; 34
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	e2 e2       	ldi	r30, 0x22	; 34
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	28 2f       	mov	r18, r24
    11da:	88 89       	ldd	r24, Y+16	; 0x10
    11dc:	88 2f       	mov	r24, r24
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	82 2b       	or	r24, r18
    11e6:	8c 93       	st	X, r24
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <MTWI_MasterInit+0x8c>
	}
	else{
		ReturnErrorState=WrongAddressPassed;
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	8f 87       	std	Y+15, r24	; 0x0f

	}
	/*ENABLE THE TWI*/
	SET_BIT(TWCR,2);
    11ee:	a6 e5       	ldi	r26, 0x56	; 86
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	e6 e5       	ldi	r30, 0x56	; 86
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	84 60       	ori	r24, 0x04	; 4
    11fa:	8c 93       	st	X, r24
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	a0 e2       	ldi	r26, 0x20	; 32
    1202:	b1 e4       	ldi	r27, 0x41	; 65
    1204:	8b 87       	std	Y+11, r24	; 0x0b
    1206:	9c 87       	std	Y+12, r25	; 0x0c
    1208:	ad 87       	std	Y+13, r26	; 0x0d
    120a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    120c:	6b 85       	ldd	r22, Y+11	; 0x0b
    120e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1210:	8d 85       	ldd	r24, Y+13	; 0x0d
    1212:	9e 85       	ldd	r25, Y+14	; 0x0e
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	4a e7       	ldi	r20, 0x7A	; 122
    121a:	55 e4       	ldi	r21, 0x45	; 69
    121c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1220:	dc 01       	movw	r26, r24
    1222:	cb 01       	movw	r24, r22
    1224:	8f 83       	std	Y+7, r24	; 0x07
    1226:	98 87       	std	Y+8, r25	; 0x08
    1228:	a9 87       	std	Y+9, r26	; 0x09
    122a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    122c:	6f 81       	ldd	r22, Y+7	; 0x07
    122e:	78 85       	ldd	r23, Y+8	; 0x08
    1230:	89 85       	ldd	r24, Y+9	; 0x09
    1232:	9a 85       	ldd	r25, Y+10	; 0x0a
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	40 e8       	ldi	r20, 0x80	; 128
    123a:	5f e3       	ldi	r21, 0x3F	; 63
    123c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1240:	88 23       	and	r24, r24
    1242:	2c f4       	brge	.+10     	; 0x124e <MTWI_MasterInit+0xec>
		__ticks = 1;
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	9e 83       	std	Y+6, r25	; 0x06
    124a:	8d 83       	std	Y+5, r24	; 0x05
    124c:	3f c0       	rjmp	.+126    	; 0x12cc <MTWI_MasterInit+0x16a>
	else if (__tmp > 65535)
    124e:	6f 81       	ldd	r22, Y+7	; 0x07
    1250:	78 85       	ldd	r23, Y+8	; 0x08
    1252:	89 85       	ldd	r24, Y+9	; 0x09
    1254:	9a 85       	ldd	r25, Y+10	; 0x0a
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	3f ef       	ldi	r19, 0xFF	; 255
    125a:	4f e7       	ldi	r20, 0x7F	; 127
    125c:	57 e4       	ldi	r21, 0x47	; 71
    125e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1262:	18 16       	cp	r1, r24
    1264:	4c f5       	brge	.+82     	; 0x12b8 <MTWI_MasterInit+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1266:	6b 85       	ldd	r22, Y+11	; 0x0b
    1268:	7c 85       	ldd	r23, Y+12	; 0x0c
    126a:	8d 85       	ldd	r24, Y+13	; 0x0d
    126c:	9e 85       	ldd	r25, Y+14	; 0x0e
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	40 e2       	ldi	r20, 0x20	; 32
    1274:	51 e4       	ldi	r21, 0x41	; 65
    1276:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    127a:	dc 01       	movw	r26, r24
    127c:	cb 01       	movw	r24, r22
    127e:	bc 01       	movw	r22, r24
    1280:	cd 01       	movw	r24, r26
    1282:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1286:	dc 01       	movw	r26, r24
    1288:	cb 01       	movw	r24, r22
    128a:	9e 83       	std	Y+6, r25	; 0x06
    128c:	8d 83       	std	Y+5, r24	; 0x05
    128e:	0f c0       	rjmp	.+30     	; 0x12ae <MTWI_MasterInit+0x14c>
    1290:	80 e9       	ldi	r24, 0x90	; 144
    1292:	91 e0       	ldi	r25, 0x01	; 1
    1294:	9c 83       	std	Y+4, r25	; 0x04
    1296:	8b 83       	std	Y+3, r24	; 0x03
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	9c 81       	ldd	r25, Y+4	; 0x04
    129c:	01 97       	sbiw	r24, 0x01	; 1
    129e:	f1 f7       	brne	.-4      	; 0x129c <MTWI_MasterInit+0x13a>
    12a0:	9c 83       	std	Y+4, r25	; 0x04
    12a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12a4:	8d 81       	ldd	r24, Y+5	; 0x05
    12a6:	9e 81       	ldd	r25, Y+6	; 0x06
    12a8:	01 97       	sbiw	r24, 0x01	; 1
    12aa:	9e 83       	std	Y+6, r25	; 0x06
    12ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ae:	8d 81       	ldd	r24, Y+5	; 0x05
    12b0:	9e 81       	ldd	r25, Y+6	; 0x06
    12b2:	00 97       	sbiw	r24, 0x00	; 0
    12b4:	69 f7       	brne	.-38     	; 0x1290 <MTWI_MasterInit+0x12e>
    12b6:	14 c0       	rjmp	.+40     	; 0x12e0 <MTWI_MasterInit+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12b8:	6f 81       	ldd	r22, Y+7	; 0x07
    12ba:	78 85       	ldd	r23, Y+8	; 0x08
    12bc:	89 85       	ldd	r24, Y+9	; 0x09
    12be:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12c4:	dc 01       	movw	r26, r24
    12c6:	cb 01       	movw	r24, r22
    12c8:	9e 83       	std	Y+6, r25	; 0x06
    12ca:	8d 83       	std	Y+5, r24	; 0x05
    12cc:	8d 81       	ldd	r24, Y+5	; 0x05
    12ce:	9e 81       	ldd	r25, Y+6	; 0x06
    12d0:	9a 83       	std	Y+2, r25	; 0x02
    12d2:	89 83       	std	Y+1, r24	; 0x01
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
    12d6:	9a 81       	ldd	r25, Y+2	; 0x02
    12d8:	01 97       	sbiw	r24, 0x01	; 1
    12da:	f1 f7       	brne	.-4      	; 0x12d8 <MTWI_MasterInit+0x176>
    12dc:	9a 83       	std	Y+2, r25	; 0x02
    12de:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	return ReturnErrorState;
    12e0:	8f 85       	ldd	r24, Y+15	; 0x0f


}
    12e2:	60 96       	adiw	r28, 0x10	; 16
    12e4:	0f b6       	in	r0, 0x3f	; 63
    12e6:	f8 94       	cli
    12e8:	de bf       	out	0x3e, r29	; 62
    12ea:	0f be       	out	0x3f, r0	; 63
    12ec:	cd bf       	out	0x3d, r28	; 61
    12ee:	cf 91       	pop	r28
    12f0:	df 91       	pop	r29
    12f2:	08 95       	ret

000012f4 <MTWI_SlaveInit>:
TWI_ErrorState MTWI_SlaveInit(u8 Copy_u8SelfSlaveAddress){
    12f4:	df 93       	push	r29
    12f6:	cf 93       	push	r28
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <MTWI_SlaveInit+0x6>
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
    12fe:	8a 83       	std	Y+2, r24	; 0x02

	TWI_ErrorState ReturnErrorState=NoError;
    1300:	19 82       	std	Y+1, r1	; 0x01
	/*Enable the ACK [TWEA]*/
		SET_BIT(TWCR,6);
    1302:	a6 e5       	ldi	r26, 0x56	; 86
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	e6 e5       	ldi	r30, 0x56	; 86
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	80 64       	ori	r24, 0x40	; 64
    130e:	8c 93       	st	X, r24

		/*Set Interrupt Mode*/
	#if MTWI_INTERRUPT_MODE==MTWI_INTERRUPT_DISABLED
		CLR_BIT(TWCR,0);
    1310:	a6 e5       	ldi	r26, 0x56	; 86
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e6 e5       	ldi	r30, 0x56	; 86
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	8e 7f       	andi	r24, 0xFE	; 254
    131c:	8c 93       	st	X, r24
		SET_BIT(TWCR,0);
	#else
	#error"Wrong Interrupt Mode chosen"
	#endif

		if(Copy_u8SelfSlaveAddress!=0){
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	88 23       	and	r24, r24
    1322:	a9 f0       	breq	.+42     	; 0x134e <MTWI_SlaveInit+0x5a>
				TWAR&=MTWI_TWAR_ADD_MASK;
    1324:	a2 e2       	ldi	r26, 0x22	; 34
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	e2 e2       	ldi	r30, 0x22	; 34
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	81 70       	andi	r24, 0x01	; 1
    1330:	8c 93       	st	X, r24
				TWAR|=(Copy_u8SelfSlaveAddress<<1);
    1332:	a2 e2       	ldi	r26, 0x22	; 34
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	e2 e2       	ldi	r30, 0x22	; 34
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	28 2f       	mov	r18, r24
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	88 2f       	mov	r24, r24
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	88 0f       	add	r24, r24
    1346:	99 1f       	adc	r25, r25
    1348:	82 2b       	or	r24, r18
    134a:	8c 93       	st	X, r24
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <MTWI_SlaveInit+0x5e>
			}
			else{
				ReturnErrorState=WrongAddressPassed;
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	89 83       	std	Y+1, r24	; 0x01

			}

		/*enable the TWI*/
		SET_BIT(TWCR,2);
    1352:	a6 e5       	ldi	r26, 0x56	; 86
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	e6 e5       	ldi	r30, 0x56	; 86
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	84 60       	ori	r24, 0x04	; 4
    135e:	8c 93       	st	X, r24
		return ReturnErrorState;
    1360:	89 81       	ldd	r24, Y+1	; 0x01
		_delay_ms(10);
}
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	08 95       	ret

0000136c <MTWI_SendStartCondition>:

TWI_ErrorState MTWI_SendStartCondition(){
    136c:	df 93       	push	r29
    136e:	cf 93       	push	r28
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
    1374:	2f 97       	sbiw	r28, 0x0f	; 15
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	f8 94       	cli
    137a:	de bf       	out	0x3e, r29	; 62
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	cd bf       	out	0x3d, r28	; 61
	TWI_ErrorState ReturnErrorState;
	/*send start condition*/

	SET_BIT(TWCR,5);
    1380:	a6 e5       	ldi	r26, 0x56	; 86
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	e6 e5       	ldi	r30, 0x56	; 86
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	80 62       	ori	r24, 0x20	; 32
    138c:	8c 93       	st	X, r24
	//CLEAR THE TWINT FLAG SO THE TWI PERFORM THE LAST ORDERED OPERATION//
	SET_BIT(TWCR,7);
    138e:	a6 e5       	ldi	r26, 0x56	; 86
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	e6 e5       	ldi	r30, 0x56	; 86
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	80 68       	ori	r24, 0x80	; 128
    139a:	8c 93       	st	X, r24
	//WAIT ON FLAG TO BE HIGH//
	while(GET_BIT(TWCR,7)==0);
    139c:	e6 e5       	ldi	r30, 0x56	; 86
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	88 23       	and	r24, r24
    13a4:	dc f7       	brge	.-10     	; 0x139c <MTWI_SendStartCondition+0x30>
	//CHECK TWSR
	if((TWSR&MTWI_TWSR_STATUSCODE_MASK)!=MTWI_STATUS_CODE_START_COND_ACK){
    13a6:	e1 e2       	ldi	r30, 0x21	; 33
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	88 2f       	mov	r24, r24
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	88 7f       	andi	r24, 0xF8	; 248
    13b2:	90 70       	andi	r25, 0x00	; 0
    13b4:	88 30       	cpi	r24, 0x08	; 8
    13b6:	91 05       	cpc	r25, r1
    13b8:	19 f0       	breq	.+6      	; 0x13c0 <MTWI_SendStartCondition+0x54>
		ReturnErrorState=StartConditionFailed;
    13ba:	82 e0       	ldi	r24, 0x02	; 2
    13bc:	8f 87       	std	Y+15, r24	; 0x0f
    13be:	01 c0       	rjmp	.+2      	; 0x13c2 <MTWI_SendStartCondition+0x56>
	}
	else{
		ReturnErrorState=NoError;
    13c0:	1f 86       	std	Y+15, r1	; 0x0f
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	a0 e2       	ldi	r26, 0x20	; 32
    13c8:	b1 e4       	ldi	r27, 0x41	; 65
    13ca:	8b 87       	std	Y+11, r24	; 0x0b
    13cc:	9c 87       	std	Y+12, r25	; 0x0c
    13ce:	ad 87       	std	Y+13, r26	; 0x0d
    13d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    13d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    13d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    13d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	4a e7       	ldi	r20, 0x7A	; 122
    13e0:	55 e4       	ldi	r21, 0x45	; 69
    13e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	8f 83       	std	Y+7, r24	; 0x07
    13ec:	98 87       	std	Y+8, r25	; 0x08
    13ee:	a9 87       	std	Y+9, r26	; 0x09
    13f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13f2:	6f 81       	ldd	r22, Y+7	; 0x07
    13f4:	78 85       	ldd	r23, Y+8	; 0x08
    13f6:	89 85       	ldd	r24, Y+9	; 0x09
    13f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13fa:	20 e0       	ldi	r18, 0x00	; 0
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	40 e8       	ldi	r20, 0x80	; 128
    1400:	5f e3       	ldi	r21, 0x3F	; 63
    1402:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1406:	88 23       	and	r24, r24
    1408:	2c f4       	brge	.+10     	; 0x1414 <MTWI_SendStartCondition+0xa8>
		__ticks = 1;
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	9e 83       	std	Y+6, r25	; 0x06
    1410:	8d 83       	std	Y+5, r24	; 0x05
    1412:	3f c0       	rjmp	.+126    	; 0x1492 <MTWI_SendStartCondition+0x126>
	else if (__tmp > 65535)
    1414:	6f 81       	ldd	r22, Y+7	; 0x07
    1416:	78 85       	ldd	r23, Y+8	; 0x08
    1418:	89 85       	ldd	r24, Y+9	; 0x09
    141a:	9a 85       	ldd	r25, Y+10	; 0x0a
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	3f ef       	ldi	r19, 0xFF	; 255
    1420:	4f e7       	ldi	r20, 0x7F	; 127
    1422:	57 e4       	ldi	r21, 0x47	; 71
    1424:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1428:	18 16       	cp	r1, r24
    142a:	4c f5       	brge	.+82     	; 0x147e <MTWI_SendStartCondition+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    142c:	6b 85       	ldd	r22, Y+11	; 0x0b
    142e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1430:	8d 85       	ldd	r24, Y+13	; 0x0d
    1432:	9e 85       	ldd	r25, Y+14	; 0x0e
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	40 e2       	ldi	r20, 0x20	; 32
    143a:	51 e4       	ldi	r21, 0x41	; 65
    143c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1440:	dc 01       	movw	r26, r24
    1442:	cb 01       	movw	r24, r22
    1444:	bc 01       	movw	r22, r24
    1446:	cd 01       	movw	r24, r26
    1448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    144c:	dc 01       	movw	r26, r24
    144e:	cb 01       	movw	r24, r22
    1450:	9e 83       	std	Y+6, r25	; 0x06
    1452:	8d 83       	std	Y+5, r24	; 0x05
    1454:	0f c0       	rjmp	.+30     	; 0x1474 <MTWI_SendStartCondition+0x108>
    1456:	80 e9       	ldi	r24, 0x90	; 144
    1458:	91 e0       	ldi	r25, 0x01	; 1
    145a:	9c 83       	std	Y+4, r25	; 0x04
    145c:	8b 83       	std	Y+3, r24	; 0x03
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	9c 81       	ldd	r25, Y+4	; 0x04
    1462:	01 97       	sbiw	r24, 0x01	; 1
    1464:	f1 f7       	brne	.-4      	; 0x1462 <MTWI_SendStartCondition+0xf6>
    1466:	9c 83       	std	Y+4, r25	; 0x04
    1468:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    146a:	8d 81       	ldd	r24, Y+5	; 0x05
    146c:	9e 81       	ldd	r25, Y+6	; 0x06
    146e:	01 97       	sbiw	r24, 0x01	; 1
    1470:	9e 83       	std	Y+6, r25	; 0x06
    1472:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1474:	8d 81       	ldd	r24, Y+5	; 0x05
    1476:	9e 81       	ldd	r25, Y+6	; 0x06
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	69 f7       	brne	.-38     	; 0x1456 <MTWI_SendStartCondition+0xea>
    147c:	14 c0       	rjmp	.+40     	; 0x14a6 <MTWI_SendStartCondition+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    147e:	6f 81       	ldd	r22, Y+7	; 0x07
    1480:	78 85       	ldd	r23, Y+8	; 0x08
    1482:	89 85       	ldd	r24, Y+9	; 0x09
    1484:	9a 85       	ldd	r25, Y+10	; 0x0a
    1486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    148a:	dc 01       	movw	r26, r24
    148c:	cb 01       	movw	r24, r22
    148e:	9e 83       	std	Y+6, r25	; 0x06
    1490:	8d 83       	std	Y+5, r24	; 0x05
    1492:	8d 81       	ldd	r24, Y+5	; 0x05
    1494:	9e 81       	ldd	r25, Y+6	; 0x06
    1496:	9a 83       	std	Y+2, r25	; 0x02
    1498:	89 83       	std	Y+1, r24	; 0x01
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	9a 81       	ldd	r25, Y+2	; 0x02
    149e:	01 97       	sbiw	r24, 0x01	; 1
    14a0:	f1 f7       	brne	.-4      	; 0x149e <MTWI_SendStartCondition+0x132>
    14a2:	9a 83       	std	Y+2, r25	; 0x02
    14a4:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(10);
	return ReturnErrorState;
    14a6:	8f 85       	ldd	r24, Y+15	; 0x0f


}
    14a8:	2f 96       	adiw	r28, 0x0f	; 15
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	f8 94       	cli
    14ae:	de bf       	out	0x3e, r29	; 62
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	cd bf       	out	0x3d, r28	; 61
    14b4:	cf 91       	pop	r28
    14b6:	df 91       	pop	r29
    14b8:	08 95       	ret

000014ba <MTWI_SendSlaveAddress_WithWrite>:
TWI_ErrorState MTWI_SendSlaveAddress_WithWrite(u8 Copy_u8SlaveAddress){
    14ba:	df 93       	push	r29
    14bc:	cf 93       	push	r28
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
    14c2:	61 97       	sbiw	r28, 0x11	; 17
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	f8 94       	cli
    14c8:	de bf       	out	0x3e, r29	; 62
    14ca:	0f be       	out	0x3f, r0	; 63
    14cc:	cd bf       	out	0x3d, r28	; 61
    14ce:	89 8b       	std	Y+17, r24	; 0x11

	TWI_ErrorState ReturnErrorState=NoError;
    14d0:	18 8a       	std	Y+16, r1	; 0x10
	u8 Local_u8SlaveAddress=Copy_u8SlaveAddress;
    14d2:	89 89       	ldd	r24, Y+17	; 0x11
    14d4:	8f 87       	std	Y+15, r24	; 0x0f
	/*clear the TWISTA BIT*/
	//CLR_BIT(TWCR,5);
	/*SHIFT THE ADDRESS SENT ONE BIT TO THE LEFT*/
	TWDR=Local_u8SlaveAddress<<1;
    14d6:	e3 e2       	ldi	r30, 0x23	; 35
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	8f 85       	ldd	r24, Y+15	; 0x0f
    14dc:	88 0f       	add	r24, r24
    14de:	80 83       	st	Z, r24
	/*CLEAR THE TWINT FLAG*/
	SET_BIT(TWCR,7);
    14e0:	a6 e5       	ldi	r26, 0x56	; 86
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	e6 e5       	ldi	r30, 0x56	; 86
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	80 68       	ori	r24, 0x80	; 128
    14ec:	8c 93       	st	X, r24
	/*WAIT ON THE FLAG TILL THE OPERATION IS COMPLETED*/
	while(GET_BIT(TWCR,7)==0);
    14ee:	e6 e5       	ldi	r30, 0x56	; 86
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	88 23       	and	r24, r24
    14f6:	dc f7       	brge	.-10     	; 0x14ee <MTWI_SendSlaveAddress_WithWrite+0x34>
	if((TWSR&MTWI_TWSR_STATUSCODE_MASK)!=MTWI_STATUS_CODE_SLAVE_ADD_WR_ACK){
    14f8:	e1 e2       	ldi	r30, 0x21	; 33
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	88 2f       	mov	r24, r24
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	88 7f       	andi	r24, 0xF8	; 248
    1504:	90 70       	andi	r25, 0x00	; 0
    1506:	88 31       	cpi	r24, 0x18	; 24
    1508:	91 05       	cpc	r25, r1
    150a:	19 f0       	breq	.+6      	; 0x1512 <MTWI_SendSlaveAddress_WithWrite+0x58>
			ReturnErrorState=SlaveAddressWithWriteFailed;
    150c:	84 e0       	ldi	r24, 0x04	; 4
    150e:	88 8b       	std	Y+16, r24	; 0x10
    1510:	01 c0       	rjmp	.+2      	; 0x1514 <MTWI_SendSlaveAddress_WithWrite+0x5a>
		}
		else{
			ReturnErrorState=NoError;
    1512:	18 8a       	std	Y+16, r1	; 0x10
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	a0 e2       	ldi	r26, 0x20	; 32
    151a:	b1 e4       	ldi	r27, 0x41	; 65
    151c:	8b 87       	std	Y+11, r24	; 0x0b
    151e:	9c 87       	std	Y+12, r25	; 0x0c
    1520:	ad 87       	std	Y+13, r26	; 0x0d
    1522:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1524:	6b 85       	ldd	r22, Y+11	; 0x0b
    1526:	7c 85       	ldd	r23, Y+12	; 0x0c
    1528:	8d 85       	ldd	r24, Y+13	; 0x0d
    152a:	9e 85       	ldd	r25, Y+14	; 0x0e
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	4a e7       	ldi	r20, 0x7A	; 122
    1532:	55 e4       	ldi	r21, 0x45	; 69
    1534:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1538:	dc 01       	movw	r26, r24
    153a:	cb 01       	movw	r24, r22
    153c:	8f 83       	std	Y+7, r24	; 0x07
    153e:	98 87       	std	Y+8, r25	; 0x08
    1540:	a9 87       	std	Y+9, r26	; 0x09
    1542:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1544:	6f 81       	ldd	r22, Y+7	; 0x07
    1546:	78 85       	ldd	r23, Y+8	; 0x08
    1548:	89 85       	ldd	r24, Y+9	; 0x09
    154a:	9a 85       	ldd	r25, Y+10	; 0x0a
    154c:	20 e0       	ldi	r18, 0x00	; 0
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	40 e8       	ldi	r20, 0x80	; 128
    1552:	5f e3       	ldi	r21, 0x3F	; 63
    1554:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1558:	88 23       	and	r24, r24
    155a:	2c f4       	brge	.+10     	; 0x1566 <MTWI_SendSlaveAddress_WithWrite+0xac>
		__ticks = 1;
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	9e 83       	std	Y+6, r25	; 0x06
    1562:	8d 83       	std	Y+5, r24	; 0x05
    1564:	3f c0       	rjmp	.+126    	; 0x15e4 <MTWI_SendSlaveAddress_WithWrite+0x12a>
	else if (__tmp > 65535)
    1566:	6f 81       	ldd	r22, Y+7	; 0x07
    1568:	78 85       	ldd	r23, Y+8	; 0x08
    156a:	89 85       	ldd	r24, Y+9	; 0x09
    156c:	9a 85       	ldd	r25, Y+10	; 0x0a
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	3f ef       	ldi	r19, 0xFF	; 255
    1572:	4f e7       	ldi	r20, 0x7F	; 127
    1574:	57 e4       	ldi	r21, 0x47	; 71
    1576:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    157a:	18 16       	cp	r1, r24
    157c:	4c f5       	brge	.+82     	; 0x15d0 <MTWI_SendSlaveAddress_WithWrite+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    157e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1580:	7c 85       	ldd	r23, Y+12	; 0x0c
    1582:	8d 85       	ldd	r24, Y+13	; 0x0d
    1584:	9e 85       	ldd	r25, Y+14	; 0x0e
    1586:	20 e0       	ldi	r18, 0x00	; 0
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	40 e2       	ldi	r20, 0x20	; 32
    158c:	51 e4       	ldi	r21, 0x41	; 65
    158e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1592:	dc 01       	movw	r26, r24
    1594:	cb 01       	movw	r24, r22
    1596:	bc 01       	movw	r22, r24
    1598:	cd 01       	movw	r24, r26
    159a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	9e 83       	std	Y+6, r25	; 0x06
    15a4:	8d 83       	std	Y+5, r24	; 0x05
    15a6:	0f c0       	rjmp	.+30     	; 0x15c6 <MTWI_SendSlaveAddress_WithWrite+0x10c>
    15a8:	80 e9       	ldi	r24, 0x90	; 144
    15aa:	91 e0       	ldi	r25, 0x01	; 1
    15ac:	9c 83       	std	Y+4, r25	; 0x04
    15ae:	8b 83       	std	Y+3, r24	; 0x03
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	9c 81       	ldd	r25, Y+4	; 0x04
    15b4:	01 97       	sbiw	r24, 0x01	; 1
    15b6:	f1 f7       	brne	.-4      	; 0x15b4 <MTWI_SendSlaveAddress_WithWrite+0xfa>
    15b8:	9c 83       	std	Y+4, r25	; 0x04
    15ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15bc:	8d 81       	ldd	r24, Y+5	; 0x05
    15be:	9e 81       	ldd	r25, Y+6	; 0x06
    15c0:	01 97       	sbiw	r24, 0x01	; 1
    15c2:	9e 83       	std	Y+6, r25	; 0x06
    15c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15c6:	8d 81       	ldd	r24, Y+5	; 0x05
    15c8:	9e 81       	ldd	r25, Y+6	; 0x06
    15ca:	00 97       	sbiw	r24, 0x00	; 0
    15cc:	69 f7       	brne	.-38     	; 0x15a8 <MTWI_SendSlaveAddress_WithWrite+0xee>
    15ce:	14 c0       	rjmp	.+40     	; 0x15f8 <MTWI_SendSlaveAddress_WithWrite+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15d0:	6f 81       	ldd	r22, Y+7	; 0x07
    15d2:	78 85       	ldd	r23, Y+8	; 0x08
    15d4:	89 85       	ldd	r24, Y+9	; 0x09
    15d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15dc:	dc 01       	movw	r26, r24
    15de:	cb 01       	movw	r24, r22
    15e0:	9e 83       	std	Y+6, r25	; 0x06
    15e2:	8d 83       	std	Y+5, r24	; 0x05
    15e4:	8d 81       	ldd	r24, Y+5	; 0x05
    15e6:	9e 81       	ldd	r25, Y+6	; 0x06
    15e8:	9a 83       	std	Y+2, r25	; 0x02
    15ea:	89 83       	std	Y+1, r24	; 0x01
    15ec:	89 81       	ldd	r24, Y+1	; 0x01
    15ee:	9a 81       	ldd	r25, Y+2	; 0x02
    15f0:	01 97       	sbiw	r24, 0x01	; 1
    15f2:	f1 f7       	brne	.-4      	; 0x15f0 <MTWI_SendSlaveAddress_WithWrite+0x136>
    15f4:	9a 83       	std	Y+2, r25	; 0x02
    15f6:	89 83       	std	Y+1, r24	; 0x01
		}
		_delay_ms(10);
		return ReturnErrorState;
    15f8:	88 89       	ldd	r24, Y+16	; 0x10



}
    15fa:	61 96       	adiw	r28, 0x11	; 17
    15fc:	0f b6       	in	r0, 0x3f	; 63
    15fe:	f8 94       	cli
    1600:	de bf       	out	0x3e, r29	; 62
    1602:	0f be       	out	0x3f, r0	; 63
    1604:	cd bf       	out	0x3d, r28	; 61
    1606:	cf 91       	pop	r28
    1608:	df 91       	pop	r29
    160a:	08 95       	ret

0000160c <MTWI_SendSlaveAddress_WithRead>:
TWI_ErrorState MTWI_SendSlaveAddress_WithRead(u8 Copy_u8SlaveAddress){
    160c:	df 93       	push	r29
    160e:	cf 93       	push	r28
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
    1614:	61 97       	sbiw	r28, 0x11	; 17
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	f8 94       	cli
    161a:	de bf       	out	0x3e, r29	; 62
    161c:	0f be       	out	0x3f, r0	; 63
    161e:	cd bf       	out	0x3d, r28	; 61
    1620:	89 8b       	std	Y+17, r24	; 0x11
	TWI_ErrorState ReturnErrorState=NoError;
    1622:	18 8a       	std	Y+16, r1	; 0x10
	u8 Local_u8SlaveAddress=Copy_u8SlaveAddress;
    1624:	89 89       	ldd	r24, Y+17	; 0x11
    1626:	8f 87       	std	Y+15, r24	; 0x0f
	/*clear the TWISTA BIT*/
	//CLR_BIT(TWCR,5);
	/*SHIFT THE ADDRESS SENT ONE BIT TO THE LEFT and add a (1) to the local varible to indicate
	 * a read request*/
	Local_u8SlaveAddress=(Local_u8SlaveAddress<<1)|1;
    1628:	8f 85       	ldd	r24, Y+15	; 0x0f
    162a:	88 2f       	mov	r24, r24
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	88 0f       	add	r24, r24
    1630:	99 1f       	adc	r25, r25
    1632:	81 60       	ori	r24, 0x01	; 1
    1634:	8f 87       	std	Y+15, r24	; 0x0f
	TWDR=Local_u8SlaveAddress;
    1636:	e3 e2       	ldi	r30, 0x23	; 35
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	8f 85       	ldd	r24, Y+15	; 0x0f
    163c:	80 83       	st	Z, r24


	/*CLEAR THE TWINT FLAG*/
	SET_BIT(TWCR,7);
    163e:	a6 e5       	ldi	r26, 0x56	; 86
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	e6 e5       	ldi	r30, 0x56	; 86
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	80 68       	ori	r24, 0x80	; 128
    164a:	8c 93       	st	X, r24
	/*WAIT ON THE FLAG TILL THE OPERATION IS COMPLETED*/
	while(GET_BIT(TWCR,7)==0);
    164c:	e6 e5       	ldi	r30, 0x56	; 86
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	88 23       	and	r24, r24
    1654:	dc f7       	brge	.-10     	; 0x164c <MTWI_SendSlaveAddress_WithRead+0x40>
	if((TWSR&MTWI_TWSR_STATUSCODE_MASK)!=MTWI_STATUS_CODE_SLAVE_ADD_R_ACK){
    1656:	e1 e2       	ldi	r30, 0x21	; 33
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	88 2f       	mov	r24, r24
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	88 7f       	andi	r24, 0xF8	; 248
    1662:	90 70       	andi	r25, 0x00	; 0
    1664:	80 34       	cpi	r24, 0x40	; 64
    1666:	91 05       	cpc	r25, r1
    1668:	19 f0       	breq	.+6      	; 0x1670 <MTWI_SendSlaveAddress_WithRead+0x64>
			ReturnErrorState=SlaveAddressWithReadFailed;
    166a:	85 e0       	ldi	r24, 0x05	; 5
    166c:	88 8b       	std	Y+16, r24	; 0x10
    166e:	01 c0       	rjmp	.+2      	; 0x1672 <MTWI_SendSlaveAddress_WithRead+0x66>
		}
		else{
			ReturnErrorState=NoError;
    1670:	18 8a       	std	Y+16, r1	; 0x10
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	a0 e2       	ldi	r26, 0x20	; 32
    1678:	b1 e4       	ldi	r27, 0x41	; 65
    167a:	8b 87       	std	Y+11, r24	; 0x0b
    167c:	9c 87       	std	Y+12, r25	; 0x0c
    167e:	ad 87       	std	Y+13, r26	; 0x0d
    1680:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1682:	6b 85       	ldd	r22, Y+11	; 0x0b
    1684:	7c 85       	ldd	r23, Y+12	; 0x0c
    1686:	8d 85       	ldd	r24, Y+13	; 0x0d
    1688:	9e 85       	ldd	r25, Y+14	; 0x0e
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	4a e7       	ldi	r20, 0x7A	; 122
    1690:	55 e4       	ldi	r21, 0x45	; 69
    1692:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1696:	dc 01       	movw	r26, r24
    1698:	cb 01       	movw	r24, r22
    169a:	8f 83       	std	Y+7, r24	; 0x07
    169c:	98 87       	std	Y+8, r25	; 0x08
    169e:	a9 87       	std	Y+9, r26	; 0x09
    16a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16a2:	6f 81       	ldd	r22, Y+7	; 0x07
    16a4:	78 85       	ldd	r23, Y+8	; 0x08
    16a6:	89 85       	ldd	r24, Y+9	; 0x09
    16a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16aa:	20 e0       	ldi	r18, 0x00	; 0
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	40 e8       	ldi	r20, 0x80	; 128
    16b0:	5f e3       	ldi	r21, 0x3F	; 63
    16b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16b6:	88 23       	and	r24, r24
    16b8:	2c f4       	brge	.+10     	; 0x16c4 <MTWI_SendSlaveAddress_WithRead+0xb8>
		__ticks = 1;
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	9e 83       	std	Y+6, r25	; 0x06
    16c0:	8d 83       	std	Y+5, r24	; 0x05
    16c2:	3f c0       	rjmp	.+126    	; 0x1742 <MTWI_SendSlaveAddress_WithRead+0x136>
	else if (__tmp > 65535)
    16c4:	6f 81       	ldd	r22, Y+7	; 0x07
    16c6:	78 85       	ldd	r23, Y+8	; 0x08
    16c8:	89 85       	ldd	r24, Y+9	; 0x09
    16ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	3f ef       	ldi	r19, 0xFF	; 255
    16d0:	4f e7       	ldi	r20, 0x7F	; 127
    16d2:	57 e4       	ldi	r21, 0x47	; 71
    16d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16d8:	18 16       	cp	r1, r24
    16da:	4c f5       	brge	.+82     	; 0x172e <MTWI_SendSlaveAddress_WithRead+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    16de:	7c 85       	ldd	r23, Y+12	; 0x0c
    16e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	40 e2       	ldi	r20, 0x20	; 32
    16ea:	51 e4       	ldi	r21, 0x41	; 65
    16ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f0:	dc 01       	movw	r26, r24
    16f2:	cb 01       	movw	r24, r22
    16f4:	bc 01       	movw	r22, r24
    16f6:	cd 01       	movw	r24, r26
    16f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16fc:	dc 01       	movw	r26, r24
    16fe:	cb 01       	movw	r24, r22
    1700:	9e 83       	std	Y+6, r25	; 0x06
    1702:	8d 83       	std	Y+5, r24	; 0x05
    1704:	0f c0       	rjmp	.+30     	; 0x1724 <MTWI_SendSlaveAddress_WithRead+0x118>
    1706:	80 e9       	ldi	r24, 0x90	; 144
    1708:	91 e0       	ldi	r25, 0x01	; 1
    170a:	9c 83       	std	Y+4, r25	; 0x04
    170c:	8b 83       	std	Y+3, r24	; 0x03
    170e:	8b 81       	ldd	r24, Y+3	; 0x03
    1710:	9c 81       	ldd	r25, Y+4	; 0x04
    1712:	01 97       	sbiw	r24, 0x01	; 1
    1714:	f1 f7       	brne	.-4      	; 0x1712 <MTWI_SendSlaveAddress_WithRead+0x106>
    1716:	9c 83       	std	Y+4, r25	; 0x04
    1718:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    171a:	8d 81       	ldd	r24, Y+5	; 0x05
    171c:	9e 81       	ldd	r25, Y+6	; 0x06
    171e:	01 97       	sbiw	r24, 0x01	; 1
    1720:	9e 83       	std	Y+6, r25	; 0x06
    1722:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1724:	8d 81       	ldd	r24, Y+5	; 0x05
    1726:	9e 81       	ldd	r25, Y+6	; 0x06
    1728:	00 97       	sbiw	r24, 0x00	; 0
    172a:	69 f7       	brne	.-38     	; 0x1706 <MTWI_SendSlaveAddress_WithRead+0xfa>
    172c:	14 c0       	rjmp	.+40     	; 0x1756 <MTWI_SendSlaveAddress_WithRead+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    172e:	6f 81       	ldd	r22, Y+7	; 0x07
    1730:	78 85       	ldd	r23, Y+8	; 0x08
    1732:	89 85       	ldd	r24, Y+9	; 0x09
    1734:	9a 85       	ldd	r25, Y+10	; 0x0a
    1736:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    173a:	dc 01       	movw	r26, r24
    173c:	cb 01       	movw	r24, r22
    173e:	9e 83       	std	Y+6, r25	; 0x06
    1740:	8d 83       	std	Y+5, r24	; 0x05
    1742:	8d 81       	ldd	r24, Y+5	; 0x05
    1744:	9e 81       	ldd	r25, Y+6	; 0x06
    1746:	9a 83       	std	Y+2, r25	; 0x02
    1748:	89 83       	std	Y+1, r24	; 0x01
    174a:	89 81       	ldd	r24, Y+1	; 0x01
    174c:	9a 81       	ldd	r25, Y+2	; 0x02
    174e:	01 97       	sbiw	r24, 0x01	; 1
    1750:	f1 f7       	brne	.-4      	; 0x174e <MTWI_SendSlaveAddress_WithRead+0x142>
    1752:	9a 83       	std	Y+2, r25	; 0x02
    1754:	89 83       	std	Y+1, r24	; 0x01
		}
	_delay_ms(10);
		return ReturnErrorState;
    1756:	88 89       	ldd	r24, Y+16	; 0x10


}
    1758:	61 96       	adiw	r28, 0x11	; 17
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	f8 94       	cli
    175e:	de bf       	out	0x3e, r29	; 62
    1760:	0f be       	out	0x3f, r0	; 63
    1762:	cd bf       	out	0x3d, r28	; 61
    1764:	cf 91       	pop	r28
    1766:	df 91       	pop	r29
    1768:	08 95       	ret

0000176a <MTWI_MasterSlaveWriteData>:
TWI_ErrorState MTWI_MasterSlaveWriteData(u8 Copy_u8DataToWrite){
    176a:	df 93       	push	r29
    176c:	cf 93       	push	r28
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
    1772:	6e 97       	sbiw	r28, 0x1e	; 30
    1774:	0f b6       	in	r0, 0x3f	; 63
    1776:	f8 94       	cli
    1778:	de bf       	out	0x3e, r29	; 62
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	cd bf       	out	0x3d, r28	; 61
    177e:	8e 8f       	std	Y+30, r24	; 0x1e

	TWI_ErrorState ReturnErrorState=NoError;
    1780:	1d 8e       	std	Y+29, r1	; 0x1d


		TWDR=Copy_u8DataToWrite;
    1782:	e3 e2       	ldi	r30, 0x23	; 35
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1788:	80 83       	st	Z, r24
		CLR_BIT(TWCR,5);
    178a:	a6 e5       	ldi	r26, 0x56	; 86
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e6 e5       	ldi	r30, 0x56	; 86
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	8f 7d       	andi	r24, 0xDF	; 223
    1796:	8c 93       	st	X, r24
		/*CLEAR THE TWINT FLAG*/
		SET_BIT(TWCR,7);
    1798:	a6 e5       	ldi	r26, 0x56	; 86
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	e6 e5       	ldi	r30, 0x56	; 86
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	80 68       	ori	r24, 0x80	; 128
    17a4:	8c 93       	st	X, r24
		/*WAIT ON THE FLAG TILL THE OPERATION IS COMPLETED*/
		while(GET_BIT(TWCR,7)==0);
    17a6:	e6 e5       	ldi	r30, 0x56	; 86
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	88 23       	and	r24, r24
    17ae:	dc f7       	brge	.-10     	; 0x17a6 <MTWI_MasterSlaveWriteData+0x3c>
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	a8 ec       	ldi	r26, 0xC8	; 200
    17b6:	b2 e4       	ldi	r27, 0x42	; 66
    17b8:	89 8f       	std	Y+25, r24	; 0x19
    17ba:	9a 8f       	std	Y+26, r25	; 0x1a
    17bc:	ab 8f       	std	Y+27, r26	; 0x1b
    17be:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17c0:	69 8d       	ldd	r22, Y+25	; 0x19
    17c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	4a e7       	ldi	r20, 0x7A	; 122
    17ce:	55 e4       	ldi	r21, 0x45	; 69
    17d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d4:	dc 01       	movw	r26, r24
    17d6:	cb 01       	movw	r24, r22
    17d8:	8d 8b       	std	Y+21, r24	; 0x15
    17da:	9e 8b       	std	Y+22, r25	; 0x16
    17dc:	af 8b       	std	Y+23, r26	; 0x17
    17de:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17e0:	6d 89       	ldd	r22, Y+21	; 0x15
    17e2:	7e 89       	ldd	r23, Y+22	; 0x16
    17e4:	8f 89       	ldd	r24, Y+23	; 0x17
    17e6:	98 8d       	ldd	r25, Y+24	; 0x18
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	40 e8       	ldi	r20, 0x80	; 128
    17ee:	5f e3       	ldi	r21, 0x3F	; 63
    17f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17f4:	88 23       	and	r24, r24
    17f6:	2c f4       	brge	.+10     	; 0x1802 <MTWI_MasterSlaveWriteData+0x98>
		__ticks = 1;
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	9c 8b       	std	Y+20, r25	; 0x14
    17fe:	8b 8b       	std	Y+19, r24	; 0x13
    1800:	3f c0       	rjmp	.+126    	; 0x1880 <MTWI_MasterSlaveWriteData+0x116>
	else if (__tmp > 65535)
    1802:	6d 89       	ldd	r22, Y+21	; 0x15
    1804:	7e 89       	ldd	r23, Y+22	; 0x16
    1806:	8f 89       	ldd	r24, Y+23	; 0x17
    1808:	98 8d       	ldd	r25, Y+24	; 0x18
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	3f ef       	ldi	r19, 0xFF	; 255
    180e:	4f e7       	ldi	r20, 0x7F	; 127
    1810:	57 e4       	ldi	r21, 0x47	; 71
    1812:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1816:	18 16       	cp	r1, r24
    1818:	4c f5       	brge	.+82     	; 0x186c <MTWI_MasterSlaveWriteData+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    181a:	69 8d       	ldd	r22, Y+25	; 0x19
    181c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    181e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1820:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	40 e2       	ldi	r20, 0x20	; 32
    1828:	51 e4       	ldi	r21, 0x41	; 65
    182a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	bc 01       	movw	r22, r24
    1834:	cd 01       	movw	r24, r26
    1836:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    183a:	dc 01       	movw	r26, r24
    183c:	cb 01       	movw	r24, r22
    183e:	9c 8b       	std	Y+20, r25	; 0x14
    1840:	8b 8b       	std	Y+19, r24	; 0x13
    1842:	0f c0       	rjmp	.+30     	; 0x1862 <MTWI_MasterSlaveWriteData+0xf8>
    1844:	80 e9       	ldi	r24, 0x90	; 144
    1846:	91 e0       	ldi	r25, 0x01	; 1
    1848:	9a 8b       	std	Y+18, r25	; 0x12
    184a:	89 8b       	std	Y+17, r24	; 0x11
    184c:	89 89       	ldd	r24, Y+17	; 0x11
    184e:	9a 89       	ldd	r25, Y+18	; 0x12
    1850:	01 97       	sbiw	r24, 0x01	; 1
    1852:	f1 f7       	brne	.-4      	; 0x1850 <MTWI_MasterSlaveWriteData+0xe6>
    1854:	9a 8b       	std	Y+18, r25	; 0x12
    1856:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1858:	8b 89       	ldd	r24, Y+19	; 0x13
    185a:	9c 89       	ldd	r25, Y+20	; 0x14
    185c:	01 97       	sbiw	r24, 0x01	; 1
    185e:	9c 8b       	std	Y+20, r25	; 0x14
    1860:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1862:	8b 89       	ldd	r24, Y+19	; 0x13
    1864:	9c 89       	ldd	r25, Y+20	; 0x14
    1866:	00 97       	sbiw	r24, 0x00	; 0
    1868:	69 f7       	brne	.-38     	; 0x1844 <MTWI_MasterSlaveWriteData+0xda>
    186a:	14 c0       	rjmp	.+40     	; 0x1894 <MTWI_MasterSlaveWriteData+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    186c:	6d 89       	ldd	r22, Y+21	; 0x15
    186e:	7e 89       	ldd	r23, Y+22	; 0x16
    1870:	8f 89       	ldd	r24, Y+23	; 0x17
    1872:	98 8d       	ldd	r25, Y+24	; 0x18
    1874:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1878:	dc 01       	movw	r26, r24
    187a:	cb 01       	movw	r24, r22
    187c:	9c 8b       	std	Y+20, r25	; 0x14
    187e:	8b 8b       	std	Y+19, r24	; 0x13
    1880:	8b 89       	ldd	r24, Y+19	; 0x13
    1882:	9c 89       	ldd	r25, Y+20	; 0x14
    1884:	98 8b       	std	Y+16, r25	; 0x10
    1886:	8f 87       	std	Y+15, r24	; 0x0f
    1888:	8f 85       	ldd	r24, Y+15	; 0x0f
    188a:	98 89       	ldd	r25, Y+16	; 0x10
    188c:	01 97       	sbiw	r24, 0x01	; 1
    188e:	f1 f7       	brne	.-4      	; 0x188c <MTWI_MasterSlaveWriteData+0x122>
    1890:	98 8b       	std	Y+16, r25	; 0x10
    1892:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
		if((TWSR&MTWI_TWSR_STATUSCODE_MASK)!=MTWI_STATUS_CODE_DATA_SENT_ACK){
    1894:	e1 e2       	ldi	r30, 0x21	; 33
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	88 2f       	mov	r24, r24
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	88 7f       	andi	r24, 0xF8	; 248
    18a0:	90 70       	andi	r25, 0x00	; 0
    18a2:	88 32       	cpi	r24, 0x28	; 40
    18a4:	91 05       	cpc	r25, r1
    18a6:	19 f0       	breq	.+6      	; 0x18ae <MTWI_MasterSlaveWriteData+0x144>
				ReturnErrorState=SendingDataFailed;
    18a8:	86 e0       	ldi	r24, 0x06	; 6
    18aa:	8d 8f       	std	Y+29, r24	; 0x1d
    18ac:	01 c0       	rjmp	.+2      	; 0x18b0 <MTWI_MasterSlaveWriteData+0x146>
			}
			else{
				ReturnErrorState=NoError;
    18ae:	1d 8e       	std	Y+29, r1	; 0x1d
    18b0:	80 e0       	ldi	r24, 0x00	; 0
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	a8 ec       	ldi	r26, 0xC8	; 200
    18b6:	b2 e4       	ldi	r27, 0x42	; 66
    18b8:	8b 87       	std	Y+11, r24	; 0x0b
    18ba:	9c 87       	std	Y+12, r25	; 0x0c
    18bc:	ad 87       	std	Y+13, r26	; 0x0d
    18be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    18c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    18c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    18c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    18c8:	20 e0       	ldi	r18, 0x00	; 0
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	4a e7       	ldi	r20, 0x7A	; 122
    18ce:	55 e4       	ldi	r21, 0x45	; 69
    18d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d4:	dc 01       	movw	r26, r24
    18d6:	cb 01       	movw	r24, r22
    18d8:	8f 83       	std	Y+7, r24	; 0x07
    18da:	98 87       	std	Y+8, r25	; 0x08
    18dc:	a9 87       	std	Y+9, r26	; 0x09
    18de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18e0:	6f 81       	ldd	r22, Y+7	; 0x07
    18e2:	78 85       	ldd	r23, Y+8	; 0x08
    18e4:	89 85       	ldd	r24, Y+9	; 0x09
    18e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	40 e8       	ldi	r20, 0x80	; 128
    18ee:	5f e3       	ldi	r21, 0x3F	; 63
    18f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18f4:	88 23       	and	r24, r24
    18f6:	2c f4       	brge	.+10     	; 0x1902 <MTWI_MasterSlaveWriteData+0x198>
		__ticks = 1;
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	9e 83       	std	Y+6, r25	; 0x06
    18fe:	8d 83       	std	Y+5, r24	; 0x05
    1900:	3f c0       	rjmp	.+126    	; 0x1980 <MTWI_MasterSlaveWriteData+0x216>
	else if (__tmp > 65535)
    1902:	6f 81       	ldd	r22, Y+7	; 0x07
    1904:	78 85       	ldd	r23, Y+8	; 0x08
    1906:	89 85       	ldd	r24, Y+9	; 0x09
    1908:	9a 85       	ldd	r25, Y+10	; 0x0a
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	3f ef       	ldi	r19, 0xFF	; 255
    190e:	4f e7       	ldi	r20, 0x7F	; 127
    1910:	57 e4       	ldi	r21, 0x47	; 71
    1912:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1916:	18 16       	cp	r1, r24
    1918:	4c f5       	brge	.+82     	; 0x196c <MTWI_MasterSlaveWriteData+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    191a:	6b 85       	ldd	r22, Y+11	; 0x0b
    191c:	7c 85       	ldd	r23, Y+12	; 0x0c
    191e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1920:	9e 85       	ldd	r25, Y+14	; 0x0e
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	40 e2       	ldi	r20, 0x20	; 32
    1928:	51 e4       	ldi	r21, 0x41	; 65
    192a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    192e:	dc 01       	movw	r26, r24
    1930:	cb 01       	movw	r24, r22
    1932:	bc 01       	movw	r22, r24
    1934:	cd 01       	movw	r24, r26
    1936:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    193a:	dc 01       	movw	r26, r24
    193c:	cb 01       	movw	r24, r22
    193e:	9e 83       	std	Y+6, r25	; 0x06
    1940:	8d 83       	std	Y+5, r24	; 0x05
    1942:	0f c0       	rjmp	.+30     	; 0x1962 <MTWI_MasterSlaveWriteData+0x1f8>
    1944:	80 e9       	ldi	r24, 0x90	; 144
    1946:	91 e0       	ldi	r25, 0x01	; 1
    1948:	9c 83       	std	Y+4, r25	; 0x04
    194a:	8b 83       	std	Y+3, r24	; 0x03
    194c:	8b 81       	ldd	r24, Y+3	; 0x03
    194e:	9c 81       	ldd	r25, Y+4	; 0x04
    1950:	01 97       	sbiw	r24, 0x01	; 1
    1952:	f1 f7       	brne	.-4      	; 0x1950 <MTWI_MasterSlaveWriteData+0x1e6>
    1954:	9c 83       	std	Y+4, r25	; 0x04
    1956:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1958:	8d 81       	ldd	r24, Y+5	; 0x05
    195a:	9e 81       	ldd	r25, Y+6	; 0x06
    195c:	01 97       	sbiw	r24, 0x01	; 1
    195e:	9e 83       	std	Y+6, r25	; 0x06
    1960:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1962:	8d 81       	ldd	r24, Y+5	; 0x05
    1964:	9e 81       	ldd	r25, Y+6	; 0x06
    1966:	00 97       	sbiw	r24, 0x00	; 0
    1968:	69 f7       	brne	.-38     	; 0x1944 <MTWI_MasterSlaveWriteData+0x1da>
    196a:	14 c0       	rjmp	.+40     	; 0x1994 <MTWI_MasterSlaveWriteData+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    196c:	6f 81       	ldd	r22, Y+7	; 0x07
    196e:	78 85       	ldd	r23, Y+8	; 0x08
    1970:	89 85       	ldd	r24, Y+9	; 0x09
    1972:	9a 85       	ldd	r25, Y+10	; 0x0a
    1974:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1978:	dc 01       	movw	r26, r24
    197a:	cb 01       	movw	r24, r22
    197c:	9e 83       	std	Y+6, r25	; 0x06
    197e:	8d 83       	std	Y+5, r24	; 0x05
    1980:	8d 81       	ldd	r24, Y+5	; 0x05
    1982:	9e 81       	ldd	r25, Y+6	; 0x06
    1984:	9a 83       	std	Y+2, r25	; 0x02
    1986:	89 83       	std	Y+1, r24	; 0x01
    1988:	89 81       	ldd	r24, Y+1	; 0x01
    198a:	9a 81       	ldd	r25, Y+2	; 0x02
    198c:	01 97       	sbiw	r24, 0x01	; 1
    198e:	f1 f7       	brne	.-4      	; 0x198c <MTWI_MasterSlaveWriteData+0x222>
    1990:	9a 83       	std	Y+2, r25	; 0x02
    1992:	89 83       	std	Y+1, r24	; 0x01
			}
		_delay_ms(100);
			return ReturnErrorState;
    1994:	8d 8d       	ldd	r24, Y+29	; 0x1d


}
    1996:	6e 96       	adiw	r28, 0x1e	; 30
    1998:	0f b6       	in	r0, 0x3f	; 63
    199a:	f8 94       	cli
    199c:	de bf       	out	0x3e, r29	; 62
    199e:	0f be       	out	0x3f, r0	; 63
    19a0:	cd bf       	out	0x3d, r28	; 61
    19a2:	cf 91       	pop	r28
    19a4:	df 91       	pop	r29
    19a6:	08 95       	ret

000019a8 <MTWI_MasterSlaveReadData>:
TWI_ErrorState MTWI_MasterSlaveReadData(u8* Ptr_u8DataToRead){
    19a8:	df 93       	push	r29
    19aa:	cf 93       	push	r28
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62
    19b0:	6f 97       	sbiw	r28, 0x1f	; 31
    19b2:	0f b6       	in	r0, 0x3f	; 63
    19b4:	f8 94       	cli
    19b6:	de bf       	out	0x3e, r29	; 62
    19b8:	0f be       	out	0x3f, r0	; 63
    19ba:	cd bf       	out	0x3d, r28	; 61
    19bc:	9f 8f       	std	Y+31, r25	; 0x1f
    19be:	8e 8f       	std	Y+30, r24	; 0x1e


	TWI_ErrorState ReturnErrorState=NoError;
    19c0:	1d 8e       	std	Y+29, r1	; 0x1d

		/*CLEAR THE TWINT FLAG*/
			TWCR = (1<<7)|(1<<2)|(1<<6);
    19c2:	e6 e5       	ldi	r30, 0x56	; 86
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	84 ec       	ldi	r24, 0xC4	; 196
    19c8:	80 83       	st	Z, r24
			//SET_BIT(TWCR,7);
			/*WAIT ON THE FLAG TILL THE OPERATION IS COMPLETED*/
			while(GET_BIT(TWCR,7)==0);
    19ca:	e6 e5       	ldi	r30, 0x56	; 86
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	88 23       	and	r24, r24
    19d2:	dc f7       	brge	.-10     	; 0x19ca <MTWI_MasterSlaveReadData+0x22>
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	a8 ec       	ldi	r26, 0xC8	; 200
    19da:	b2 e4       	ldi	r27, 0x42	; 66
    19dc:	89 8f       	std	Y+25, r24	; 0x19
    19de:	9a 8f       	std	Y+26, r25	; 0x1a
    19e0:	ab 8f       	std	Y+27, r26	; 0x1b
    19e2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e4:	69 8d       	ldd	r22, Y+25	; 0x19
    19e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	4a e7       	ldi	r20, 0x7A	; 122
    19f2:	55 e4       	ldi	r21, 0x45	; 69
    19f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f8:	dc 01       	movw	r26, r24
    19fa:	cb 01       	movw	r24, r22
    19fc:	8d 8b       	std	Y+21, r24	; 0x15
    19fe:	9e 8b       	std	Y+22, r25	; 0x16
    1a00:	af 8b       	std	Y+23, r26	; 0x17
    1a02:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a04:	6d 89       	ldd	r22, Y+21	; 0x15
    1a06:	7e 89       	ldd	r23, Y+22	; 0x16
    1a08:	8f 89       	ldd	r24, Y+23	; 0x17
    1a0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	40 e8       	ldi	r20, 0x80	; 128
    1a12:	5f e3       	ldi	r21, 0x3F	; 63
    1a14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a18:	88 23       	and	r24, r24
    1a1a:	2c f4       	brge	.+10     	; 0x1a26 <MTWI_MasterSlaveReadData+0x7e>
		__ticks = 1;
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	9c 8b       	std	Y+20, r25	; 0x14
    1a22:	8b 8b       	std	Y+19, r24	; 0x13
    1a24:	3f c0       	rjmp	.+126    	; 0x1aa4 <MTWI_MasterSlaveReadData+0xfc>
	else if (__tmp > 65535)
    1a26:	6d 89       	ldd	r22, Y+21	; 0x15
    1a28:	7e 89       	ldd	r23, Y+22	; 0x16
    1a2a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a2c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	3f ef       	ldi	r19, 0xFF	; 255
    1a32:	4f e7       	ldi	r20, 0x7F	; 127
    1a34:	57 e4       	ldi	r21, 0x47	; 71
    1a36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a3a:	18 16       	cp	r1, r24
    1a3c:	4c f5       	brge	.+82     	; 0x1a90 <MTWI_MasterSlaveReadData+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a3e:	69 8d       	ldd	r22, Y+25	; 0x19
    1a40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	40 e2       	ldi	r20, 0x20	; 32
    1a4c:	51 e4       	ldi	r21, 0x41	; 65
    1a4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	bc 01       	movw	r22, r24
    1a58:	cd 01       	movw	r24, r26
    1a5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22
    1a62:	9c 8b       	std	Y+20, r25	; 0x14
    1a64:	8b 8b       	std	Y+19, r24	; 0x13
    1a66:	0f c0       	rjmp	.+30     	; 0x1a86 <MTWI_MasterSlaveReadData+0xde>
    1a68:	80 e9       	ldi	r24, 0x90	; 144
    1a6a:	91 e0       	ldi	r25, 0x01	; 1
    1a6c:	9a 8b       	std	Y+18, r25	; 0x12
    1a6e:	89 8b       	std	Y+17, r24	; 0x11
    1a70:	89 89       	ldd	r24, Y+17	; 0x11
    1a72:	9a 89       	ldd	r25, Y+18	; 0x12
    1a74:	01 97       	sbiw	r24, 0x01	; 1
    1a76:	f1 f7       	brne	.-4      	; 0x1a74 <MTWI_MasterSlaveReadData+0xcc>
    1a78:	9a 8b       	std	Y+18, r25	; 0x12
    1a7a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a7e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a80:	01 97       	sbiw	r24, 0x01	; 1
    1a82:	9c 8b       	std	Y+20, r25	; 0x14
    1a84:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a86:	8b 89       	ldd	r24, Y+19	; 0x13
    1a88:	9c 89       	ldd	r25, Y+20	; 0x14
    1a8a:	00 97       	sbiw	r24, 0x00	; 0
    1a8c:	69 f7       	brne	.-38     	; 0x1a68 <MTWI_MasterSlaveReadData+0xc0>
    1a8e:	14 c0       	rjmp	.+40     	; 0x1ab8 <MTWI_MasterSlaveReadData+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a90:	6d 89       	ldd	r22, Y+21	; 0x15
    1a92:	7e 89       	ldd	r23, Y+22	; 0x16
    1a94:	8f 89       	ldd	r24, Y+23	; 0x17
    1a96:	98 8d       	ldd	r25, Y+24	; 0x18
    1a98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	9c 8b       	std	Y+20, r25	; 0x14
    1aa2:	8b 8b       	std	Y+19, r24	; 0x13
    1aa4:	8b 89       	ldd	r24, Y+19	; 0x13
    1aa6:	9c 89       	ldd	r25, Y+20	; 0x14
    1aa8:	98 8b       	std	Y+16, r25	; 0x10
    1aaa:	8f 87       	std	Y+15, r24	; 0x0f
    1aac:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aae:	98 89       	ldd	r25, Y+16	; 0x10
    1ab0:	01 97       	sbiw	r24, 0x01	; 1
    1ab2:	f1 f7       	brne	.-4      	; 0x1ab0 <MTWI_MasterSlaveReadData+0x108>
    1ab4:	98 8b       	std	Y+16, r25	; 0x10
    1ab6:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(100);
			if((TWSR&MTWI_TWSR_STATUSCODE_MASK)!=MTWI_STATUS_CODE_DATA_RECIEVED_ACK){
    1ab8:	e1 e2       	ldi	r30, 0x21	; 33
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	88 2f       	mov	r24, r24
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	88 7f       	andi	r24, 0xF8	; 248
    1ac4:	90 70       	andi	r25, 0x00	; 0
    1ac6:	80 35       	cpi	r24, 0x50	; 80
    1ac8:	91 05       	cpc	r25, r1
    1aca:	19 f0       	breq	.+6      	; 0x1ad2 <MTWI_MasterSlaveReadData+0x12a>
					ReturnErrorState=ReadingDataFailed;
    1acc:	88 e0       	ldi	r24, 0x08	; 8
    1ace:	8d 8f       	std	Y+29, r24	; 0x1d
    1ad0:	07 c0       	rjmp	.+14     	; 0x1ae0 <MTWI_MasterSlaveReadData+0x138>
				}
				else{
					*Ptr_u8DataToRead=TWDR;
    1ad2:	e3 e2       	ldi	r30, 0x23	; 35
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1ada:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1adc:	80 83       	st	Z, r24
					ReturnErrorState=NoError;
    1ade:	1d 8e       	std	Y+29, r1	; 0x1d
				}
			    *Ptr_u8DataToRead=TWDR;
    1ae0:	e3 e2       	ldi	r30, 0x23	; 35
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1ae8:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1aea:	80 83       	st	Z, r24
    1aec:	80 e0       	ldi	r24, 0x00	; 0
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	a8 ec       	ldi	r26, 0xC8	; 200
    1af2:	b2 e4       	ldi	r27, 0x42	; 66
    1af4:	8b 87       	std	Y+11, r24	; 0x0b
    1af6:	9c 87       	std	Y+12, r25	; 0x0c
    1af8:	ad 87       	std	Y+13, r26	; 0x0d
    1afa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1afc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1afe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	4a e7       	ldi	r20, 0x7A	; 122
    1b0a:	55 e4       	ldi	r21, 0x45	; 69
    1b0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	8f 83       	std	Y+7, r24	; 0x07
    1b16:	98 87       	std	Y+8, r25	; 0x08
    1b18:	a9 87       	std	Y+9, r26	; 0x09
    1b1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b1e:	78 85       	ldd	r23, Y+8	; 0x08
    1b20:	89 85       	ldd	r24, Y+9	; 0x09
    1b22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	40 e8       	ldi	r20, 0x80	; 128
    1b2a:	5f e3       	ldi	r21, 0x3F	; 63
    1b2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b30:	88 23       	and	r24, r24
    1b32:	2c f4       	brge	.+10     	; 0x1b3e <MTWI_MasterSlaveReadData+0x196>
		__ticks = 1;
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	9e 83       	std	Y+6, r25	; 0x06
    1b3a:	8d 83       	std	Y+5, r24	; 0x05
    1b3c:	3f c0       	rjmp	.+126    	; 0x1bbc <MTWI_MasterSlaveReadData+0x214>
	else if (__tmp > 65535)
    1b3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b40:	78 85       	ldd	r23, Y+8	; 0x08
    1b42:	89 85       	ldd	r24, Y+9	; 0x09
    1b44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	3f ef       	ldi	r19, 0xFF	; 255
    1b4a:	4f e7       	ldi	r20, 0x7F	; 127
    1b4c:	57 e4       	ldi	r21, 0x47	; 71
    1b4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b52:	18 16       	cp	r1, r24
    1b54:	4c f5       	brge	.+82     	; 0x1ba8 <MTWI_MasterSlaveReadData+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b56:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b58:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	40 e2       	ldi	r20, 0x20	; 32
    1b64:	51 e4       	ldi	r21, 0x41	; 65
    1b66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	cb 01       	movw	r24, r22
    1b6e:	bc 01       	movw	r22, r24
    1b70:	cd 01       	movw	r24, r26
    1b72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	9e 83       	std	Y+6, r25	; 0x06
    1b7c:	8d 83       	std	Y+5, r24	; 0x05
    1b7e:	0f c0       	rjmp	.+30     	; 0x1b9e <MTWI_MasterSlaveReadData+0x1f6>
    1b80:	80 e9       	ldi	r24, 0x90	; 144
    1b82:	91 e0       	ldi	r25, 0x01	; 1
    1b84:	9c 83       	std	Y+4, r25	; 0x04
    1b86:	8b 83       	std	Y+3, r24	; 0x03
    1b88:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8c:	01 97       	sbiw	r24, 0x01	; 1
    1b8e:	f1 f7       	brne	.-4      	; 0x1b8c <MTWI_MasterSlaveReadData+0x1e4>
    1b90:	9c 83       	std	Y+4, r25	; 0x04
    1b92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b94:	8d 81       	ldd	r24, Y+5	; 0x05
    1b96:	9e 81       	ldd	r25, Y+6	; 0x06
    1b98:	01 97       	sbiw	r24, 0x01	; 1
    1b9a:	9e 83       	std	Y+6, r25	; 0x06
    1b9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba2:	00 97       	sbiw	r24, 0x00	; 0
    1ba4:	69 f7       	brne	.-38     	; 0x1b80 <MTWI_MasterSlaveReadData+0x1d8>
    1ba6:	14 c0       	rjmp	.+40     	; 0x1bd0 <MTWI_MasterSlaveReadData+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba8:	6f 81       	ldd	r22, Y+7	; 0x07
    1baa:	78 85       	ldd	r23, Y+8	; 0x08
    1bac:	89 85       	ldd	r24, Y+9	; 0x09
    1bae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	9e 83       	std	Y+6, r25	; 0x06
    1bba:	8d 83       	std	Y+5, r24	; 0x05
    1bbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc0:	9a 83       	std	Y+2, r25	; 0x02
    1bc2:	89 83       	std	Y+1, r24	; 0x01
    1bc4:	89 81       	ldd	r24, Y+1	; 0x01
    1bc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc8:	01 97       	sbiw	r24, 0x01	; 1
    1bca:	f1 f7       	brne	.-4      	; 0x1bc8 <MTWI_MasterSlaveReadData+0x220>
    1bcc:	9a 83       	std	Y+2, r25	; 0x02
    1bce:	89 83       	std	Y+1, r24	; 0x01
			    _delay_ms(100);
				return ReturnErrorState;
    1bd0:	8d 8d       	ldd	r24, Y+29	; 0x1d

}
    1bd2:	6f 96       	adiw	r28, 0x1f	; 31
    1bd4:	0f b6       	in	r0, 0x3f	; 63
    1bd6:	f8 94       	cli
    1bd8:	de bf       	out	0x3e, r29	; 62
    1bda:	0f be       	out	0x3f, r0	; 63
    1bdc:	cd bf       	out	0x3d, r28	; 61
    1bde:	cf 91       	pop	r28
    1be0:	df 91       	pop	r29
    1be2:	08 95       	ret

00001be4 <MTWI_SendStopCondition>:
TWI_ErrorState MTWI_SendStopCondition(){
    1be4:	df 93       	push	r29
    1be6:	cf 93       	push	r28
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
    1bec:	2f 97       	sbiw	r28, 0x0f	; 15
    1bee:	0f b6       	in	r0, 0x3f	; 63
    1bf0:	f8 94       	cli
    1bf2:	de bf       	out	0x3e, r29	; 62
    1bf4:	0f be       	out	0x3f, r0	; 63
    1bf6:	cd bf       	out	0x3d, r28	; 61

	TWI_ErrorState ReturnErrorState;
		/*send stop condition*/

		SET_BIT(TWCR,4);
    1bf8:	a6 e5       	ldi	r26, 0x56	; 86
    1bfa:	b0 e0       	ldi	r27, 0x00	; 0
    1bfc:	e6 e5       	ldi	r30, 0x56	; 86
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	80 81       	ld	r24, Z
    1c02:	80 61       	ori	r24, 0x10	; 16
    1c04:	8c 93       	st	X, r24
		//CLEAR THE TWINT FLAG SO THE TWI PERFORM THE LAST ORDERED OPERATION//
		SET_BIT(TWCR,7);
    1c06:	a6 e5       	ldi	r26, 0x56	; 86
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	e6 e5       	ldi	r30, 0x56	; 86
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	80 68       	ori	r24, 0x80	; 128
    1c12:	8c 93       	st	X, r24
		//WAIT ON FLAG TO BE HIGH//
		while(GET_BIT(TWCR,7)==0);
    1c14:	e6 e5       	ldi	r30, 0x56	; 86
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	88 23       	and	r24, r24
    1c1c:	dc f7       	brge	.-10     	; 0x1c14 <MTWI_SendStopCondition+0x30>
		//CHECK TWSR
		if((TWSR&MTWI_TWSR_STATUSCODE_MASK)!=MTWI_STATUS_CODE_STOP_COND_ACK){
    1c1e:	e1 e2       	ldi	r30, 0x21	; 33
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	88 2f       	mov	r24, r24
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	88 7f       	andi	r24, 0xF8	; 248
    1c2a:	90 70       	andi	r25, 0x00	; 0
    1c2c:	80 3a       	cpi	r24, 0xA0	; 160
    1c2e:	91 05       	cpc	r25, r1
    1c30:	19 f0       	breq	.+6      	; 0x1c38 <MTWI_SendStopCondition+0x54>
			ReturnErrorState=StopConditionFailed;
    1c32:	89 e0       	ldi	r24, 0x09	; 9
    1c34:	8f 87       	std	Y+15, r24	; 0x0f
    1c36:	01 c0       	rjmp	.+2      	; 0x1c3a <MTWI_SendStopCondition+0x56>
		}
		else{
			ReturnErrorState=NoError;
    1c38:	1f 86       	std	Y+15, r1	; 0x0f
    1c3a:	80 e0       	ldi	r24, 0x00	; 0
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	a0 e2       	ldi	r26, 0x20	; 32
    1c40:	b1 e4       	ldi	r27, 0x41	; 65
    1c42:	8b 87       	std	Y+11, r24	; 0x0b
    1c44:	9c 87       	std	Y+12, r25	; 0x0c
    1c46:	ad 87       	std	Y+13, r26	; 0x0d
    1c48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	4a e7       	ldi	r20, 0x7A	; 122
    1c58:	55 e4       	ldi	r21, 0x45	; 69
    1c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	8f 83       	std	Y+7, r24	; 0x07
    1c64:	98 87       	std	Y+8, r25	; 0x08
    1c66:	a9 87       	std	Y+9, r26	; 0x09
    1c68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c6c:	78 85       	ldd	r23, Y+8	; 0x08
    1c6e:	89 85       	ldd	r24, Y+9	; 0x09
    1c70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	40 e8       	ldi	r20, 0x80	; 128
    1c78:	5f e3       	ldi	r21, 0x3F	; 63
    1c7a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c7e:	88 23       	and	r24, r24
    1c80:	2c f4       	brge	.+10     	; 0x1c8c <MTWI_SendStopCondition+0xa8>
		__ticks = 1;
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	9e 83       	std	Y+6, r25	; 0x06
    1c88:	8d 83       	std	Y+5, r24	; 0x05
    1c8a:	3f c0       	rjmp	.+126    	; 0x1d0a <MTWI_SendStopCondition+0x126>
	else if (__tmp > 65535)
    1c8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c8e:	78 85       	ldd	r23, Y+8	; 0x08
    1c90:	89 85       	ldd	r24, Y+9	; 0x09
    1c92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	3f ef       	ldi	r19, 0xFF	; 255
    1c98:	4f e7       	ldi	r20, 0x7F	; 127
    1c9a:	57 e4       	ldi	r21, 0x47	; 71
    1c9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ca0:	18 16       	cp	r1, r24
    1ca2:	4c f5       	brge	.+82     	; 0x1cf6 <MTWI_SendStopCondition+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ca6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ca8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1caa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	40 e2       	ldi	r20, 0x20	; 32
    1cb2:	51 e4       	ldi	r21, 0x41	; 65
    1cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	bc 01       	movw	r22, r24
    1cbe:	cd 01       	movw	r24, r26
    1cc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	9e 83       	std	Y+6, r25	; 0x06
    1cca:	8d 83       	std	Y+5, r24	; 0x05
    1ccc:	0f c0       	rjmp	.+30     	; 0x1cec <MTWI_SendStopCondition+0x108>
    1cce:	80 e9       	ldi	r24, 0x90	; 144
    1cd0:	91 e0       	ldi	r25, 0x01	; 1
    1cd2:	9c 83       	std	Y+4, r25	; 0x04
    1cd4:	8b 83       	std	Y+3, r24	; 0x03
    1cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cda:	01 97       	sbiw	r24, 0x01	; 1
    1cdc:	f1 f7       	brne	.-4      	; 0x1cda <MTWI_SendStopCondition+0xf6>
    1cde:	9c 83       	std	Y+4, r25	; 0x04
    1ce0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce6:	01 97       	sbiw	r24, 0x01	; 1
    1ce8:	9e 83       	std	Y+6, r25	; 0x06
    1cea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cec:	8d 81       	ldd	r24, Y+5	; 0x05
    1cee:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf0:	00 97       	sbiw	r24, 0x00	; 0
    1cf2:	69 f7       	brne	.-38     	; 0x1cce <MTWI_SendStopCondition+0xea>
    1cf4:	14 c0       	rjmp	.+40     	; 0x1d1e <MTWI_SendStopCondition+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cf6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf8:	78 85       	ldd	r23, Y+8	; 0x08
    1cfa:	89 85       	ldd	r24, Y+9	; 0x09
    1cfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	9e 83       	std	Y+6, r25	; 0x06
    1d08:	8d 83       	std	Y+5, r24	; 0x05
    1d0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d0e:	9a 83       	std	Y+2, r25	; 0x02
    1d10:	89 83       	std	Y+1, r24	; 0x01
    1d12:	89 81       	ldd	r24, Y+1	; 0x01
    1d14:	9a 81       	ldd	r25, Y+2	; 0x02
    1d16:	01 97       	sbiw	r24, 0x01	; 1
    1d18:	f1 f7       	brne	.-4      	; 0x1d16 <MTWI_SendStopCondition+0x132>
    1d1a:	9a 83       	std	Y+2, r25	; 0x02
    1d1c:	89 83       	std	Y+1, r24	; 0x01
		}
		_delay_ms(10);
		return ReturnErrorState;
    1d1e:	8f 85       	ldd	r24, Y+15	; 0x0f

}
    1d20:	2f 96       	adiw	r28, 0x0f	; 15
    1d22:	0f b6       	in	r0, 0x3f	; 63
    1d24:	f8 94       	cli
    1d26:	de bf       	out	0x3e, r29	; 62
    1d28:	0f be       	out	0x3f, r0	; 63
    1d2a:	cd bf       	out	0x3d, r28	; 61
    1d2c:	cf 91       	pop	r28
    1d2e:	df 91       	pop	r29
    1d30:	08 95       	ret

00001d32 <MTWI_SendRepeatedStartCondition>:
TWI_ErrorState MTWI_SendRepeatedStartCondition()
{
    1d32:	df 93       	push	r29
    1d34:	cf 93       	push	r28
    1d36:	0f 92       	push	r0
    1d38:	cd b7       	in	r28, 0x3d	; 61
    1d3a:	de b7       	in	r29, 0x3e	; 62
	u8 ReturnedErrorState=NoError;
    1d3c:	19 82       	std	Y+1, r1	; 0x01
		//Send Start condition
		//Note:In the Next Operation you should Clear it by Software
		SET_BIT(TWCR,5);
    1d3e:	a6 e5       	ldi	r26, 0x56	; 86
    1d40:	b0 e0       	ldi	r27, 0x00	; 0
    1d42:	e6 e5       	ldi	r30, 0x56	; 86
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	80 81       	ld	r24, Z
    1d48:	80 62       	ori	r24, 0x20	; 32
    1d4a:	8c 93       	st	X, r24

		//Clear the TWINT Flag So TWI Performs the last ordered operation
		SET_BIT(TWCR,7);
    1d4c:	a6 e5       	ldi	r26, 0x56	; 86
    1d4e:	b0 e0       	ldi	r27, 0x00	; 0
    1d50:	e6 e5       	ldi	r30, 0x56	; 86
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	80 81       	ld	r24, Z
    1d56:	80 68       	ori	r24, 0x80	; 128
    1d58:	8c 93       	st	X, r24

		//Wait On FLag to be High
		while(GET_BIT(TWCR,7)==0);
    1d5a:	e6 e5       	ldi	r30, 0x56	; 86
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	80 81       	ld	r24, Z
    1d60:	88 23       	and	r24, r24
    1d62:	dc f7       	brge	.-10     	; 0x1d5a <MTWI_SendRepeatedStartCondition+0x28>

		//Check Status Code
		if((TWSR&MTWI_TWSR_STATUSCODE_MASK)!=MTWI_STATUS_CODE_REPEATEDSTART_COND_ACK)
    1d64:	e1 e2       	ldi	r30, 0x21	; 33
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	80 81       	ld	r24, Z
    1d6a:	88 2f       	mov	r24, r24
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	88 7f       	andi	r24, 0xF8	; 248
    1d70:	90 70       	andi	r25, 0x00	; 0
    1d72:	80 31       	cpi	r24, 0x10	; 16
    1d74:	91 05       	cpc	r25, r1
    1d76:	19 f0       	breq	.+6      	; 0x1d7e <MTWI_SendRepeatedStartCondition+0x4c>
		{
			//Repeated Start Condition Error Happens
			ReturnedErrorState=StartConditionFailed;
    1d78:	82 e0       	ldi	r24, 0x02	; 2
    1d7a:	89 83       	std	Y+1, r24	; 0x01
    1d7c:	01 c0       	rjmp	.+2      	; 0x1d80 <MTWI_SendRepeatedStartCondition+0x4e>
		}
		else
		{
			//Repeated Start Condition Sent Successfully
			ReturnedErrorState=NoError;
    1d7e:	19 82       	std	Y+1, r1	; 0x01
		}
		return ReturnedErrorState;
    1d80:	89 81       	ldd	r24, Y+1	; 0x01

}
    1d82:	0f 90       	pop	r0
    1d84:	cf 91       	pop	r28
    1d86:	df 91       	pop	r29
    1d88:	08 95       	ret

00001d8a <MTWI_ReadByteNoAck>:
u8 MTWI_ReadByteNoAck(){
    1d8a:	df 93       	push	r29
    1d8c:	cf 93       	push	r28
    1d8e:	cd b7       	in	r28, 0x3d	; 61
    1d90:	de b7       	in	r29, 0x3e	; 62

	TWCR = (1<<7)|(1<<2);
    1d92:	e6 e5       	ldi	r30, 0x56	; 86
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	84 e8       	ldi	r24, 0x84	; 132
    1d98:	80 83       	st	Z, r24
		while(GET_BIT(TWCR,7) == 0);
    1d9a:	e6 e5       	ldi	r30, 0x56	; 86
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	88 23       	and	r24, r24
    1da2:	dc f7       	brge	.-10     	; 0x1d9a <MTWI_ReadByteNoAck+0x10>
		return TWDR;
    1da4:	e3 e2       	ldi	r30, 0x23	; 35
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	80 81       	ld	r24, Z
}
    1daa:	cf 91       	pop	r28
    1dac:	df 91       	pop	r29
    1dae:	08 95       	ret

00001db0 <I2C_Init>:


/*low 3awez tefkes kol ely fo2 fel init asta3mel al function de hatengez el init */
void I2C_Init(void){
    1db0:	df 93       	push	r29
    1db2:	cf 93       	push	r28
    1db4:	cd b7       	in	r28, 0x3d	; 61
    1db6:	de b7       	in	r29, 0x3e	; 62
    1db8:	2e 97       	sbiw	r28, 0x0e	; 14
    1dba:	0f b6       	in	r0, 0x3f	; 63
    1dbc:	f8 94       	cli
    1dbe:	de bf       	out	0x3e, r29	; 62
    1dc0:	0f be       	out	0x3f, r0	; 63
    1dc2:	cd bf       	out	0x3d, r28	; 61
	CLR_BIT(TWCR,2);
    1dc4:	a6 e5       	ldi	r26, 0x56	; 86
    1dc6:	b0 e0       	ldi	r27, 0x00	; 0
    1dc8:	e6 e5       	ldi	r30, 0x56	; 86
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
    1dce:	8b 7f       	andi	r24, 0xFB	; 251
    1dd0:	8c 93       	st	X, r24
	TWBR = 12;           // to make Fscl = 400 Khz
    1dd2:	e0 e2       	ldi	r30, 0x20	; 32
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	8c e0       	ldi	r24, 0x0C	; 12
    1dd8:	80 83       	st	Z, r24
	SET_BIT(TWCR,2);    // to enable i2c circuit
    1dda:	a6 e5       	ldi	r26, 0x56	; 86
    1ddc:	b0 e0       	ldi	r27, 0x00	; 0
    1dde:	e6 e5       	ldi	r30, 0x56	; 86
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 81       	ld	r24, Z
    1de4:	84 60       	ori	r24, 0x04	; 4
    1de6:	8c 93       	st	X, r24
    1de8:	80 e0       	ldi	r24, 0x00	; 0
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	a0 e2       	ldi	r26, 0x20	; 32
    1dee:	b1 e4       	ldi	r27, 0x41	; 65
    1df0:	8b 87       	std	Y+11, r24	; 0x0b
    1df2:	9c 87       	std	Y+12, r25	; 0x0c
    1df4:	ad 87       	std	Y+13, r26	; 0x0d
    1df6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1df8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dfa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dfc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dfe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e00:	20 e0       	ldi	r18, 0x00	; 0
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	4a e7       	ldi	r20, 0x7A	; 122
    1e06:	55 e4       	ldi	r21, 0x45	; 69
    1e08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	8f 83       	std	Y+7, r24	; 0x07
    1e12:	98 87       	std	Y+8, r25	; 0x08
    1e14:	a9 87       	std	Y+9, r26	; 0x09
    1e16:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e18:	6f 81       	ldd	r22, Y+7	; 0x07
    1e1a:	78 85       	ldd	r23, Y+8	; 0x08
    1e1c:	89 85       	ldd	r24, Y+9	; 0x09
    1e1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	40 e8       	ldi	r20, 0x80	; 128
    1e26:	5f e3       	ldi	r21, 0x3F	; 63
    1e28:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e2c:	88 23       	and	r24, r24
    1e2e:	2c f4       	brge	.+10     	; 0x1e3a <I2C_Init+0x8a>
		__ticks = 1;
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	9e 83       	std	Y+6, r25	; 0x06
    1e36:	8d 83       	std	Y+5, r24	; 0x05
    1e38:	3f c0       	rjmp	.+126    	; 0x1eb8 <I2C_Init+0x108>
	else if (__tmp > 65535)
    1e3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e3c:	78 85       	ldd	r23, Y+8	; 0x08
    1e3e:	89 85       	ldd	r24, Y+9	; 0x09
    1e40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	3f ef       	ldi	r19, 0xFF	; 255
    1e46:	4f e7       	ldi	r20, 0x7F	; 127
    1e48:	57 e4       	ldi	r21, 0x47	; 71
    1e4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e4e:	18 16       	cp	r1, r24
    1e50:	4c f5       	brge	.+82     	; 0x1ea4 <I2C_Init+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e52:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e54:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e56:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e58:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	40 e2       	ldi	r20, 0x20	; 32
    1e60:	51 e4       	ldi	r21, 0x41	; 65
    1e62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e66:	dc 01       	movw	r26, r24
    1e68:	cb 01       	movw	r24, r22
    1e6a:	bc 01       	movw	r22, r24
    1e6c:	cd 01       	movw	r24, r26
    1e6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	9e 83       	std	Y+6, r25	; 0x06
    1e78:	8d 83       	std	Y+5, r24	; 0x05
    1e7a:	0f c0       	rjmp	.+30     	; 0x1e9a <I2C_Init+0xea>
    1e7c:	80 e9       	ldi	r24, 0x90	; 144
    1e7e:	91 e0       	ldi	r25, 0x01	; 1
    1e80:	9c 83       	std	Y+4, r25	; 0x04
    1e82:	8b 83       	std	Y+3, r24	; 0x03
    1e84:	8b 81       	ldd	r24, Y+3	; 0x03
    1e86:	9c 81       	ldd	r25, Y+4	; 0x04
    1e88:	01 97       	sbiw	r24, 0x01	; 1
    1e8a:	f1 f7       	brne	.-4      	; 0x1e88 <I2C_Init+0xd8>
    1e8c:	9c 83       	std	Y+4, r25	; 0x04
    1e8e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e90:	8d 81       	ldd	r24, Y+5	; 0x05
    1e92:	9e 81       	ldd	r25, Y+6	; 0x06
    1e94:	01 97       	sbiw	r24, 0x01	; 1
    1e96:	9e 83       	std	Y+6, r25	; 0x06
    1e98:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e9e:	00 97       	sbiw	r24, 0x00	; 0
    1ea0:	69 f7       	brne	.-38     	; 0x1e7c <I2C_Init+0xcc>
    1ea2:	14 c0       	rjmp	.+40     	; 0x1ecc <I2C_Init+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ea4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ea6:	78 85       	ldd	r23, Y+8	; 0x08
    1ea8:	89 85       	ldd	r24, Y+9	; 0x09
    1eaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	9e 83       	std	Y+6, r25	; 0x06
    1eb6:	8d 83       	std	Y+5, r24	; 0x05
    1eb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eba:	9e 81       	ldd	r25, Y+6	; 0x06
    1ebc:	9a 83       	std	Y+2, r25	; 0x02
    1ebe:	89 83       	std	Y+1, r24	; 0x01
    1ec0:	89 81       	ldd	r24, Y+1	; 0x01
    1ec2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec4:	01 97       	sbiw	r24, 0x01	; 1
    1ec6:	f1 f7       	brne	.-4      	; 0x1ec4 <I2C_Init+0x114>
    1ec8:	9a 83       	std	Y+2, r25	; 0x02
    1eca:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);

}
    1ecc:	2e 96       	adiw	r28, 0x0e	; 14
    1ece:	0f b6       	in	r0, 0x3f	; 63
    1ed0:	f8 94       	cli
    1ed2:	de bf       	out	0x3e, r29	; 62
    1ed4:	0f be       	out	0x3f, r0	; 63
    1ed6:	cd bf       	out	0x3d, r28	; 61
    1ed8:	cf 91       	pop	r28
    1eda:	df 91       	pop	r29
    1edc:	08 95       	ret

00001ede <MTimer2Init>:
u8  MTimer2u8RemainingTicks= 0;

void (*MTimer2voidCallBack) (void) = NULL;


void MTimer2Init() {
    1ede:	df 93       	push	r29
    1ee0:	cf 93       	push	r28
    1ee2:	cd b7       	in	r28, 0x3d	; 61
    1ee4:	de b7       	in	r29, 0x3e	; 62

	#if	TIMER2_MODE		==		NORMAL
	CLR_BIT(TCCR2,WGM21); CLR_BIT(TCCR2,WGM20);
    1ee6:	a5 e4       	ldi	r26, 0x45	; 69
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	e5 e4       	ldi	r30, 0x45	; 69
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	87 7f       	andi	r24, 0xF7	; 247
    1ef2:	8c 93       	st	X, r24
    1ef4:	a5 e4       	ldi	r26, 0x45	; 69
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	e5 e4       	ldi	r30, 0x45	; 69
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	8f 7b       	andi	r24, 0xBF	; 191
    1f00:	8c 93       	st	X, r24
	SET_BIT(TIMSK,TOIE2);
    1f02:	a9 e5       	ldi	r26, 0x59	; 89
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	e9 e5       	ldi	r30, 0x59	; 89
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	80 64       	ori	r24, 0x40	; 64
    1f0e:	8c 93       	st	X, r24
	#elif		TIMER2_MODE		==		CTC
	SET_BIT(TCCR2,WGM21); CLR_BIT(TCCR2,WGM20);
	SET_BIT(TIMSK,OCIE2);
	#endif
	SET_BIT(SREG,1);
    1f10:	af e5       	ldi	r26, 0x5F	; 95
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	ef e5       	ldi	r30, 0x5F	; 95
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	80 81       	ld	r24, Z
    1f1a:	82 60       	ori	r24, 0x02	; 2
    1f1c:	8c 93       	st	X, r24

}
    1f1e:	cf 91       	pop	r28
    1f20:	df 91       	pop	r29
    1f22:	08 95       	ret

00001f24 <MTimer2SetTime>:


void  MTimer2SetTime(u32 Local_u32_DesiredTime)
{
    1f24:	df 93       	push	r29
    1f26:	cf 93       	push	r28
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
    1f2c:	2c 97       	sbiw	r28, 0x0c	; 12
    1f2e:	0f b6       	in	r0, 0x3f	; 63
    1f30:	f8 94       	cli
    1f32:	de bf       	out	0x3e, r29	; 62
    1f34:	0f be       	out	0x3f, r0	; 63
    1f36:	cd bf       	out	0x3d, r28	; 61
    1f38:	69 87       	std	Y+9, r22	; 0x09
    1f3a:	7a 87       	std	Y+10, r23	; 0x0a
    1f3c:	8b 87       	std	Y+11, r24	; 0x0b
    1f3e:	9c 87       	std	Y+12, r25	; 0x0c
	u32 Local_u32_TickTime =0;
    1f40:	1d 82       	std	Y+5, r1	; 0x05
    1f42:	1e 82       	std	Y+6, r1	; 0x06
    1f44:	1f 82       	std	Y+7, r1	; 0x07
    1f46:	18 86       	std	Y+8, r1	; 0x08
	u32 Local_u32_NumberOfTicks=0;
    1f48:	19 82       	std	Y+1, r1	; 0x01
    1f4a:	1a 82       	std	Y+2, r1	; 0x02
    1f4c:	1b 82       	std	Y+3, r1	; 0x03
    1f4e:	1c 82       	std	Y+4, r1	; 0x04
	Local_u32_TickTime		=	MTIMER2_PRESCALER/CRYSTALFREQUENCY;
    1f50:	1d 82       	std	Y+5, r1	; 0x05
    1f52:	1e 82       	std	Y+6, r1	; 0x06
    1f54:	1f 82       	std	Y+7, r1	; 0x07
    1f56:	18 86       	std	Y+8, r1	; 0x08
	 Local_u32_NumberOfTicks =	((Local_u32_DesiredTime*1000)/Local_u32_TickTime);
    1f58:	89 85       	ldd	r24, Y+9	; 0x09
    1f5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f5c:	ab 85       	ldd	r26, Y+11	; 0x0b
    1f5e:	bc 85       	ldd	r27, Y+12	; 0x0c
    1f60:	28 ee       	ldi	r18, 0xE8	; 232
    1f62:	33 e0       	ldi	r19, 0x03	; 3
    1f64:	40 e0       	ldi	r20, 0x00	; 0
    1f66:	50 e0       	ldi	r21, 0x00	; 0
    1f68:	bc 01       	movw	r22, r24
    1f6a:	cd 01       	movw	r24, r26
    1f6c:	0e 94 b8 54 	call	0xa970	; 0xa970 <__mulsi3>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	2d 81       	ldd	r18, Y+5	; 0x05
    1f76:	3e 81       	ldd	r19, Y+6	; 0x06
    1f78:	4f 81       	ldd	r20, Y+7	; 0x07
    1f7a:	58 85       	ldd	r21, Y+8	; 0x08
    1f7c:	bc 01       	movw	r22, r24
    1f7e:	cd 01       	movw	r24, r26
    1f80:	0e 94 ea 54 	call	0xa9d4	; 0xa9d4 <__udivmodsi4>
    1f84:	da 01       	movw	r26, r20
    1f86:	c9 01       	movw	r24, r18
    1f88:	89 83       	std	Y+1, r24	; 0x01
    1f8a:	9a 83       	std	Y+2, r25	; 0x02
    1f8c:	ab 83       	std	Y+3, r26	; 0x03
    1f8e:	bc 83       	std	Y+4, r27	; 0x04
	#if	TIMER2_MODE		==		NORMAL
	Timer2u32NumberofOVFs		=	Local_u32_NumberOfTicks/256;
    1f90:	89 81       	ldd	r24, Y+1	; 0x01
    1f92:	9a 81       	ldd	r25, Y+2	; 0x02
    1f94:	ab 81       	ldd	r26, Y+3	; 0x03
    1f96:	bc 81       	ldd	r27, Y+4	; 0x04
    1f98:	89 2f       	mov	r24, r25
    1f9a:	9a 2f       	mov	r25, r26
    1f9c:	ab 2f       	mov	r26, r27
    1f9e:	bb 27       	eor	r27, r27
    1fa0:	80 93 ae 04 	sts	0x04AE, r24
    1fa4:	90 93 af 04 	sts	0x04AF, r25
    1fa8:	a0 93 b0 04 	sts	0x04B0, r26
    1fac:	b0 93 b1 04 	sts	0x04B1, r27
	MTimer2u8RemainingTicks			=	Local_u32_NumberOfTicks%256;
    1fb0:	89 81       	ldd	r24, Y+1	; 0x01
    1fb2:	80 93 b6 04 	sts	0x04B6, r24
	if (MTimer2u8RemainingTicks != 0)
    1fb6:	80 91 b6 04 	lds	r24, 0x04B6
    1fba:	88 23       	and	r24, r24
    1fbc:	c9 f0       	breq	.+50     	; 0x1ff0 <MTimer2SetTime+0xcc>
	{
		TCNT2 = 256 - MTimer2u8RemainingTicks;
    1fbe:	e4 e4       	ldi	r30, 0x44	; 68
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	80 91 b6 04 	lds	r24, 0x04B6
    1fc6:	81 95       	neg	r24
    1fc8:	80 83       	st	Z, r24
		Timer2u32NumberofOVFs++;
    1fca:	80 91 ae 04 	lds	r24, 0x04AE
    1fce:	90 91 af 04 	lds	r25, 0x04AF
    1fd2:	a0 91 b0 04 	lds	r26, 0x04B0
    1fd6:	b0 91 b1 04 	lds	r27, 0x04B1
    1fda:	01 96       	adiw	r24, 0x01	; 1
    1fdc:	a1 1d       	adc	r26, r1
    1fde:	b1 1d       	adc	r27, r1
    1fe0:	80 93 ae 04 	sts	0x04AE, r24
    1fe4:	90 93 af 04 	sts	0x04AF, r25
    1fe8:	a0 93 b0 04 	sts	0x04B0, r26
    1fec:	b0 93 b1 04 	sts	0x04B1, r27
	}
	MTimer2u32NumOfCompareMatches = Local_u32_NumberOfTicks/ Local_u8_Division_Factor;
	OCR2 = Local_u8_Division_Factor-1;
	#endif

}
    1ff0:	2c 96       	adiw	r28, 0x0c	; 12
    1ff2:	0f b6       	in	r0, 0x3f	; 63
    1ff4:	f8 94       	cli
    1ff6:	de bf       	out	0x3e, r29	; 62
    1ff8:	0f be       	out	0x3f, r0	; 63
    1ffa:	cd bf       	out	0x3d, r28	; 61
    1ffc:	cf 91       	pop	r28
    1ffe:	df 91       	pop	r29
    2000:	08 95       	ret

00002002 <MTimer2Start>:


void MTimer2Start()
{
    2002:	df 93       	push	r29
    2004:	cf 93       	push	r28
    2006:	cd b7       	in	r28, 0x3d	; 61
    2008:	de b7       	in	r29, 0x3e	; 62
	#elif MTIMER2_PRESCALER	==		PRESCALER_64
	CLR_BIT(TCCR2,CS22); SET_BIT(TCCR2,CS21);	SET_BIT(TCCR2,CS20);
	#elif MTIMER2_PRESCALER	==		PRESCALER_256
	SET_BIT(TCCR2,CS22); CLR_BIT(TCCR2,CS21);	SET_BIT(TCCR2,CS20);
	#elif MTIMER2_PRESCALER	==		PRESCALER_1024
	SET_BIT(TCCR2,CS22); SET_BIT(TCCR2,CS21);	SET_BIT(TCCR2,CS20);
    200a:	a5 e4       	ldi	r26, 0x45	; 69
    200c:	b0 e0       	ldi	r27, 0x00	; 0
    200e:	e5 e4       	ldi	r30, 0x45	; 69
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	80 81       	ld	r24, Z
    2014:	84 60       	ori	r24, 0x04	; 4
    2016:	8c 93       	st	X, r24
    2018:	a5 e4       	ldi	r26, 0x45	; 69
    201a:	b0 e0       	ldi	r27, 0x00	; 0
    201c:	e5 e4       	ldi	r30, 0x45	; 69
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	80 81       	ld	r24, Z
    2022:	82 60       	ori	r24, 0x02	; 2
    2024:	8c 93       	st	X, r24
    2026:	a5 e4       	ldi	r26, 0x45	; 69
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	e5 e4       	ldi	r30, 0x45	; 69
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	81 60       	ori	r24, 0x01	; 1
    2032:	8c 93       	st	X, r24
	#endif
}
    2034:	cf 91       	pop	r28
    2036:	df 91       	pop	r29
    2038:	08 95       	ret

0000203a <MTimer2Stop>:

void MTimer2Stop()
{
    203a:	df 93       	push	r29
    203c:	cf 93       	push	r28
    203e:	cd b7       	in	r28, 0x3d	; 61
    2040:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR2,CS22);
    2042:	a5 e4       	ldi	r26, 0x45	; 69
    2044:	b0 e0       	ldi	r27, 0x00	; 0
    2046:	e5 e4       	ldi	r30, 0x45	; 69
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	80 81       	ld	r24, Z
    204c:	8b 7f       	andi	r24, 0xFB	; 251
    204e:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,CS21);
    2050:	a5 e4       	ldi	r26, 0x45	; 69
    2052:	b0 e0       	ldi	r27, 0x00	; 0
    2054:	e5 e4       	ldi	r30, 0x45	; 69
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	80 81       	ld	r24, Z
    205a:	8d 7f       	andi	r24, 0xFD	; 253
    205c:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,CS20);
    205e:	a5 e4       	ldi	r26, 0x45	; 69
    2060:	b0 e0       	ldi	r27, 0x00	; 0
    2062:	e5 e4       	ldi	r30, 0x45	; 69
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	80 81       	ld	r24, Z
    2068:	8e 7f       	andi	r24, 0xFE	; 254
    206a:	8c 93       	st	X, r24
}
    206c:	cf 91       	pop	r28
    206e:	df 91       	pop	r29
    2070:	08 95       	ret

00002072 <MPWM2Init>:


void MPWM2Init()
{
    2072:	df 93       	push	r29
    2074:	cf 93       	push	r28
    2076:	cd b7       	in	r28, 0x3d	; 61
    2078:	de b7       	in	r29, 0x3e	; 62
	MDIO_Set_PIN_DIR(MDIO_PORTD,7,PIN_OUTPUT);
    207a:	83 e0       	ldi	r24, 0x03	; 3
    207c:	67 e0       	ldi	r22, 0x07	; 7
    207e:	41 e0       	ldi	r20, 0x01	; 1
    2080:	0e 94 20 18 	call	0x3040	; 0x3040 <MDIO_Set_PIN_DIR>

	#if	PWM2_MODE		==		FAST_PWM
	SET_BIT(TCCR2,WGM21);
    2084:	a5 e4       	ldi	r26, 0x45	; 69
    2086:	b0 e0       	ldi	r27, 0x00	; 0
    2088:	e5 e4       	ldi	r30, 0x45	; 69
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	88 60       	ori	r24, 0x08	; 8
    2090:	8c 93       	st	X, r24
	SET_BIT(TCCR2,WGM20);
    2092:	a5 e4       	ldi	r26, 0x45	; 69
    2094:	b0 e0       	ldi	r27, 0x00	; 0
    2096:	e5 e4       	ldi	r30, 0x45	; 69
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
    209c:	80 64       	ori	r24, 0x40	; 64
    209e:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,WGM21);
	SET_BIT(TCCR2,WGM20);
	#endif

	#if	OUTPUT_MODE		==		NON_INVERTED
	SET_BIT(TCCR2,COM21);
    20a0:	a5 e4       	ldi	r26, 0x45	; 69
    20a2:	b0 e0       	ldi	r27, 0x00	; 0
    20a4:	e5 e4       	ldi	r30, 0x45	; 69
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	80 81       	ld	r24, Z
    20aa:	80 62       	ori	r24, 0x20	; 32
    20ac:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,COM20);
    20ae:	a5 e4       	ldi	r26, 0x45	; 69
    20b0:	b0 e0       	ldi	r27, 0x00	; 0
    20b2:	e5 e4       	ldi	r30, 0x45	; 69
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	80 81       	ld	r24, Z
    20b8:	8f 7e       	andi	r24, 0xEF	; 239
    20ba:	8c 93       	st	X, r24
	#elif OUTPUT_MODE		==		INVERTED
	SET_BIT(TCCR2,COM21);
	SET_BIT(TCCR2,COM20);
	#endif

}
    20bc:	cf 91       	pop	r28
    20be:	df 91       	pop	r29
    20c0:	08 95       	ret

000020c2 <MPWM2SetDutyCycle>:

void MPWM2SetDutyCycle(u8 Local_u8DesiredDutyCycle)
{
    20c2:	df 93       	push	r29
    20c4:	cf 93       	push	r28
    20c6:	0f 92       	push	r0
    20c8:	cd b7       	in	r28, 0x3d	; 61
    20ca:	de b7       	in	r29, 0x3e	; 62
    20cc:	89 83       	std	Y+1, r24	; 0x01
	#if	OUTPUT_MODE	==	NON_INVERTED

	if(Local_u8DesiredDutyCycle == 0)
    20ce:	89 81       	ldd	r24, Y+1	; 0x01
    20d0:	88 23       	and	r24, r24
    20d2:	f1 f4       	brne	.+60     	; 0x2110 <MPWM2SetDutyCycle+0x4e>
	{
		SET_BIT(TCCR2,COM21);
    20d4:	a5 e4       	ldi	r26, 0x45	; 69
    20d6:	b0 e0       	ldi	r27, 0x00	; 0
    20d8:	e5 e4       	ldi	r30, 0x45	; 69
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	80 81       	ld	r24, Z
    20de:	80 62       	ori	r24, 0x20	; 32
    20e0:	8c 93       	st	X, r24
		SET_BIT(TCCR2,COM20);
    20e2:	a5 e4       	ldi	r26, 0x45	; 69
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	e5 e4       	ldi	r30, 0x45	; 69
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	80 81       	ld	r24, Z
    20ec:	80 61       	ori	r24, 0x10	; 16
    20ee:	8c 93       	st	X, r24
		OCR2 = (255 -((Local_u8DesiredDutyCycle *256)/100));
    20f0:	e3 e4       	ldi	r30, 0x43	; 67
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	89 81       	ldd	r24, Y+1	; 0x01
    20f6:	88 2f       	mov	r24, r24
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	98 2f       	mov	r25, r24
    20fc:	88 27       	eor	r24, r24
    20fe:	24 e6       	ldi	r18, 0x64	; 100
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	b9 01       	movw	r22, r18
    2104:	0e 94 d7 54 	call	0xa9ae	; 0xa9ae <__divmodhi4>
    2108:	cb 01       	movw	r24, r22
    210a:	80 95       	com	r24
    210c:	80 83       	st	Z, r24
    210e:	1d c0       	rjmp	.+58     	; 0x214a <MPWM2SetDutyCycle+0x88>
	}
	else
	{
		SET_BIT(TCCR2,COM21);
    2110:	a5 e4       	ldi	r26, 0x45	; 69
    2112:	b0 e0       	ldi	r27, 0x00	; 0
    2114:	e5 e4       	ldi	r30, 0x45	; 69
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	80 62       	ori	r24, 0x20	; 32
    211c:	8c 93       	st	X, r24
		CLR_BIT(TCCR2,COM20);
    211e:	a5 e4       	ldi	r26, 0x45	; 69
    2120:	b0 e0       	ldi	r27, 0x00	; 0
    2122:	e5 e4       	ldi	r30, 0x45	; 69
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	80 81       	ld	r24, Z
    2128:	8f 7e       	andi	r24, 0xEF	; 239
    212a:	8c 93       	st	X, r24
		OCR2 = (((Local_u8DesiredDutyCycle *256) /100) - 1);
    212c:	e3 e4       	ldi	r30, 0x43	; 67
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	89 81       	ldd	r24, Y+1	; 0x01
    2132:	88 2f       	mov	r24, r24
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	98 2f       	mov	r25, r24
    2138:	88 27       	eor	r24, r24
    213a:	24 e6       	ldi	r18, 0x64	; 100
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	b9 01       	movw	r22, r18
    2140:	0e 94 d7 54 	call	0xa9ae	; 0xa9ae <__divmodhi4>
    2144:	cb 01       	movw	r24, r22
    2146:	81 50       	subi	r24, 0x01	; 1
    2148:	80 83       	st	Z, r24
		SET_BIT(TCCR2,COM20);
		OCR2 = (255 - ((Local_u8_DesiredDutyCycle *256)/100));
	}
	#endif

}
    214a:	0f 90       	pop	r0
    214c:	cf 91       	pop	r28
    214e:	df 91       	pop	r29
    2150:	08 95       	ret

00002152 <MPWM2Start>:

void MPWM2Start()
{
    2152:	df 93       	push	r29
    2154:	cf 93       	push	r28
    2156:	cd b7       	in	r28, 0x3d	; 61
    2158:	de b7       	in	r29, 0x3e	; 62
	MTimer2Start();
    215a:	0e 94 01 10 	call	0x2002	; 0x2002 <MTimer2Start>
	MDIO_Set_PIN_DIR(MDIO_PORTD,7,PIN_OUTPUT);
    215e:	83 e0       	ldi	r24, 0x03	; 3
    2160:	67 e0       	ldi	r22, 0x07	; 7
    2162:	41 e0       	ldi	r20, 0x01	; 1
    2164:	0e 94 20 18 	call	0x3040	; 0x3040 <MDIO_Set_PIN_DIR>
}
    2168:	cf 91       	pop	r28
    216a:	df 91       	pop	r29
    216c:	08 95       	ret

0000216e <MPWM2Stop>:

void MPWM2Stop()
{
    216e:	df 93       	push	r29
    2170:	cf 93       	push	r28
    2172:	cd b7       	in	r28, 0x3d	; 61
    2174:	de b7       	in	r29, 0x3e	; 62
	MTimer2Stop();
    2176:	0e 94 1d 10 	call	0x203a	; 0x203a <MTimer2Stop>
	MDIO_Set_PIN_DIR(MDIO_PORTD,7,PIN_INPUT);
    217a:	83 e0       	ldi	r24, 0x03	; 3
    217c:	67 e0       	ldi	r22, 0x07	; 7
    217e:	40 e0       	ldi	r20, 0x00	; 0
    2180:	0e 94 20 18 	call	0x3040	; 0x3040 <MDIO_Set_PIN_DIR>
}
    2184:	cf 91       	pop	r28
    2186:	df 91       	pop	r29
    2188:	08 95       	ret

0000218a <MTimer2SetCallBack>:




void MTimer2SetCallBack	(void (*Local_void_ptr) (void))
{
    218a:	df 93       	push	r29
    218c:	cf 93       	push	r28
    218e:	00 d0       	rcall	.+0      	; 0x2190 <MTimer2SetCallBack+0x6>
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
    2194:	9a 83       	std	Y+2, r25	; 0x02
    2196:	89 83       	std	Y+1, r24	; 0x01
	MTimer2voidCallBack = Local_void_ptr;
    2198:	89 81       	ldd	r24, Y+1	; 0x01
    219a:	9a 81       	ldd	r25, Y+2	; 0x02
    219c:	90 93 b8 04 	sts	0x04B8, r25
    21a0:	80 93 b7 04 	sts	0x04B7, r24
}
    21a4:	0f 90       	pop	r0
    21a6:	0f 90       	pop	r0
    21a8:	cf 91       	pop	r28
    21aa:	df 91       	pop	r29
    21ac:	08 95       	ret

000021ae <Timer1_Init>:
void (*GLOB_VidTimer1OVFPtrCallBack)(void) = NULL;
void (*GLOB_VidTimer1OCAPtrCallBack)(void) = NULL;
void (*GLOB_VidTimer1OCBPtrCallBack)(void) = NULL;
void (*GLOB_VidTimer1CaptureEventPtrCallBack)(void) = NULL;
void Timer1_Init(void)
{
    21ae:	df 93       	push	r29
    21b0:	cf 93       	push	r28
    21b2:	cd b7       	in	r28, 0x3d	; 61
    21b4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B, WGM12);
	CLR_BIT(TCCR1A, WGM11);
	CLR_BIT(TCCR1A, WGM10);

#elif MODE == FAST_PWM_ICR1
	SET_BIT(TCCR1B, WGM13);
    21b6:	ae e4       	ldi	r26, 0x4E	; 78
    21b8:	b0 e0       	ldi	r27, 0x00	; 0
    21ba:	ee e4       	ldi	r30, 0x4E	; 78
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	80 81       	ld	r24, Z
    21c0:	80 61       	ori	r24, 0x10	; 16
    21c2:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM12);
    21c4:	ae e4       	ldi	r26, 0x4E	; 78
    21c6:	b0 e0       	ldi	r27, 0x00	; 0
    21c8:	ee e4       	ldi	r30, 0x4E	; 78
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	80 81       	ld	r24, Z
    21ce:	88 60       	ori	r24, 0x08	; 8
    21d0:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, WGM11);
    21d2:	af e4       	ldi	r26, 0x4F	; 79
    21d4:	b0 e0       	ldi	r27, 0x00	; 0
    21d6:	ef e4       	ldi	r30, 0x4F	; 79
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	80 81       	ld	r24, Z
    21dc:	82 60       	ori	r24, 0x02	; 2
    21de:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, WGM10);
    21e0:	af e4       	ldi	r26, 0x4F	; 79
    21e2:	b0 e0       	ldi	r27, 0x00	; 0
    21e4:	ef e4       	ldi	r30, 0x4F	; 79
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	80 81       	ld	r24, Z
    21ea:	8e 7f       	andi	r24, 0xFE	; 254
    21ec:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, COM1A0);
#elif OC1A_FAST_PWM == TOGGLE_OC1A
	CLR_BIT(TCCR1A, COM1A1);
	SET_BIT(TCCR1A, COM1A0);
#elif OC1A_FAST_PWM == NON_INVERTED_OC1A
	SET_BIT(TCCR1A, COM1A1);
    21ee:	af e4       	ldi	r26, 0x4F	; 79
    21f0:	b0 e0       	ldi	r27, 0x00	; 0
    21f2:	ef e4       	ldi	r30, 0x4F	; 79
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	80 81       	ld	r24, Z
    21f8:	80 68       	ori	r24, 0x80	; 128
    21fa:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, COM1A0);
    21fc:	af e4       	ldi	r26, 0x4F	; 79
    21fe:	b0 e0       	ldi	r27, 0x00	; 0
    2200:	ef e4       	ldi	r30, 0x4F	; 79
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	80 81       	ld	r24, Z
    2206:	8f 7b       	andi	r24, 0xBF	; 191
    2208:	8c 93       	st	X, r24
#endif
#if OC1B_FAST_PWM == DISCONNECT_OC1B
	CLR_BIT(TCCR1A, COM1B1);
	CLR_BIT(TCCR1A, COM1B0);
#elif OC1B_FAST_PWM == NON_INVERTED_OC1B
	SET_BIT(TCCR1A, COM1B1);
    220a:	af e4       	ldi	r26, 0x4F	; 79
    220c:	b0 e0       	ldi	r27, 0x00	; 0
    220e:	ef e4       	ldi	r30, 0x4F	; 79
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	80 81       	ld	r24, Z
    2214:	80 62       	ori	r24, 0x20	; 32
    2216:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, COM1B0);
    2218:	af e4       	ldi	r26, 0x4F	; 79
    221a:	b0 e0       	ldi	r27, 0x00	; 0
    221c:	ef e4       	ldi	r30, 0x4F	; 79
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	80 81       	ld	r24, Z
    2222:	8f 7e       	andi	r24, 0xEF	; 239
    2224:	8c 93       	st	X, r24
#elif CLOCK_SELECT == PRESCALER_8
	CLR_BIT(TCCR1B, CS12);
	SET_BIT(TCCR1B, CS11);
	CLR_BIT(TCCR1B, CS10);
#elif CLOCK_SELECT == PRESCALER_64
	CLR_BIT(TCCR1B, CS12);
    2226:	ae e4       	ldi	r26, 0x4E	; 78
    2228:	b0 e0       	ldi	r27, 0x00	; 0
    222a:	ee e4       	ldi	r30, 0x4E	; 78
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	80 81       	ld	r24, Z
    2230:	8b 7f       	andi	r24, 0xFB	; 251
    2232:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS11);
    2234:	ae e4       	ldi	r26, 0x4E	; 78
    2236:	b0 e0       	ldi	r27, 0x00	; 0
    2238:	ee e4       	ldi	r30, 0x4E	; 78
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	80 81       	ld	r24, Z
    223e:	82 60       	ori	r24, 0x02	; 2
    2240:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS10);
    2242:	ae e4       	ldi	r26, 0x4E	; 78
    2244:	b0 e0       	ldi	r27, 0x00	; 0
    2246:	ee e4       	ldi	r30, 0x4E	; 78
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	80 81       	ld	r24, Z
    224c:	81 60       	ori	r24, 0x01	; 1
    224e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS11);
	SET_BIT(TCCR1B, CS10);
#else
#error "Incorrect clock selection"
#endif
}
    2250:	cf 91       	pop	r28
    2252:	df 91       	pop	r29
    2254:	08 95       	ret

00002256 <Timer1_Preload>:

void Timer1_Preload(const u16 LOC_U16Value)
{
    2256:	df 93       	push	r29
    2258:	cf 93       	push	r28
    225a:	00 d0       	rcall	.+0      	; 0x225c <Timer1_Preload+0x6>
    225c:	cd b7       	in	r28, 0x3d	; 61
    225e:	de b7       	in	r29, 0x3e	; 62
    2260:	9a 83       	std	Y+2, r25	; 0x02
    2262:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = LOC_U16Value;
    2264:	ec e4       	ldi	r30, 0x4C	; 76
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	89 81       	ldd	r24, Y+1	; 0x01
    226a:	9a 81       	ldd	r25, Y+2	; 0x02
    226c:	91 83       	std	Z+1, r25	; 0x01
    226e:	80 83       	st	Z, r24

}
    2270:	0f 90       	pop	r0
    2272:	0f 90       	pop	r0
    2274:	cf 91       	pop	r28
    2276:	df 91       	pop	r29
    2278:	08 95       	ret

0000227a <Timer1_SetCounterTOP>:

void Timer1_SetCounterTOP(const u16 LOC_U16Value)
{
    227a:	df 93       	push	r29
    227c:	cf 93       	push	r28
    227e:	00 d0       	rcall	.+0      	; 0x2280 <Timer1_SetCounterTOP+0x6>
    2280:	cd b7       	in	r28, 0x3d	; 61
    2282:	de b7       	in	r29, 0x3e	; 62
    2284:	9a 83       	std	Y+2, r25	; 0x02
    2286:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_U16Value >= MINIMUM_RESOLUTION)
    2288:	89 81       	ldd	r24, Y+1	; 0x01
    228a:	9a 81       	ldd	r25, Y+2	; 0x02
    228c:	83 30       	cpi	r24, 0x03	; 3
    228e:	91 05       	cpc	r25, r1
    2290:	30 f0       	brcs	.+12     	; 0x229e <Timer1_SetCounterTOP+0x24>
#if MODE == CTC_OCR1A || MODE == FAST_PWM_OCR1A || MODE == PHASE_CORRECT_OCR1A \
		|| MODE == PHASE_AND_FREQUENCY_CORRECT_OCR1A
		OCR1A = LOC_U16Value;
#elif MODE == CTC_ICR1 || MODE == FAST_PWM_ICR1 || MODE == PHASE_CORRECT_ICR1 \
		|| MODE == PHASE_AND_FREQUENCY_CORRECT_ICR1
		ICR1 = LOC_U16Value;
    2292:	e6 e4       	ldi	r30, 0x46	; 70
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	89 81       	ldd	r24, Y+1	; 0x01
    2298:	9a 81       	ldd	r25, Y+2	; 0x02
    229a:	91 83       	std	Z+1, r25	; 0x01
    229c:	80 83       	st	Z, r24
#else
#error "Invalid mode of operation for timer1"
#endif
	}

}
    229e:	0f 90       	pop	r0
    22a0:	0f 90       	pop	r0
    22a2:	cf 91       	pop	r28
    22a4:	df 91       	pop	r29
    22a6:	08 95       	ret

000022a8 <Timer1_SetOCACompareValue>:

void Timer1_SetOCACompareValue( u16 LOC_U16Value)
{
    22a8:	df 93       	push	r29
    22aa:	cf 93       	push	r28
    22ac:	00 d0       	rcall	.+0      	; 0x22ae <Timer1_SetOCACompareValue+0x6>
    22ae:	cd b7       	in	r28, 0x3d	; 61
    22b0:	de b7       	in	r29, 0x3e	; 62
    22b2:	9a 83       	std	Y+2, r25	; 0x02
    22b4:	89 83       	std	Y+1, r24	; 0x01
#if MODE == CTC_OCR1A || MODE == PHASE_AND_FREQUENCY_CORRECT_OCR1A || MODE == \
		PHASE_CORRECT_OCR1A
	/* Trying to set the OCR1A value as a compare value while using OCR1A as a TOP */
#else
	OCR1A = LOC_U16Value;
    22b6:	ea e4       	ldi	r30, 0x4A	; 74
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	89 81       	ldd	r24, Y+1	; 0x01
    22bc:	9a 81       	ldd	r25, Y+2	; 0x02
    22be:	91 83       	std	Z+1, r25	; 0x01
    22c0:	80 83       	st	Z, r24

#endif
}
    22c2:	0f 90       	pop	r0
    22c4:	0f 90       	pop	r0
    22c6:	cf 91       	pop	r28
    22c8:	df 91       	pop	r29
    22ca:	08 95       	ret

000022cc <Timer1_SetOCBCompareValue>:

void Timer1_SetOCBCompareValue( u16 LOC_U16Value)
{
    22cc:	df 93       	push	r29
    22ce:	cf 93       	push	r28
    22d0:	00 d0       	rcall	.+0      	; 0x22d2 <Timer1_SetOCBCompareValue+0x6>
    22d2:	cd b7       	in	r28, 0x3d	; 61
    22d4:	de b7       	in	r29, 0x3e	; 62
    22d6:	9a 83       	std	Y+2, r25	; 0x02
    22d8:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = LOC_U16Value;
    22da:	e8 e4       	ldi	r30, 0x48	; 72
    22dc:	f0 e0       	ldi	r31, 0x00	; 0
    22de:	89 81       	ldd	r24, Y+1	; 0x01
    22e0:	9a 81       	ldd	r25, Y+2	; 0x02
    22e2:	91 83       	std	Z+1, r25	; 0x01
    22e4:	80 83       	st	Z, r24

}
    22e6:	0f 90       	pop	r0
    22e8:	0f 90       	pop	r0
    22ea:	cf 91       	pop	r28
    22ec:	df 91       	pop	r29
    22ee:	08 95       	ret

000022f0 <Timer1_OC1ASetDutyCycle>:

void Timer1_OC1ASetDutyCycle( f32 LOC_F32DutyCycle)
{
    22f0:	df 93       	push	r29
    22f2:	cf 93       	push	r28
    22f4:	00 d0       	rcall	.+0      	; 0x22f6 <Timer1_OC1ASetDutyCycle+0x6>
    22f6:	00 d0       	rcall	.+0      	; 0x22f8 <Timer1_OC1ASetDutyCycle+0x8>
    22f8:	cd b7       	in	r28, 0x3d	; 61
    22fa:	de b7       	in	r29, 0x3e	; 62
    22fc:	69 83       	std	Y+1, r22	; 0x01
    22fe:	7a 83       	std	Y+2, r23	; 0x02
    2300:	8b 83       	std	Y+3, r24	; 0x03
    2302:	9c 83       	std	Y+4, r25	; 0x04
	if (LOC_F32DutyCycle >= MINIMUM_DUTYCYCLE && LOC_F32DutyCycle <= MAXIMUM_DUTYCYCLE && 1024 >= MINIMUM_RESOLUTION)
    2304:	69 81       	ldd	r22, Y+1	; 0x01
    2306:	7a 81       	ldd	r23, Y+2	; 0x02
    2308:	8b 81       	ldd	r24, Y+3	; 0x03
    230a:	9c 81       	ldd	r25, Y+4	; 0x04
    230c:	20 e0       	ldi	r18, 0x00	; 0
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	40 e0       	ldi	r20, 0x00	; 0
    2312:	50 e0       	ldi	r21, 0x00	; 0
    2314:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    2318:	88 23       	and	r24, r24
    231a:	74 f1       	brlt	.+92     	; 0x2378 <Timer1_OC1ASetDutyCycle+0x88>
    231c:	69 81       	ldd	r22, Y+1	; 0x01
    231e:	7a 81       	ldd	r23, Y+2	; 0x02
    2320:	8b 81       	ldd	r24, Y+3	; 0x03
    2322:	9c 81       	ldd	r25, Y+4	; 0x04
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	48 ec       	ldi	r20, 0xC8	; 200
    232a:	52 e4       	ldi	r21, 0x42	; 66
    232c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    2330:	18 16       	cp	r1, r24
    2332:	14 f1       	brlt	.+68     	; 0x2378 <Timer1_OC1ASetDutyCycle+0x88>
	{
		Timer1_SetCounterTOP(1024);
    2334:	80 e0       	ldi	r24, 0x00	; 0
    2336:	94 e0       	ldi	r25, 0x04	; 4
    2338:	0e 94 3d 11 	call	0x227a	; 0x227a <Timer1_SetCounterTOP>
		Timer1_SetOCACompareValue( ( LOC_F32DutyCycle / 100 ) * ( 1024 ) );
    233c:	69 81       	ldd	r22, Y+1	; 0x01
    233e:	7a 81       	ldd	r23, Y+2	; 0x02
    2340:	8b 81       	ldd	r24, Y+3	; 0x03
    2342:	9c 81       	ldd	r25, Y+4	; 0x04
    2344:	20 e0       	ldi	r18, 0x00	; 0
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	48 ec       	ldi	r20, 0xC8	; 200
    234a:	52 e4       	ldi	r21, 0x42	; 66
    234c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	bc 01       	movw	r22, r24
    2356:	cd 01       	movw	r24, r26
    2358:	20 e0       	ldi	r18, 0x00	; 0
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	40 e8       	ldi	r20, 0x80	; 128
    235e:	54 e4       	ldi	r21, 0x44	; 68
    2360:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2364:	dc 01       	movw	r26, r24
    2366:	cb 01       	movw	r24, r22
    2368:	bc 01       	movw	r22, r24
    236a:	cd 01       	movw	r24, r26
    236c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2370:	dc 01       	movw	r26, r24
    2372:	cb 01       	movw	r24, r22
    2374:	0e 94 54 11 	call	0x22a8	; 0x22a8 <Timer1_SetOCACompareValue>
	}
	else
	{

	}
}
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	0f 90       	pop	r0
    237e:	0f 90       	pop	r0
    2380:	cf 91       	pop	r28
    2382:	df 91       	pop	r29
    2384:	08 95       	ret

00002386 <Timer1_OC1BSetDutyCycle>:

void Timer1_OC1BSetDutyCycle( f32 LOC_F32DutyCycle)
{
    2386:	df 93       	push	r29
    2388:	cf 93       	push	r28
    238a:	00 d0       	rcall	.+0      	; 0x238c <Timer1_OC1BSetDutyCycle+0x6>
    238c:	00 d0       	rcall	.+0      	; 0x238e <Timer1_OC1BSetDutyCycle+0x8>
    238e:	cd b7       	in	r28, 0x3d	; 61
    2390:	de b7       	in	r29, 0x3e	; 62
    2392:	69 83       	std	Y+1, r22	; 0x01
    2394:	7a 83       	std	Y+2, r23	; 0x02
    2396:	8b 83       	std	Y+3, r24	; 0x03
    2398:	9c 83       	std	Y+4, r25	; 0x04
	if (LOC_F32DutyCycle <= MAXIMUM_DUTYCYCLE && 1024 >= MINIMUM_RESOLUTION)
    239a:	69 81       	ldd	r22, Y+1	; 0x01
    239c:	7a 81       	ldd	r23, Y+2	; 0x02
    239e:	8b 81       	ldd	r24, Y+3	; 0x03
    23a0:	9c 81       	ldd	r25, Y+4	; 0x04
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	48 ec       	ldi	r20, 0xC8	; 200
    23a8:	52 e4       	ldi	r21, 0x42	; 66
    23aa:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    23ae:	18 16       	cp	r1, r24
    23b0:	14 f1       	brlt	.+68     	; 0x23f6 <Timer1_OC1BSetDutyCycle+0x70>
	{
		Timer1_SetCounterTOP(1024);
    23b2:	80 e0       	ldi	r24, 0x00	; 0
    23b4:	94 e0       	ldi	r25, 0x04	; 4
    23b6:	0e 94 3d 11 	call	0x227a	; 0x227a <Timer1_SetCounterTOP>
		Timer1_SetOCBCompareValue( ( LOC_F32DutyCycle / 100 ) * ( 1024 ) );
    23ba:	69 81       	ldd	r22, Y+1	; 0x01
    23bc:	7a 81       	ldd	r23, Y+2	; 0x02
    23be:	8b 81       	ldd	r24, Y+3	; 0x03
    23c0:	9c 81       	ldd	r25, Y+4	; 0x04
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	48 ec       	ldi	r20, 0xC8	; 200
    23c8:	52 e4       	ldi	r21, 0x42	; 66
    23ca:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	bc 01       	movw	r22, r24
    23d4:	cd 01       	movw	r24, r26
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	40 e8       	ldi	r20, 0x80	; 128
    23dc:	54 e4       	ldi	r21, 0x44	; 68
    23de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	bc 01       	movw	r22, r24
    23e8:	cd 01       	movw	r24, r26
    23ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	0e 94 66 11 	call	0x22cc	; 0x22cc <Timer1_SetOCBCompareValue>

	}
	else
	{
	}
}
    23f6:	0f 90       	pop	r0
    23f8:	0f 90       	pop	r0
    23fa:	0f 90       	pop	r0
    23fc:	0f 90       	pop	r0
    23fe:	cf 91       	pop	r28
    2400:	df 91       	pop	r29
    2402:	08 95       	ret

00002404 <Timer1_GetCounterValue>:

void Timer1_GetCounterValue(u16* const LOC_U16Value)
{
    2404:	df 93       	push	r29
    2406:	cf 93       	push	r28
    2408:	00 d0       	rcall	.+0      	; 0x240a <Timer1_GetCounterValue+0x6>
    240a:	cd b7       	in	r28, 0x3d	; 61
    240c:	de b7       	in	r29, 0x3e	; 62
    240e:	9a 83       	std	Y+2, r25	; 0x02
    2410:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_U16Value != NULL)
    2412:	89 81       	ldd	r24, Y+1	; 0x01
    2414:	9a 81       	ldd	r25, Y+2	; 0x02
    2416:	00 97       	sbiw	r24, 0x00	; 0
    2418:	41 f0       	breq	.+16     	; 0x242a <Timer1_GetCounterValue+0x26>
	{
		*LOC_U16Value = TCNT1;
    241a:	ec e4       	ldi	r30, 0x4C	; 76
    241c:	f0 e0       	ldi	r31, 0x00	; 0
    241e:	80 81       	ld	r24, Z
    2420:	91 81       	ldd	r25, Z+1	; 0x01
    2422:	e9 81       	ldd	r30, Y+1	; 0x01
    2424:	fa 81       	ldd	r31, Y+2	; 0x02
    2426:	91 83       	std	Z+1, r25	; 0x01
    2428:	80 83       	st	Z, r24
	}
	else
	{

	}
}
    242a:	0f 90       	pop	r0
    242c:	0f 90       	pop	r0
    242e:	cf 91       	pop	r28
    2430:	df 91       	pop	r29
    2432:	08 95       	ret

00002434 <Timer1_EnableNoiseCanceler>:

void Timer1_EnableNoiseCanceler()
{
    2434:	df 93       	push	r29
    2436:	cf 93       	push	r28
    2438:	cd b7       	in	r28, 0x3d	; 61
    243a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B, ICNC1);
    243c:	ae e4       	ldi	r26, 0x4E	; 78
    243e:	b0 e0       	ldi	r27, 0x00	; 0
    2440:	ee e4       	ldi	r30, 0x4E	; 78
    2442:	f0 e0       	ldi	r31, 0x00	; 0
    2444:	80 81       	ld	r24, Z
    2446:	80 68       	ori	r24, 0x80	; 128
    2448:	8c 93       	st	X, r24

}
    244a:	cf 91       	pop	r28
    244c:	df 91       	pop	r29
    244e:	08 95       	ret

00002450 <Timer1_DisableNoiseCanceler>:

void Timer1_DisableNoiseCanceler()
{
    2450:	df 93       	push	r29
    2452:	cf 93       	push	r28
    2454:	cd b7       	in	r28, 0x3d	; 61
    2456:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B, ICNC1);
    2458:	ae e4       	ldi	r26, 0x4E	; 78
    245a:	b0 e0       	ldi	r27, 0x00	; 0
    245c:	ee e4       	ldi	r30, 0x4E	; 78
    245e:	f0 e0       	ldi	r31, 0x00	; 0
    2460:	80 81       	ld	r24, Z
    2462:	8f 77       	andi	r24, 0x7F	; 127
    2464:	8c 93       	st	X, r24
}
    2466:	cf 91       	pop	r28
    2468:	df 91       	pop	r29
    246a:	08 95       	ret

0000246c <Timer1_ICEdgeSelect>:

void Timer1_ICEdgeSelect(const u8 LOC_U8Edge)
{
    246c:	df 93       	push	r29
    246e:	cf 93       	push	r28
    2470:	00 d0       	rcall	.+0      	; 0x2472 <Timer1_ICEdgeSelect+0x6>
    2472:	0f 92       	push	r0
    2474:	cd b7       	in	r28, 0x3d	; 61
    2476:	de b7       	in	r29, 0x3e	; 62
    2478:	89 83       	std	Y+1, r24	; 0x01
	switch (LOC_U8Edge)
    247a:	89 81       	ldd	r24, Y+1	; 0x01
    247c:	28 2f       	mov	r18, r24
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	3b 83       	std	Y+3, r19	; 0x03
    2482:	2a 83       	std	Y+2, r18	; 0x02
    2484:	8a 81       	ldd	r24, Y+2	; 0x02
    2486:	9b 81       	ldd	r25, Y+3	; 0x03
    2488:	00 97       	sbiw	r24, 0x00	; 0
    248a:	31 f0       	breq	.+12     	; 0x2498 <Timer1_ICEdgeSelect+0x2c>
    248c:	2a 81       	ldd	r18, Y+2	; 0x02
    248e:	3b 81       	ldd	r19, Y+3	; 0x03
    2490:	21 30       	cpi	r18, 0x01	; 1
    2492:	31 05       	cpc	r19, r1
    2494:	49 f0       	breq	.+18     	; 0x24a8 <Timer1_ICEdgeSelect+0x3c>
    2496:	0f c0       	rjmp	.+30     	; 0x24b6 <Timer1_ICEdgeSelect+0x4a>
	{
		case FALLING_EDGE:
		CLR_BIT(TCCR1B, ICES1);
    2498:	ae e4       	ldi	r26, 0x4E	; 78
    249a:	b0 e0       	ldi	r27, 0x00	; 0
    249c:	ee e4       	ldi	r30, 0x4E	; 78
    249e:	f0 e0       	ldi	r31, 0x00	; 0
    24a0:	80 81       	ld	r24, Z
    24a2:	8f 7b       	andi	r24, 0xBF	; 191
    24a4:	8c 93       	st	X, r24
    24a6:	07 c0       	rjmp	.+14     	; 0x24b6 <Timer1_ICEdgeSelect+0x4a>
		break;

		case RISING_EDGE:
		SET_BIT(TCCR1B, ICES1);
    24a8:	ae e4       	ldi	r26, 0x4E	; 78
    24aa:	b0 e0       	ldi	r27, 0x00	; 0
    24ac:	ee e4       	ldi	r30, 0x4E	; 78
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	80 81       	ld	r24, Z
    24b2:	80 64       	ori	r24, 0x40	; 64
    24b4:	8c 93       	st	X, r24
		default:{
			////
		}

	}
}
    24b6:	0f 90       	pop	r0
    24b8:	0f 90       	pop	r0
    24ba:	0f 90       	pop	r0
    24bc:	cf 91       	pop	r28
    24be:	df 91       	pop	r29
    24c0:	08 95       	ret

000024c2 <Timer1_GetCapturedValue>:

void Timer1_GetCapturedValue(u16* const LOC_U16Value)
{
    24c2:	df 93       	push	r29
    24c4:	cf 93       	push	r28
    24c6:	00 d0       	rcall	.+0      	; 0x24c8 <Timer1_GetCapturedValue+0x6>
    24c8:	cd b7       	in	r28, 0x3d	; 61
    24ca:	de b7       	in	r29, 0x3e	; 62
    24cc:	9a 83       	std	Y+2, r25	; 0x02
    24ce:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_U16Value != NULL)
    24d0:	89 81       	ldd	r24, Y+1	; 0x01
    24d2:	9a 81       	ldd	r25, Y+2	; 0x02
    24d4:	00 97       	sbiw	r24, 0x00	; 0
    24d6:	41 f0       	breq	.+16     	; 0x24e8 <Timer1_GetCapturedValue+0x26>
	{

		*LOC_U16Value = ICR1;
    24d8:	e6 e4       	ldi	r30, 0x46	; 70
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	80 81       	ld	r24, Z
    24de:	91 81       	ldd	r25, Z+1	; 0x01
    24e0:	e9 81       	ldd	r30, Y+1	; 0x01
    24e2:	fa 81       	ldd	r31, Y+2	; 0x02
    24e4:	91 83       	std	Z+1, r25	; 0x01
    24e6:	80 83       	st	Z, r24
	}
	else
	{

	}
}
    24e8:	0f 90       	pop	r0
    24ea:	0f 90       	pop	r0
    24ec:	cf 91       	pop	r28
    24ee:	df 91       	pop	r29
    24f0:	08 95       	ret

000024f2 <Timer1_EnableOVFInterrupt>:

void Timer1_EnableOVFInterrupt()
{
    24f2:	df 93       	push	r29
    24f4:	cf 93       	push	r28
    24f6:	cd b7       	in	r28, 0x3d	; 61
    24f8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, TOIE1);
    24fa:	a9 e5       	ldi	r26, 0x59	; 89
    24fc:	b0 e0       	ldi	r27, 0x00	; 0
    24fe:	e9 e5       	ldi	r30, 0x59	; 89
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	80 81       	ld	r24, Z
    2504:	84 60       	ori	r24, 0x04	; 4
    2506:	8c 93       	st	X, r24
}
    2508:	cf 91       	pop	r28
    250a:	df 91       	pop	r29
    250c:	08 95       	ret

0000250e <Timer1_DisableOVFInterrupt>:

void Timer1_DisableOVFInterrupt()
{
    250e:	df 93       	push	r29
    2510:	cf 93       	push	r28
    2512:	cd b7       	in	r28, 0x3d	; 61
    2514:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TOIE1);
    2516:	a9 e5       	ldi	r26, 0x59	; 89
    2518:	b0 e0       	ldi	r27, 0x00	; 0
    251a:	e9 e5       	ldi	r30, 0x59	; 89
    251c:	f0 e0       	ldi	r31, 0x00	; 0
    251e:	80 81       	ld	r24, Z
    2520:	8b 7f       	andi	r24, 0xFB	; 251
    2522:	8c 93       	st	X, r24
}
    2524:	cf 91       	pop	r28
    2526:	df 91       	pop	r29
    2528:	08 95       	ret

0000252a <Timer1_OCAEnableInterrupt>:

void Timer1_OCAEnableInterrupt()
{
    252a:	df 93       	push	r29
    252c:	cf 93       	push	r28
    252e:	cd b7       	in	r28, 0x3d	; 61
    2530:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, OCIE1A);
    2532:	a9 e5       	ldi	r26, 0x59	; 89
    2534:	b0 e0       	ldi	r27, 0x00	; 0
    2536:	e9 e5       	ldi	r30, 0x59	; 89
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	80 81       	ld	r24, Z
    253c:	80 61       	ori	r24, 0x10	; 16
    253e:	8c 93       	st	X, r24
}
    2540:	cf 91       	pop	r28
    2542:	df 91       	pop	r29
    2544:	08 95       	ret

00002546 <Timer1_OCADisableInterrupt>:

void Timer1_OCADisableInterrupt()
{
    2546:	df 93       	push	r29
    2548:	cf 93       	push	r28
    254a:	cd b7       	in	r28, 0x3d	; 61
    254c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, OCIE1A);
    254e:	a9 e5       	ldi	r26, 0x59	; 89
    2550:	b0 e0       	ldi	r27, 0x00	; 0
    2552:	e9 e5       	ldi	r30, 0x59	; 89
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	80 81       	ld	r24, Z
    2558:	8f 7e       	andi	r24, 0xEF	; 239
    255a:	8c 93       	st	X, r24

}
    255c:	cf 91       	pop	r28
    255e:	df 91       	pop	r29
    2560:	08 95       	ret

00002562 <Timer1_OCBEnableInterrupt>:

void Timer1_OCBEnableInterrupt()
{
    2562:	df 93       	push	r29
    2564:	cf 93       	push	r28
    2566:	cd b7       	in	r28, 0x3d	; 61
    2568:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, OCIE1B);
    256a:	a9 e5       	ldi	r26, 0x59	; 89
    256c:	b0 e0       	ldi	r27, 0x00	; 0
    256e:	e9 e5       	ldi	r30, 0x59	; 89
    2570:	f0 e0       	ldi	r31, 0x00	; 0
    2572:	80 81       	ld	r24, Z
    2574:	88 60       	ori	r24, 0x08	; 8
    2576:	8c 93       	st	X, r24
}
    2578:	cf 91       	pop	r28
    257a:	df 91       	pop	r29
    257c:	08 95       	ret

0000257e <Timer1_OCBDisableInterrupt>:

void Timer1_OCBDisableInterrupt()
{
    257e:	df 93       	push	r29
    2580:	cf 93       	push	r28
    2582:	cd b7       	in	r28, 0x3d	; 61
    2584:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, OCIE1B);
    2586:	a9 e5       	ldi	r26, 0x59	; 89
    2588:	b0 e0       	ldi	r27, 0x00	; 0
    258a:	e9 e5       	ldi	r30, 0x59	; 89
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	80 81       	ld	r24, Z
    2590:	87 7f       	andi	r24, 0xF7	; 247
    2592:	8c 93       	st	X, r24

}
    2594:	cf 91       	pop	r28
    2596:	df 91       	pop	r29
    2598:	08 95       	ret

0000259a <Timer1_CaptureEventEnableInterrupt>:

void Timer1_CaptureEventEnableInterrupt()
{
    259a:	df 93       	push	r29
    259c:	cf 93       	push	r28
    259e:	cd b7       	in	r28, 0x3d	; 61
    25a0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, TICIE1);
    25a2:	a9 e5       	ldi	r26, 0x59	; 89
    25a4:	b0 e0       	ldi	r27, 0x00	; 0
    25a6:	e9 e5       	ldi	r30, 0x59	; 89
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	80 81       	ld	r24, Z
    25ac:	80 62       	ori	r24, 0x20	; 32
    25ae:	8c 93       	st	X, r24

}
    25b0:	cf 91       	pop	r28
    25b2:	df 91       	pop	r29
    25b4:	08 95       	ret

000025b6 <Timer1_CaptureEventDisableInterrupt>:

void Timer1_CaptureEventDisableInterrupt()
{
    25b6:	df 93       	push	r29
    25b8:	cf 93       	push	r28
    25ba:	cd b7       	in	r28, 0x3d	; 61
    25bc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, TICIE1);
    25be:	a9 e5       	ldi	r26, 0x59	; 89
    25c0:	b0 e0       	ldi	r27, 0x00	; 0
    25c2:	e9 e5       	ldi	r30, 0x59	; 89
    25c4:	f0 e0       	ldi	r31, 0x00	; 0
    25c6:	80 81       	ld	r24, Z
    25c8:	8f 7d       	andi	r24, 0xDF	; 223
    25ca:	8c 93       	st	X, r24

}
    25cc:	cf 91       	pop	r28
    25ce:	df 91       	pop	r29
    25d0:	08 95       	ret

000025d2 <Timer1_OVFPollingOnFlag>:

void Timer1_OVFPollingOnFlag()
{
    25d2:	df 93       	push	r29
    25d4:	cf 93       	push	r28
    25d6:	cd b7       	in	r28, 0x3d	; 61
    25d8:	de b7       	in	r29, 0x3e	; 62
	/* Wait until flag is fired */
	while ( !GET_BIT(TIFR, TOV1) );
    25da:	e8 e5       	ldi	r30, 0x58	; 88
    25dc:	f0 e0       	ldi	r31, 0x00	; 0
    25de:	80 81       	ld	r24, Z
    25e0:	86 95       	lsr	r24
    25e2:	86 95       	lsr	r24
    25e4:	88 2f       	mov	r24, r24
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	81 70       	andi	r24, 0x01	; 1
    25ea:	90 70       	andi	r25, 0x00	; 0
    25ec:	00 97       	sbiw	r24, 0x00	; 0
    25ee:	a9 f3       	breq	.-22     	; 0x25da <Timer1_OVFPollingOnFlag+0x8>
	/* Clear flag */
	SET_BIT(TIFR, TOV1);
    25f0:	a8 e5       	ldi	r26, 0x58	; 88
    25f2:	b0 e0       	ldi	r27, 0x00	; 0
    25f4:	e8 e5       	ldi	r30, 0x58	; 88
    25f6:	f0 e0       	ldi	r31, 0x00	; 0
    25f8:	80 81       	ld	r24, Z
    25fa:	84 60       	ori	r24, 0x04	; 4
    25fc:	8c 93       	st	X, r24
}
    25fe:	cf 91       	pop	r28
    2600:	df 91       	pop	r29
    2602:	08 95       	ret

00002604 <Timer1_OCAPollingOnFlag>:

void Timer1_OCAPollingOnFlag()
{
    2604:	df 93       	push	r29
    2606:	cf 93       	push	r28
    2608:	cd b7       	in	r28, 0x3d	; 61
    260a:	de b7       	in	r29, 0x3e	; 62
	/* Wait until flag is fired */
	while ( !GET_BIT(TIFR, OCF1A) );
    260c:	e8 e5       	ldi	r30, 0x58	; 88
    260e:	f0 e0       	ldi	r31, 0x00	; 0
    2610:	80 81       	ld	r24, Z
    2612:	82 95       	swap	r24
    2614:	8f 70       	andi	r24, 0x0F	; 15
    2616:	88 2f       	mov	r24, r24
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	81 70       	andi	r24, 0x01	; 1
    261c:	90 70       	andi	r25, 0x00	; 0
    261e:	00 97       	sbiw	r24, 0x00	; 0
    2620:	a9 f3       	breq	.-22     	; 0x260c <Timer1_OCAPollingOnFlag+0x8>
	/* Clear flag */
	SET_BIT(TIFR, OCF1A);
    2622:	a8 e5       	ldi	r26, 0x58	; 88
    2624:	b0 e0       	ldi	r27, 0x00	; 0
    2626:	e8 e5       	ldi	r30, 0x58	; 88
    2628:	f0 e0       	ldi	r31, 0x00	; 0
    262a:	80 81       	ld	r24, Z
    262c:	80 61       	ori	r24, 0x10	; 16
    262e:	8c 93       	st	X, r24

}
    2630:	cf 91       	pop	r28
    2632:	df 91       	pop	r29
    2634:	08 95       	ret

00002636 <Timer1_OCBPollingOnFlag>:

void Timer1_OCBPollingOnFlag()
{
    2636:	df 93       	push	r29
    2638:	cf 93       	push	r28
    263a:	cd b7       	in	r28, 0x3d	; 61
    263c:	de b7       	in	r29, 0x3e	; 62
	/* Wait until flag is fired */
	while ( !GET_BIT(TIFR, OCF1B) );
    263e:	e8 e5       	ldi	r30, 0x58	; 88
    2640:	f0 e0       	ldi	r31, 0x00	; 0
    2642:	80 81       	ld	r24, Z
    2644:	86 95       	lsr	r24
    2646:	86 95       	lsr	r24
    2648:	86 95       	lsr	r24
    264a:	88 2f       	mov	r24, r24
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	81 70       	andi	r24, 0x01	; 1
    2650:	90 70       	andi	r25, 0x00	; 0
    2652:	00 97       	sbiw	r24, 0x00	; 0
    2654:	a1 f3       	breq	.-24     	; 0x263e <Timer1_OCBPollingOnFlag+0x8>
	/* Clear flag */
	SET_BIT(TIFR, OCF1B);
    2656:	a8 e5       	ldi	r26, 0x58	; 88
    2658:	b0 e0       	ldi	r27, 0x00	; 0
    265a:	e8 e5       	ldi	r30, 0x58	; 88
    265c:	f0 e0       	ldi	r31, 0x00	; 0
    265e:	80 81       	ld	r24, Z
    2660:	88 60       	ori	r24, 0x08	; 8
    2662:	8c 93       	st	X, r24

}
    2664:	cf 91       	pop	r28
    2666:	df 91       	pop	r29
    2668:	08 95       	ret

0000266a <Timer1_CaptureEventPollingOnFlag>:

void Timer1_CaptureEventPollingOnFlag()
{
    266a:	df 93       	push	r29
    266c:	cf 93       	push	r28
    266e:	cd b7       	in	r28, 0x3d	; 61
    2670:	de b7       	in	r29, 0x3e	; 62
	/* Wait until flag is fired */
	while ( !GET_BIT(TIFR, ICF1) );
    2672:	e8 e5       	ldi	r30, 0x58	; 88
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	80 81       	ld	r24, Z
    2678:	82 95       	swap	r24
    267a:	86 95       	lsr	r24
    267c:	87 70       	andi	r24, 0x07	; 7
    267e:	88 2f       	mov	r24, r24
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	81 70       	andi	r24, 0x01	; 1
    2684:	90 70       	andi	r25, 0x00	; 0
    2686:	00 97       	sbiw	r24, 0x00	; 0
    2688:	a1 f3       	breq	.-24     	; 0x2672 <Timer1_CaptureEventPollingOnFlag+0x8>
	/* Clear flag */
	SET_BIT(TIFR, ICF1);
    268a:	a8 e5       	ldi	r26, 0x58	; 88
    268c:	b0 e0       	ldi	r27, 0x00	; 0
    268e:	e8 e5       	ldi	r30, 0x58	; 88
    2690:	f0 e0       	ldi	r31, 0x00	; 0
    2692:	80 81       	ld	r24, Z
    2694:	80 62       	ori	r24, 0x20	; 32
    2696:	8c 93       	st	X, r24

}
    2698:	cf 91       	pop	r28
    269a:	df 91       	pop	r29
    269c:	08 95       	ret

0000269e <Timer1_OVFSetCallBack>:

void Timer1_OVFSetCallBack( void (*ptrToFun)(void) )
{
    269e:	df 93       	push	r29
    26a0:	cf 93       	push	r28
    26a2:	00 d0       	rcall	.+0      	; 0x26a4 <Timer1_OVFSetCallBack+0x6>
    26a4:	cd b7       	in	r28, 0x3d	; 61
    26a6:	de b7       	in	r29, 0x3e	; 62
    26a8:	9a 83       	std	Y+2, r25	; 0x02
    26aa:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFun != NULL)
    26ac:	89 81       	ldd	r24, Y+1	; 0x01
    26ae:	9a 81       	ldd	r25, Y+2	; 0x02
    26b0:	00 97       	sbiw	r24, 0x00	; 0
    26b2:	31 f0       	breq	.+12     	; 0x26c0 <Timer1_OVFSetCallBack+0x22>
	{
		GLOB_VidTimer1OVFPtrCallBack = ptrToFun;
    26b4:	89 81       	ldd	r24, Y+1	; 0x01
    26b6:	9a 81       	ldd	r25, Y+2	; 0x02
    26b8:	90 93 ba 04 	sts	0x04BA, r25
    26bc:	80 93 b9 04 	sts	0x04B9, r24

	}
	else
	{
	}
}
    26c0:	0f 90       	pop	r0
    26c2:	0f 90       	pop	r0
    26c4:	cf 91       	pop	r28
    26c6:	df 91       	pop	r29
    26c8:	08 95       	ret

000026ca <Timer1_OCASetCallBack>:

void Timer1_OCASetCallBack( void (*ptrToFun)(void) ){
    26ca:	df 93       	push	r29
    26cc:	cf 93       	push	r28
    26ce:	00 d0       	rcall	.+0      	; 0x26d0 <Timer1_OCASetCallBack+0x6>
    26d0:	cd b7       	in	r28, 0x3d	; 61
    26d2:	de b7       	in	r29, 0x3e	; 62
    26d4:	9a 83       	std	Y+2, r25	; 0x02
    26d6:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFun != NULL)
    26d8:	89 81       	ldd	r24, Y+1	; 0x01
    26da:	9a 81       	ldd	r25, Y+2	; 0x02
    26dc:	00 97       	sbiw	r24, 0x00	; 0
    26de:	31 f0       	breq	.+12     	; 0x26ec <Timer1_OCASetCallBack+0x22>
	{
		GLOB_VidTimer1OCAPtrCallBack = ptrToFun;
    26e0:	89 81       	ldd	r24, Y+1	; 0x01
    26e2:	9a 81       	ldd	r25, Y+2	; 0x02
    26e4:	90 93 bc 04 	sts	0x04BC, r25
    26e8:	80 93 bb 04 	sts	0x04BB, r24
	}
	else
	{

	}
}
    26ec:	0f 90       	pop	r0
    26ee:	0f 90       	pop	r0
    26f0:	cf 91       	pop	r28
    26f2:	df 91       	pop	r29
    26f4:	08 95       	ret

000026f6 <Timer1_OCBSetCallBack>:

void Timer1_OCBSetCallBack( void (*ptrToFun)(void) ){
    26f6:	df 93       	push	r29
    26f8:	cf 93       	push	r28
    26fa:	00 d0       	rcall	.+0      	; 0x26fc <Timer1_OCBSetCallBack+0x6>
    26fc:	cd b7       	in	r28, 0x3d	; 61
    26fe:	de b7       	in	r29, 0x3e	; 62
    2700:	9a 83       	std	Y+2, r25	; 0x02
    2702:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFun != NULL)
    2704:	89 81       	ldd	r24, Y+1	; 0x01
    2706:	9a 81       	ldd	r25, Y+2	; 0x02
    2708:	00 97       	sbiw	r24, 0x00	; 0
    270a:	31 f0       	breq	.+12     	; 0x2718 <Timer1_OCBSetCallBack+0x22>
	{
		GLOB_VidTimer1OCBPtrCallBack = ptrToFun;
    270c:	89 81       	ldd	r24, Y+1	; 0x01
    270e:	9a 81       	ldd	r25, Y+2	; 0x02
    2710:	90 93 be 04 	sts	0x04BE, r25
    2714:	80 93 bd 04 	sts	0x04BD, r24

	}
	else
	{
	}
}
    2718:	0f 90       	pop	r0
    271a:	0f 90       	pop	r0
    271c:	cf 91       	pop	r28
    271e:	df 91       	pop	r29
    2720:	08 95       	ret

00002722 <Timer1_CaptureEventSetCallBack>:

void Timer1_CaptureEventSetCallBack( void (*ptrToFun)(void) )
{
    2722:	df 93       	push	r29
    2724:	cf 93       	push	r28
    2726:	00 d0       	rcall	.+0      	; 0x2728 <Timer1_CaptureEventSetCallBack+0x6>
    2728:	cd b7       	in	r28, 0x3d	; 61
    272a:	de b7       	in	r29, 0x3e	; 62
    272c:	9a 83       	std	Y+2, r25	; 0x02
    272e:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFun != NULL)
    2730:	89 81       	ldd	r24, Y+1	; 0x01
    2732:	9a 81       	ldd	r25, Y+2	; 0x02
    2734:	00 97       	sbiw	r24, 0x00	; 0
    2736:	31 f0       	breq	.+12     	; 0x2744 <Timer1_CaptureEventSetCallBack+0x22>
	{
		GLOB_VidTimer1CaptureEventPtrCallBack = ptrToFun;
    2738:	89 81       	ldd	r24, Y+1	; 0x01
    273a:	9a 81       	ldd	r25, Y+2	; 0x02
    273c:	90 93 c0 04 	sts	0x04C0, r25
    2740:	80 93 bf 04 	sts	0x04BF, r24
	}
	else
	{

	}
}
    2744:	0f 90       	pop	r0
    2746:	0f 90       	pop	r0
    2748:	cf 91       	pop	r28
    274a:	df 91       	pop	r29
    274c:	08 95       	ret

0000274e <Timer1_ResetPrescaler>:

void Timer1_ResetPrescaler(void)
{
    274e:	df 93       	push	r29
    2750:	cf 93       	push	r28
    2752:	cd b7       	in	r28, 0x3d	; 61
    2754:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SFIOR, PSR10);
    2756:	a0 e5       	ldi	r26, 0x50	; 80
    2758:	b0 e0       	ldi	r27, 0x00	; 0
    275a:	e0 e5       	ldi	r30, 0x50	; 80
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	80 81       	ld	r24, Z
    2760:	81 60       	ori	r24, 0x01	; 1
    2762:	8c 93       	st	X, r24

}
    2764:	cf 91       	pop	r28
    2766:	df 91       	pop	r29
    2768:	08 95       	ret

0000276a <MPWM1Init>:
void MPWM1Init(){
    276a:	df 93       	push	r29
    276c:	cf 93       	push	r28
    276e:	cd b7       	in	r28, 0x3d	; 61
    2770:	de b7       	in	r29, 0x3e	; 62
	MDIO_Set_PIN_DIR(MDIO_PORTD,PWM1PIN,PIN_OUTPUT);
    2772:	83 e0       	ldi	r24, 0x03	; 3
    2774:	65 e0       	ldi	r22, 0x05	; 5
    2776:	41 e0       	ldi	r20, 0x01	; 1
    2778:	0e 94 20 18 	call	0x3040	; 0x3040 <MDIO_Set_PIN_DIR>
	SET_BIT(TCCR1A,COM1A1);
    277c:	af e4       	ldi	r26, 0x4F	; 79
    277e:	b0 e0       	ldi	r27, 0x00	; 0
    2780:	ef e4       	ldi	r30, 0x4F	; 79
    2782:	f0 e0       	ldi	r31, 0x00	; 0
    2784:	80 81       	ld	r24, Z
    2786:	80 68       	ori	r24, 0x80	; 128
    2788:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,COM1A0);
    278a:	af e4       	ldi	r26, 0x4F	; 79
    278c:	b0 e0       	ldi	r27, 0x00	; 0
    278e:	ef e4       	ldi	r30, 0x4F	; 79
    2790:	f0 e0       	ldi	r31, 0x00	; 0
    2792:	80 81       	ld	r24, Z
    2794:	8f 7b       	andi	r24, 0xBF	; 191
    2796:	8c 93       	st	X, r24
	Timer1_Init();
    2798:	0e 94 d7 10 	call	0x21ae	; 0x21ae <Timer1_Init>
}
    279c:	cf 91       	pop	r28
    279e:	df 91       	pop	r29
    27a0:	08 95       	ret

000027a2 <MPWM1SetDutyCycle>:
void MPWM1SetDutyCycle(f32 Local_f32DesiredDutyCycle){
    27a2:	df 93       	push	r29
    27a4:	cf 93       	push	r28
    27a6:	00 d0       	rcall	.+0      	; 0x27a8 <MPWM1SetDutyCycle+0x6>
    27a8:	00 d0       	rcall	.+0      	; 0x27aa <MPWM1SetDutyCycle+0x8>
    27aa:	cd b7       	in	r28, 0x3d	; 61
    27ac:	de b7       	in	r29, 0x3e	; 62
    27ae:	69 83       	std	Y+1, r22	; 0x01
    27b0:	7a 83       	std	Y+2, r23	; 0x02
    27b2:	8b 83       	std	Y+3, r24	; 0x03
    27b4:	9c 83       	std	Y+4, r25	; 0x04
Timer1_OC1ASetDutyCycle(Local_f32DesiredDutyCycle);
    27b6:	89 81       	ldd	r24, Y+1	; 0x01
    27b8:	9a 81       	ldd	r25, Y+2	; 0x02
    27ba:	ab 81       	ldd	r26, Y+3	; 0x03
    27bc:	bc 81       	ldd	r27, Y+4	; 0x04
    27be:	bc 01       	movw	r22, r24
    27c0:	cd 01       	movw	r24, r26
    27c2:	0e 94 78 11 	call	0x22f0	; 0x22f0 <Timer1_OC1ASetDutyCycle>
}
    27c6:	0f 90       	pop	r0
    27c8:	0f 90       	pop	r0
    27ca:	0f 90       	pop	r0
    27cc:	0f 90       	pop	r0
    27ce:	cf 91       	pop	r28
    27d0:	df 91       	pop	r29
    27d2:	08 95       	ret

000027d4 <MPWM1SetFrequency>:

void MPWM1SetFrequency(u16 Local_u16DesiredFrequency)
{
    27d4:	0f 93       	push	r16
    27d6:	1f 93       	push	r17
    27d8:	df 93       	push	r29
    27da:	cf 93       	push	r28
    27dc:	00 d0       	rcall	.+0      	; 0x27de <MPWM1SetFrequency+0xa>
    27de:	cd b7       	in	r28, 0x3d	; 61
    27e0:	de b7       	in	r29, 0x3e	; 62
    27e2:	9a 83       	std	Y+2, r25	; 0x02
    27e4:	89 83       	std	Y+1, r24	; 0x01

	ICR1 = (CRYSTALFREQUENCY) / (Local_u16DesiredFrequency * CLOCK_SELECT);
    27e6:	06 e4       	ldi	r16, 0x46	; 70
    27e8:	10 e0       	ldi	r17, 0x00	; 0
    27ea:	89 81       	ldd	r24, Y+1	; 0x01
    27ec:	9a 81       	ldd	r25, Y+2	; 0x02
    27ee:	00 24       	eor	r0, r0
    27f0:	96 95       	lsr	r25
    27f2:	87 95       	ror	r24
    27f4:	07 94       	ror	r0
    27f6:	96 95       	lsr	r25
    27f8:	87 95       	ror	r24
    27fa:	07 94       	ror	r0
    27fc:	98 2f       	mov	r25, r24
    27fe:	80 2d       	mov	r24, r0
    2800:	9c 01       	movw	r18, r24
    2802:	40 e0       	ldi	r20, 0x00	; 0
    2804:	50 e0       	ldi	r21, 0x00	; 0
    2806:	80 e0       	ldi	r24, 0x00	; 0
    2808:	94 e2       	ldi	r25, 0x24	; 36
    280a:	a4 ef       	ldi	r26, 0xF4	; 244
    280c:	b0 e0       	ldi	r27, 0x00	; 0
    280e:	bc 01       	movw	r22, r24
    2810:	cd 01       	movw	r24, r26
    2812:	0e 94 0c 55 	call	0xaa18	; 0xaa18 <__divmodsi4>
    2816:	da 01       	movw	r26, r20
    2818:	c9 01       	movw	r24, r18
    281a:	f8 01       	movw	r30, r16
    281c:	91 83       	std	Z+1, r25	; 0x01
    281e:	80 83       	st	Z, r24
}
    2820:	0f 90       	pop	r0
    2822:	0f 90       	pop	r0
    2824:	cf 91       	pop	r28
    2826:	df 91       	pop	r29
    2828:	1f 91       	pop	r17
    282a:	0f 91       	pop	r16
    282c:	08 95       	ret

0000282e <MPWM1Start>:
void MPWM1Start()
{
    282e:	df 93       	push	r29
    2830:	cf 93       	push	r28
    2832:	cd b7       	in	r28, 0x3d	; 61
    2834:	de b7       	in	r29, 0x3e	; 62
	#if		CLOCK_SELECT == PRESCALER_64
	CLR_BIT(TCCR1B,CS12);
    2836:	ae e4       	ldi	r26, 0x4E	; 78
    2838:	b0 e0       	ldi	r27, 0x00	; 0
    283a:	ee e4       	ldi	r30, 0x4E	; 78
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	80 81       	ld	r24, Z
    2840:	8b 7f       	andi	r24, 0xFB	; 251
    2842:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,CS11);
    2844:	ae e4       	ldi	r26, 0x4E	; 78
    2846:	b0 e0       	ldi	r27, 0x00	; 0
    2848:	ee e4       	ldi	r30, 0x4E	; 78
    284a:	f0 e0       	ldi	r31, 0x00	; 0
    284c:	80 81       	ld	r24, Z
    284e:	82 60       	ori	r24, 0x02	; 2
    2850:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,CS10);
    2852:	ae e4       	ldi	r26, 0x4E	; 78
    2854:	b0 e0       	ldi	r27, 0x00	; 0
    2856:	ee e4       	ldi	r30, 0x4E	; 78
    2858:	f0 e0       	ldi	r31, 0x00	; 0
    285a:	80 81       	ld	r24, Z
    285c:	81 60       	ori	r24, 0x01	; 1
    285e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS11);
	SET_BIT(TCCR1B,CS10);

	#endif

}
    2860:	cf 91       	pop	r28
    2862:	df 91       	pop	r29
    2864:	08 95       	ret

00002866 <MPWM1Stop>:
void MPWM1Stop()
{
    2866:	df 93       	push	r29
    2868:	cf 93       	push	r28
    286a:	cd b7       	in	r28, 0x3d	; 61
    286c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B,CS12);
    286e:	ae e4       	ldi	r26, 0x4E	; 78
    2870:	b0 e0       	ldi	r27, 0x00	; 0
    2872:	ee e4       	ldi	r30, 0x4E	; 78
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	80 81       	ld	r24, Z
    2878:	8b 7f       	andi	r24, 0xFB	; 251
    287a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS11);
    287c:	ae e4       	ldi	r26, 0x4E	; 78
    287e:	b0 e0       	ldi	r27, 0x00	; 0
    2880:	ee e4       	ldi	r30, 0x4E	; 78
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	80 81       	ld	r24, Z
    2886:	8d 7f       	andi	r24, 0xFD	; 253
    2888:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS10);
    288a:	ae e4       	ldi	r26, 0x4E	; 78
    288c:	b0 e0       	ldi	r27, 0x00	; 0
    288e:	ee e4       	ldi	r30, 0x4E	; 78
    2890:	f0 e0       	ldi	r31, 0x00	; 0
    2892:	80 81       	ld	r24, Z
    2894:	8e 7f       	andi	r24, 0xFE	; 254
    2896:	8c 93       	st	X, r24
}
    2898:	cf 91       	pop	r28
    289a:	df 91       	pop	r29
    289c:	08 95       	ret

0000289e <__vector_9>:

void __vector_9(void)
{
    289e:	1f 92       	push	r1
    28a0:	0f 92       	push	r0
    28a2:	0f b6       	in	r0, 0x3f	; 63
    28a4:	0f 92       	push	r0
    28a6:	11 24       	eor	r1, r1
    28a8:	2f 93       	push	r18
    28aa:	3f 93       	push	r19
    28ac:	4f 93       	push	r20
    28ae:	5f 93       	push	r21
    28b0:	6f 93       	push	r22
    28b2:	7f 93       	push	r23
    28b4:	8f 93       	push	r24
    28b6:	9f 93       	push	r25
    28b8:	af 93       	push	r26
    28ba:	bf 93       	push	r27
    28bc:	ef 93       	push	r30
    28be:	ff 93       	push	r31
    28c0:	df 93       	push	r29
    28c2:	cf 93       	push	r28
    28c4:	cd b7       	in	r28, 0x3d	; 61
    28c6:	de b7       	in	r29, 0x3e	; 62
	if (GLOB_VidTimer1OVFPtrCallBack != NULL)
    28c8:	80 91 b9 04 	lds	r24, 0x04B9
    28cc:	90 91 ba 04 	lds	r25, 0x04BA
    28d0:	00 97       	sbiw	r24, 0x00	; 0
    28d2:	29 f0       	breq	.+10     	; 0x28de <__vector_9+0x40>
	{
		(*GLOB_VidTimer1OVFPtrCallBack)();
    28d4:	e0 91 b9 04 	lds	r30, 0x04B9
    28d8:	f0 91 ba 04 	lds	r31, 0x04BA
    28dc:	09 95       	icall
	}
}
    28de:	cf 91       	pop	r28
    28e0:	df 91       	pop	r29
    28e2:	ff 91       	pop	r31
    28e4:	ef 91       	pop	r30
    28e6:	bf 91       	pop	r27
    28e8:	af 91       	pop	r26
    28ea:	9f 91       	pop	r25
    28ec:	8f 91       	pop	r24
    28ee:	7f 91       	pop	r23
    28f0:	6f 91       	pop	r22
    28f2:	5f 91       	pop	r21
    28f4:	4f 91       	pop	r20
    28f6:	3f 91       	pop	r19
    28f8:	2f 91       	pop	r18
    28fa:	0f 90       	pop	r0
    28fc:	0f be       	out	0x3f, r0	; 63
    28fe:	0f 90       	pop	r0
    2900:	1f 90       	pop	r1
    2902:	18 95       	reti

00002904 <__vector_8>:

void __vector_8(void)
{
    2904:	1f 92       	push	r1
    2906:	0f 92       	push	r0
    2908:	0f b6       	in	r0, 0x3f	; 63
    290a:	0f 92       	push	r0
    290c:	11 24       	eor	r1, r1
    290e:	2f 93       	push	r18
    2910:	3f 93       	push	r19
    2912:	4f 93       	push	r20
    2914:	5f 93       	push	r21
    2916:	6f 93       	push	r22
    2918:	7f 93       	push	r23
    291a:	8f 93       	push	r24
    291c:	9f 93       	push	r25
    291e:	af 93       	push	r26
    2920:	bf 93       	push	r27
    2922:	ef 93       	push	r30
    2924:	ff 93       	push	r31
    2926:	df 93       	push	r29
    2928:	cf 93       	push	r28
    292a:	cd b7       	in	r28, 0x3d	; 61
    292c:	de b7       	in	r29, 0x3e	; 62
	if (GLOB_VidTimer1OCBPtrCallBack != NULL)
    292e:	80 91 bd 04 	lds	r24, 0x04BD
    2932:	90 91 be 04 	lds	r25, 0x04BE
    2936:	00 97       	sbiw	r24, 0x00	; 0
    2938:	29 f0       	breq	.+10     	; 0x2944 <__vector_8+0x40>
	{
		(*GLOB_VidTimer1OCBPtrCallBack)();
    293a:	e0 91 bd 04 	lds	r30, 0x04BD
    293e:	f0 91 be 04 	lds	r31, 0x04BE
    2942:	09 95       	icall
	}
}
    2944:	cf 91       	pop	r28
    2946:	df 91       	pop	r29
    2948:	ff 91       	pop	r31
    294a:	ef 91       	pop	r30
    294c:	bf 91       	pop	r27
    294e:	af 91       	pop	r26
    2950:	9f 91       	pop	r25
    2952:	8f 91       	pop	r24
    2954:	7f 91       	pop	r23
    2956:	6f 91       	pop	r22
    2958:	5f 91       	pop	r21
    295a:	4f 91       	pop	r20
    295c:	3f 91       	pop	r19
    295e:	2f 91       	pop	r18
    2960:	0f 90       	pop	r0
    2962:	0f be       	out	0x3f, r0	; 63
    2964:	0f 90       	pop	r0
    2966:	1f 90       	pop	r1
    2968:	18 95       	reti

0000296a <__vector_7>:

void __vector_7(void)
{
    296a:	1f 92       	push	r1
    296c:	0f 92       	push	r0
    296e:	0f b6       	in	r0, 0x3f	; 63
    2970:	0f 92       	push	r0
    2972:	11 24       	eor	r1, r1
    2974:	2f 93       	push	r18
    2976:	3f 93       	push	r19
    2978:	4f 93       	push	r20
    297a:	5f 93       	push	r21
    297c:	6f 93       	push	r22
    297e:	7f 93       	push	r23
    2980:	8f 93       	push	r24
    2982:	9f 93       	push	r25
    2984:	af 93       	push	r26
    2986:	bf 93       	push	r27
    2988:	ef 93       	push	r30
    298a:	ff 93       	push	r31
    298c:	df 93       	push	r29
    298e:	cf 93       	push	r28
    2990:	cd b7       	in	r28, 0x3d	; 61
    2992:	de b7       	in	r29, 0x3e	; 62
	if (GLOB_VidTimer1OCAPtrCallBack != NULL)
    2994:	80 91 bb 04 	lds	r24, 0x04BB
    2998:	90 91 bc 04 	lds	r25, 0x04BC
    299c:	00 97       	sbiw	r24, 0x00	; 0
    299e:	29 f0       	breq	.+10     	; 0x29aa <__vector_7+0x40>
	{
		(*GLOB_VidTimer1OCAPtrCallBack)();
    29a0:	e0 91 bb 04 	lds	r30, 0x04BB
    29a4:	f0 91 bc 04 	lds	r31, 0x04BC
    29a8:	09 95       	icall
	}
}
    29aa:	cf 91       	pop	r28
    29ac:	df 91       	pop	r29
    29ae:	ff 91       	pop	r31
    29b0:	ef 91       	pop	r30
    29b2:	bf 91       	pop	r27
    29b4:	af 91       	pop	r26
    29b6:	9f 91       	pop	r25
    29b8:	8f 91       	pop	r24
    29ba:	7f 91       	pop	r23
    29bc:	6f 91       	pop	r22
    29be:	5f 91       	pop	r21
    29c0:	4f 91       	pop	r20
    29c2:	3f 91       	pop	r19
    29c4:	2f 91       	pop	r18
    29c6:	0f 90       	pop	r0
    29c8:	0f be       	out	0x3f, r0	; 63
    29ca:	0f 90       	pop	r0
    29cc:	1f 90       	pop	r1
    29ce:	18 95       	reti

000029d0 <__vector_6>:

void __vector_6(void)
{
    29d0:	1f 92       	push	r1
    29d2:	0f 92       	push	r0
    29d4:	0f b6       	in	r0, 0x3f	; 63
    29d6:	0f 92       	push	r0
    29d8:	11 24       	eor	r1, r1
    29da:	2f 93       	push	r18
    29dc:	3f 93       	push	r19
    29de:	4f 93       	push	r20
    29e0:	5f 93       	push	r21
    29e2:	6f 93       	push	r22
    29e4:	7f 93       	push	r23
    29e6:	8f 93       	push	r24
    29e8:	9f 93       	push	r25
    29ea:	af 93       	push	r26
    29ec:	bf 93       	push	r27
    29ee:	ef 93       	push	r30
    29f0:	ff 93       	push	r31
    29f2:	df 93       	push	r29
    29f4:	cf 93       	push	r28
    29f6:	cd b7       	in	r28, 0x3d	; 61
    29f8:	de b7       	in	r29, 0x3e	; 62
	if (GLOB_VidTimer1CaptureEventPtrCallBack != NULL)
    29fa:	80 91 bf 04 	lds	r24, 0x04BF
    29fe:	90 91 c0 04 	lds	r25, 0x04C0
    2a02:	00 97       	sbiw	r24, 0x00	; 0
    2a04:	29 f0       	breq	.+10     	; 0x2a10 <__vector_6+0x40>
	{
		(*GLOB_VidTimer1CaptureEventPtrCallBack)();
    2a06:	e0 91 bf 04 	lds	r30, 0x04BF
    2a0a:	f0 91 c0 04 	lds	r31, 0x04C0
    2a0e:	09 95       	icall
	}
}
    2a10:	cf 91       	pop	r28
    2a12:	df 91       	pop	r29
    2a14:	ff 91       	pop	r31
    2a16:	ef 91       	pop	r30
    2a18:	bf 91       	pop	r27
    2a1a:	af 91       	pop	r26
    2a1c:	9f 91       	pop	r25
    2a1e:	8f 91       	pop	r24
    2a20:	7f 91       	pop	r23
    2a22:	6f 91       	pop	r22
    2a24:	5f 91       	pop	r21
    2a26:	4f 91       	pop	r20
    2a28:	3f 91       	pop	r19
    2a2a:	2f 91       	pop	r18
    2a2c:	0f 90       	pop	r0
    2a2e:	0f be       	out	0x3f, r0	; 63
    2a30:	0f 90       	pop	r0
    2a32:	1f 90       	pop	r1
    2a34:	18 95       	reti

00002a36 <MTIMER0_Init>:
 * 3-Set Interrupt State
 * 4-Set Prescalar
 */

void MTIMER0_Init()
{
    2a36:	df 93       	push	r29
    2a38:	cf 93       	push	r28
    2a3a:	cd b7       	in	r28, 0x3d	; 61
    2a3c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,1);
#endif

	//============================FAST PWM MODE
#elif TIMER0_MODE==TIMER_FAST_PWM_MODE
	SET_BIT(TCCR0,3);
    2a3e:	a3 e5       	ldi	r26, 0x53	; 83
    2a40:	b0 e0       	ldi	r27, 0x00	; 0
    2a42:	e3 e5       	ldi	r30, 0x53	; 83
    2a44:	f0 e0       	ldi	r31, 0x00	; 0
    2a46:	80 81       	ld	r24, Z
    2a48:	88 60       	ori	r24, 0x08	; 8
    2a4a:	8c 93       	st	X, r24
	SET_BIT(TCCR0,6);
    2a4c:	a3 e5       	ldi	r26, 0x53	; 83
    2a4e:	b0 e0       	ldi	r27, 0x00	; 0
    2a50:	e3 e5       	ldi	r30, 0x53	; 83
    2a52:	f0 e0       	ldi	r31, 0x00	; 0
    2a54:	80 81       	ld	r24, Z
    2a56:	80 64       	ori	r24, 0x40	; 64
    2a58:	8c 93       	st	X, r24
		//Set PWM Wave on OC0
	#if TIMER0_FAST_PWM_WAVE_MODE==FAST_PWM_OC0_DISCONNECTED
		CLR_BIT(TCCR0,4);
		CLR_BIT(TCCR0,5);
	#elif TIMER0_FAST_PWM_WAVE_MODE==FAST_PWM_OC0_NON_INVERTING
		CLR_BIT(TCCR0,4);
    2a5a:	a3 e5       	ldi	r26, 0x53	; 83
    2a5c:	b0 e0       	ldi	r27, 0x00	; 0
    2a5e:	e3 e5       	ldi	r30, 0x53	; 83
    2a60:	f0 e0       	ldi	r31, 0x00	; 0
    2a62:	80 81       	ld	r24, Z
    2a64:	8f 7e       	andi	r24, 0xEF	; 239
    2a66:	8c 93       	st	X, r24
		SET_BIT(TCCR0,5);
    2a68:	a3 e5       	ldi	r26, 0x53	; 83
    2a6a:	b0 e0       	ldi	r27, 0x00	; 0
    2a6c:	e3 e5       	ldi	r30, 0x53	; 83
    2a6e:	f0 e0       	ldi	r31, 0x00	; 0
    2a70:	80 81       	ld	r24, Z
    2a72:	80 62       	ori	r24, 0x20	; 32
    2a74:	8c 93       	st	X, r24
#elif TIMER0_CLOCK_SOURCE==PRESCALAR_OVER_64
	SET_BIT(TCCR0,0);
	SET_BIT(TCCR0,1);
	CLR_BIT(TCCR0,2);
#elif TIMER0_CLOCK_SOURCE==PRESCALAR_OVER_256
	CLR_BIT(TCCR0,0);
    2a76:	a3 e5       	ldi	r26, 0x53	; 83
    2a78:	b0 e0       	ldi	r27, 0x00	; 0
    2a7a:	e3 e5       	ldi	r30, 0x53	; 83
    2a7c:	f0 e0       	ldi	r31, 0x00	; 0
    2a7e:	80 81       	ld	r24, Z
    2a80:	8e 7f       	andi	r24, 0xFE	; 254
    2a82:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,1);
    2a84:	a3 e5       	ldi	r26, 0x53	; 83
    2a86:	b0 e0       	ldi	r27, 0x00	; 0
    2a88:	e3 e5       	ldi	r30, 0x53	; 83
    2a8a:	f0 e0       	ldi	r31, 0x00	; 0
    2a8c:	80 81       	ld	r24, Z
    2a8e:	8d 7f       	andi	r24, 0xFD	; 253
    2a90:	8c 93       	st	X, r24
	SET_BIT(TCCR0,2);
    2a92:	a3 e5       	ldi	r26, 0x53	; 83
    2a94:	b0 e0       	ldi	r27, 0x00	; 0
    2a96:	e3 e5       	ldi	r30, 0x53	; 83
    2a98:	f0 e0       	ldi	r31, 0x00	; 0
    2a9a:	80 81       	ld	r24, Z
    2a9c:	84 60       	ori	r24, 0x04	; 4
    2a9e:	8c 93       	st	X, r24
	SET_BIT(TCCR0,0);
	SET_BIT(TCCR0,1);
	SET_BIT(TCCR0,2);
#endif

}
    2aa0:	cf 91       	pop	r28
    2aa2:	df 91       	pop	r29
    2aa4:	08 95       	ret

00002aa6 <MTIMER0_SetPreload>:

void MTIMER0_SetPreload(u8 Copy_u8Preload)
{
    2aa6:	df 93       	push	r29
    2aa8:	cf 93       	push	r28
    2aaa:	0f 92       	push	r0
    2aac:	cd b7       	in	r28, 0x3d	; 61
    2aae:	de b7       	in	r29, 0x3e	; 62
    2ab0:	89 83       	std	Y+1, r24	; 0x01
	TCCR0=Copy_u8Preload;
    2ab2:	e3 e5       	ldi	r30, 0x53	; 83
    2ab4:	f0 e0       	ldi	r31, 0x00	; 0
    2ab6:	89 81       	ldd	r24, Y+1	; 0x01
    2ab8:	80 83       	st	Z, r24

}
    2aba:	0f 90       	pop	r0
    2abc:	cf 91       	pop	r28
    2abe:	df 91       	pop	r29
    2ac0:	08 95       	ret

00002ac2 <MTIMER0_SetCTC>:

void MTIMER0_SetCTC(u8 Copy_u8OCR)
{
    2ac2:	df 93       	push	r29
    2ac4:	cf 93       	push	r28
    2ac6:	0f 92       	push	r0
    2ac8:	cd b7       	in	r28, 0x3d	; 61
    2aca:	de b7       	in	r29, 0x3e	; 62
    2acc:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Copy_u8OCR;
    2ace:	ec e5       	ldi	r30, 0x5C	; 92
    2ad0:	f0 e0       	ldi	r31, 0x00	; 0
    2ad2:	89 81       	ldd	r24, Y+1	; 0x01
    2ad4:	80 83       	st	Z, r24
}
    2ad6:	0f 90       	pop	r0
    2ad8:	cf 91       	pop	r28
    2ada:	df 91       	pop	r29
    2adc:	08 95       	ret

00002ade <MTIMER0_OVERFLOW_CALLBACK>:


void MTIMER0_OVERFLOW_CALLBACK(void(*Ptr_OverflowApp)(void))
{
    2ade:	df 93       	push	r29
    2ae0:	cf 93       	push	r28
    2ae2:	00 d0       	rcall	.+0      	; 0x2ae4 <MTIMER0_OVERFLOW_CALLBACK+0x6>
    2ae4:	cd b7       	in	r28, 0x3d	; 61
    2ae6:	de b7       	in	r29, 0x3e	; 62
    2ae8:	9a 83       	std	Y+2, r25	; 0x02
    2aea:	89 83       	std	Y+1, r24	; 0x01
	if(Ptr_OverflowApp!=NULL)
    2aec:	89 81       	ldd	r24, Y+1	; 0x01
    2aee:	9a 81       	ldd	r25, Y+2	; 0x02
    2af0:	00 97       	sbiw	r24, 0x00	; 0
    2af2:	61 f0       	breq	.+24     	; 0x2b0c <MTIMER0_OVERFLOW_CALLBACK+0x2e>
	{
		if(Glob_OverflowISR_Ptr==NULL)
    2af4:	80 91 c1 04 	lds	r24, 0x04C1
    2af8:	90 91 c2 04 	lds	r25, 0x04C2
    2afc:	00 97       	sbiw	r24, 0x00	; 0
    2afe:	31 f4       	brne	.+12     	; 0x2b0c <MTIMER0_OVERFLOW_CALLBACK+0x2e>
		{
			Glob_OverflowISR_Ptr=Ptr_OverflowApp;
    2b00:	89 81       	ldd	r24, Y+1	; 0x01
    2b02:	9a 81       	ldd	r25, Y+2	; 0x02
    2b04:	90 93 c2 04 	sts	0x04C2, r25
    2b08:	80 93 c1 04 	sts	0x04C1, r24
		}
	}
}
    2b0c:	0f 90       	pop	r0
    2b0e:	0f 90       	pop	r0
    2b10:	cf 91       	pop	r28
    2b12:	df 91       	pop	r29
    2b14:	08 95       	ret

00002b16 <MTIMER0_CTC_CALLBACK>:


void MTIMER0_CTC_CALLBACK(void(*Ptr_CTCApp)(void))
{
    2b16:	df 93       	push	r29
    2b18:	cf 93       	push	r28
    2b1a:	00 d0       	rcall	.+0      	; 0x2b1c <MTIMER0_CTC_CALLBACK+0x6>
    2b1c:	cd b7       	in	r28, 0x3d	; 61
    2b1e:	de b7       	in	r29, 0x3e	; 62
    2b20:	9a 83       	std	Y+2, r25	; 0x02
    2b22:	89 83       	std	Y+1, r24	; 0x01
	if(Ptr_CTCApp !=NULL)
    2b24:	89 81       	ldd	r24, Y+1	; 0x01
    2b26:	9a 81       	ldd	r25, Y+2	; 0x02
    2b28:	00 97       	sbiw	r24, 0x00	; 0
    2b2a:	61 f0       	breq	.+24     	; 0x2b44 <MTIMER0_CTC_CALLBACK+0x2e>
	{
		if(Glob_CTC_ISR_Ptr==NULL)
    2b2c:	80 91 c3 04 	lds	r24, 0x04C3
    2b30:	90 91 c4 04 	lds	r25, 0x04C4
    2b34:	00 97       	sbiw	r24, 0x00	; 0
    2b36:	31 f4       	brne	.+12     	; 0x2b44 <MTIMER0_CTC_CALLBACK+0x2e>
		{
			Glob_CTC_ISR_Ptr=Ptr_CTCApp;
    2b38:	89 81       	ldd	r24, Y+1	; 0x01
    2b3a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b3c:	90 93 c4 04 	sts	0x04C4, r25
    2b40:	80 93 c3 04 	sts	0x04C3, r24
		}
	}
}
    2b44:	0f 90       	pop	r0
    2b46:	0f 90       	pop	r0
    2b48:	cf 91       	pop	r28
    2b4a:	df 91       	pop	r29
    2b4c:	08 95       	ret

00002b4e <__vector_10>:


//CTC ISR
void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    2b4e:	1f 92       	push	r1
    2b50:	0f 92       	push	r0
    2b52:	0f b6       	in	r0, 0x3f	; 63
    2b54:	0f 92       	push	r0
    2b56:	11 24       	eor	r1, r1
    2b58:	2f 93       	push	r18
    2b5a:	3f 93       	push	r19
    2b5c:	4f 93       	push	r20
    2b5e:	5f 93       	push	r21
    2b60:	6f 93       	push	r22
    2b62:	7f 93       	push	r23
    2b64:	8f 93       	push	r24
    2b66:	9f 93       	push	r25
    2b68:	af 93       	push	r26
    2b6a:	bf 93       	push	r27
    2b6c:	ef 93       	push	r30
    2b6e:	ff 93       	push	r31
    2b70:	df 93       	push	r29
    2b72:	cf 93       	push	r28
    2b74:	cd b7       	in	r28, 0x3d	; 61
    2b76:	de b7       	in	r29, 0x3e	; 62
	if(Glob_CTC_ISR_Ptr!=NULL)
    2b78:	80 91 c3 04 	lds	r24, 0x04C3
    2b7c:	90 91 c4 04 	lds	r25, 0x04C4
    2b80:	00 97       	sbiw	r24, 0x00	; 0
    2b82:	29 f0       	breq	.+10     	; 0x2b8e <__vector_10+0x40>
	{
		Glob_CTC_ISR_Ptr();
    2b84:	e0 91 c3 04 	lds	r30, 0x04C3
    2b88:	f0 91 c4 04 	lds	r31, 0x04C4
    2b8c:	09 95       	icall
	}
}
    2b8e:	cf 91       	pop	r28
    2b90:	df 91       	pop	r29
    2b92:	ff 91       	pop	r31
    2b94:	ef 91       	pop	r30
    2b96:	bf 91       	pop	r27
    2b98:	af 91       	pop	r26
    2b9a:	9f 91       	pop	r25
    2b9c:	8f 91       	pop	r24
    2b9e:	7f 91       	pop	r23
    2ba0:	6f 91       	pop	r22
    2ba2:	5f 91       	pop	r21
    2ba4:	4f 91       	pop	r20
    2ba6:	3f 91       	pop	r19
    2ba8:	2f 91       	pop	r18
    2baa:	0f 90       	pop	r0
    2bac:	0f be       	out	0x3f, r0	; 63
    2bae:	0f 90       	pop	r0
    2bb0:	1f 90       	pop	r1
    2bb2:	18 95       	reti

00002bb4 <__vector_11>:

//Overflow TIMER0 ISR
void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
    2bb4:	1f 92       	push	r1
    2bb6:	0f 92       	push	r0
    2bb8:	0f b6       	in	r0, 0x3f	; 63
    2bba:	0f 92       	push	r0
    2bbc:	11 24       	eor	r1, r1
    2bbe:	2f 93       	push	r18
    2bc0:	3f 93       	push	r19
    2bc2:	4f 93       	push	r20
    2bc4:	5f 93       	push	r21
    2bc6:	6f 93       	push	r22
    2bc8:	7f 93       	push	r23
    2bca:	8f 93       	push	r24
    2bcc:	9f 93       	push	r25
    2bce:	af 93       	push	r26
    2bd0:	bf 93       	push	r27
    2bd2:	ef 93       	push	r30
    2bd4:	ff 93       	push	r31
    2bd6:	df 93       	push	r29
    2bd8:	cf 93       	push	r28
    2bda:	cd b7       	in	r28, 0x3d	; 61
    2bdc:	de b7       	in	r29, 0x3e	; 62
	if(Glob_OverflowISR_Ptr!=NULL)
    2bde:	80 91 c1 04 	lds	r24, 0x04C1
    2be2:	90 91 c2 04 	lds	r25, 0x04C2
    2be6:	00 97       	sbiw	r24, 0x00	; 0
    2be8:	29 f0       	breq	.+10     	; 0x2bf4 <__vector_11+0x40>
	{
		Glob_OverflowISR_Ptr();
    2bea:	e0 91 c1 04 	lds	r30, 0x04C1
    2bee:	f0 91 c2 04 	lds	r31, 0x04C2
    2bf2:	09 95       	icall
	}
}
    2bf4:	cf 91       	pop	r28
    2bf6:	df 91       	pop	r29
    2bf8:	ff 91       	pop	r31
    2bfa:	ef 91       	pop	r30
    2bfc:	bf 91       	pop	r27
    2bfe:	af 91       	pop	r26
    2c00:	9f 91       	pop	r25
    2c02:	8f 91       	pop	r24
    2c04:	7f 91       	pop	r23
    2c06:	6f 91       	pop	r22
    2c08:	5f 91       	pop	r21
    2c0a:	4f 91       	pop	r20
    2c0c:	3f 91       	pop	r19
    2c0e:	2f 91       	pop	r18
    2c10:	0f 90       	pop	r0
    2c12:	0f be       	out	0x3f, r0	; 63
    2c14:	0f 90       	pop	r0
    2c16:	1f 90       	pop	r1
    2c18:	18 95       	reti

00002c1a <M_Pwm0_Init>:



void M_Pwm0_Init  (void)
{
    2c1a:	df 93       	push	r29
    2c1c:	cf 93       	push	r28
    2c1e:	cd b7       	in	r28, 0x3d	; 61
    2c20:	de b7       	in	r29, 0x3e	; 62
	MDIO_Set_PIN_DIR(MDIO_PORTB,3,PIN_OUTPUT);
    2c22:	81 e0       	ldi	r24, 0x01	; 1
    2c24:	63 e0       	ldi	r22, 0x03	; 3
    2c26:	41 e0       	ldi	r20, 0x01	; 1
    2c28:	0e 94 20 18 	call	0x3040	; 0x3040 <MDIO_Set_PIN_DIR>

	#if			TIMER0_MODE		==		TIMER_FAST_PWM_MODE
	SET_BIT(TCCR0,3); SET_BIT(TCCR0,6);
    2c2c:	a3 e5       	ldi	r26, 0x53	; 83
    2c2e:	b0 e0       	ldi	r27, 0x00	; 0
    2c30:	e3 e5       	ldi	r30, 0x53	; 83
    2c32:	f0 e0       	ldi	r31, 0x00	; 0
    2c34:	80 81       	ld	r24, Z
    2c36:	88 60       	ori	r24, 0x08	; 8
    2c38:	8c 93       	st	X, r24
    2c3a:	a3 e5       	ldi	r26, 0x53	; 83
    2c3c:	b0 e0       	ldi	r27, 0x00	; 0
    2c3e:	e3 e5       	ldi	r30, 0x53	; 83
    2c40:	f0 e0       	ldi	r31, 0x00	; 0
    2c42:	80 81       	ld	r24, Z
    2c44:	80 64       	ori	r24, 0x40	; 64
    2c46:	8c 93       	st	X, r24
	#elif		TIMER0_MODE		==		TIMER_PWM_PHASE_CORRECT_MODE
	CLR_BIT(TCCR0,3); SET_BIT(TCCR0,6);
	#endif

	#if			TIMER0_FAST_PWM_WAVE_MODE		==		FAST_PWM_OC0_NON_INVERTING
	SET_BIT(TCCR0,5); CLR_BIT(TCCR0,4);
    2c48:	a3 e5       	ldi	r26, 0x53	; 83
    2c4a:	b0 e0       	ldi	r27, 0x00	; 0
    2c4c:	e3 e5       	ldi	r30, 0x53	; 83
    2c4e:	f0 e0       	ldi	r31, 0x00	; 0
    2c50:	80 81       	ld	r24, Z
    2c52:	80 62       	ori	r24, 0x20	; 32
    2c54:	8c 93       	st	X, r24
    2c56:	a3 e5       	ldi	r26, 0x53	; 83
    2c58:	b0 e0       	ldi	r27, 0x00	; 0
    2c5a:	e3 e5       	ldi	r30, 0x53	; 83
    2c5c:	f0 e0       	ldi	r31, 0x00	; 0
    2c5e:	80 81       	ld	r24, Z
    2c60:	8f 7e       	andi	r24, 0xEF	; 239
    2c62:	8c 93       	st	X, r24
	#elif		TIMER0_FAST_PWM_WAVE_MODE		==		FAST_PWM_OC0_INVERTING
	SET_BIT(TCCR0,5); SET_BIT(TCCR0,4);
	#endif

}
    2c64:	cf 91       	pop	r28
    2c66:	df 91       	pop	r29
    2c68:	08 95       	ret

00002c6a <M_Pwm0_SetDutyCycle>:

void M_Pwm0_SetDutyCycle		(u8 Local_u8_DesiredDutyCycle)
{
    2c6a:	df 93       	push	r29
    2c6c:	cf 93       	push	r28
    2c6e:	0f 92       	push	r0
    2c70:	cd b7       	in	r28, 0x3d	; 61
    2c72:	de b7       	in	r29, 0x3e	; 62
    2c74:	89 83       	std	Y+1, r24	; 0x01
	#if			TIMER0_FAST_PWM_WAVE_MODE		==		FAST_PWM_OC0_NON_INVERTING

	if(Local_u8_DesiredDutyCycle == 0)
    2c76:	89 81       	ldd	r24, Y+1	; 0x01
    2c78:	88 23       	and	r24, r24
    2c7a:	51 f5       	brne	.+84     	; 0x2cd0 <M_Pwm0_SetDutyCycle+0x66>
	{
		SET_BIT(TCCR0,5); SET_BIT(TCCR0,4);
    2c7c:	a3 e5       	ldi	r26, 0x53	; 83
    2c7e:	b0 e0       	ldi	r27, 0x00	; 0
    2c80:	e3 e5       	ldi	r30, 0x53	; 83
    2c82:	f0 e0       	ldi	r31, 0x00	; 0
    2c84:	80 81       	ld	r24, Z
    2c86:	80 62       	ori	r24, 0x20	; 32
    2c88:	8c 93       	st	X, r24
    2c8a:	a3 e5       	ldi	r26, 0x53	; 83
    2c8c:	b0 e0       	ldi	r27, 0x00	; 0
    2c8e:	e3 e5       	ldi	r30, 0x53	; 83
    2c90:	f0 e0       	ldi	r31, 0x00	; 0
    2c92:	80 81       	ld	r24, Z
    2c94:	80 61       	ori	r24, 0x10	; 16
    2c96:	8c 93       	st	X, r24
		OCR0 = (255 - ((Local_u8_DesiredDutyCycle *255)/100));
    2c98:	ec e5       	ldi	r30, 0x5C	; 92
    2c9a:	f0 e0       	ldi	r31, 0x00	; 0
    2c9c:	89 81       	ldd	r24, Y+1	; 0x01
    2c9e:	48 2f       	mov	r20, r24
    2ca0:	50 e0       	ldi	r21, 0x00	; 0
    2ca2:	ca 01       	movw	r24, r20
    2ca4:	9c 01       	movw	r18, r24
    2ca6:	22 0f       	add	r18, r18
    2ca8:	33 1f       	adc	r19, r19
    2caa:	c9 01       	movw	r24, r18
    2cac:	96 95       	lsr	r25
    2cae:	98 2f       	mov	r25, r24
    2cb0:	88 27       	eor	r24, r24
    2cb2:	97 95       	ror	r25
    2cb4:	87 95       	ror	r24
    2cb6:	82 1b       	sub	r24, r18
    2cb8:	93 0b       	sbc	r25, r19
    2cba:	84 0f       	add	r24, r20
    2cbc:	95 1f       	adc	r25, r21
    2cbe:	24 e6       	ldi	r18, 0x64	; 100
    2cc0:	30 e0       	ldi	r19, 0x00	; 0
    2cc2:	b9 01       	movw	r22, r18
    2cc4:	0e 94 d7 54 	call	0xa9ae	; 0xa9ae <__divmodhi4>
    2cc8:	cb 01       	movw	r24, r22
    2cca:	80 95       	com	r24
    2ccc:	80 83       	st	Z, r24
    2cce:	28 c0       	rjmp	.+80     	; 0x2d20 <M_Pwm0_SetDutyCycle+0xb6>
	}
	else
	{
		SET_BIT(TCCR0,5); CLR_BIT(TCCR0,4);
    2cd0:	a3 e5       	ldi	r26, 0x53	; 83
    2cd2:	b0 e0       	ldi	r27, 0x00	; 0
    2cd4:	e3 e5       	ldi	r30, 0x53	; 83
    2cd6:	f0 e0       	ldi	r31, 0x00	; 0
    2cd8:	80 81       	ld	r24, Z
    2cda:	80 62       	ori	r24, 0x20	; 32
    2cdc:	8c 93       	st	X, r24
    2cde:	a3 e5       	ldi	r26, 0x53	; 83
    2ce0:	b0 e0       	ldi	r27, 0x00	; 0
    2ce2:	e3 e5       	ldi	r30, 0x53	; 83
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	80 81       	ld	r24, Z
    2ce8:	8f 7e       	andi	r24, 0xEF	; 239
    2cea:	8c 93       	st	X, r24
		OCR0 = (((Local_u8_DesiredDutyCycle * 25) / 100) - 1);
    2cec:	ec e5       	ldi	r30, 0x5C	; 92
    2cee:	f0 e0       	ldi	r31, 0x00	; 0
    2cf0:	89 81       	ldd	r24, Y+1	; 0x01
    2cf2:	28 2f       	mov	r18, r24
    2cf4:	30 e0       	ldi	r19, 0x00	; 0
    2cf6:	c9 01       	movw	r24, r18
    2cf8:	88 0f       	add	r24, r24
    2cfa:	99 1f       	adc	r25, r25
    2cfc:	82 0f       	add	r24, r18
    2cfe:	93 1f       	adc	r25, r19
    2d00:	88 0f       	add	r24, r24
    2d02:	99 1f       	adc	r25, r25
    2d04:	88 0f       	add	r24, r24
    2d06:	99 1f       	adc	r25, r25
    2d08:	88 0f       	add	r24, r24
    2d0a:	99 1f       	adc	r25, r25
    2d0c:	82 0f       	add	r24, r18
    2d0e:	93 1f       	adc	r25, r19
    2d10:	24 e6       	ldi	r18, 0x64	; 100
    2d12:	30 e0       	ldi	r19, 0x00	; 0
    2d14:	b9 01       	movw	r22, r18
    2d16:	0e 94 d7 54 	call	0xa9ae	; 0xa9ae <__divmodhi4>
    2d1a:	cb 01       	movw	r24, r22
    2d1c:	81 50       	subi	r24, 0x01	; 1
    2d1e:	80 83       	st	Z, r24
		SET_BIT(TCCR0,5); SET_BIT(TCCR0,4);
		OCR0 = (255 - ((Local_u8_DesiredDutyCycle *256)/100));
	}
	#endif

}
    2d20:	0f 90       	pop	r0
    2d22:	cf 91       	pop	r28
    2d24:	df 91       	pop	r29
    2d26:	08 95       	ret

00002d28 <M_Timer0_Start>:

void M_Timer0_Start			(void)
{
    2d28:	df 93       	push	r29
    2d2a:	cf 93       	push	r28
    2d2c:	cd b7       	in	r28, 0x3d	; 61
    2d2e:	de b7       	in	r29, 0x3e	; 62
	#elif		TIMER0_CLOCK_SOURCE	==		PRESCALAR_OVER_8
	CLR_BIT(TCCR0,2); SET_BIT(TCCR0,1);	CLR_BIT(TCCR0,0);
	#elif		TIMER0_CLOCK_SOURCE	==		PRESCALAR_OVER_64
	CLR_BIT(TCCR0,2); SET_BIT(TCCR0,1);	SET_BIT(TCCR0,0);
	#elif		TIMER0_CLOCK_SOURCE	==		PRESCALAR_OVER_256
	SET_BIT(TCCR0,2); CLR_BIT(TCCR0,1);	SET_BIT(TCCR0,0);
    2d30:	a3 e5       	ldi	r26, 0x53	; 83
    2d32:	b0 e0       	ldi	r27, 0x00	; 0
    2d34:	e3 e5       	ldi	r30, 0x53	; 83
    2d36:	f0 e0       	ldi	r31, 0x00	; 0
    2d38:	80 81       	ld	r24, Z
    2d3a:	84 60       	ori	r24, 0x04	; 4
    2d3c:	8c 93       	st	X, r24
    2d3e:	a3 e5       	ldi	r26, 0x53	; 83
    2d40:	b0 e0       	ldi	r27, 0x00	; 0
    2d42:	e3 e5       	ldi	r30, 0x53	; 83
    2d44:	f0 e0       	ldi	r31, 0x00	; 0
    2d46:	80 81       	ld	r24, Z
    2d48:	8d 7f       	andi	r24, 0xFD	; 253
    2d4a:	8c 93       	st	X, r24
    2d4c:	a3 e5       	ldi	r26, 0x53	; 83
    2d4e:	b0 e0       	ldi	r27, 0x00	; 0
    2d50:	e3 e5       	ldi	r30, 0x53	; 83
    2d52:	f0 e0       	ldi	r31, 0x00	; 0
    2d54:	80 81       	ld	r24, Z
    2d56:	81 60       	ori	r24, 0x01	; 1
    2d58:	8c 93       	st	X, r24
	#elif		TIMER0_CLOCK_SOURCE	==		PRESCALAR_OVER_1024
	SET_BIT(TCCR0,2); CLR_BIT(TCCR0,1);	SET_BIT(TCCR0,0);
	#endif
}
    2d5a:	cf 91       	pop	r28
    2d5c:	df 91       	pop	r29
    2d5e:	08 95       	ret

00002d60 <M_Timer0_Stop>:

void M_Timer0_Stop			(void)
{
    2d60:	df 93       	push	r29
    2d62:	cf 93       	push	r28
    2d64:	cd b7       	in	r28, 0x3d	; 61
    2d66:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0,2); CLR_BIT(TCCR0,1);	CLR_BIT(TCCR0,0);
    2d68:	a3 e5       	ldi	r26, 0x53	; 83
    2d6a:	b0 e0       	ldi	r27, 0x00	; 0
    2d6c:	e3 e5       	ldi	r30, 0x53	; 83
    2d6e:	f0 e0       	ldi	r31, 0x00	; 0
    2d70:	80 81       	ld	r24, Z
    2d72:	8b 7f       	andi	r24, 0xFB	; 251
    2d74:	8c 93       	st	X, r24
    2d76:	a3 e5       	ldi	r26, 0x53	; 83
    2d78:	b0 e0       	ldi	r27, 0x00	; 0
    2d7a:	e3 e5       	ldi	r30, 0x53	; 83
    2d7c:	f0 e0       	ldi	r31, 0x00	; 0
    2d7e:	80 81       	ld	r24, Z
    2d80:	8d 7f       	andi	r24, 0xFD	; 253
    2d82:	8c 93       	st	X, r24
    2d84:	a3 e5       	ldi	r26, 0x53	; 83
    2d86:	b0 e0       	ldi	r27, 0x00	; 0
    2d88:	e3 e5       	ldi	r30, 0x53	; 83
    2d8a:	f0 e0       	ldi	r31, 0x00	; 0
    2d8c:	80 81       	ld	r24, Z
    2d8e:	8e 7f       	andi	r24, 0xFE	; 254
    2d90:	8c 93       	st	X, r24
}
    2d92:	cf 91       	pop	r28
    2d94:	df 91       	pop	r29
    2d96:	08 95       	ret

00002d98 <M_Pwm0_Start>:

void M_Pwm0_Start(void)
{
    2d98:	df 93       	push	r29
    2d9a:	cf 93       	push	r28
    2d9c:	cd b7       	in	r28, 0x3d	; 61
    2d9e:	de b7       	in	r29, 0x3e	; 62
	M_Timer0_Start();
    2da0:	0e 94 94 16 	call	0x2d28	; 0x2d28 <M_Timer0_Start>
}
    2da4:	cf 91       	pop	r28
    2da6:	df 91       	pop	r29
    2da8:	08 95       	ret

00002daa <M_Pwm0_Stop>:

void M_Pwm0_Stop(void)
{
    2daa:	df 93       	push	r29
    2dac:	cf 93       	push	r28
    2dae:	cd b7       	in	r28, 0x3d	; 61
    2db0:	de b7       	in	r29, 0x3e	; 62
	M_Timer0_Stop();
    2db2:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <M_Timer0_Stop>
}
    2db6:	cf 91       	pop	r28
    2db8:	df 91       	pop	r29
    2dba:	08 95       	ret

00002dbc <MSPI_MasterInit>:
#include"../MDIO/MDIO_Interface.h"
#include"MSPI_Private.h"
#include"MSPI_Config.h"

void MSPI_MasterInit()
{
    2dbc:	df 93       	push	r29
    2dbe:	cf 93       	push	r28
    2dc0:	cd b7       	in	r28, 0x3d	; 61
    2dc2:	de b7       	in	r29, 0x3e	; 62
	//Set Data Order
#if MSPI_DORD_MODE==MSPI_DORD_MSB_FIRST
	CLR_BIT(SPCR,5);
    2dc4:	ad e2       	ldi	r26, 0x2D	; 45
    2dc6:	b0 e0       	ldi	r27, 0x00	; 0
    2dc8:	ed e2       	ldi	r30, 0x2D	; 45
    2dca:	f0 e0       	ldi	r31, 0x00	; 0
    2dcc:	80 81       	ld	r24, Z
    2dce:	8f 7d       	andi	r24, 0xDF	; 223
    2dd0:	8c 93       	st	X, r24
	SET_BIT(SPCR,5);
#endif

	//Set Clock Polarity
#if MSPI_POLARITY_MODE==MSPI_POL_ACTIVE_HIGH
	CLR_BIT(SPCR,3);
    2dd2:	ad e2       	ldi	r26, 0x2D	; 45
    2dd4:	b0 e0       	ldi	r27, 0x00	; 0
    2dd6:	ed e2       	ldi	r30, 0x2D	; 45
    2dd8:	f0 e0       	ldi	r31, 0x00	; 0
    2dda:	80 81       	ld	r24, Z
    2ddc:	87 7f       	andi	r24, 0xF7	; 247
    2dde:	8c 93       	st	X, r24
	SET_BIT(SPCR,3);
#endif

	//Set Clock Phase
#if MSPI_PHASE_MODE==MSPI_PHASE_SAMPLE_AT_LEADING
	CLR_BIT(SPCR,2);
    2de0:	ad e2       	ldi	r26, 0x2D	; 45
    2de2:	b0 e0       	ldi	r27, 0x00	; 0
    2de4:	ed e2       	ldi	r30, 0x2D	; 45
    2de6:	f0 e0       	ldi	r31, 0x00	; 0
    2de8:	80 81       	ld	r24, Z
    2dea:	8b 7f       	andi	r24, 0xFB	; 251
    2dec:	8c 93       	st	X, r24
	SET_BIT(SPCR,2);
#endif

	//Set Interrupt Mode
#if MSPI_INTERRUPT_MODE==MSPI_INTERRUPT_OFF
	CLR_BIT(SPCR,7);
    2dee:	ad e2       	ldi	r26, 0x2D	; 45
    2df0:	b0 e0       	ldi	r27, 0x00	; 0
    2df2:	ed e2       	ldi	r30, 0x2D	; 45
    2df4:	f0 e0       	ldi	r31, 0x00	; 0
    2df6:	80 81       	ld	r24, Z
    2df8:	8f 77       	andi	r24, 0x7F	; 127
    2dfa:	8c 93       	st	X, r24

//Set Clock

//Set Double Speed Bit Mode
#if MSPI_DOUBLE_SPEED_MODE==MSPI_DOUBLE_SPEED_OFF
	CLR_BIT(SPSR,0);
    2dfc:	ae e2       	ldi	r26, 0x2E	; 46
    2dfe:	b0 e0       	ldi	r27, 0x00	; 0
    2e00:	ee e2       	ldi	r30, 0x2E	; 46
    2e02:	f0 e0       	ldi	r31, 0x00	; 0
    2e04:	80 81       	ld	r24, Z
    2e06:	8e 7f       	andi	r24, 0xFE	; 254
    2e08:	8c 93       	st	X, r24

	//Set Clock in SPSR
	//SPCR|=(MSPI_CLOCK_MODE&CLOCK_MASK);
	//CLR_BIT(SPCR,0);
	//CLR_BIT(SPCR,1);
	SPCR&=(~CLOCK_MASK);
    2e0a:	ad e2       	ldi	r26, 0x2D	; 45
    2e0c:	b0 e0       	ldi	r27, 0x00	; 0
    2e0e:	ed e2       	ldi	r30, 0x2D	; 45
    2e10:	f0 e0       	ldi	r31, 0x00	; 0
    2e12:	80 81       	ld	r24, Z
    2e14:	8c 7f       	andi	r24, 0xFC	; 252
    2e16:	8c 93       	st	X, r24
	SPCR|=MSPI_CLOCK_MODE;
    2e18:	ad e2       	ldi	r26, 0x2D	; 45
    2e1a:	b0 e0       	ldi	r27, 0x00	; 0
    2e1c:	ed e2       	ldi	r30, 0x2D	; 45
    2e1e:	f0 e0       	ldi	r31, 0x00	; 0
    2e20:	80 81       	ld	r24, Z
    2e22:	83 60       	ori	r24, 0x03	; 3
    2e24:	8c 93       	st	X, r24

	//Set Mode as Master
	SET_BIT(SPCR,4);
    2e26:	ad e2       	ldi	r26, 0x2D	; 45
    2e28:	b0 e0       	ldi	r27, 0x00	; 0
    2e2a:	ed e2       	ldi	r30, 0x2D	; 45
    2e2c:	f0 e0       	ldi	r31, 0x00	; 0
    2e2e:	80 81       	ld	r24, Z
    2e30:	80 61       	ori	r24, 0x10	; 16
    2e32:	8c 93       	st	X, r24

	//Enable SPI
	SET_BIT(SPCR,6);
    2e34:	ad e2       	ldi	r26, 0x2D	; 45
    2e36:	b0 e0       	ldi	r27, 0x00	; 0
    2e38:	ed e2       	ldi	r30, 0x2D	; 45
    2e3a:	f0 e0       	ldi	r31, 0x00	; 0
    2e3c:	80 81       	ld	r24, Z
    2e3e:	80 64       	ori	r24, 0x40	; 64
    2e40:	8c 93       	st	X, r24

}
    2e42:	cf 91       	pop	r28
    2e44:	df 91       	pop	r29
    2e46:	08 95       	ret

00002e48 <MSPI_SlaveInit>:
void MSPI_SlaveInit()
{
    2e48:	df 93       	push	r29
    2e4a:	cf 93       	push	r28
    2e4c:	cd b7       	in	r28, 0x3d	; 61
    2e4e:	de b7       	in	r29, 0x3e	; 62
	//Set Data Order
#if MSPI_DORD_MODE==MSPI_DORD_MSB_FIRST
	CLR_BIT(SPCR,5);
    2e50:	ad e2       	ldi	r26, 0x2D	; 45
    2e52:	b0 e0       	ldi	r27, 0x00	; 0
    2e54:	ed e2       	ldi	r30, 0x2D	; 45
    2e56:	f0 e0       	ldi	r31, 0x00	; 0
    2e58:	80 81       	ld	r24, Z
    2e5a:	8f 7d       	andi	r24, 0xDF	; 223
    2e5c:	8c 93       	st	X, r24
	SET_BIT(SPCR,5);
#endif

	//Set Clock Polarity
#if MSPI_POLARITY_MODE==MSPI_POL_ACTIVE_HIGH
	CLR_BIT(SPCR,3);
    2e5e:	ad e2       	ldi	r26, 0x2D	; 45
    2e60:	b0 e0       	ldi	r27, 0x00	; 0
    2e62:	ed e2       	ldi	r30, 0x2D	; 45
    2e64:	f0 e0       	ldi	r31, 0x00	; 0
    2e66:	80 81       	ld	r24, Z
    2e68:	87 7f       	andi	r24, 0xF7	; 247
    2e6a:	8c 93       	st	X, r24
	SET_BIT(SPCR,3);
#endif

	//Set Clock Phase
#if MSPI_PHASE_MODE==MSPI_PHASE_SAMPLE_AT_LEADING
	CLR_BIT(SPCR,2);
    2e6c:	ad e2       	ldi	r26, 0x2D	; 45
    2e6e:	b0 e0       	ldi	r27, 0x00	; 0
    2e70:	ed e2       	ldi	r30, 0x2D	; 45
    2e72:	f0 e0       	ldi	r31, 0x00	; 0
    2e74:	80 81       	ld	r24, Z
    2e76:	8b 7f       	andi	r24, 0xFB	; 251
    2e78:	8c 93       	st	X, r24
	SET_BIT(SPCR,2);
#endif

	//Set Interrupt Mode
#if MSPI_INTERRUPT_MODE==MSPI_INTERRUPT_OFF
	CLR_BIT(SPCR,7);
    2e7a:	ad e2       	ldi	r26, 0x2D	; 45
    2e7c:	b0 e0       	ldi	r27, 0x00	; 0
    2e7e:	ed e2       	ldi	r30, 0x2D	; 45
    2e80:	f0 e0       	ldi	r31, 0x00	; 0
    2e82:	80 81       	ld	r24, Z
    2e84:	8f 77       	andi	r24, 0x7F	; 127
    2e86:	8c 93       	st	X, r24
#elif MSPI_INTERRUPT_MODE==MSPI_INTERRUPT_ON
	SET_BIT(SPCR,7);
#endif

	//Set Mode as Slave
	CLR_BIT(SPCR,4);
    2e88:	ad e2       	ldi	r26, 0x2D	; 45
    2e8a:	b0 e0       	ldi	r27, 0x00	; 0
    2e8c:	ed e2       	ldi	r30, 0x2D	; 45
    2e8e:	f0 e0       	ldi	r31, 0x00	; 0
    2e90:	80 81       	ld	r24, Z
    2e92:	8f 7e       	andi	r24, 0xEF	; 239
    2e94:	8c 93       	st	X, r24

	//Enable SPI
	SET_BIT(SPCR,6);
    2e96:	ad e2       	ldi	r26, 0x2D	; 45
    2e98:	b0 e0       	ldi	r27, 0x00	; 0
    2e9a:	ed e2       	ldi	r30, 0x2D	; 45
    2e9c:	f0 e0       	ldi	r31, 0x00	; 0
    2e9e:	80 81       	ld	r24, Z
    2ea0:	80 64       	ori	r24, 0x40	; 64
    2ea2:	8c 93       	st	X, r24
}
    2ea4:	cf 91       	pop	r28
    2ea6:	df 91       	pop	r29
    2ea8:	08 95       	ret

00002eaa <MSPI_SendReceive>:

u8 MSPI_SendReceive(u8 Copy_u8TransmittedValue)
{
    2eaa:	df 93       	push	r29
    2eac:	cf 93       	push	r28
    2eae:	0f 92       	push	r0
    2eb0:	cd b7       	in	r28, 0x3d	; 61
    2eb2:	de b7       	in	r29, 0x3e	; 62
    2eb4:	89 83       	std	Y+1, r24	; 0x01
	//Put Data in SPDR
	SPDR=Copy_u8TransmittedValue;
    2eb6:	ef e2       	ldi	r30, 0x2F	; 47
    2eb8:	f0 e0       	ldi	r31, 0x00	; 0
    2eba:	89 81       	ldd	r24, Y+1	; 0x01
    2ebc:	80 83       	st	Z, r24
	//Poll On SPIF Flag
	while(GET_BIT(SPSR,7)==0);
    2ebe:	ee e2       	ldi	r30, 0x2E	; 46
    2ec0:	f0 e0       	ldi	r31, 0x00	; 0
    2ec2:	80 81       	ld	r24, Z
    2ec4:	88 23       	and	r24, r24
    2ec6:	dc f7       	brge	.-10     	; 0x2ebe <MSPI_SendReceive+0x14>
	return SPDR;
    2ec8:	ef e2       	ldi	r30, 0x2F	; 47
    2eca:	f0 e0       	ldi	r31, 0x00	; 0
    2ecc:	80 81       	ld	r24, Z
}
    2ece:	0f 90       	pop	r0
    2ed0:	cf 91       	pop	r28
    2ed2:	df 91       	pop	r29
    2ed4:	08 95       	ret

00002ed6 <MGIE_Enable>:
 *      Author: Ismail
 */
#include "MGIE_Private.h"
#include "MGIE_Interface.h"
#include "../../LIB/BIT_MATH.h"
void MGIE_Enable(void){
    2ed6:	df 93       	push	r29
    2ed8:	cf 93       	push	r28
    2eda:	cd b7       	in	r28, 0x3d	; 61
    2edc:	de b7       	in	r29, 0x3e	; 62

SET_BIT(SREG,7);
    2ede:	af e5       	ldi	r26, 0x5F	; 95
    2ee0:	b0 e0       	ldi	r27, 0x00	; 0
    2ee2:	ef e5       	ldi	r30, 0x5F	; 95
    2ee4:	f0 e0       	ldi	r31, 0x00	; 0
    2ee6:	80 81       	ld	r24, Z
    2ee8:	80 68       	ori	r24, 0x80	; 128
    2eea:	8c 93       	st	X, r24
}
    2eec:	cf 91       	pop	r28
    2eee:	df 91       	pop	r29
    2ef0:	08 95       	ret

00002ef2 <MGIE_Disable>:



void MGIE_Disable(void){
    2ef2:	df 93       	push	r29
    2ef4:	cf 93       	push	r28
    2ef6:	cd b7       	in	r28, 0x3d	; 61
    2ef8:	de b7       	in	r29, 0x3e	; 62

CLR_BIT(SREG,7);
    2efa:	af e5       	ldi	r26, 0x5F	; 95
    2efc:	b0 e0       	ldi	r27, 0x00	; 0
    2efe:	ef e5       	ldi	r30, 0x5F	; 95
    2f00:	f0 e0       	ldi	r31, 0x00	; 0
    2f02:	80 81       	ld	r24, Z
    2f04:	8f 77       	andi	r24, 0x7F	; 127
    2f06:	8c 93       	st	X, r24

}
    2f08:	cf 91       	pop	r28
    2f0a:	df 91       	pop	r29
    2f0c:	08 95       	ret

00002f0e <MEXIT0_Init>:
#include "../../LIB/BIT_MATH.h"
#define NULL 0
/*GLOBAL POINTER TO FUNCTION to not violate the abstraction of the layered architecture
 *  and to isolate the function from the MCAL*/
void (*Global_Pointer)(void)=NULL;
void MEXIT0_Init(){
    2f0e:	df 93       	push	r29
    2f10:	cf 93       	push	r28
    2f12:	cd b7       	in	r28, 0x3d	; 61
    2f14:	de b7       	in	r29, 0x3e	; 62
#if MEXIT_SENSE_CONTROL_STATE==MEXIT_LOW_LEVEL
	CLR_BIT(MCUCR,0);
    2f16:	a5 e5       	ldi	r26, 0x55	; 85
    2f18:	b0 e0       	ldi	r27, 0x00	; 0
    2f1a:	e5 e5       	ldi	r30, 0x55	; 85
    2f1c:	f0 e0       	ldi	r31, 0x00	; 0
    2f1e:	80 81       	ld	r24, Z
    2f20:	8e 7f       	andi	r24, 0xFE	; 254
    2f22:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,1);
    2f24:	a5 e5       	ldi	r26, 0x55	; 85
    2f26:	b0 e0       	ldi	r27, 0x00	; 0
    2f28:	e5 e5       	ldi	r30, 0x55	; 85
    2f2a:	f0 e0       	ldi	r31, 0x00	; 0
    2f2c:	80 81       	ld	r24, Z
    2f2e:	8d 7f       	andi	r24, 0xFD	; 253
    2f30:	8c 93       	st	X, r24
#elif MEXIT_SENSE_CONTROL_STATE==MEXIT_FALLING_EDGE
	SET_BIT(MCUCR,0);
	SET_BIT(MCUCR,0);
#endif
/*enable interrupt on int0*/
	SET_BIT(GICR,6);
    2f32:	ab e5       	ldi	r26, 0x5B	; 91
    2f34:	b0 e0       	ldi	r27, 0x00	; 0
    2f36:	eb e5       	ldi	r30, 0x5B	; 91
    2f38:	f0 e0       	ldi	r31, 0x00	; 0
    2f3a:	80 81       	ld	r24, Z
    2f3c:	80 64       	ori	r24, 0x40	; 64
    2f3e:	8c 93       	st	X, r24

}
    2f40:	cf 91       	pop	r28
    2f42:	df 91       	pop	r29
    2f44:	08 95       	ret

00002f46 <MEXIT1_Init>:
void MEXIT1_Init(){
    2f46:	df 93       	push	r29
    2f48:	cf 93       	push	r28
    2f4a:	cd b7       	in	r28, 0x3d	; 61
    2f4c:	de b7       	in	r29, 0x3e	; 62


}
    2f4e:	cf 91       	pop	r28
    2f50:	df 91       	pop	r29
    2f52:	08 95       	ret

00002f54 <MEXIT2_Init>:

void MEXIT2_Init(){
    2f54:	df 93       	push	r29
    2f56:	cf 93       	push	r28
    2f58:	cd b7       	in	r28, 0x3d	; 61
    2f5a:	de b7       	in	r29, 0x3e	; 62




}
    2f5c:	cf 91       	pop	r28
    2f5e:	df 91       	pop	r29
    2f60:	08 95       	ret

00002f62 <MEXIT_Callback>:

void MEXIT_Callback(void(*Loc_PtrToFunc)(void)){
    2f62:	df 93       	push	r29
    2f64:	cf 93       	push	r28
    2f66:	00 d0       	rcall	.+0      	; 0x2f68 <MEXIT_Callback+0x6>
    2f68:	cd b7       	in	r28, 0x3d	; 61
    2f6a:	de b7       	in	r29, 0x3e	; 62
    2f6c:	9a 83       	std	Y+2, r25	; 0x02
    2f6e:	89 83       	std	Y+1, r24	; 0x01

	if(Loc_PtrToFunc!=NULL){
    2f70:	89 81       	ldd	r24, Y+1	; 0x01
    2f72:	9a 81       	ldd	r25, Y+2	; 0x02
    2f74:	00 97       	sbiw	r24, 0x00	; 0
    2f76:	31 f0       	breq	.+12     	; 0x2f84 <MEXIT_Callback+0x22>

		Global_Pointer=Loc_PtrToFunc;
    2f78:	89 81       	ldd	r24, Y+1	; 0x01
    2f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f7c:	90 93 c6 04 	sts	0x04C6, r25
    2f80:	80 93 c5 04 	sts	0x04C5, r24
	}
}
    2f84:	0f 90       	pop	r0
    2f86:	0f 90       	pop	r0
    2f88:	cf 91       	pop	r28
    2f8a:	df 91       	pop	r29
    2f8c:	08 95       	ret

00002f8e <__vector_1>:


void __vector_1 (void) {
    2f8e:	df 93       	push	r29
    2f90:	cf 93       	push	r28
    2f92:	cd b7       	in	r28, 0x3d	; 61
    2f94:	de b7       	in	r29, 0x3e	; 62
//function body;
// what will happen when INT0 happen

	if(Global_Pointer!=NULL){
    2f96:	80 91 c5 04 	lds	r24, 0x04C5
    2f9a:	90 91 c6 04 	lds	r25, 0x04C6
    2f9e:	00 97       	sbiw	r24, 0x00	; 0
    2fa0:	29 f0       	breq	.+10     	; 0x2fac <__vector_1+0x1e>
		Global_Pointer();
    2fa2:	e0 91 c5 04 	lds	r30, 0x04C5
    2fa6:	f0 91 c6 04 	lds	r31, 0x04C6
    2faa:	09 95       	icall
	}
}
    2fac:	cf 91       	pop	r28
    2fae:	df 91       	pop	r29
    2fb0:	08 95       	ret

00002fb2 <MDIO_Set_PORT_DIR>:
 */

#include "MDIO_Interface.h"
#include "MDIO_Private.h"

void MDIO_Set_PORT_DIR(u8 Copy_u8PortNumber,u8 Copy_u8PortDirection){
    2fb2:	df 93       	push	r29
    2fb4:	cf 93       	push	r28
    2fb6:	00 d0       	rcall	.+0      	; 0x2fb8 <MDIO_Set_PORT_DIR+0x6>
    2fb8:	00 d0       	rcall	.+0      	; 0x2fba <MDIO_Set_PORT_DIR+0x8>
    2fba:	cd b7       	in	r28, 0x3d	; 61
    2fbc:	de b7       	in	r29, 0x3e	; 62
    2fbe:	89 83       	std	Y+1, r24	; 0x01
    2fc0:	6a 83       	std	Y+2, r22	; 0x02

if((Copy_u8PortDirection ==PORT_OUTPUT)|| (Copy_u8PortDirection ==PORT_INPUT)){
    2fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc4:	8f 3f       	cpi	r24, 0xFF	; 255
    2fc6:	19 f0       	breq	.+6      	; 0x2fce <MDIO_Set_PORT_DIR+0x1c>
    2fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fca:	88 23       	and	r24, r24
    2fcc:	91 f5       	brne	.+100    	; 0x3032 <MDIO_Set_PORT_DIR+0x80>

	/*valid port direction*/
	switch(Copy_u8PortNumber)
    2fce:	89 81       	ldd	r24, Y+1	; 0x01
    2fd0:	28 2f       	mov	r18, r24
    2fd2:	30 e0       	ldi	r19, 0x00	; 0
    2fd4:	3c 83       	std	Y+4, r19	; 0x04
    2fd6:	2b 83       	std	Y+3, r18	; 0x03
    2fd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2fda:	9c 81       	ldd	r25, Y+4	; 0x04
    2fdc:	81 30       	cpi	r24, 0x01	; 1
    2fde:	91 05       	cpc	r25, r1
    2fe0:	d1 f0       	breq	.+52     	; 0x3016 <MDIO_Set_PORT_DIR+0x64>
    2fe2:	2b 81       	ldd	r18, Y+3	; 0x03
    2fe4:	3c 81       	ldd	r19, Y+4	; 0x04
    2fe6:	22 30       	cpi	r18, 0x02	; 2
    2fe8:	31 05       	cpc	r19, r1
    2fea:	2c f4       	brge	.+10     	; 0x2ff6 <MDIO_Set_PORT_DIR+0x44>
    2fec:	8b 81       	ldd	r24, Y+3	; 0x03
    2fee:	9c 81       	ldd	r25, Y+4	; 0x04
    2ff0:	00 97       	sbiw	r24, 0x00	; 0
    2ff2:	61 f0       	breq	.+24     	; 0x300c <MDIO_Set_PORT_DIR+0x5a>
    2ff4:	1e c0       	rjmp	.+60     	; 0x3032 <MDIO_Set_PORT_DIR+0x80>
    2ff6:	2b 81       	ldd	r18, Y+3	; 0x03
    2ff8:	3c 81       	ldd	r19, Y+4	; 0x04
    2ffa:	22 30       	cpi	r18, 0x02	; 2
    2ffc:	31 05       	cpc	r19, r1
    2ffe:	81 f0       	breq	.+32     	; 0x3020 <MDIO_Set_PORT_DIR+0x6e>
    3000:	8b 81       	ldd	r24, Y+3	; 0x03
    3002:	9c 81       	ldd	r25, Y+4	; 0x04
    3004:	83 30       	cpi	r24, 0x03	; 3
    3006:	91 05       	cpc	r25, r1
    3008:	81 f0       	breq	.+32     	; 0x302a <MDIO_Set_PORT_DIR+0x78>
    300a:	13 c0       	rjmp	.+38     	; 0x3032 <MDIO_Set_PORT_DIR+0x80>
	{
	case MDIO_PORTA:
		DDRA = Copy_u8PortDirection;
    300c:	ea e3       	ldi	r30, 0x3A	; 58
    300e:	f0 e0       	ldi	r31, 0x00	; 0
    3010:	8a 81       	ldd	r24, Y+2	; 0x02
    3012:	80 83       	st	Z, r24
    3014:	0e c0       	rjmp	.+28     	; 0x3032 <MDIO_Set_PORT_DIR+0x80>
		break;
	case MDIO_PORTB:
			DDRB = Copy_u8PortDirection;
    3016:	e7 e3       	ldi	r30, 0x37	; 55
    3018:	f0 e0       	ldi	r31, 0x00	; 0
    301a:	8a 81       	ldd	r24, Y+2	; 0x02
    301c:	80 83       	st	Z, r24
    301e:	09 c0       	rjmp	.+18     	; 0x3032 <MDIO_Set_PORT_DIR+0x80>
			break;
	case MDIO_PORTC:
			DDRC = Copy_u8PortDirection;
    3020:	e4 e3       	ldi	r30, 0x34	; 52
    3022:	f0 e0       	ldi	r31, 0x00	; 0
    3024:	8a 81       	ldd	r24, Y+2	; 0x02
    3026:	80 83       	st	Z, r24
    3028:	04 c0       	rjmp	.+8      	; 0x3032 <MDIO_Set_PORT_DIR+0x80>
			break;
	case MDIO_PORTD:
			DDRD = Copy_u8PortDirection;
    302a:	e1 e3       	ldi	r30, 0x31	; 49
    302c:	f0 e0       	ldi	r31, 0x00	; 0
    302e:	8a 81       	ldd	r24, Y+2	; 0x02
    3030:	80 83       	st	Z, r24

}
else{
	/*invalid port direction*/
}
}
    3032:	0f 90       	pop	r0
    3034:	0f 90       	pop	r0
    3036:	0f 90       	pop	r0
    3038:	0f 90       	pop	r0
    303a:	cf 91       	pop	r28
    303c:	df 91       	pop	r29
    303e:	08 95       	ret

00003040 <MDIO_Set_PIN_DIR>:
void MDIO_Set_PIN_DIR(u8 Copy_u8PortNumber,u8 Copy_u8PinNumber,u8 Copy_u8PinDirection){
    3040:	df 93       	push	r29
    3042:	cf 93       	push	r28
    3044:	00 d0       	rcall	.+0      	; 0x3046 <MDIO_Set_PIN_DIR+0x6>
    3046:	00 d0       	rcall	.+0      	; 0x3048 <MDIO_Set_PIN_DIR+0x8>
    3048:	0f 92       	push	r0
    304a:	cd b7       	in	r28, 0x3d	; 61
    304c:	de b7       	in	r29, 0x3e	; 62
    304e:	89 83       	std	Y+1, r24	; 0x01
    3050:	6a 83       	std	Y+2, r22	; 0x02
    3052:	4b 83       	std	Y+3, r20	; 0x03


	if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8)){
    3054:	8a 81       	ldd	r24, Y+2	; 0x02
    3056:	88 30       	cpi	r24, 0x08	; 8
    3058:	08 f0       	brcs	.+2      	; 0x305c <MDIO_Set_PIN_DIR+0x1c>
    305a:	e0 c0       	rjmp	.+448    	; 0x321c <MDIO_Set_PIN_DIR+0x1dc>

		switch(Copy_u8PortNumber)
    305c:	89 81       	ldd	r24, Y+1	; 0x01
    305e:	28 2f       	mov	r18, r24
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	3d 83       	std	Y+5, r19	; 0x05
    3064:	2c 83       	std	Y+4, r18	; 0x04
    3066:	8c 81       	ldd	r24, Y+4	; 0x04
    3068:	9d 81       	ldd	r25, Y+5	; 0x05
    306a:	81 30       	cpi	r24, 0x01	; 1
    306c:	91 05       	cpc	r25, r1
    306e:	09 f4       	brne	.+2      	; 0x3072 <MDIO_Set_PIN_DIR+0x32>
    3070:	47 c0       	rjmp	.+142    	; 0x3100 <MDIO_Set_PIN_DIR+0xc0>
    3072:	2c 81       	ldd	r18, Y+4	; 0x04
    3074:	3d 81       	ldd	r19, Y+5	; 0x05
    3076:	22 30       	cpi	r18, 0x02	; 2
    3078:	31 05       	cpc	r19, r1
    307a:	2c f4       	brge	.+10     	; 0x3086 <MDIO_Set_PIN_DIR+0x46>
    307c:	8c 81       	ldd	r24, Y+4	; 0x04
    307e:	9d 81       	ldd	r25, Y+5	; 0x05
    3080:	00 97       	sbiw	r24, 0x00	; 0
    3082:	71 f0       	breq	.+28     	; 0x30a0 <MDIO_Set_PIN_DIR+0x60>
    3084:	cb c0       	rjmp	.+406    	; 0x321c <MDIO_Set_PIN_DIR+0x1dc>
    3086:	2c 81       	ldd	r18, Y+4	; 0x04
    3088:	3d 81       	ldd	r19, Y+5	; 0x05
    308a:	22 30       	cpi	r18, 0x02	; 2
    308c:	31 05       	cpc	r19, r1
    308e:	09 f4       	brne	.+2      	; 0x3092 <MDIO_Set_PIN_DIR+0x52>
    3090:	67 c0       	rjmp	.+206    	; 0x3160 <MDIO_Set_PIN_DIR+0x120>
    3092:	8c 81       	ldd	r24, Y+4	; 0x04
    3094:	9d 81       	ldd	r25, Y+5	; 0x05
    3096:	83 30       	cpi	r24, 0x03	; 3
    3098:	91 05       	cpc	r25, r1
    309a:	09 f4       	brne	.+2      	; 0x309e <MDIO_Set_PIN_DIR+0x5e>
    309c:	91 c0       	rjmp	.+290    	; 0x31c0 <MDIO_Set_PIN_DIR+0x180>
    309e:	be c0       	rjmp	.+380    	; 0x321c <MDIO_Set_PIN_DIR+0x1dc>
		{
		case MDIO_PORTA:
			if(Copy_u8PinDirection==PIN_OUTPUT){
    30a0:	8b 81       	ldd	r24, Y+3	; 0x03
    30a2:	81 30       	cpi	r24, 0x01	; 1
    30a4:	a1 f4       	brne	.+40     	; 0x30ce <MDIO_Set_PIN_DIR+0x8e>
				SET_BIT(DDRA,Copy_u8PinNumber);
    30a6:	aa e3       	ldi	r26, 0x3A	; 58
    30a8:	b0 e0       	ldi	r27, 0x00	; 0
    30aa:	ea e3       	ldi	r30, 0x3A	; 58
    30ac:	f0 e0       	ldi	r31, 0x00	; 0
    30ae:	80 81       	ld	r24, Z
    30b0:	48 2f       	mov	r20, r24
    30b2:	8a 81       	ldd	r24, Y+2	; 0x02
    30b4:	28 2f       	mov	r18, r24
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	81 e0       	ldi	r24, 0x01	; 1
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	02 2e       	mov	r0, r18
    30be:	02 c0       	rjmp	.+4      	; 0x30c4 <MDIO_Set_PIN_DIR+0x84>
    30c0:	88 0f       	add	r24, r24
    30c2:	99 1f       	adc	r25, r25
    30c4:	0a 94       	dec	r0
    30c6:	e2 f7       	brpl	.-8      	; 0x30c0 <MDIO_Set_PIN_DIR+0x80>
    30c8:	84 2b       	or	r24, r20
    30ca:	8c 93       	st	X, r24
    30cc:	a7 c0       	rjmp	.+334    	; 0x321c <MDIO_Set_PIN_DIR+0x1dc>
			}
			else if(Copy_u8PinDirection==PIN_INPUT){
    30ce:	8b 81       	ldd	r24, Y+3	; 0x03
    30d0:	88 23       	and	r24, r24
    30d2:	09 f0       	breq	.+2      	; 0x30d6 <MDIO_Set_PIN_DIR+0x96>
    30d4:	a3 c0       	rjmp	.+326    	; 0x321c <MDIO_Set_PIN_DIR+0x1dc>
				CLR_BIT(DDRA,Copy_u8PinNumber);
    30d6:	aa e3       	ldi	r26, 0x3A	; 58
    30d8:	b0 e0       	ldi	r27, 0x00	; 0
    30da:	ea e3       	ldi	r30, 0x3A	; 58
    30dc:	f0 e0       	ldi	r31, 0x00	; 0
    30de:	80 81       	ld	r24, Z
    30e0:	48 2f       	mov	r20, r24
    30e2:	8a 81       	ldd	r24, Y+2	; 0x02
    30e4:	28 2f       	mov	r18, r24
    30e6:	30 e0       	ldi	r19, 0x00	; 0
    30e8:	81 e0       	ldi	r24, 0x01	; 1
    30ea:	90 e0       	ldi	r25, 0x00	; 0
    30ec:	02 2e       	mov	r0, r18
    30ee:	02 c0       	rjmp	.+4      	; 0x30f4 <MDIO_Set_PIN_DIR+0xb4>
    30f0:	88 0f       	add	r24, r24
    30f2:	99 1f       	adc	r25, r25
    30f4:	0a 94       	dec	r0
    30f6:	e2 f7       	brpl	.-8      	; 0x30f0 <MDIO_Set_PIN_DIR+0xb0>
    30f8:	80 95       	com	r24
    30fa:	84 23       	and	r24, r20
    30fc:	8c 93       	st	X, r24
    30fe:	8e c0       	rjmp	.+284    	; 0x321c <MDIO_Set_PIN_DIR+0x1dc>
				/*invalid port direction*/
			}
			break;

		case MDIO_PORTB:
					if(Copy_u8PinDirection==PIN_OUTPUT){
    3100:	8b 81       	ldd	r24, Y+3	; 0x03
    3102:	81 30       	cpi	r24, 0x01	; 1
    3104:	a1 f4       	brne	.+40     	; 0x312e <MDIO_Set_PIN_DIR+0xee>
						SET_BIT(DDRB,Copy_u8PinNumber);
    3106:	a7 e3       	ldi	r26, 0x37	; 55
    3108:	b0 e0       	ldi	r27, 0x00	; 0
    310a:	e7 e3       	ldi	r30, 0x37	; 55
    310c:	f0 e0       	ldi	r31, 0x00	; 0
    310e:	80 81       	ld	r24, Z
    3110:	48 2f       	mov	r20, r24
    3112:	8a 81       	ldd	r24, Y+2	; 0x02
    3114:	28 2f       	mov	r18, r24
    3116:	30 e0       	ldi	r19, 0x00	; 0
    3118:	81 e0       	ldi	r24, 0x01	; 1
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	02 2e       	mov	r0, r18
    311e:	02 c0       	rjmp	.+4      	; 0x3124 <MDIO_Set_PIN_DIR+0xe4>
    3120:	88 0f       	add	r24, r24
    3122:	99 1f       	adc	r25, r25
    3124:	0a 94       	dec	r0
    3126:	e2 f7       	brpl	.-8      	; 0x3120 <MDIO_Set_PIN_DIR+0xe0>
    3128:	84 2b       	or	r24, r20
    312a:	8c 93       	st	X, r24
    312c:	77 c0       	rjmp	.+238    	; 0x321c <MDIO_Set_PIN_DIR+0x1dc>
					}
					else if(Copy_u8PinDirection==PIN_INPUT){
    312e:	8b 81       	ldd	r24, Y+3	; 0x03
    3130:	88 23       	and	r24, r24
    3132:	09 f0       	breq	.+2      	; 0x3136 <MDIO_Set_PIN_DIR+0xf6>
    3134:	73 c0       	rjmp	.+230    	; 0x321c <MDIO_Set_PIN_DIR+0x1dc>
						CLR_BIT(DDRB,Copy_u8PinNumber);
    3136:	a7 e3       	ldi	r26, 0x37	; 55
    3138:	b0 e0       	ldi	r27, 0x00	; 0
    313a:	e7 e3       	ldi	r30, 0x37	; 55
    313c:	f0 e0       	ldi	r31, 0x00	; 0
    313e:	80 81       	ld	r24, Z
    3140:	48 2f       	mov	r20, r24
    3142:	8a 81       	ldd	r24, Y+2	; 0x02
    3144:	28 2f       	mov	r18, r24
    3146:	30 e0       	ldi	r19, 0x00	; 0
    3148:	81 e0       	ldi	r24, 0x01	; 1
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	02 2e       	mov	r0, r18
    314e:	02 c0       	rjmp	.+4      	; 0x3154 <MDIO_Set_PIN_DIR+0x114>
    3150:	88 0f       	add	r24, r24
    3152:	99 1f       	adc	r25, r25
    3154:	0a 94       	dec	r0
    3156:	e2 f7       	brpl	.-8      	; 0x3150 <MDIO_Set_PIN_DIR+0x110>
    3158:	80 95       	com	r24
    315a:	84 23       	and	r24, r20
    315c:	8c 93       	st	X, r24
    315e:	5e c0       	rjmp	.+188    	; 0x321c <MDIO_Set_PIN_DIR+0x1dc>
						/*invalid port direction*/
					}
					break;

		case MDIO_PORTC:
					if(Copy_u8PinDirection==PIN_OUTPUT){
    3160:	8b 81       	ldd	r24, Y+3	; 0x03
    3162:	81 30       	cpi	r24, 0x01	; 1
    3164:	a1 f4       	brne	.+40     	; 0x318e <MDIO_Set_PIN_DIR+0x14e>
						SET_BIT(DDRC,Copy_u8PinNumber);
    3166:	a4 e3       	ldi	r26, 0x34	; 52
    3168:	b0 e0       	ldi	r27, 0x00	; 0
    316a:	e4 e3       	ldi	r30, 0x34	; 52
    316c:	f0 e0       	ldi	r31, 0x00	; 0
    316e:	80 81       	ld	r24, Z
    3170:	48 2f       	mov	r20, r24
    3172:	8a 81       	ldd	r24, Y+2	; 0x02
    3174:	28 2f       	mov	r18, r24
    3176:	30 e0       	ldi	r19, 0x00	; 0
    3178:	81 e0       	ldi	r24, 0x01	; 1
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	02 2e       	mov	r0, r18
    317e:	02 c0       	rjmp	.+4      	; 0x3184 <MDIO_Set_PIN_DIR+0x144>
    3180:	88 0f       	add	r24, r24
    3182:	99 1f       	adc	r25, r25
    3184:	0a 94       	dec	r0
    3186:	e2 f7       	brpl	.-8      	; 0x3180 <MDIO_Set_PIN_DIR+0x140>
    3188:	84 2b       	or	r24, r20
    318a:	8c 93       	st	X, r24
    318c:	47 c0       	rjmp	.+142    	; 0x321c <MDIO_Set_PIN_DIR+0x1dc>
					}
					else if(Copy_u8PinDirection==PIN_INPUT){
    318e:	8b 81       	ldd	r24, Y+3	; 0x03
    3190:	88 23       	and	r24, r24
    3192:	09 f0       	breq	.+2      	; 0x3196 <MDIO_Set_PIN_DIR+0x156>
    3194:	43 c0       	rjmp	.+134    	; 0x321c <MDIO_Set_PIN_DIR+0x1dc>
						CLR_BIT(DDRC,Copy_u8PinNumber);
    3196:	a4 e3       	ldi	r26, 0x34	; 52
    3198:	b0 e0       	ldi	r27, 0x00	; 0
    319a:	e4 e3       	ldi	r30, 0x34	; 52
    319c:	f0 e0       	ldi	r31, 0x00	; 0
    319e:	80 81       	ld	r24, Z
    31a0:	48 2f       	mov	r20, r24
    31a2:	8a 81       	ldd	r24, Y+2	; 0x02
    31a4:	28 2f       	mov	r18, r24
    31a6:	30 e0       	ldi	r19, 0x00	; 0
    31a8:	81 e0       	ldi	r24, 0x01	; 1
    31aa:	90 e0       	ldi	r25, 0x00	; 0
    31ac:	02 2e       	mov	r0, r18
    31ae:	02 c0       	rjmp	.+4      	; 0x31b4 <MDIO_Set_PIN_DIR+0x174>
    31b0:	88 0f       	add	r24, r24
    31b2:	99 1f       	adc	r25, r25
    31b4:	0a 94       	dec	r0
    31b6:	e2 f7       	brpl	.-8      	; 0x31b0 <MDIO_Set_PIN_DIR+0x170>
    31b8:	80 95       	com	r24
    31ba:	84 23       	and	r24, r20
    31bc:	8c 93       	st	X, r24
    31be:	2e c0       	rjmp	.+92     	; 0x321c <MDIO_Set_PIN_DIR+0x1dc>
					}
					break;


		case MDIO_PORTD:
					if(Copy_u8PinDirection==PIN_OUTPUT){
    31c0:	8b 81       	ldd	r24, Y+3	; 0x03
    31c2:	81 30       	cpi	r24, 0x01	; 1
    31c4:	a1 f4       	brne	.+40     	; 0x31ee <MDIO_Set_PIN_DIR+0x1ae>
						SET_BIT(DDRD,Copy_u8PinNumber);
    31c6:	a1 e3       	ldi	r26, 0x31	; 49
    31c8:	b0 e0       	ldi	r27, 0x00	; 0
    31ca:	e1 e3       	ldi	r30, 0x31	; 49
    31cc:	f0 e0       	ldi	r31, 0x00	; 0
    31ce:	80 81       	ld	r24, Z
    31d0:	48 2f       	mov	r20, r24
    31d2:	8a 81       	ldd	r24, Y+2	; 0x02
    31d4:	28 2f       	mov	r18, r24
    31d6:	30 e0       	ldi	r19, 0x00	; 0
    31d8:	81 e0       	ldi	r24, 0x01	; 1
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	02 2e       	mov	r0, r18
    31de:	02 c0       	rjmp	.+4      	; 0x31e4 <MDIO_Set_PIN_DIR+0x1a4>
    31e0:	88 0f       	add	r24, r24
    31e2:	99 1f       	adc	r25, r25
    31e4:	0a 94       	dec	r0
    31e6:	e2 f7       	brpl	.-8      	; 0x31e0 <MDIO_Set_PIN_DIR+0x1a0>
    31e8:	84 2b       	or	r24, r20
    31ea:	8c 93       	st	X, r24
    31ec:	17 c0       	rjmp	.+46     	; 0x321c <MDIO_Set_PIN_DIR+0x1dc>
					}
					else if(Copy_u8PinDirection==PIN_INPUT){
    31ee:	8b 81       	ldd	r24, Y+3	; 0x03
    31f0:	88 23       	and	r24, r24
    31f2:	a1 f4       	brne	.+40     	; 0x321c <MDIO_Set_PIN_DIR+0x1dc>
						CLR_BIT(DDRD,Copy_u8PinNumber);
    31f4:	a1 e3       	ldi	r26, 0x31	; 49
    31f6:	b0 e0       	ldi	r27, 0x00	; 0
    31f8:	e1 e3       	ldi	r30, 0x31	; 49
    31fa:	f0 e0       	ldi	r31, 0x00	; 0
    31fc:	80 81       	ld	r24, Z
    31fe:	48 2f       	mov	r20, r24
    3200:	8a 81       	ldd	r24, Y+2	; 0x02
    3202:	28 2f       	mov	r18, r24
    3204:	30 e0       	ldi	r19, 0x00	; 0
    3206:	81 e0       	ldi	r24, 0x01	; 1
    3208:	90 e0       	ldi	r25, 0x00	; 0
    320a:	02 2e       	mov	r0, r18
    320c:	02 c0       	rjmp	.+4      	; 0x3212 <MDIO_Set_PIN_DIR+0x1d2>
    320e:	88 0f       	add	r24, r24
    3210:	99 1f       	adc	r25, r25
    3212:	0a 94       	dec	r0
    3214:	e2 f7       	brpl	.-8      	; 0x320e <MDIO_Set_PIN_DIR+0x1ce>
    3216:	80 95       	com	r24
    3218:	84 23       	and	r24, r20
    321a:	8c 93       	st	X, r24
		/*wrong pin number*/

	}


}
    321c:	0f 90       	pop	r0
    321e:	0f 90       	pop	r0
    3220:	0f 90       	pop	r0
    3222:	0f 90       	pop	r0
    3224:	0f 90       	pop	r0
    3226:	cf 91       	pop	r28
    3228:	df 91       	pop	r29
    322a:	08 95       	ret

0000322c <MDIO_Set_PORT_VALUE>:
void MDIO_Set_PORT_VALUE(u8 Copy_u8PortNumber,u8 Copy_u8PortNumberValue){
    322c:	df 93       	push	r29
    322e:	cf 93       	push	r28
    3230:	00 d0       	rcall	.+0      	; 0x3232 <MDIO_Set_PORT_VALUE+0x6>
    3232:	00 d0       	rcall	.+0      	; 0x3234 <MDIO_Set_PORT_VALUE+0x8>
    3234:	cd b7       	in	r28, 0x3d	; 61
    3236:	de b7       	in	r29, 0x3e	; 62
    3238:	89 83       	std	Y+1, r24	; 0x01
    323a:	6a 83       	std	Y+2, r22	; 0x02

/*Ø¨ØªØ®Ù„ÙŠ Ø§Ù„Ø¨ÙˆØ±Øª Ø¨Ø§Ù„Ù�Ø§Ù„ÙŠÙˆ Ø§Ù„Ù„ÙŠ Ø§Ù† Ø¹Ø§ÙˆØ²Ù‡Ø§ Ù…Ø´ Ø¯Ø§ÙŠÙ…Ø§ 11111111Ø§Ùˆ 00000000 Ø¨Ø³ */
	if((Copy_u8PortNumberValue)>=0 && (Copy_u8PortNumberValue)<255){
    323c:	8a 81       	ldd	r24, Y+2	; 0x02
    323e:	8f 3f       	cpi	r24, 0xFF	; 255
    3240:	91 f1       	breq	.+100    	; 0x32a6 <MDIO_Set_PORT_VALUE+0x7a>

		/*valid port Value*/
		switch(Copy_u8PortNumber)
    3242:	89 81       	ldd	r24, Y+1	; 0x01
    3244:	28 2f       	mov	r18, r24
    3246:	30 e0       	ldi	r19, 0x00	; 0
    3248:	3c 83       	std	Y+4, r19	; 0x04
    324a:	2b 83       	std	Y+3, r18	; 0x03
    324c:	8b 81       	ldd	r24, Y+3	; 0x03
    324e:	9c 81       	ldd	r25, Y+4	; 0x04
    3250:	81 30       	cpi	r24, 0x01	; 1
    3252:	91 05       	cpc	r25, r1
    3254:	d1 f0       	breq	.+52     	; 0x328a <MDIO_Set_PORT_VALUE+0x5e>
    3256:	2b 81       	ldd	r18, Y+3	; 0x03
    3258:	3c 81       	ldd	r19, Y+4	; 0x04
    325a:	22 30       	cpi	r18, 0x02	; 2
    325c:	31 05       	cpc	r19, r1
    325e:	2c f4       	brge	.+10     	; 0x326a <MDIO_Set_PORT_VALUE+0x3e>
    3260:	8b 81       	ldd	r24, Y+3	; 0x03
    3262:	9c 81       	ldd	r25, Y+4	; 0x04
    3264:	00 97       	sbiw	r24, 0x00	; 0
    3266:	61 f0       	breq	.+24     	; 0x3280 <MDIO_Set_PORT_VALUE+0x54>
    3268:	1e c0       	rjmp	.+60     	; 0x32a6 <MDIO_Set_PORT_VALUE+0x7a>
    326a:	2b 81       	ldd	r18, Y+3	; 0x03
    326c:	3c 81       	ldd	r19, Y+4	; 0x04
    326e:	22 30       	cpi	r18, 0x02	; 2
    3270:	31 05       	cpc	r19, r1
    3272:	81 f0       	breq	.+32     	; 0x3294 <MDIO_Set_PORT_VALUE+0x68>
    3274:	8b 81       	ldd	r24, Y+3	; 0x03
    3276:	9c 81       	ldd	r25, Y+4	; 0x04
    3278:	83 30       	cpi	r24, 0x03	; 3
    327a:	91 05       	cpc	r25, r1
    327c:	81 f0       	breq	.+32     	; 0x329e <MDIO_Set_PORT_VALUE+0x72>
    327e:	13 c0       	rjmp	.+38     	; 0x32a6 <MDIO_Set_PORT_VALUE+0x7a>
		{
		case MDIO_PORTA:
			PORTA = Copy_u8PortNumberValue;
    3280:	eb e3       	ldi	r30, 0x3B	; 59
    3282:	f0 e0       	ldi	r31, 0x00	; 0
    3284:	8a 81       	ldd	r24, Y+2	; 0x02
    3286:	80 83       	st	Z, r24
    3288:	0e c0       	rjmp	.+28     	; 0x32a6 <MDIO_Set_PORT_VALUE+0x7a>
			break;
		case MDIO_PORTB:
				PORTB = Copy_u8PortNumberValue;
    328a:	e8 e3       	ldi	r30, 0x38	; 56
    328c:	f0 e0       	ldi	r31, 0x00	; 0
    328e:	8a 81       	ldd	r24, Y+2	; 0x02
    3290:	80 83       	st	Z, r24
    3292:	09 c0       	rjmp	.+18     	; 0x32a6 <MDIO_Set_PORT_VALUE+0x7a>
				break;
		case MDIO_PORTC:
				PORTC = Copy_u8PortNumberValue;
    3294:	e5 e3       	ldi	r30, 0x35	; 53
    3296:	f0 e0       	ldi	r31, 0x00	; 0
    3298:	8a 81       	ldd	r24, Y+2	; 0x02
    329a:	80 83       	st	Z, r24
    329c:	04 c0       	rjmp	.+8      	; 0x32a6 <MDIO_Set_PORT_VALUE+0x7a>
				break;
		case MDIO_PORTD:
				PORTD = Copy_u8PortNumberValue;
    329e:	e2 e3       	ldi	r30, 0x32	; 50
    32a0:	f0 e0       	ldi	r31, 0x00	; 0
    32a2:	8a 81       	ldd	r24, Y+2	; 0x02
    32a4:	80 83       	st	Z, r24
	else{
		/*invalid port value*/
	}


	}
    32a6:	0f 90       	pop	r0
    32a8:	0f 90       	pop	r0
    32aa:	0f 90       	pop	r0
    32ac:	0f 90       	pop	r0
    32ae:	cf 91       	pop	r28
    32b0:	df 91       	pop	r29
    32b2:	08 95       	ret

000032b4 <MDIO_Set_PIN_VALUE>:
void MDIO_Set_PIN_VALUE(u8 Copy_u8PortNumber, u8 Copy_u8PinNumber ,u8 Copy_u8PinValue){
    32b4:	df 93       	push	r29
    32b6:	cf 93       	push	r28
    32b8:	00 d0       	rcall	.+0      	; 0x32ba <MDIO_Set_PIN_VALUE+0x6>
    32ba:	00 d0       	rcall	.+0      	; 0x32bc <MDIO_Set_PIN_VALUE+0x8>
    32bc:	0f 92       	push	r0
    32be:	cd b7       	in	r28, 0x3d	; 61
    32c0:	de b7       	in	r29, 0x3e	; 62
    32c2:	89 83       	std	Y+1, r24	; 0x01
    32c4:	6a 83       	std	Y+2, r22	; 0x02
    32c6:	4b 83       	std	Y+3, r20	; 0x03


	if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8)){
    32c8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ca:	88 30       	cpi	r24, 0x08	; 8
    32cc:	08 f0       	brcs	.+2      	; 0x32d0 <MDIO_Set_PIN_VALUE+0x1c>
    32ce:	e0 c0       	rjmp	.+448    	; 0x3490 <MDIO_Set_PIN_VALUE+0x1dc>

		switch(Copy_u8PortNumber)
    32d0:	89 81       	ldd	r24, Y+1	; 0x01
    32d2:	28 2f       	mov	r18, r24
    32d4:	30 e0       	ldi	r19, 0x00	; 0
    32d6:	3d 83       	std	Y+5, r19	; 0x05
    32d8:	2c 83       	std	Y+4, r18	; 0x04
    32da:	8c 81       	ldd	r24, Y+4	; 0x04
    32dc:	9d 81       	ldd	r25, Y+5	; 0x05
    32de:	81 30       	cpi	r24, 0x01	; 1
    32e0:	91 05       	cpc	r25, r1
    32e2:	09 f4       	brne	.+2      	; 0x32e6 <MDIO_Set_PIN_VALUE+0x32>
    32e4:	47 c0       	rjmp	.+142    	; 0x3374 <MDIO_Set_PIN_VALUE+0xc0>
    32e6:	2c 81       	ldd	r18, Y+4	; 0x04
    32e8:	3d 81       	ldd	r19, Y+5	; 0x05
    32ea:	22 30       	cpi	r18, 0x02	; 2
    32ec:	31 05       	cpc	r19, r1
    32ee:	2c f4       	brge	.+10     	; 0x32fa <MDIO_Set_PIN_VALUE+0x46>
    32f0:	8c 81       	ldd	r24, Y+4	; 0x04
    32f2:	9d 81       	ldd	r25, Y+5	; 0x05
    32f4:	00 97       	sbiw	r24, 0x00	; 0
    32f6:	71 f0       	breq	.+28     	; 0x3314 <MDIO_Set_PIN_VALUE+0x60>
    32f8:	cb c0       	rjmp	.+406    	; 0x3490 <MDIO_Set_PIN_VALUE+0x1dc>
    32fa:	2c 81       	ldd	r18, Y+4	; 0x04
    32fc:	3d 81       	ldd	r19, Y+5	; 0x05
    32fe:	22 30       	cpi	r18, 0x02	; 2
    3300:	31 05       	cpc	r19, r1
    3302:	09 f4       	brne	.+2      	; 0x3306 <MDIO_Set_PIN_VALUE+0x52>
    3304:	67 c0       	rjmp	.+206    	; 0x33d4 <MDIO_Set_PIN_VALUE+0x120>
    3306:	8c 81       	ldd	r24, Y+4	; 0x04
    3308:	9d 81       	ldd	r25, Y+5	; 0x05
    330a:	83 30       	cpi	r24, 0x03	; 3
    330c:	91 05       	cpc	r25, r1
    330e:	09 f4       	brne	.+2      	; 0x3312 <MDIO_Set_PIN_VALUE+0x5e>
    3310:	91 c0       	rjmp	.+290    	; 0x3434 <MDIO_Set_PIN_VALUE+0x180>
    3312:	be c0       	rjmp	.+380    	; 0x3490 <MDIO_Set_PIN_VALUE+0x1dc>
		{
		case MDIO_PORTA:
			if(Copy_u8PinValue==PIN_HIGH){
    3314:	8b 81       	ldd	r24, Y+3	; 0x03
    3316:	81 30       	cpi	r24, 0x01	; 1
    3318:	a1 f4       	brne	.+40     	; 0x3342 <MDIO_Set_PIN_VALUE+0x8e>
				SET_BIT(PORTA,Copy_u8PinNumber);
    331a:	ab e3       	ldi	r26, 0x3B	; 59
    331c:	b0 e0       	ldi	r27, 0x00	; 0
    331e:	eb e3       	ldi	r30, 0x3B	; 59
    3320:	f0 e0       	ldi	r31, 0x00	; 0
    3322:	80 81       	ld	r24, Z
    3324:	48 2f       	mov	r20, r24
    3326:	8a 81       	ldd	r24, Y+2	; 0x02
    3328:	28 2f       	mov	r18, r24
    332a:	30 e0       	ldi	r19, 0x00	; 0
    332c:	81 e0       	ldi	r24, 0x01	; 1
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	02 2e       	mov	r0, r18
    3332:	02 c0       	rjmp	.+4      	; 0x3338 <MDIO_Set_PIN_VALUE+0x84>
    3334:	88 0f       	add	r24, r24
    3336:	99 1f       	adc	r25, r25
    3338:	0a 94       	dec	r0
    333a:	e2 f7       	brpl	.-8      	; 0x3334 <MDIO_Set_PIN_VALUE+0x80>
    333c:	84 2b       	or	r24, r20
    333e:	8c 93       	st	X, r24
    3340:	a7 c0       	rjmp	.+334    	; 0x3490 <MDIO_Set_PIN_VALUE+0x1dc>
			}
			else if(Copy_u8PinValue==PIN_LOW){
    3342:	8b 81       	ldd	r24, Y+3	; 0x03
    3344:	88 23       	and	r24, r24
    3346:	09 f0       	breq	.+2      	; 0x334a <MDIO_Set_PIN_VALUE+0x96>
    3348:	a3 c0       	rjmp	.+326    	; 0x3490 <MDIO_Set_PIN_VALUE+0x1dc>
				CLR_BIT(PORTA,Copy_u8PinNumber);
    334a:	ab e3       	ldi	r26, 0x3B	; 59
    334c:	b0 e0       	ldi	r27, 0x00	; 0
    334e:	eb e3       	ldi	r30, 0x3B	; 59
    3350:	f0 e0       	ldi	r31, 0x00	; 0
    3352:	80 81       	ld	r24, Z
    3354:	48 2f       	mov	r20, r24
    3356:	8a 81       	ldd	r24, Y+2	; 0x02
    3358:	28 2f       	mov	r18, r24
    335a:	30 e0       	ldi	r19, 0x00	; 0
    335c:	81 e0       	ldi	r24, 0x01	; 1
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	02 2e       	mov	r0, r18
    3362:	02 c0       	rjmp	.+4      	; 0x3368 <MDIO_Set_PIN_VALUE+0xb4>
    3364:	88 0f       	add	r24, r24
    3366:	99 1f       	adc	r25, r25
    3368:	0a 94       	dec	r0
    336a:	e2 f7       	brpl	.-8      	; 0x3364 <MDIO_Set_PIN_VALUE+0xb0>
    336c:	80 95       	com	r24
    336e:	84 23       	and	r24, r20
    3370:	8c 93       	st	X, r24
    3372:	8e c0       	rjmp	.+284    	; 0x3490 <MDIO_Set_PIN_VALUE+0x1dc>
				/*invalid port direction*/
			}
			break;

		case MDIO_PORTB:
					if(Copy_u8PinValue==PIN_HIGH){
    3374:	8b 81       	ldd	r24, Y+3	; 0x03
    3376:	81 30       	cpi	r24, 0x01	; 1
    3378:	a1 f4       	brne	.+40     	; 0x33a2 <MDIO_Set_PIN_VALUE+0xee>
						SET_BIT(PORTB,Copy_u8PinNumber);
    337a:	a8 e3       	ldi	r26, 0x38	; 56
    337c:	b0 e0       	ldi	r27, 0x00	; 0
    337e:	e8 e3       	ldi	r30, 0x38	; 56
    3380:	f0 e0       	ldi	r31, 0x00	; 0
    3382:	80 81       	ld	r24, Z
    3384:	48 2f       	mov	r20, r24
    3386:	8a 81       	ldd	r24, Y+2	; 0x02
    3388:	28 2f       	mov	r18, r24
    338a:	30 e0       	ldi	r19, 0x00	; 0
    338c:	81 e0       	ldi	r24, 0x01	; 1
    338e:	90 e0       	ldi	r25, 0x00	; 0
    3390:	02 2e       	mov	r0, r18
    3392:	02 c0       	rjmp	.+4      	; 0x3398 <MDIO_Set_PIN_VALUE+0xe4>
    3394:	88 0f       	add	r24, r24
    3396:	99 1f       	adc	r25, r25
    3398:	0a 94       	dec	r0
    339a:	e2 f7       	brpl	.-8      	; 0x3394 <MDIO_Set_PIN_VALUE+0xe0>
    339c:	84 2b       	or	r24, r20
    339e:	8c 93       	st	X, r24
    33a0:	77 c0       	rjmp	.+238    	; 0x3490 <MDIO_Set_PIN_VALUE+0x1dc>
					}
					else if(Copy_u8PinValue==PIN_LOW){
    33a2:	8b 81       	ldd	r24, Y+3	; 0x03
    33a4:	88 23       	and	r24, r24
    33a6:	09 f0       	breq	.+2      	; 0x33aa <MDIO_Set_PIN_VALUE+0xf6>
    33a8:	73 c0       	rjmp	.+230    	; 0x3490 <MDIO_Set_PIN_VALUE+0x1dc>
						CLR_BIT(PORTB,Copy_u8PinNumber);
    33aa:	a8 e3       	ldi	r26, 0x38	; 56
    33ac:	b0 e0       	ldi	r27, 0x00	; 0
    33ae:	e8 e3       	ldi	r30, 0x38	; 56
    33b0:	f0 e0       	ldi	r31, 0x00	; 0
    33b2:	80 81       	ld	r24, Z
    33b4:	48 2f       	mov	r20, r24
    33b6:	8a 81       	ldd	r24, Y+2	; 0x02
    33b8:	28 2f       	mov	r18, r24
    33ba:	30 e0       	ldi	r19, 0x00	; 0
    33bc:	81 e0       	ldi	r24, 0x01	; 1
    33be:	90 e0       	ldi	r25, 0x00	; 0
    33c0:	02 2e       	mov	r0, r18
    33c2:	02 c0       	rjmp	.+4      	; 0x33c8 <MDIO_Set_PIN_VALUE+0x114>
    33c4:	88 0f       	add	r24, r24
    33c6:	99 1f       	adc	r25, r25
    33c8:	0a 94       	dec	r0
    33ca:	e2 f7       	brpl	.-8      	; 0x33c4 <MDIO_Set_PIN_VALUE+0x110>
    33cc:	80 95       	com	r24
    33ce:	84 23       	and	r24, r20
    33d0:	8c 93       	st	X, r24
    33d2:	5e c0       	rjmp	.+188    	; 0x3490 <MDIO_Set_PIN_VALUE+0x1dc>
						/*invalid port direction*/
					}
					break;

		case MDIO_PORTC:
					if(Copy_u8PinValue==PIN_HIGH){
    33d4:	8b 81       	ldd	r24, Y+3	; 0x03
    33d6:	81 30       	cpi	r24, 0x01	; 1
    33d8:	a1 f4       	brne	.+40     	; 0x3402 <MDIO_Set_PIN_VALUE+0x14e>
						SET_BIT(PORTC,Copy_u8PinNumber);
    33da:	a5 e3       	ldi	r26, 0x35	; 53
    33dc:	b0 e0       	ldi	r27, 0x00	; 0
    33de:	e5 e3       	ldi	r30, 0x35	; 53
    33e0:	f0 e0       	ldi	r31, 0x00	; 0
    33e2:	80 81       	ld	r24, Z
    33e4:	48 2f       	mov	r20, r24
    33e6:	8a 81       	ldd	r24, Y+2	; 0x02
    33e8:	28 2f       	mov	r18, r24
    33ea:	30 e0       	ldi	r19, 0x00	; 0
    33ec:	81 e0       	ldi	r24, 0x01	; 1
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	02 2e       	mov	r0, r18
    33f2:	02 c0       	rjmp	.+4      	; 0x33f8 <MDIO_Set_PIN_VALUE+0x144>
    33f4:	88 0f       	add	r24, r24
    33f6:	99 1f       	adc	r25, r25
    33f8:	0a 94       	dec	r0
    33fa:	e2 f7       	brpl	.-8      	; 0x33f4 <MDIO_Set_PIN_VALUE+0x140>
    33fc:	84 2b       	or	r24, r20
    33fe:	8c 93       	st	X, r24
    3400:	47 c0       	rjmp	.+142    	; 0x3490 <MDIO_Set_PIN_VALUE+0x1dc>
					}
					else if(Copy_u8PinValue==PIN_LOW){
    3402:	8b 81       	ldd	r24, Y+3	; 0x03
    3404:	88 23       	and	r24, r24
    3406:	09 f0       	breq	.+2      	; 0x340a <MDIO_Set_PIN_VALUE+0x156>
    3408:	43 c0       	rjmp	.+134    	; 0x3490 <MDIO_Set_PIN_VALUE+0x1dc>
						CLR_BIT(PORTC,Copy_u8PinNumber);
    340a:	a5 e3       	ldi	r26, 0x35	; 53
    340c:	b0 e0       	ldi	r27, 0x00	; 0
    340e:	e5 e3       	ldi	r30, 0x35	; 53
    3410:	f0 e0       	ldi	r31, 0x00	; 0
    3412:	80 81       	ld	r24, Z
    3414:	48 2f       	mov	r20, r24
    3416:	8a 81       	ldd	r24, Y+2	; 0x02
    3418:	28 2f       	mov	r18, r24
    341a:	30 e0       	ldi	r19, 0x00	; 0
    341c:	81 e0       	ldi	r24, 0x01	; 1
    341e:	90 e0       	ldi	r25, 0x00	; 0
    3420:	02 2e       	mov	r0, r18
    3422:	02 c0       	rjmp	.+4      	; 0x3428 <MDIO_Set_PIN_VALUE+0x174>
    3424:	88 0f       	add	r24, r24
    3426:	99 1f       	adc	r25, r25
    3428:	0a 94       	dec	r0
    342a:	e2 f7       	brpl	.-8      	; 0x3424 <MDIO_Set_PIN_VALUE+0x170>
    342c:	80 95       	com	r24
    342e:	84 23       	and	r24, r20
    3430:	8c 93       	st	X, r24
    3432:	2e c0       	rjmp	.+92     	; 0x3490 <MDIO_Set_PIN_VALUE+0x1dc>
					}
					break;


		case MDIO_PORTD:
					if(Copy_u8PinValue==PIN_HIGH){
    3434:	8b 81       	ldd	r24, Y+3	; 0x03
    3436:	81 30       	cpi	r24, 0x01	; 1
    3438:	a1 f4       	brne	.+40     	; 0x3462 <MDIO_Set_PIN_VALUE+0x1ae>
						SET_BIT(PORTD,Copy_u8PinNumber);
    343a:	a2 e3       	ldi	r26, 0x32	; 50
    343c:	b0 e0       	ldi	r27, 0x00	; 0
    343e:	e2 e3       	ldi	r30, 0x32	; 50
    3440:	f0 e0       	ldi	r31, 0x00	; 0
    3442:	80 81       	ld	r24, Z
    3444:	48 2f       	mov	r20, r24
    3446:	8a 81       	ldd	r24, Y+2	; 0x02
    3448:	28 2f       	mov	r18, r24
    344a:	30 e0       	ldi	r19, 0x00	; 0
    344c:	81 e0       	ldi	r24, 0x01	; 1
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	02 2e       	mov	r0, r18
    3452:	02 c0       	rjmp	.+4      	; 0x3458 <MDIO_Set_PIN_VALUE+0x1a4>
    3454:	88 0f       	add	r24, r24
    3456:	99 1f       	adc	r25, r25
    3458:	0a 94       	dec	r0
    345a:	e2 f7       	brpl	.-8      	; 0x3454 <MDIO_Set_PIN_VALUE+0x1a0>
    345c:	84 2b       	or	r24, r20
    345e:	8c 93       	st	X, r24
    3460:	17 c0       	rjmp	.+46     	; 0x3490 <MDIO_Set_PIN_VALUE+0x1dc>
					}
					else if(Copy_u8PinValue==PIN_LOW){
    3462:	8b 81       	ldd	r24, Y+3	; 0x03
    3464:	88 23       	and	r24, r24
    3466:	a1 f4       	brne	.+40     	; 0x3490 <MDIO_Set_PIN_VALUE+0x1dc>
						CLR_BIT(PORTD,Copy_u8PinNumber);
    3468:	a2 e3       	ldi	r26, 0x32	; 50
    346a:	b0 e0       	ldi	r27, 0x00	; 0
    346c:	e2 e3       	ldi	r30, 0x32	; 50
    346e:	f0 e0       	ldi	r31, 0x00	; 0
    3470:	80 81       	ld	r24, Z
    3472:	48 2f       	mov	r20, r24
    3474:	8a 81       	ldd	r24, Y+2	; 0x02
    3476:	28 2f       	mov	r18, r24
    3478:	30 e0       	ldi	r19, 0x00	; 0
    347a:	81 e0       	ldi	r24, 0x01	; 1
    347c:	90 e0       	ldi	r25, 0x00	; 0
    347e:	02 2e       	mov	r0, r18
    3480:	02 c0       	rjmp	.+4      	; 0x3486 <MDIO_Set_PIN_VALUE+0x1d2>
    3482:	88 0f       	add	r24, r24
    3484:	99 1f       	adc	r25, r25
    3486:	0a 94       	dec	r0
    3488:	e2 f7       	brpl	.-8      	; 0x3482 <MDIO_Set_PIN_VALUE+0x1ce>
    348a:	80 95       	com	r24
    348c:	84 23       	and	r24, r20
    348e:	8c 93       	st	X, r24

	}



}
    3490:	0f 90       	pop	r0
    3492:	0f 90       	pop	r0
    3494:	0f 90       	pop	r0
    3496:	0f 90       	pop	r0
    3498:	0f 90       	pop	r0
    349a:	cf 91       	pop	r28
    349c:	df 91       	pop	r29
    349e:	08 95       	ret

000034a0 <MDIO_Read_PORT>:
void MDIO_Read_PORT(u8 Copy_u8PortNumber,u8 * P_u8PortReading){
    34a0:	df 93       	push	r29
    34a2:	cf 93       	push	r28
    34a4:	00 d0       	rcall	.+0      	; 0x34a6 <MDIO_Read_PORT+0x6>
    34a6:	00 d0       	rcall	.+0      	; 0x34a8 <MDIO_Read_PORT+0x8>
    34a8:	0f 92       	push	r0
    34aa:	cd b7       	in	r28, 0x3d	; 61
    34ac:	de b7       	in	r29, 0x3e	; 62
    34ae:	89 83       	std	Y+1, r24	; 0x01
    34b0:	7b 83       	std	Y+3, r23	; 0x03
    34b2:	6a 83       	std	Y+2, r22	; 0x02
if(P_u8PortReading !=NULL){
    34b4:	8a 81       	ldd	r24, Y+2	; 0x02
    34b6:	9b 81       	ldd	r25, Y+3	; 0x03
    34b8:	00 97       	sbiw	r24, 0x00	; 0
    34ba:	d1 f1       	breq	.+116    	; 0x3530 <MDIO_Read_PORT+0x90>
	switch(Copy_u8PortNumber){
    34bc:	89 81       	ldd	r24, Y+1	; 0x01
    34be:	28 2f       	mov	r18, r24
    34c0:	30 e0       	ldi	r19, 0x00	; 0
    34c2:	3d 83       	std	Y+5, r19	; 0x05
    34c4:	2c 83       	std	Y+4, r18	; 0x04
    34c6:	8c 81       	ldd	r24, Y+4	; 0x04
    34c8:	9d 81       	ldd	r25, Y+5	; 0x05
    34ca:	81 30       	cpi	r24, 0x01	; 1
    34cc:	91 05       	cpc	r25, r1
    34ce:	e1 f0       	breq	.+56     	; 0x3508 <MDIO_Read_PORT+0x68>
    34d0:	2c 81       	ldd	r18, Y+4	; 0x04
    34d2:	3d 81       	ldd	r19, Y+5	; 0x05
    34d4:	22 30       	cpi	r18, 0x02	; 2
    34d6:	31 05       	cpc	r19, r1
    34d8:	2c f4       	brge	.+10     	; 0x34e4 <MDIO_Read_PORT+0x44>
    34da:	8c 81       	ldd	r24, Y+4	; 0x04
    34dc:	9d 81       	ldd	r25, Y+5	; 0x05
    34de:	00 97       	sbiw	r24, 0x00	; 0
    34e0:	61 f0       	breq	.+24     	; 0x34fa <MDIO_Read_PORT+0x5a>
    34e2:	26 c0       	rjmp	.+76     	; 0x3530 <MDIO_Read_PORT+0x90>
    34e4:	2c 81       	ldd	r18, Y+4	; 0x04
    34e6:	3d 81       	ldd	r19, Y+5	; 0x05
    34e8:	22 30       	cpi	r18, 0x02	; 2
    34ea:	31 05       	cpc	r19, r1
    34ec:	a1 f0       	breq	.+40     	; 0x3516 <MDIO_Read_PORT+0x76>
    34ee:	8c 81       	ldd	r24, Y+4	; 0x04
    34f0:	9d 81       	ldd	r25, Y+5	; 0x05
    34f2:	83 30       	cpi	r24, 0x03	; 3
    34f4:	91 05       	cpc	r25, r1
    34f6:	b1 f0       	breq	.+44     	; 0x3524 <MDIO_Read_PORT+0x84>
    34f8:	1b c0       	rjmp	.+54     	; 0x3530 <MDIO_Read_PORT+0x90>
	case MDIO_PORTA:
	*P_u8PortReading = PINA;
    34fa:	e9 e3       	ldi	r30, 0x39	; 57
    34fc:	f0 e0       	ldi	r31, 0x00	; 0
    34fe:	80 81       	ld	r24, Z
    3500:	ea 81       	ldd	r30, Y+2	; 0x02
    3502:	fb 81       	ldd	r31, Y+3	; 0x03
    3504:	80 83       	st	Z, r24
    3506:	14 c0       	rjmp	.+40     	; 0x3530 <MDIO_Read_PORT+0x90>
	break;
	case MDIO_PORTB:
	*P_u8PortReading = PINB;
    3508:	e6 e3       	ldi	r30, 0x36	; 54
    350a:	f0 e0       	ldi	r31, 0x00	; 0
    350c:	80 81       	ld	r24, Z
    350e:	ea 81       	ldd	r30, Y+2	; 0x02
    3510:	fb 81       	ldd	r31, Y+3	; 0x03
    3512:	80 83       	st	Z, r24
    3514:	0d c0       	rjmp	.+26     	; 0x3530 <MDIO_Read_PORT+0x90>
	break;
	case MDIO_PORTC:
	*P_u8PortReading = PINC;
    3516:	e3 e3       	ldi	r30, 0x33	; 51
    3518:	f0 e0       	ldi	r31, 0x00	; 0
    351a:	80 81       	ld	r24, Z
    351c:	ea 81       	ldd	r30, Y+2	; 0x02
    351e:	fb 81       	ldd	r31, Y+3	; 0x03
    3520:	80 83       	st	Z, r24
    3522:	06 c0       	rjmp	.+12     	; 0x3530 <MDIO_Read_PORT+0x90>
	break;
	case MDIO_PORTD:
	*P_u8PortReading = PIND;
    3524:	e0 e3       	ldi	r30, 0x30	; 48
    3526:	f0 e0       	ldi	r31, 0x00	; 0
    3528:	80 81       	ld	r24, Z
    352a:	ea 81       	ldd	r30, Y+2	; 0x02
    352c:	fb 81       	ldd	r31, Y+3	; 0x03
    352e:	80 83       	st	Z, r24

}
else{
	/* NULL POINTER*/
}
}
    3530:	0f 90       	pop	r0
    3532:	0f 90       	pop	r0
    3534:	0f 90       	pop	r0
    3536:	0f 90       	pop	r0
    3538:	0f 90       	pop	r0
    353a:	cf 91       	pop	r28
    353c:	df 91       	pop	r29
    353e:	08 95       	ret

00003540 <MDIO_Read_PIN>:
void MDIO_Read_PIN(u8 Copy_u8PortNumber,u8 Copy_u8PinNumber,u8 * P_u8PortReading){
    3540:	df 93       	push	r29
    3542:	cf 93       	push	r28
    3544:	00 d0       	rcall	.+0      	; 0x3546 <MDIO_Read_PIN+0x6>
    3546:	00 d0       	rcall	.+0      	; 0x3548 <MDIO_Read_PIN+0x8>
    3548:	00 d0       	rcall	.+0      	; 0x354a <MDIO_Read_PIN+0xa>
    354a:	cd b7       	in	r28, 0x3d	; 61
    354c:	de b7       	in	r29, 0x3e	; 62
    354e:	89 83       	std	Y+1, r24	; 0x01
    3550:	6a 83       	std	Y+2, r22	; 0x02
    3552:	5c 83       	std	Y+4, r21	; 0x04
    3554:	4b 83       	std	Y+3, r20	; 0x03

	if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8)){
    3556:	8a 81       	ldd	r24, Y+2	; 0x02
    3558:	88 30       	cpi	r24, 0x08	; 8
    355a:	08 f0       	brcs	.+2      	; 0x355e <MDIO_Read_PIN+0x1e>
    355c:	70 c0       	rjmp	.+224    	; 0x363e <MDIO_Read_PIN+0xfe>

			switch(Copy_u8PortNumber)
    355e:	89 81       	ldd	r24, Y+1	; 0x01
    3560:	28 2f       	mov	r18, r24
    3562:	30 e0       	ldi	r19, 0x00	; 0
    3564:	3e 83       	std	Y+6, r19	; 0x06
    3566:	2d 83       	std	Y+5, r18	; 0x05
    3568:	4d 81       	ldd	r20, Y+5	; 0x05
    356a:	5e 81       	ldd	r21, Y+6	; 0x06
    356c:	41 30       	cpi	r20, 0x01	; 1
    356e:	51 05       	cpc	r21, r1
    3570:	59 f1       	breq	.+86     	; 0x35c8 <MDIO_Read_PIN+0x88>
    3572:	8d 81       	ldd	r24, Y+5	; 0x05
    3574:	9e 81       	ldd	r25, Y+6	; 0x06
    3576:	82 30       	cpi	r24, 0x02	; 2
    3578:	91 05       	cpc	r25, r1
    357a:	34 f4       	brge	.+12     	; 0x3588 <MDIO_Read_PIN+0x48>
    357c:	2d 81       	ldd	r18, Y+5	; 0x05
    357e:	3e 81       	ldd	r19, Y+6	; 0x06
    3580:	21 15       	cp	r18, r1
    3582:	31 05       	cpc	r19, r1
    3584:	69 f0       	breq	.+26     	; 0x35a0 <MDIO_Read_PIN+0x60>
    3586:	5b c0       	rjmp	.+182    	; 0x363e <MDIO_Read_PIN+0xfe>
    3588:	4d 81       	ldd	r20, Y+5	; 0x05
    358a:	5e 81       	ldd	r21, Y+6	; 0x06
    358c:	42 30       	cpi	r20, 0x02	; 2
    358e:	51 05       	cpc	r21, r1
    3590:	79 f1       	breq	.+94     	; 0x35f0 <MDIO_Read_PIN+0xb0>
    3592:	8d 81       	ldd	r24, Y+5	; 0x05
    3594:	9e 81       	ldd	r25, Y+6	; 0x06
    3596:	83 30       	cpi	r24, 0x03	; 3
    3598:	91 05       	cpc	r25, r1
    359a:	09 f4       	brne	.+2      	; 0x359e <MDIO_Read_PIN+0x5e>
    359c:	3d c0       	rjmp	.+122    	; 0x3618 <MDIO_Read_PIN+0xd8>
    359e:	4f c0       	rjmp	.+158    	; 0x363e <MDIO_Read_PIN+0xfe>
			{
			case MDIO_PORTA:
				*P_u8PortReading =GET_BIT(PINA,Copy_u8PinNumber);
    35a0:	e9 e3       	ldi	r30, 0x39	; 57
    35a2:	f0 e0       	ldi	r31, 0x00	; 0
    35a4:	80 81       	ld	r24, Z
    35a6:	28 2f       	mov	r18, r24
    35a8:	30 e0       	ldi	r19, 0x00	; 0
    35aa:	8a 81       	ldd	r24, Y+2	; 0x02
    35ac:	88 2f       	mov	r24, r24
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	a9 01       	movw	r20, r18
    35b2:	02 c0       	rjmp	.+4      	; 0x35b8 <MDIO_Read_PIN+0x78>
    35b4:	55 95       	asr	r21
    35b6:	47 95       	ror	r20
    35b8:	8a 95       	dec	r24
    35ba:	e2 f7       	brpl	.-8      	; 0x35b4 <MDIO_Read_PIN+0x74>
    35bc:	ca 01       	movw	r24, r20
    35be:	81 70       	andi	r24, 0x01	; 1
    35c0:	eb 81       	ldd	r30, Y+3	; 0x03
    35c2:	fc 81       	ldd	r31, Y+4	; 0x04
    35c4:	80 83       	st	Z, r24
    35c6:	3b c0       	rjmp	.+118    	; 0x363e <MDIO_Read_PIN+0xfe>
				break;

			case MDIO_PORTB:
				*P_u8PortReading =GET_BIT(PINB,Copy_u8PinNumber);
    35c8:	e6 e3       	ldi	r30, 0x36	; 54
    35ca:	f0 e0       	ldi	r31, 0x00	; 0
    35cc:	80 81       	ld	r24, Z
    35ce:	28 2f       	mov	r18, r24
    35d0:	30 e0       	ldi	r19, 0x00	; 0
    35d2:	8a 81       	ldd	r24, Y+2	; 0x02
    35d4:	88 2f       	mov	r24, r24
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	a9 01       	movw	r20, r18
    35da:	02 c0       	rjmp	.+4      	; 0x35e0 <MDIO_Read_PIN+0xa0>
    35dc:	55 95       	asr	r21
    35de:	47 95       	ror	r20
    35e0:	8a 95       	dec	r24
    35e2:	e2 f7       	brpl	.-8      	; 0x35dc <MDIO_Read_PIN+0x9c>
    35e4:	ca 01       	movw	r24, r20
    35e6:	81 70       	andi	r24, 0x01	; 1
    35e8:	eb 81       	ldd	r30, Y+3	; 0x03
    35ea:	fc 81       	ldd	r31, Y+4	; 0x04
    35ec:	80 83       	st	Z, r24
    35ee:	27 c0       	rjmp	.+78     	; 0x363e <MDIO_Read_PIN+0xfe>
						break;

			case MDIO_PORTC:
				*P_u8PortReading =GET_BIT(PINC,Copy_u8PinNumber);
    35f0:	e3 e3       	ldi	r30, 0x33	; 51
    35f2:	f0 e0       	ldi	r31, 0x00	; 0
    35f4:	80 81       	ld	r24, Z
    35f6:	28 2f       	mov	r18, r24
    35f8:	30 e0       	ldi	r19, 0x00	; 0
    35fa:	8a 81       	ldd	r24, Y+2	; 0x02
    35fc:	88 2f       	mov	r24, r24
    35fe:	90 e0       	ldi	r25, 0x00	; 0
    3600:	a9 01       	movw	r20, r18
    3602:	02 c0       	rjmp	.+4      	; 0x3608 <MDIO_Read_PIN+0xc8>
    3604:	55 95       	asr	r21
    3606:	47 95       	ror	r20
    3608:	8a 95       	dec	r24
    360a:	e2 f7       	brpl	.-8      	; 0x3604 <MDIO_Read_PIN+0xc4>
    360c:	ca 01       	movw	r24, r20
    360e:	81 70       	andi	r24, 0x01	; 1
    3610:	eb 81       	ldd	r30, Y+3	; 0x03
    3612:	fc 81       	ldd	r31, Y+4	; 0x04
    3614:	80 83       	st	Z, r24
    3616:	13 c0       	rjmp	.+38     	; 0x363e <MDIO_Read_PIN+0xfe>
						break;


			case MDIO_PORTD:
				*P_u8PortReading =GET_BIT(PIND,Copy_u8PinNumber);
    3618:	e0 e3       	ldi	r30, 0x30	; 48
    361a:	f0 e0       	ldi	r31, 0x00	; 0
    361c:	80 81       	ld	r24, Z
    361e:	28 2f       	mov	r18, r24
    3620:	30 e0       	ldi	r19, 0x00	; 0
    3622:	8a 81       	ldd	r24, Y+2	; 0x02
    3624:	88 2f       	mov	r24, r24
    3626:	90 e0       	ldi	r25, 0x00	; 0
    3628:	a9 01       	movw	r20, r18
    362a:	02 c0       	rjmp	.+4      	; 0x3630 <MDIO_Read_PIN+0xf0>
    362c:	55 95       	asr	r21
    362e:	47 95       	ror	r20
    3630:	8a 95       	dec	r24
    3632:	e2 f7       	brpl	.-8      	; 0x362c <MDIO_Read_PIN+0xec>
    3634:	ca 01       	movw	r24, r20
    3636:	81 70       	andi	r24, 0x01	; 1
    3638:	eb 81       	ldd	r30, Y+3	; 0x03
    363a:	fc 81       	ldd	r31, Y+4	; 0x04
    363c:	80 83       	st	Z, r24
		/*wrong pin number*/
	}



}
    363e:	26 96       	adiw	r28, 0x06	; 6
    3640:	0f b6       	in	r0, 0x3f	; 63
    3642:	f8 94       	cli
    3644:	de bf       	out	0x3e, r29	; 62
    3646:	0f be       	out	0x3f, r0	; 63
    3648:	cd bf       	out	0x3d, r28	; 61
    364a:	cf 91       	pop	r28
    364c:	df 91       	pop	r29
    364e:	08 95       	ret

00003650 <MDIO_Toggle_PIN>:
void MDIO_Toggle_PIN(u8 Copy_u8PortNumber,u8 Copy_u8PinNumber){
    3650:	df 93       	push	r29
    3652:	cf 93       	push	r28
    3654:	00 d0       	rcall	.+0      	; 0x3656 <MDIO_Toggle_PIN+0x6>
    3656:	00 d0       	rcall	.+0      	; 0x3658 <MDIO_Toggle_PIN+0x8>
    3658:	cd b7       	in	r28, 0x3d	; 61
    365a:	de b7       	in	r29, 0x3e	; 62
    365c:	89 83       	std	Y+1, r24	; 0x01
    365e:	6a 83       	std	Y+2, r22	; 0x02

	if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8)){
    3660:	8a 81       	ldd	r24, Y+2	; 0x02
    3662:	88 30       	cpi	r24, 0x08	; 8
    3664:	08 f0       	brcs	.+2      	; 0x3668 <MDIO_Toggle_PIN+0x18>
    3666:	6e c0       	rjmp	.+220    	; 0x3744 <MDIO_Toggle_PIN+0xf4>

				switch(Copy_u8PortNumber)
    3668:	89 81       	ldd	r24, Y+1	; 0x01
    366a:	28 2f       	mov	r18, r24
    366c:	30 e0       	ldi	r19, 0x00	; 0
    366e:	3c 83       	std	Y+4, r19	; 0x04
    3670:	2b 83       	std	Y+3, r18	; 0x03
    3672:	8b 81       	ldd	r24, Y+3	; 0x03
    3674:	9c 81       	ldd	r25, Y+4	; 0x04
    3676:	81 30       	cpi	r24, 0x01	; 1
    3678:	91 05       	cpc	r25, r1
    367a:	49 f1       	breq	.+82     	; 0x36ce <MDIO_Toggle_PIN+0x7e>
    367c:	2b 81       	ldd	r18, Y+3	; 0x03
    367e:	3c 81       	ldd	r19, Y+4	; 0x04
    3680:	22 30       	cpi	r18, 0x02	; 2
    3682:	31 05       	cpc	r19, r1
    3684:	2c f4       	brge	.+10     	; 0x3690 <MDIO_Toggle_PIN+0x40>
    3686:	8b 81       	ldd	r24, Y+3	; 0x03
    3688:	9c 81       	ldd	r25, Y+4	; 0x04
    368a:	00 97       	sbiw	r24, 0x00	; 0
    368c:	61 f0       	breq	.+24     	; 0x36a6 <MDIO_Toggle_PIN+0x56>
    368e:	5a c0       	rjmp	.+180    	; 0x3744 <MDIO_Toggle_PIN+0xf4>
    3690:	2b 81       	ldd	r18, Y+3	; 0x03
    3692:	3c 81       	ldd	r19, Y+4	; 0x04
    3694:	22 30       	cpi	r18, 0x02	; 2
    3696:	31 05       	cpc	r19, r1
    3698:	71 f1       	breq	.+92     	; 0x36f6 <MDIO_Toggle_PIN+0xa6>
    369a:	8b 81       	ldd	r24, Y+3	; 0x03
    369c:	9c 81       	ldd	r25, Y+4	; 0x04
    369e:	83 30       	cpi	r24, 0x03	; 3
    36a0:	91 05       	cpc	r25, r1
    36a2:	e9 f1       	breq	.+122    	; 0x371e <MDIO_Toggle_PIN+0xce>
    36a4:	4f c0       	rjmp	.+158    	; 0x3744 <MDIO_Toggle_PIN+0xf4>
				{
				case MDIO_PORTA:
					TOGGLE_BIT(PORTA,Copy_u8PinNumber);
    36a6:	ab e3       	ldi	r26, 0x3B	; 59
    36a8:	b0 e0       	ldi	r27, 0x00	; 0
    36aa:	eb e3       	ldi	r30, 0x3B	; 59
    36ac:	f0 e0       	ldi	r31, 0x00	; 0
    36ae:	80 81       	ld	r24, Z
    36b0:	48 2f       	mov	r20, r24
    36b2:	8a 81       	ldd	r24, Y+2	; 0x02
    36b4:	28 2f       	mov	r18, r24
    36b6:	30 e0       	ldi	r19, 0x00	; 0
    36b8:	81 e0       	ldi	r24, 0x01	; 1
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	02 2e       	mov	r0, r18
    36be:	02 c0       	rjmp	.+4      	; 0x36c4 <MDIO_Toggle_PIN+0x74>
    36c0:	88 0f       	add	r24, r24
    36c2:	99 1f       	adc	r25, r25
    36c4:	0a 94       	dec	r0
    36c6:	e2 f7       	brpl	.-8      	; 0x36c0 <MDIO_Toggle_PIN+0x70>
    36c8:	84 27       	eor	r24, r20
    36ca:	8c 93       	st	X, r24
    36cc:	3b c0       	rjmp	.+118    	; 0x3744 <MDIO_Toggle_PIN+0xf4>
					break;

				case MDIO_PORTB:
					TOGGLE_BIT(PORTB,Copy_u8PinNumber);
    36ce:	a8 e3       	ldi	r26, 0x38	; 56
    36d0:	b0 e0       	ldi	r27, 0x00	; 0
    36d2:	e8 e3       	ldi	r30, 0x38	; 56
    36d4:	f0 e0       	ldi	r31, 0x00	; 0
    36d6:	80 81       	ld	r24, Z
    36d8:	48 2f       	mov	r20, r24
    36da:	8a 81       	ldd	r24, Y+2	; 0x02
    36dc:	28 2f       	mov	r18, r24
    36de:	30 e0       	ldi	r19, 0x00	; 0
    36e0:	81 e0       	ldi	r24, 0x01	; 1
    36e2:	90 e0       	ldi	r25, 0x00	; 0
    36e4:	02 2e       	mov	r0, r18
    36e6:	02 c0       	rjmp	.+4      	; 0x36ec <MDIO_Toggle_PIN+0x9c>
    36e8:	88 0f       	add	r24, r24
    36ea:	99 1f       	adc	r25, r25
    36ec:	0a 94       	dec	r0
    36ee:	e2 f7       	brpl	.-8      	; 0x36e8 <MDIO_Toggle_PIN+0x98>
    36f0:	84 27       	eor	r24, r20
    36f2:	8c 93       	st	X, r24
    36f4:	27 c0       	rjmp	.+78     	; 0x3744 <MDIO_Toggle_PIN+0xf4>
							break;

				case MDIO_PORTC:
					TOGGLE_BIT(PORTC,Copy_u8PinNumber);
    36f6:	a5 e3       	ldi	r26, 0x35	; 53
    36f8:	b0 e0       	ldi	r27, 0x00	; 0
    36fa:	e5 e3       	ldi	r30, 0x35	; 53
    36fc:	f0 e0       	ldi	r31, 0x00	; 0
    36fe:	80 81       	ld	r24, Z
    3700:	48 2f       	mov	r20, r24
    3702:	8a 81       	ldd	r24, Y+2	; 0x02
    3704:	28 2f       	mov	r18, r24
    3706:	30 e0       	ldi	r19, 0x00	; 0
    3708:	81 e0       	ldi	r24, 0x01	; 1
    370a:	90 e0       	ldi	r25, 0x00	; 0
    370c:	02 2e       	mov	r0, r18
    370e:	02 c0       	rjmp	.+4      	; 0x3714 <MDIO_Toggle_PIN+0xc4>
    3710:	88 0f       	add	r24, r24
    3712:	99 1f       	adc	r25, r25
    3714:	0a 94       	dec	r0
    3716:	e2 f7       	brpl	.-8      	; 0x3710 <MDIO_Toggle_PIN+0xc0>
    3718:	84 27       	eor	r24, r20
    371a:	8c 93       	st	X, r24
    371c:	13 c0       	rjmp	.+38     	; 0x3744 <MDIO_Toggle_PIN+0xf4>
							break;


				case MDIO_PORTD:
					TOGGLE_BIT(PORTD,Copy_u8PinNumber);
    371e:	a2 e3       	ldi	r26, 0x32	; 50
    3720:	b0 e0       	ldi	r27, 0x00	; 0
    3722:	e2 e3       	ldi	r30, 0x32	; 50
    3724:	f0 e0       	ldi	r31, 0x00	; 0
    3726:	80 81       	ld	r24, Z
    3728:	48 2f       	mov	r20, r24
    372a:	8a 81       	ldd	r24, Y+2	; 0x02
    372c:	28 2f       	mov	r18, r24
    372e:	30 e0       	ldi	r19, 0x00	; 0
    3730:	81 e0       	ldi	r24, 0x01	; 1
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	02 2e       	mov	r0, r18
    3736:	02 c0       	rjmp	.+4      	; 0x373c <MDIO_Toggle_PIN+0xec>
    3738:	88 0f       	add	r24, r24
    373a:	99 1f       	adc	r25, r25
    373c:	0a 94       	dec	r0
    373e:	e2 f7       	brpl	.-8      	; 0x3738 <MDIO_Toggle_PIN+0xe8>
    3740:	84 27       	eor	r24, r20
    3742:	8c 93       	st	X, r24





}
    3744:	0f 90       	pop	r0
    3746:	0f 90       	pop	r0
    3748:	0f 90       	pop	r0
    374a:	0f 90       	pop	r0
    374c:	cf 91       	pop	r28
    374e:	df 91       	pop	r29
    3750:	08 95       	ret

00003752 <MDIO_SetNibbleValue>:
void MDIO_SetNibbleValue(u8 Copy_u8PinStart,u8 Copy_u8PortNumber,u8 Copy_u8Value){
    3752:	df 93       	push	r29
    3754:	cf 93       	push	r28
    3756:	00 d0       	rcall	.+0      	; 0x3758 <MDIO_SetNibbleValue+0x6>
    3758:	00 d0       	rcall	.+0      	; 0x375a <MDIO_SetNibbleValue+0x8>
    375a:	00 d0       	rcall	.+0      	; 0x375c <MDIO_SetNibbleValue+0xa>
    375c:	cd b7       	in	r28, 0x3d	; 61
    375e:	de b7       	in	r29, 0x3e	; 62
    3760:	8a 83       	std	Y+2, r24	; 0x02
    3762:	6b 83       	std	Y+3, r22	; 0x03
    3764:	4c 83       	std	Y+4, r20	; 0x04
	 u8 Loc_u8Value =Copy_u8Value;
    3766:	8c 81       	ldd	r24, Y+4	; 0x04
    3768:	89 83       	std	Y+1, r24	; 0x01
	 Loc_u8Value=((Loc_u8Value&(0x0F))<<Copy_u8PinStart);
    376a:	89 81       	ldd	r24, Y+1	; 0x01
    376c:	88 2f       	mov	r24, r24
    376e:	90 e0       	ldi	r25, 0x00	; 0
    3770:	9c 01       	movw	r18, r24
    3772:	2f 70       	andi	r18, 0x0F	; 15
    3774:	30 70       	andi	r19, 0x00	; 0
    3776:	8a 81       	ldd	r24, Y+2	; 0x02
    3778:	88 2f       	mov	r24, r24
    377a:	90 e0       	ldi	r25, 0x00	; 0
    377c:	a9 01       	movw	r20, r18
    377e:	02 c0       	rjmp	.+4      	; 0x3784 <MDIO_SetNibbleValue+0x32>
    3780:	44 0f       	add	r20, r20
    3782:	55 1f       	adc	r21, r21
    3784:	8a 95       	dec	r24
    3786:	e2 f7       	brpl	.-8      	; 0x3780 <MDIO_SetNibbleValue+0x2e>
    3788:	ca 01       	movw	r24, r20
    378a:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PinStart<=4)&&(Copy_u8PinStart>=0)){
    378c:	8a 81       	ldd	r24, Y+2	; 0x02
    378e:	85 30       	cpi	r24, 0x05	; 5
    3790:	08 f0       	brcs	.+2      	; 0x3794 <MDIO_SetNibbleValue+0x42>
    3792:	95 c0       	rjmp	.+298    	; 0x38be <MDIO_SetNibbleValue+0x16c>
	switch (Copy_u8PortNumber){
    3794:	8b 81       	ldd	r24, Y+3	; 0x03
    3796:	28 2f       	mov	r18, r24
    3798:	30 e0       	ldi	r19, 0x00	; 0
    379a:	3e 83       	std	Y+6, r19	; 0x06
    379c:	2d 83       	std	Y+5, r18	; 0x05
    379e:	4d 81       	ldd	r20, Y+5	; 0x05
    37a0:	5e 81       	ldd	r21, Y+6	; 0x06
    37a2:	41 30       	cpi	r20, 0x01	; 1
    37a4:	51 05       	cpc	r21, r1
    37a6:	a9 f1       	breq	.+106    	; 0x3812 <MDIO_SetNibbleValue+0xc0>
    37a8:	8d 81       	ldd	r24, Y+5	; 0x05
    37aa:	9e 81       	ldd	r25, Y+6	; 0x06
    37ac:	82 30       	cpi	r24, 0x02	; 2
    37ae:	91 05       	cpc	r25, r1
    37b0:	34 f4       	brge	.+12     	; 0x37be <MDIO_SetNibbleValue+0x6c>
    37b2:	2d 81       	ldd	r18, Y+5	; 0x05
    37b4:	3e 81       	ldd	r19, Y+6	; 0x06
    37b6:	21 15       	cp	r18, r1
    37b8:	31 05       	cpc	r19, r1
    37ba:	71 f0       	breq	.+28     	; 0x37d8 <MDIO_SetNibbleValue+0x86>
    37bc:	80 c0       	rjmp	.+256    	; 0x38be <MDIO_SetNibbleValue+0x16c>
    37be:	4d 81       	ldd	r20, Y+5	; 0x05
    37c0:	5e 81       	ldd	r21, Y+6	; 0x06
    37c2:	42 30       	cpi	r20, 0x02	; 2
    37c4:	51 05       	cpc	r21, r1
    37c6:	09 f4       	brne	.+2      	; 0x37ca <MDIO_SetNibbleValue+0x78>
    37c8:	41 c0       	rjmp	.+130    	; 0x384c <MDIO_SetNibbleValue+0xfa>
    37ca:	8d 81       	ldd	r24, Y+5	; 0x05
    37cc:	9e 81       	ldd	r25, Y+6	; 0x06
    37ce:	83 30       	cpi	r24, 0x03	; 3
    37d0:	91 05       	cpc	r25, r1
    37d2:	09 f4       	brne	.+2      	; 0x37d6 <MDIO_SetNibbleValue+0x84>
    37d4:	58 c0       	rjmp	.+176    	; 0x3886 <MDIO_SetNibbleValue+0x134>
    37d6:	73 c0       	rjmp	.+230    	; 0x38be <MDIO_SetNibbleValue+0x16c>
	case MDIO_PORTA :
		//mask port A
		PORTA&=(~((0x0F)<<Copy_u8PinStart));
    37d8:	ab e3       	ldi	r26, 0x3B	; 59
    37da:	b0 e0       	ldi	r27, 0x00	; 0
    37dc:	eb e3       	ldi	r30, 0x3B	; 59
    37de:	f0 e0       	ldi	r31, 0x00	; 0
    37e0:	80 81       	ld	r24, Z
    37e2:	48 2f       	mov	r20, r24
    37e4:	8a 81       	ldd	r24, Y+2	; 0x02
    37e6:	28 2f       	mov	r18, r24
    37e8:	30 e0       	ldi	r19, 0x00	; 0
    37ea:	8f e0       	ldi	r24, 0x0F	; 15
    37ec:	90 e0       	ldi	r25, 0x00	; 0
    37ee:	02 2e       	mov	r0, r18
    37f0:	02 c0       	rjmp	.+4      	; 0x37f6 <MDIO_SetNibbleValue+0xa4>
    37f2:	88 0f       	add	r24, r24
    37f4:	99 1f       	adc	r25, r25
    37f6:	0a 94       	dec	r0
    37f8:	e2 f7       	brpl	.-8      	; 0x37f2 <MDIO_SetNibbleValue+0xa0>
    37fa:	80 95       	com	r24
    37fc:	84 23       	and	r24, r20
    37fe:	8c 93       	st	X, r24
		PORTA|=Loc_u8Value;
    3800:	ab e3       	ldi	r26, 0x3B	; 59
    3802:	b0 e0       	ldi	r27, 0x00	; 0
    3804:	eb e3       	ldi	r30, 0x3B	; 59
    3806:	f0 e0       	ldi	r31, 0x00	; 0
    3808:	90 81       	ld	r25, Z
    380a:	89 81       	ldd	r24, Y+1	; 0x01
    380c:	89 2b       	or	r24, r25
    380e:	8c 93       	st	X, r24
    3810:	56 c0       	rjmp	.+172    	; 0x38be <MDIO_SetNibbleValue+0x16c>
		break;
		case MDIO_PORTB:
			PORTB&=(~(0X0F<<Copy_u8PinStart));
    3812:	a8 e3       	ldi	r26, 0x38	; 56
    3814:	b0 e0       	ldi	r27, 0x00	; 0
    3816:	e8 e3       	ldi	r30, 0x38	; 56
    3818:	f0 e0       	ldi	r31, 0x00	; 0
    381a:	80 81       	ld	r24, Z
    381c:	48 2f       	mov	r20, r24
    381e:	8a 81       	ldd	r24, Y+2	; 0x02
    3820:	28 2f       	mov	r18, r24
    3822:	30 e0       	ldi	r19, 0x00	; 0
    3824:	8f e0       	ldi	r24, 0x0F	; 15
    3826:	90 e0       	ldi	r25, 0x00	; 0
    3828:	02 2e       	mov	r0, r18
    382a:	02 c0       	rjmp	.+4      	; 0x3830 <MDIO_SetNibbleValue+0xde>
    382c:	88 0f       	add	r24, r24
    382e:	99 1f       	adc	r25, r25
    3830:	0a 94       	dec	r0
    3832:	e2 f7       	brpl	.-8      	; 0x382c <MDIO_SetNibbleValue+0xda>
    3834:	80 95       	com	r24
    3836:	84 23       	and	r24, r20
    3838:	8c 93       	st	X, r24
			PORTB|=Loc_u8Value;
    383a:	a8 e3       	ldi	r26, 0x38	; 56
    383c:	b0 e0       	ldi	r27, 0x00	; 0
    383e:	e8 e3       	ldi	r30, 0x38	; 56
    3840:	f0 e0       	ldi	r31, 0x00	; 0
    3842:	90 81       	ld	r25, Z
    3844:	89 81       	ldd	r24, Y+1	; 0x01
    3846:	89 2b       	or	r24, r25
    3848:	8c 93       	st	X, r24
    384a:	39 c0       	rjmp	.+114    	; 0x38be <MDIO_SetNibbleValue+0x16c>
		break;
		case MDIO_PORTC:
			PORTC&=(~(0X0F<<Copy_u8PinStart));
    384c:	a5 e3       	ldi	r26, 0x35	; 53
    384e:	b0 e0       	ldi	r27, 0x00	; 0
    3850:	e5 e3       	ldi	r30, 0x35	; 53
    3852:	f0 e0       	ldi	r31, 0x00	; 0
    3854:	80 81       	ld	r24, Z
    3856:	48 2f       	mov	r20, r24
    3858:	8a 81       	ldd	r24, Y+2	; 0x02
    385a:	28 2f       	mov	r18, r24
    385c:	30 e0       	ldi	r19, 0x00	; 0
    385e:	8f e0       	ldi	r24, 0x0F	; 15
    3860:	90 e0       	ldi	r25, 0x00	; 0
    3862:	02 2e       	mov	r0, r18
    3864:	02 c0       	rjmp	.+4      	; 0x386a <MDIO_SetNibbleValue+0x118>
    3866:	88 0f       	add	r24, r24
    3868:	99 1f       	adc	r25, r25
    386a:	0a 94       	dec	r0
    386c:	e2 f7       	brpl	.-8      	; 0x3866 <MDIO_SetNibbleValue+0x114>
    386e:	80 95       	com	r24
    3870:	84 23       	and	r24, r20
    3872:	8c 93       	st	X, r24
			PORTC|=Loc_u8Value;
    3874:	a5 e3       	ldi	r26, 0x35	; 53
    3876:	b0 e0       	ldi	r27, 0x00	; 0
    3878:	e5 e3       	ldi	r30, 0x35	; 53
    387a:	f0 e0       	ldi	r31, 0x00	; 0
    387c:	90 81       	ld	r25, Z
    387e:	89 81       	ldd	r24, Y+1	; 0x01
    3880:	89 2b       	or	r24, r25
    3882:	8c 93       	st	X, r24
    3884:	1c c0       	rjmp	.+56     	; 0x38be <MDIO_SetNibbleValue+0x16c>
		break;
		case MDIO_PORTD:
			PORTD&=(~(0X0F<<Copy_u8PinStart));
    3886:	a2 e3       	ldi	r26, 0x32	; 50
    3888:	b0 e0       	ldi	r27, 0x00	; 0
    388a:	e2 e3       	ldi	r30, 0x32	; 50
    388c:	f0 e0       	ldi	r31, 0x00	; 0
    388e:	80 81       	ld	r24, Z
    3890:	48 2f       	mov	r20, r24
    3892:	8a 81       	ldd	r24, Y+2	; 0x02
    3894:	28 2f       	mov	r18, r24
    3896:	30 e0       	ldi	r19, 0x00	; 0
    3898:	8f e0       	ldi	r24, 0x0F	; 15
    389a:	90 e0       	ldi	r25, 0x00	; 0
    389c:	02 2e       	mov	r0, r18
    389e:	02 c0       	rjmp	.+4      	; 0x38a4 <MDIO_SetNibbleValue+0x152>
    38a0:	88 0f       	add	r24, r24
    38a2:	99 1f       	adc	r25, r25
    38a4:	0a 94       	dec	r0
    38a6:	e2 f7       	brpl	.-8      	; 0x38a0 <MDIO_SetNibbleValue+0x14e>
    38a8:	80 95       	com	r24
    38aa:	84 23       	and	r24, r20
    38ac:	8c 93       	st	X, r24
			PORTD|=Loc_u8Value;
    38ae:	a2 e3       	ldi	r26, 0x32	; 50
    38b0:	b0 e0       	ldi	r27, 0x00	; 0
    38b2:	e2 e3       	ldi	r30, 0x32	; 50
    38b4:	f0 e0       	ldi	r31, 0x00	; 0
    38b6:	90 81       	ld	r25, Z
    38b8:	89 81       	ldd	r24, Y+1	; 0x01
    38ba:	89 2b       	or	r24, r25
    38bc:	8c 93       	st	X, r24
	}
	else{
		/*wrong PINStartNumber*/
	}

}
    38be:	26 96       	adiw	r28, 0x06	; 6
    38c0:	0f b6       	in	r0, 0x3f	; 63
    38c2:	f8 94       	cli
    38c4:	de bf       	out	0x3e, r29	; 62
    38c6:	0f be       	out	0x3f, r0	; 63
    38c8:	cd bf       	out	0x3d, r28	; 61
    38ca:	cf 91       	pop	r28
    38cc:	df 91       	pop	r29
    38ce:	08 95       	ret

000038d0 <MDIO_Return_PINValue>:

u8 MDIO_Return_PINValue(u8 Copy_u8PortNumber,u8 Copy_u8PinNumber){
    38d0:	df 93       	push	r29
    38d2:	cf 93       	push	r28
    38d4:	00 d0       	rcall	.+0      	; 0x38d6 <MDIO_Return_PINValue+0x6>
    38d6:	00 d0       	rcall	.+0      	; 0x38d8 <MDIO_Return_PINValue+0x8>
    38d8:	00 d0       	rcall	.+0      	; 0x38da <MDIO_Return_PINValue+0xa>
    38da:	cd b7       	in	r28, 0x3d	; 61
    38dc:	de b7       	in	r29, 0x3e	; 62
    38de:	8a 83       	std	Y+2, r24	; 0x02
    38e0:	6b 83       	std	Y+3, r22	; 0x03
	u8  P_u8PortReading =0;
    38e2:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8)){
    38e4:	8b 81       	ldd	r24, Y+3	; 0x03
    38e6:	88 30       	cpi	r24, 0x08	; 8
    38e8:	08 f0       	brcs	.+2      	; 0x38ec <MDIO_Return_PINValue+0x1c>
    38ea:	74 c0       	rjmp	.+232    	; 0x39d4 <MDIO_Return_PINValue+0x104>

			switch(Copy_u8PortNumber)
    38ec:	8a 81       	ldd	r24, Y+2	; 0x02
    38ee:	28 2f       	mov	r18, r24
    38f0:	30 e0       	ldi	r19, 0x00	; 0
    38f2:	3e 83       	std	Y+6, r19	; 0x06
    38f4:	2d 83       	std	Y+5, r18	; 0x05
    38f6:	4d 81       	ldd	r20, Y+5	; 0x05
    38f8:	5e 81       	ldd	r21, Y+6	; 0x06
    38fa:	41 30       	cpi	r20, 0x01	; 1
    38fc:	51 05       	cpc	r21, r1
    38fe:	59 f1       	breq	.+86     	; 0x3956 <MDIO_Return_PINValue+0x86>
    3900:	8d 81       	ldd	r24, Y+5	; 0x05
    3902:	9e 81       	ldd	r25, Y+6	; 0x06
    3904:	82 30       	cpi	r24, 0x02	; 2
    3906:	91 05       	cpc	r25, r1
    3908:	34 f4       	brge	.+12     	; 0x3916 <MDIO_Return_PINValue+0x46>
    390a:	2d 81       	ldd	r18, Y+5	; 0x05
    390c:	3e 81       	ldd	r19, Y+6	; 0x06
    390e:	21 15       	cp	r18, r1
    3910:	31 05       	cpc	r19, r1
    3912:	69 f0       	breq	.+26     	; 0x392e <MDIO_Return_PINValue+0x5e>
    3914:	5c c0       	rjmp	.+184    	; 0x39ce <MDIO_Return_PINValue+0xfe>
    3916:	4d 81       	ldd	r20, Y+5	; 0x05
    3918:	5e 81       	ldd	r21, Y+6	; 0x06
    391a:	42 30       	cpi	r20, 0x02	; 2
    391c:	51 05       	cpc	r21, r1
    391e:	79 f1       	breq	.+94     	; 0x397e <MDIO_Return_PINValue+0xae>
    3920:	8d 81       	ldd	r24, Y+5	; 0x05
    3922:	9e 81       	ldd	r25, Y+6	; 0x06
    3924:	83 30       	cpi	r24, 0x03	; 3
    3926:	91 05       	cpc	r25, r1
    3928:	09 f4       	brne	.+2      	; 0x392c <MDIO_Return_PINValue+0x5c>
    392a:	3d c0       	rjmp	.+122    	; 0x39a6 <MDIO_Return_PINValue+0xd6>
    392c:	50 c0       	rjmp	.+160    	; 0x39ce <MDIO_Return_PINValue+0xfe>
			{
			case MDIO_PORTA:
				P_u8PortReading =GET_BIT(PINA,Copy_u8PinNumber);
    392e:	e9 e3       	ldi	r30, 0x39	; 57
    3930:	f0 e0       	ldi	r31, 0x00	; 0
    3932:	80 81       	ld	r24, Z
    3934:	28 2f       	mov	r18, r24
    3936:	30 e0       	ldi	r19, 0x00	; 0
    3938:	8b 81       	ldd	r24, Y+3	; 0x03
    393a:	88 2f       	mov	r24, r24
    393c:	90 e0       	ldi	r25, 0x00	; 0
    393e:	a9 01       	movw	r20, r18
    3940:	02 c0       	rjmp	.+4      	; 0x3946 <MDIO_Return_PINValue+0x76>
    3942:	55 95       	asr	r21
    3944:	47 95       	ror	r20
    3946:	8a 95       	dec	r24
    3948:	e2 f7       	brpl	.-8      	; 0x3942 <MDIO_Return_PINValue+0x72>
    394a:	ca 01       	movw	r24, r20
    394c:	81 70       	andi	r24, 0x01	; 1
    394e:	89 83       	std	Y+1, r24	; 0x01
				return P_u8PortReading;
    3950:	59 81       	ldd	r21, Y+1	; 0x01
    3952:	5c 83       	std	Y+4, r21	; 0x04
    3954:	41 c0       	rjmp	.+130    	; 0x39d8 <MDIO_Return_PINValue+0x108>
				break;

			case MDIO_PORTB:
				P_u8PortReading =GET_BIT(PINB,Copy_u8PinNumber);
    3956:	e6 e3       	ldi	r30, 0x36	; 54
    3958:	f0 e0       	ldi	r31, 0x00	; 0
    395a:	80 81       	ld	r24, Z
    395c:	28 2f       	mov	r18, r24
    395e:	30 e0       	ldi	r19, 0x00	; 0
    3960:	8b 81       	ldd	r24, Y+3	; 0x03
    3962:	88 2f       	mov	r24, r24
    3964:	90 e0       	ldi	r25, 0x00	; 0
    3966:	a9 01       	movw	r20, r18
    3968:	02 c0       	rjmp	.+4      	; 0x396e <MDIO_Return_PINValue+0x9e>
    396a:	55 95       	asr	r21
    396c:	47 95       	ror	r20
    396e:	8a 95       	dec	r24
    3970:	e2 f7       	brpl	.-8      	; 0x396a <MDIO_Return_PINValue+0x9a>
    3972:	ca 01       	movw	r24, r20
    3974:	81 70       	andi	r24, 0x01	; 1
    3976:	89 83       	std	Y+1, r24	; 0x01
				return P_u8PortReading;
    3978:	59 81       	ldd	r21, Y+1	; 0x01
    397a:	5c 83       	std	Y+4, r21	; 0x04
    397c:	2d c0       	rjmp	.+90     	; 0x39d8 <MDIO_Return_PINValue+0x108>
						break;

			case MDIO_PORTC:
				P_u8PortReading =GET_BIT(PINC,Copy_u8PinNumber);
    397e:	e3 e3       	ldi	r30, 0x33	; 51
    3980:	f0 e0       	ldi	r31, 0x00	; 0
    3982:	80 81       	ld	r24, Z
    3984:	28 2f       	mov	r18, r24
    3986:	30 e0       	ldi	r19, 0x00	; 0
    3988:	8b 81       	ldd	r24, Y+3	; 0x03
    398a:	88 2f       	mov	r24, r24
    398c:	90 e0       	ldi	r25, 0x00	; 0
    398e:	a9 01       	movw	r20, r18
    3990:	02 c0       	rjmp	.+4      	; 0x3996 <MDIO_Return_PINValue+0xc6>
    3992:	55 95       	asr	r21
    3994:	47 95       	ror	r20
    3996:	8a 95       	dec	r24
    3998:	e2 f7       	brpl	.-8      	; 0x3992 <MDIO_Return_PINValue+0xc2>
    399a:	ca 01       	movw	r24, r20
    399c:	81 70       	andi	r24, 0x01	; 1
    399e:	89 83       	std	Y+1, r24	; 0x01
				return P_u8PortReading;
    39a0:	59 81       	ldd	r21, Y+1	; 0x01
    39a2:	5c 83       	std	Y+4, r21	; 0x04
    39a4:	19 c0       	rjmp	.+50     	; 0x39d8 <MDIO_Return_PINValue+0x108>
						break;


			case MDIO_PORTD:
				P_u8PortReading =GET_BIT(PIND,Copy_u8PinNumber);
    39a6:	e0 e3       	ldi	r30, 0x30	; 48
    39a8:	f0 e0       	ldi	r31, 0x00	; 0
    39aa:	80 81       	ld	r24, Z
    39ac:	28 2f       	mov	r18, r24
    39ae:	30 e0       	ldi	r19, 0x00	; 0
    39b0:	8b 81       	ldd	r24, Y+3	; 0x03
    39b2:	88 2f       	mov	r24, r24
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	a9 01       	movw	r20, r18
    39b8:	02 c0       	rjmp	.+4      	; 0x39be <MDIO_Return_PINValue+0xee>
    39ba:	55 95       	asr	r21
    39bc:	47 95       	ror	r20
    39be:	8a 95       	dec	r24
    39c0:	e2 f7       	brpl	.-8      	; 0x39ba <MDIO_Return_PINValue+0xea>
    39c2:	ca 01       	movw	r24, r20
    39c4:	81 70       	andi	r24, 0x01	; 1
    39c6:	89 83       	std	Y+1, r24	; 0x01
				return P_u8PortReading;
    39c8:	59 81       	ldd	r21, Y+1	; 0x01
    39ca:	5c 83       	std	Y+4, r21	; 0x04
    39cc:	05 c0       	rjmp	.+10     	; 0x39d8 <MDIO_Return_PINValue+0x108>
						break;


			default:
				/*wrong port number passed */
				return P_u8PortReading;
    39ce:	89 81       	ldd	r24, Y+1	; 0x01
    39d0:	8c 83       	std	Y+4, r24	; 0x04
    39d2:	02 c0       	rjmp	.+4      	; 0x39d8 <MDIO_Return_PINValue+0x108>
			}


		}
	else{
		return P_u8PortReading;
    39d4:	99 81       	ldd	r25, Y+1	; 0x01
    39d6:	9c 83       	std	Y+4, r25	; 0x04
    39d8:	8c 81       	ldd	r24, Y+4	; 0x04
		/*wrong pin number*/
	}



}
    39da:	26 96       	adiw	r28, 0x06	; 6
    39dc:	0f b6       	in	r0, 0x3f	; 63
    39de:	f8 94       	cli
    39e0:	de bf       	out	0x3e, r29	; 62
    39e2:	0f be       	out	0x3f, r0	; 63
    39e4:	cd bf       	out	0x3d, r28	; 61
    39e6:	cf 91       	pop	r28
    39e8:	df 91       	pop	r29
    39ea:	08 95       	ret

000039ec <MADC_Init>:
#include"../../LIB/BIT_MATH.h"
#include"MADC_Private.h"
#include"MADC_Config.h"

void MADC_Init(void)
{
    39ec:	df 93       	push	r29
    39ee:	cf 93       	push	r28
    39f0:	cd b7       	in	r28, 0x3d	; 61
    39f2:	de b7       	in	r29, 0x3e	; 62
	//Set Vreference
#if MADC_SET_VREF==VREF_AREF_PIN
	CLR_BIT(ADMUX,6);
	CLR_BIT(ADMUX,7);
#elif MADC_SET_VREF==VREF_AVCC_PIN
	SET_BIT(ADMUX,6);
    39f4:	a7 e2       	ldi	r26, 0x27	; 39
    39f6:	b0 e0       	ldi	r27, 0x00	; 0
    39f8:	e7 e2       	ldi	r30, 0x27	; 39
    39fa:	f0 e0       	ldi	r31, 0x00	; 0
    39fc:	80 81       	ld	r24, Z
    39fe:	80 64       	ori	r24, 0x40	; 64
    3a00:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,7);
    3a02:	a7 e2       	ldi	r26, 0x27	; 39
    3a04:	b0 e0       	ldi	r27, 0x00	; 0
    3a06:	e7 e2       	ldi	r30, 0x27	; 39
    3a08:	f0 e0       	ldi	r31, 0x00	; 0
    3a0a:	80 81       	ld	r24, Z
    3a0c:	8f 77       	andi	r24, 0x7F	; 127
    3a0e:	8c 93       	st	X, r24
#elif MADC_SET_PRESCALAR==PRESCALER_DIVIDE_BY_4
CLR_BIT(ADCSRA,0);
SET_BIT(ADCSRA,1);
CLR_BIT(ADCSRA,2);
#elif MADC_SET_PRESCALAR==PRESCALER_DIVIDE_BY_8
SET_BIT(ADCSRA,0);
    3a10:	a6 e2       	ldi	r26, 0x26	; 38
    3a12:	b0 e0       	ldi	r27, 0x00	; 0
    3a14:	e6 e2       	ldi	r30, 0x26	; 38
    3a16:	f0 e0       	ldi	r31, 0x00	; 0
    3a18:	80 81       	ld	r24, Z
    3a1a:	81 60       	ori	r24, 0x01	; 1
    3a1c:	8c 93       	st	X, r24
SET_BIT(ADCSRA,1);
    3a1e:	a6 e2       	ldi	r26, 0x26	; 38
    3a20:	b0 e0       	ldi	r27, 0x00	; 0
    3a22:	e6 e2       	ldi	r30, 0x26	; 38
    3a24:	f0 e0       	ldi	r31, 0x00	; 0
    3a26:	80 81       	ld	r24, Z
    3a28:	82 60       	ori	r24, 0x02	; 2
    3a2a:	8c 93       	st	X, r24
CLR_BIT(ADCSRA,2);
    3a2c:	a6 e2       	ldi	r26, 0x26	; 38
    3a2e:	b0 e0       	ldi	r27, 0x00	; 0
    3a30:	e6 e2       	ldi	r30, 0x26	; 38
    3a32:	f0 e0       	ldi	r31, 0x00	; 0
    3a34:	80 81       	ld	r24, Z
    3a36:	8b 7f       	andi	r24, 0xFB	; 251
    3a38:	8c 93       	st	X, r24
#error"Wrong Prescalar Chosen"
#endif

//RIGHT/Adjust
#if MADC_SET_ADJUST_LEVEL==MADC_RIGHT_ADJUST
CLR_BIT(ADMUX,5);
    3a3a:	a7 e2       	ldi	r26, 0x27	; 39
    3a3c:	b0 e0       	ldi	r27, 0x00	; 0
    3a3e:	e7 e2       	ldi	r30, 0x27	; 39
    3a40:	f0 e0       	ldi	r31, 0x00	; 0
    3a42:	80 81       	ld	r24, Z
    3a44:	8f 7d       	andi	r24, 0xDF	; 223
    3a46:	8c 93       	st	X, r24
#elif MADC_SET_ADJUST_LEVEL==MADC_LEFT_ADJUST
SET_BIT(ADMUX,5);
#endif

/*Enable ADC*/
SET_BIT(ADCSRA,7);
    3a48:	a6 e2       	ldi	r26, 0x26	; 38
    3a4a:	b0 e0       	ldi	r27, 0x00	; 0
    3a4c:	e6 e2       	ldi	r30, 0x26	; 38
    3a4e:	f0 e0       	ldi	r31, 0x00	; 0
    3a50:	80 81       	ld	r24, Z
    3a52:	80 68       	ori	r24, 0x80	; 128
    3a54:	8c 93       	st	X, r24
}
    3a56:	cf 91       	pop	r28
    3a58:	df 91       	pop	r29
    3a5a:	08 95       	ret

00003a5c <MADC_StartConversion>:

u16 MADC_StartConversion(u8 Copy_u8ADC_Channel)
{
    3a5c:	df 93       	push	r29
    3a5e:	cf 93       	push	r28
    3a60:	00 d0       	rcall	.+0      	; 0x3a62 <MADC_StartConversion+0x6>
    3a62:	cd b7       	in	r28, 0x3d	; 61
    3a64:	de b7       	in	r29, 0x3e	; 62
    3a66:	8a 83       	std	Y+2, r24	; 0x02
	//Set Channel
	u8 Loc_u8ADC_Channel =Copy_u8ADC_Channel&MADC_CHANNEL_INPUT_MASK;
    3a68:	8a 81       	ldd	r24, Y+2	; 0x02
    3a6a:	8f 71       	andi	r24, 0x1F	; 31
    3a6c:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=MADC_ADMUX_REG_MASK;
    3a6e:	a7 e2       	ldi	r26, 0x27	; 39
    3a70:	b0 e0       	ldi	r27, 0x00	; 0
    3a72:	e7 e2       	ldi	r30, 0x27	; 39
    3a74:	f0 e0       	ldi	r31, 0x00	; 0
    3a76:	80 81       	ld	r24, Z
    3a78:	80 7e       	andi	r24, 0xE0	; 224
    3a7a:	8c 93       	st	X, r24
	ADMUX|=Loc_u8ADC_Channel;
    3a7c:	a7 e2       	ldi	r26, 0x27	; 39
    3a7e:	b0 e0       	ldi	r27, 0x00	; 0
    3a80:	e7 e2       	ldi	r30, 0x27	; 39
    3a82:	f0 e0       	ldi	r31, 0x00	; 0
    3a84:	90 81       	ld	r25, Z
    3a86:	89 81       	ldd	r24, Y+1	; 0x01
    3a88:	89 2b       	or	r24, r25
    3a8a:	8c 93       	st	X, r24

	//Start Conversion
	SET_BIT(ADCSRA,6);
    3a8c:	a6 e2       	ldi	r26, 0x26	; 38
    3a8e:	b0 e0       	ldi	r27, 0x00	; 0
    3a90:	e6 e2       	ldi	r30, 0x26	; 38
    3a92:	f0 e0       	ldi	r31, 0x00	; 0
    3a94:	80 81       	ld	r24, Z
    3a96:	80 64       	ori	r24, 0x40	; 64
    3a98:	8c 93       	st	X, r24

	//Poll on the Flag
	while(GET_BIT(ADCSRA,4)==0);
    3a9a:	e6 e2       	ldi	r30, 0x26	; 38
    3a9c:	f0 e0       	ldi	r31, 0x00	; 0
    3a9e:	80 81       	ld	r24, Z
    3aa0:	82 95       	swap	r24
    3aa2:	8f 70       	andi	r24, 0x0F	; 15
    3aa4:	88 2f       	mov	r24, r24
    3aa6:	90 e0       	ldi	r25, 0x00	; 0
    3aa8:	81 70       	andi	r24, 0x01	; 1
    3aaa:	90 70       	andi	r25, 0x00	; 0
    3aac:	00 97       	sbiw	r24, 0x00	; 0
    3aae:	a9 f3       	breq	.-22     	; 0x3a9a <MADC_StartConversion+0x3e>

	//Conversion finished
	return ADCLH;
    3ab0:	e4 e2       	ldi	r30, 0x24	; 36
    3ab2:	f0 e0       	ldi	r31, 0x00	; 0
    3ab4:	80 81       	ld	r24, Z
    3ab6:	91 81       	ldd	r25, Z+1	; 0x01
}
    3ab8:	0f 90       	pop	r0
    3aba:	0f 90       	pop	r0
    3abc:	cf 91       	pop	r28
    3abe:	df 91       	pop	r29
    3ac0:	08 95       	ret

00003ac2 <HSEVENSEGMENT_Init>:
#include"HSevenSegment_Interface.h"
#include "../../LIB/STD_TYPE.h"
#include "../../LIB/BIT_MATH.h"
#include"../../MCAL/MDIO/MDIO_Interface.h"
#include"HevenSegment_Private.h"
void HSEVENSEGMENT_Init(SevenSeg_t* Ptr_SevenSegObj){
    3ac2:	df 93       	push	r29
    3ac4:	cf 93       	push	r28
    3ac6:	00 d0       	rcall	.+0      	; 0x3ac8 <HSEVENSEGMENT_Init+0x6>
    3ac8:	cd b7       	in	r28, 0x3d	; 61
    3aca:	de b7       	in	r29, 0x3e	; 62
    3acc:	9a 83       	std	Y+2, r25	; 0x02
    3ace:	89 83       	std	Y+1, r24	; 0x01

	MDIO_Set_PIN_DIR(Ptr_SevenSegObj->PinEnPort,Ptr_SevenSegObj->PinEn,PIN_OUTPUT);
    3ad0:	e9 81       	ldd	r30, Y+1	; 0x01
    3ad2:	fa 81       	ldd	r31, Y+2	; 0x02
    3ad4:	80 81       	ld	r24, Z
    3ad6:	e9 81       	ldd	r30, Y+1	; 0x01
    3ad8:	fa 81       	ldd	r31, Y+2	; 0x02
    3ada:	91 81       	ldd	r25, Z+1	; 0x01
    3adc:	69 2f       	mov	r22, r25
    3ade:	41 e0       	ldi	r20, 0x01	; 1
    3ae0:	0e 94 20 18 	call	0x3040	; 0x3040 <MDIO_Set_PIN_DIR>
	MDIO_Set_PIN_DIR(Ptr_SevenSegObj->PinAport,Ptr_SevenSegObj->PinA,PIN_OUTPUT);
    3ae4:	e9 81       	ldd	r30, Y+1	; 0x01
    3ae6:	fa 81       	ldd	r31, Y+2	; 0x02
    3ae8:	82 81       	ldd	r24, Z+2	; 0x02
    3aea:	e9 81       	ldd	r30, Y+1	; 0x01
    3aec:	fa 81       	ldd	r31, Y+2	; 0x02
    3aee:	93 81       	ldd	r25, Z+3	; 0x03
    3af0:	69 2f       	mov	r22, r25
    3af2:	41 e0       	ldi	r20, 0x01	; 1
    3af4:	0e 94 20 18 	call	0x3040	; 0x3040 <MDIO_Set_PIN_DIR>
	MDIO_Set_PIN_DIR(Ptr_SevenSegObj->PinBport,Ptr_SevenSegObj->PinB,PIN_OUTPUT);
    3af8:	e9 81       	ldd	r30, Y+1	; 0x01
    3afa:	fa 81       	ldd	r31, Y+2	; 0x02
    3afc:	84 81       	ldd	r24, Z+4	; 0x04
    3afe:	e9 81       	ldd	r30, Y+1	; 0x01
    3b00:	fa 81       	ldd	r31, Y+2	; 0x02
    3b02:	95 81       	ldd	r25, Z+5	; 0x05
    3b04:	69 2f       	mov	r22, r25
    3b06:	41 e0       	ldi	r20, 0x01	; 1
    3b08:	0e 94 20 18 	call	0x3040	; 0x3040 <MDIO_Set_PIN_DIR>
	MDIO_Set_PIN_DIR(Ptr_SevenSegObj->PinCport,Ptr_SevenSegObj->PinC,PIN_OUTPUT);
    3b0c:	e9 81       	ldd	r30, Y+1	; 0x01
    3b0e:	fa 81       	ldd	r31, Y+2	; 0x02
    3b10:	86 81       	ldd	r24, Z+6	; 0x06
    3b12:	e9 81       	ldd	r30, Y+1	; 0x01
    3b14:	fa 81       	ldd	r31, Y+2	; 0x02
    3b16:	97 81       	ldd	r25, Z+7	; 0x07
    3b18:	69 2f       	mov	r22, r25
    3b1a:	41 e0       	ldi	r20, 0x01	; 1
    3b1c:	0e 94 20 18 	call	0x3040	; 0x3040 <MDIO_Set_PIN_DIR>
	MDIO_Set_PIN_DIR(Ptr_SevenSegObj->PinDport,Ptr_SevenSegObj->PinD,PIN_OUTPUT);
    3b20:	e9 81       	ldd	r30, Y+1	; 0x01
    3b22:	fa 81       	ldd	r31, Y+2	; 0x02
    3b24:	80 85       	ldd	r24, Z+8	; 0x08
    3b26:	e9 81       	ldd	r30, Y+1	; 0x01
    3b28:	fa 81       	ldd	r31, Y+2	; 0x02
    3b2a:	91 85       	ldd	r25, Z+9	; 0x09
    3b2c:	69 2f       	mov	r22, r25
    3b2e:	41 e0       	ldi	r20, 0x01	; 1
    3b30:	0e 94 20 18 	call	0x3040	; 0x3040 <MDIO_Set_PIN_DIR>
}
    3b34:	0f 90       	pop	r0
    3b36:	0f 90       	pop	r0
    3b38:	cf 91       	pop	r28
    3b3a:	df 91       	pop	r29
    3b3c:	08 95       	ret

00003b3e <HSEVENSEGMENT_SetMode>:

void HSEVENSEGMENT_SetMode(SevenSeg_t* Ptr_SevenSegObj,u8 Copy_u8SevenSegMode){
    3b3e:	df 93       	push	r29
    3b40:	cf 93       	push	r28
    3b42:	00 d0       	rcall	.+0      	; 0x3b44 <HSEVENSEGMENT_SetMode+0x6>
    3b44:	0f 92       	push	r0
    3b46:	cd b7       	in	r28, 0x3d	; 61
    3b48:	de b7       	in	r29, 0x3e	; 62
    3b4a:	9a 83       	std	Y+2, r25	; 0x02
    3b4c:	89 83       	std	Y+1, r24	; 0x01
    3b4e:	6b 83       	std	Y+3, r22	; 0x03
	if(Copy_u8SevenSegMode==SEVEN_SEG_ON){
    3b50:	8b 81       	ldd	r24, Y+3	; 0x03
    3b52:	81 30       	cpi	r24, 0x01	; 1
    3b54:	59 f4       	brne	.+22     	; 0x3b6c <HSEVENSEGMENT_SetMode+0x2e>

		MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinEnPort,Ptr_SevenSegObj->PinEn,PIN_HIGH);
    3b56:	e9 81       	ldd	r30, Y+1	; 0x01
    3b58:	fa 81       	ldd	r31, Y+2	; 0x02
    3b5a:	80 81       	ld	r24, Z
    3b5c:	e9 81       	ldd	r30, Y+1	; 0x01
    3b5e:	fa 81       	ldd	r31, Y+2	; 0x02
    3b60:	91 81       	ldd	r25, Z+1	; 0x01
    3b62:	69 2f       	mov	r22, r25
    3b64:	41 e0       	ldi	r20, 0x01	; 1
    3b66:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
    3b6a:	0d c0       	rjmp	.+26     	; 0x3b86 <HSEVENSEGMENT_SetMode+0x48>
	}
	else if(Copy_u8SevenSegMode==SEVEN_SEG_OFF){
    3b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b6e:	88 23       	and	r24, r24
    3b70:	51 f4       	brne	.+20     	; 0x3b86 <HSEVENSEGMENT_SetMode+0x48>
		MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinEnPort,Ptr_SevenSegObj->PinEn,PIN_LOW);
    3b72:	e9 81       	ldd	r30, Y+1	; 0x01
    3b74:	fa 81       	ldd	r31, Y+2	; 0x02
    3b76:	80 81       	ld	r24, Z
    3b78:	e9 81       	ldd	r30, Y+1	; 0x01
    3b7a:	fa 81       	ldd	r31, Y+2	; 0x02
    3b7c:	91 81       	ldd	r25, Z+1	; 0x01
    3b7e:	69 2f       	mov	r22, r25
    3b80:	40 e0       	ldi	r20, 0x00	; 0
    3b82:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
	else {

		// wrong Mode ordered
	}

}
    3b86:	0f 90       	pop	r0
    3b88:	0f 90       	pop	r0
    3b8a:	0f 90       	pop	r0
    3b8c:	cf 91       	pop	r28
    3b8e:	df 91       	pop	r29
    3b90:	08 95       	ret

00003b92 <HSEVENSEGMENT_Display>:
void HSEVENSEGMENT_Display(SevenSeg_t* Ptr_SevenSegObj,u8 Copy_u8SevenSegValue){
    3b92:	df 93       	push	r29
    3b94:	cf 93       	push	r28
    3b96:	00 d0       	rcall	.+0      	; 0x3b98 <HSEVENSEGMENT_Display+0x6>
    3b98:	00 d0       	rcall	.+0      	; 0x3b9a <HSEVENSEGMENT_Display+0x8>
    3b9a:	0f 92       	push	r0
    3b9c:	cd b7       	in	r28, 0x3d	; 61
    3b9e:	de b7       	in	r29, 0x3e	; 62
    3ba0:	9a 83       	std	Y+2, r25	; 0x02
    3ba2:	89 83       	std	Y+1, r24	; 0x01
    3ba4:	6b 83       	std	Y+3, r22	; 0x03
if(Copy_u8SevenSegValue>=0 && Copy_u8SevenSegValue<10){
    3ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ba8:	8a 30       	cpi	r24, 0x0A	; 10
    3baa:	08 f0       	brcs	.+2      	; 0x3bae <HSEVENSEGMENT_Display+0x1c>
    3bac:	14 c2       	rjmp	.+1064   	; 0x3fd6 <HSEVENSEGMENT_Display+0x444>
	switch (Copy_u8SevenSegValue){
    3bae:	8b 81       	ldd	r24, Y+3	; 0x03
    3bb0:	28 2f       	mov	r18, r24
    3bb2:	30 e0       	ldi	r19, 0x00	; 0
    3bb4:	3d 83       	std	Y+5, r19	; 0x05
    3bb6:	2c 83       	std	Y+4, r18	; 0x04
    3bb8:	8c 81       	ldd	r24, Y+4	; 0x04
    3bba:	9d 81       	ldd	r25, Y+5	; 0x05
    3bbc:	84 30       	cpi	r24, 0x04	; 4
    3bbe:	91 05       	cpc	r25, r1
    3bc0:	09 f4       	brne	.+2      	; 0x3bc4 <HSEVENSEGMENT_Display+0x32>
    3bc2:	eb c0       	rjmp	.+470    	; 0x3d9a <HSEVENSEGMENT_Display+0x208>
    3bc4:	2c 81       	ldd	r18, Y+4	; 0x04
    3bc6:	3d 81       	ldd	r19, Y+5	; 0x05
    3bc8:	25 30       	cpi	r18, 0x05	; 5
    3bca:	31 05       	cpc	r19, r1
    3bcc:	ec f4       	brge	.+58     	; 0x3c08 <HSEVENSEGMENT_Display+0x76>
    3bce:	8c 81       	ldd	r24, Y+4	; 0x04
    3bd0:	9d 81       	ldd	r25, Y+5	; 0x05
    3bd2:	81 30       	cpi	r24, 0x01	; 1
    3bd4:	91 05       	cpc	r25, r1
    3bd6:	09 f4       	brne	.+2      	; 0x3bda <HSEVENSEGMENT_Display+0x48>
    3bd8:	65 c0       	rjmp	.+202    	; 0x3ca4 <HSEVENSEGMENT_Display+0x112>
    3bda:	2c 81       	ldd	r18, Y+4	; 0x04
    3bdc:	3d 81       	ldd	r19, Y+5	; 0x05
    3bde:	22 30       	cpi	r18, 0x02	; 2
    3be0:	31 05       	cpc	r19, r1
    3be2:	2c f4       	brge	.+10     	; 0x3bee <HSEVENSEGMENT_Display+0x5c>
    3be4:	8c 81       	ldd	r24, Y+4	; 0x04
    3be6:	9d 81       	ldd	r25, Y+5	; 0x05
    3be8:	00 97       	sbiw	r24, 0x00	; 0
    3bea:	99 f1       	breq	.+102    	; 0x3c52 <HSEVENSEGMENT_Display+0xc0>
    3bec:	cc c1       	rjmp	.+920    	; 0x3f86 <HSEVENSEGMENT_Display+0x3f4>
    3bee:	2c 81       	ldd	r18, Y+4	; 0x04
    3bf0:	3d 81       	ldd	r19, Y+5	; 0x05
    3bf2:	22 30       	cpi	r18, 0x02	; 2
    3bf4:	31 05       	cpc	r19, r1
    3bf6:	09 f4       	brne	.+2      	; 0x3bfa <HSEVENSEGMENT_Display+0x68>
    3bf8:	7e c0       	rjmp	.+252    	; 0x3cf6 <HSEVENSEGMENT_Display+0x164>
    3bfa:	8c 81       	ldd	r24, Y+4	; 0x04
    3bfc:	9d 81       	ldd	r25, Y+5	; 0x05
    3bfe:	83 30       	cpi	r24, 0x03	; 3
    3c00:	91 05       	cpc	r25, r1
    3c02:	09 f4       	brne	.+2      	; 0x3c06 <HSEVENSEGMENT_Display+0x74>
    3c04:	a1 c0       	rjmp	.+322    	; 0x3d48 <HSEVENSEGMENT_Display+0x1b6>
    3c06:	bf c1       	rjmp	.+894    	; 0x3f86 <HSEVENSEGMENT_Display+0x3f4>
    3c08:	2c 81       	ldd	r18, Y+4	; 0x04
    3c0a:	3d 81       	ldd	r19, Y+5	; 0x05
    3c0c:	27 30       	cpi	r18, 0x07	; 7
    3c0e:	31 05       	cpc	r19, r1
    3c10:	09 f4       	brne	.+2      	; 0x3c14 <HSEVENSEGMENT_Display+0x82>
    3c12:	3e c1       	rjmp	.+636    	; 0x3e90 <HSEVENSEGMENT_Display+0x2fe>
    3c14:	8c 81       	ldd	r24, Y+4	; 0x04
    3c16:	9d 81       	ldd	r25, Y+5	; 0x05
    3c18:	88 30       	cpi	r24, 0x08	; 8
    3c1a:	91 05       	cpc	r25, r1
    3c1c:	6c f4       	brge	.+26     	; 0x3c38 <HSEVENSEGMENT_Display+0xa6>
    3c1e:	2c 81       	ldd	r18, Y+4	; 0x04
    3c20:	3d 81       	ldd	r19, Y+5	; 0x05
    3c22:	25 30       	cpi	r18, 0x05	; 5
    3c24:	31 05       	cpc	r19, r1
    3c26:	09 f4       	brne	.+2      	; 0x3c2a <HSEVENSEGMENT_Display+0x98>
    3c28:	e1 c0       	rjmp	.+450    	; 0x3dec <HSEVENSEGMENT_Display+0x25a>
    3c2a:	8c 81       	ldd	r24, Y+4	; 0x04
    3c2c:	9d 81       	ldd	r25, Y+5	; 0x05
    3c2e:	86 30       	cpi	r24, 0x06	; 6
    3c30:	91 05       	cpc	r25, r1
    3c32:	09 f4       	brne	.+2      	; 0x3c36 <HSEVENSEGMENT_Display+0xa4>
    3c34:	04 c1       	rjmp	.+520    	; 0x3e3e <HSEVENSEGMENT_Display+0x2ac>
    3c36:	a7 c1       	rjmp	.+846    	; 0x3f86 <HSEVENSEGMENT_Display+0x3f4>
    3c38:	2c 81       	ldd	r18, Y+4	; 0x04
    3c3a:	3d 81       	ldd	r19, Y+5	; 0x05
    3c3c:	28 30       	cpi	r18, 0x08	; 8
    3c3e:	31 05       	cpc	r19, r1
    3c40:	09 f4       	brne	.+2      	; 0x3c44 <HSEVENSEGMENT_Display+0xb2>
    3c42:	4f c1       	rjmp	.+670    	; 0x3ee2 <HSEVENSEGMENT_Display+0x350>
    3c44:	8c 81       	ldd	r24, Y+4	; 0x04
    3c46:	9d 81       	ldd	r25, Y+5	; 0x05
    3c48:	89 30       	cpi	r24, 0x09	; 9
    3c4a:	91 05       	cpc	r25, r1
    3c4c:	09 f4       	brne	.+2      	; 0x3c50 <HSEVENSEGMENT_Display+0xbe>
    3c4e:	72 c1       	rjmp	.+740    	; 0x3f34 <HSEVENSEGMENT_Display+0x3a2>
    3c50:	9a c1       	rjmp	.+820    	; 0x3f86 <HSEVENSEGMENT_Display+0x3f4>
	case 0:
		MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinAport,Ptr_SevenSegObj->PinA,PIN_LOW);
    3c52:	e9 81       	ldd	r30, Y+1	; 0x01
    3c54:	fa 81       	ldd	r31, Y+2	; 0x02
    3c56:	82 81       	ldd	r24, Z+2	; 0x02
    3c58:	e9 81       	ldd	r30, Y+1	; 0x01
    3c5a:	fa 81       	ldd	r31, Y+2	; 0x02
    3c5c:	93 81       	ldd	r25, Z+3	; 0x03
    3c5e:	69 2f       	mov	r22, r25
    3c60:	40 e0       	ldi	r20, 0x00	; 0
    3c62:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
		MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinBport,Ptr_SevenSegObj->PinB,PIN_LOW);
    3c66:	e9 81       	ldd	r30, Y+1	; 0x01
    3c68:	fa 81       	ldd	r31, Y+2	; 0x02
    3c6a:	84 81       	ldd	r24, Z+4	; 0x04
    3c6c:	e9 81       	ldd	r30, Y+1	; 0x01
    3c6e:	fa 81       	ldd	r31, Y+2	; 0x02
    3c70:	95 81       	ldd	r25, Z+5	; 0x05
    3c72:	69 2f       	mov	r22, r25
    3c74:	40 e0       	ldi	r20, 0x00	; 0
    3c76:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
		MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinCport,Ptr_SevenSegObj->PinC,PIN_LOW);
    3c7a:	e9 81       	ldd	r30, Y+1	; 0x01
    3c7c:	fa 81       	ldd	r31, Y+2	; 0x02
    3c7e:	86 81       	ldd	r24, Z+6	; 0x06
    3c80:	e9 81       	ldd	r30, Y+1	; 0x01
    3c82:	fa 81       	ldd	r31, Y+2	; 0x02
    3c84:	97 81       	ldd	r25, Z+7	; 0x07
    3c86:	69 2f       	mov	r22, r25
    3c88:	40 e0       	ldi	r20, 0x00	; 0
    3c8a:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
		MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinDport,Ptr_SevenSegObj->PinD,PIN_LOW);
    3c8e:	e9 81       	ldd	r30, Y+1	; 0x01
    3c90:	fa 81       	ldd	r31, Y+2	; 0x02
    3c92:	80 85       	ldd	r24, Z+8	; 0x08
    3c94:	e9 81       	ldd	r30, Y+1	; 0x01
    3c96:	fa 81       	ldd	r31, Y+2	; 0x02
    3c98:	91 85       	ldd	r25, Z+9	; 0x09
    3c9a:	69 2f       	mov	r22, r25
    3c9c:	40 e0       	ldi	r20, 0x00	; 0
    3c9e:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
    3ca2:	99 c1       	rjmp	.+818    	; 0x3fd6 <HSEVENSEGMENT_Display+0x444>

		break;
	case 1:
		MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinAport,Ptr_SevenSegObj->PinA,PIN_HIGH);
    3ca4:	e9 81       	ldd	r30, Y+1	; 0x01
    3ca6:	fa 81       	ldd	r31, Y+2	; 0x02
    3ca8:	82 81       	ldd	r24, Z+2	; 0x02
    3caa:	e9 81       	ldd	r30, Y+1	; 0x01
    3cac:	fa 81       	ldd	r31, Y+2	; 0x02
    3cae:	93 81       	ldd	r25, Z+3	; 0x03
    3cb0:	69 2f       	mov	r22, r25
    3cb2:	41 e0       	ldi	r20, 0x01	; 1
    3cb4:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
		MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinBport,Ptr_SevenSegObj->PinB,PIN_LOW);
    3cb8:	e9 81       	ldd	r30, Y+1	; 0x01
    3cba:	fa 81       	ldd	r31, Y+2	; 0x02
    3cbc:	84 81       	ldd	r24, Z+4	; 0x04
    3cbe:	e9 81       	ldd	r30, Y+1	; 0x01
    3cc0:	fa 81       	ldd	r31, Y+2	; 0x02
    3cc2:	95 81       	ldd	r25, Z+5	; 0x05
    3cc4:	69 2f       	mov	r22, r25
    3cc6:	40 e0       	ldi	r20, 0x00	; 0
    3cc8:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
		MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinCport,Ptr_SevenSegObj->PinC,PIN_LOW);
    3ccc:	e9 81       	ldd	r30, Y+1	; 0x01
    3cce:	fa 81       	ldd	r31, Y+2	; 0x02
    3cd0:	86 81       	ldd	r24, Z+6	; 0x06
    3cd2:	e9 81       	ldd	r30, Y+1	; 0x01
    3cd4:	fa 81       	ldd	r31, Y+2	; 0x02
    3cd6:	97 81       	ldd	r25, Z+7	; 0x07
    3cd8:	69 2f       	mov	r22, r25
    3cda:	40 e0       	ldi	r20, 0x00	; 0
    3cdc:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
		MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinDport,Ptr_SevenSegObj->PinD,PIN_LOW);
    3ce0:	e9 81       	ldd	r30, Y+1	; 0x01
    3ce2:	fa 81       	ldd	r31, Y+2	; 0x02
    3ce4:	80 85       	ldd	r24, Z+8	; 0x08
    3ce6:	e9 81       	ldd	r30, Y+1	; 0x01
    3ce8:	fa 81       	ldd	r31, Y+2	; 0x02
    3cea:	91 85       	ldd	r25, Z+9	; 0x09
    3cec:	69 2f       	mov	r22, r25
    3cee:	40 e0       	ldi	r20, 0x00	; 0
    3cf0:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
    3cf4:	70 c1       	rjmp	.+736    	; 0x3fd6 <HSEVENSEGMENT_Display+0x444>

		break;
	case 2:
		MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinAport,Ptr_SevenSegObj->PinA,PIN_LOW);
    3cf6:	e9 81       	ldd	r30, Y+1	; 0x01
    3cf8:	fa 81       	ldd	r31, Y+2	; 0x02
    3cfa:	82 81       	ldd	r24, Z+2	; 0x02
    3cfc:	e9 81       	ldd	r30, Y+1	; 0x01
    3cfe:	fa 81       	ldd	r31, Y+2	; 0x02
    3d00:	93 81       	ldd	r25, Z+3	; 0x03
    3d02:	69 2f       	mov	r22, r25
    3d04:	40 e0       	ldi	r20, 0x00	; 0
    3d06:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
		MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinBport,Ptr_SevenSegObj->PinB,PIN_HIGH);
    3d0a:	e9 81       	ldd	r30, Y+1	; 0x01
    3d0c:	fa 81       	ldd	r31, Y+2	; 0x02
    3d0e:	84 81       	ldd	r24, Z+4	; 0x04
    3d10:	e9 81       	ldd	r30, Y+1	; 0x01
    3d12:	fa 81       	ldd	r31, Y+2	; 0x02
    3d14:	95 81       	ldd	r25, Z+5	; 0x05
    3d16:	69 2f       	mov	r22, r25
    3d18:	41 e0       	ldi	r20, 0x01	; 1
    3d1a:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
		MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinCport,Ptr_SevenSegObj->PinC,PIN_LOW);
    3d1e:	e9 81       	ldd	r30, Y+1	; 0x01
    3d20:	fa 81       	ldd	r31, Y+2	; 0x02
    3d22:	86 81       	ldd	r24, Z+6	; 0x06
    3d24:	e9 81       	ldd	r30, Y+1	; 0x01
    3d26:	fa 81       	ldd	r31, Y+2	; 0x02
    3d28:	97 81       	ldd	r25, Z+7	; 0x07
    3d2a:	69 2f       	mov	r22, r25
    3d2c:	40 e0       	ldi	r20, 0x00	; 0
    3d2e:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
		MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinDport,Ptr_SevenSegObj->PinD,PIN_LOW);
    3d32:	e9 81       	ldd	r30, Y+1	; 0x01
    3d34:	fa 81       	ldd	r31, Y+2	; 0x02
    3d36:	80 85       	ldd	r24, Z+8	; 0x08
    3d38:	e9 81       	ldd	r30, Y+1	; 0x01
    3d3a:	fa 81       	ldd	r31, Y+2	; 0x02
    3d3c:	91 85       	ldd	r25, Z+9	; 0x09
    3d3e:	69 2f       	mov	r22, r25
    3d40:	40 e0       	ldi	r20, 0x00	; 0
    3d42:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
    3d46:	47 c1       	rjmp	.+654    	; 0x3fd6 <HSEVENSEGMENT_Display+0x444>

		break;
		case 3:
			MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinAport,Ptr_SevenSegObj->PinA,PIN_HIGH);
    3d48:	e9 81       	ldd	r30, Y+1	; 0x01
    3d4a:	fa 81       	ldd	r31, Y+2	; 0x02
    3d4c:	82 81       	ldd	r24, Z+2	; 0x02
    3d4e:	e9 81       	ldd	r30, Y+1	; 0x01
    3d50:	fa 81       	ldd	r31, Y+2	; 0x02
    3d52:	93 81       	ldd	r25, Z+3	; 0x03
    3d54:	69 2f       	mov	r22, r25
    3d56:	41 e0       	ldi	r20, 0x01	; 1
    3d58:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
			MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinBport,Ptr_SevenSegObj->PinB,PIN_HIGH);
    3d5c:	e9 81       	ldd	r30, Y+1	; 0x01
    3d5e:	fa 81       	ldd	r31, Y+2	; 0x02
    3d60:	84 81       	ldd	r24, Z+4	; 0x04
    3d62:	e9 81       	ldd	r30, Y+1	; 0x01
    3d64:	fa 81       	ldd	r31, Y+2	; 0x02
    3d66:	95 81       	ldd	r25, Z+5	; 0x05
    3d68:	69 2f       	mov	r22, r25
    3d6a:	41 e0       	ldi	r20, 0x01	; 1
    3d6c:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
			MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinCport,Ptr_SevenSegObj->PinC,PIN_LOW);
    3d70:	e9 81       	ldd	r30, Y+1	; 0x01
    3d72:	fa 81       	ldd	r31, Y+2	; 0x02
    3d74:	86 81       	ldd	r24, Z+6	; 0x06
    3d76:	e9 81       	ldd	r30, Y+1	; 0x01
    3d78:	fa 81       	ldd	r31, Y+2	; 0x02
    3d7a:	97 81       	ldd	r25, Z+7	; 0x07
    3d7c:	69 2f       	mov	r22, r25
    3d7e:	40 e0       	ldi	r20, 0x00	; 0
    3d80:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
			MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinDport,Ptr_SevenSegObj->PinD,PIN_LOW);
    3d84:	e9 81       	ldd	r30, Y+1	; 0x01
    3d86:	fa 81       	ldd	r31, Y+2	; 0x02
    3d88:	80 85       	ldd	r24, Z+8	; 0x08
    3d8a:	e9 81       	ldd	r30, Y+1	; 0x01
    3d8c:	fa 81       	ldd	r31, Y+2	; 0x02
    3d8e:	91 85       	ldd	r25, Z+9	; 0x09
    3d90:	69 2f       	mov	r22, r25
    3d92:	40 e0       	ldi	r20, 0x00	; 0
    3d94:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
    3d98:	1e c1       	rjmp	.+572    	; 0x3fd6 <HSEVENSEGMENT_Display+0x444>

			break;
			case 4:
				MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinAport,Ptr_SevenSegObj->PinA,PIN_LOW);
    3d9a:	e9 81       	ldd	r30, Y+1	; 0x01
    3d9c:	fa 81       	ldd	r31, Y+2	; 0x02
    3d9e:	82 81       	ldd	r24, Z+2	; 0x02
    3da0:	e9 81       	ldd	r30, Y+1	; 0x01
    3da2:	fa 81       	ldd	r31, Y+2	; 0x02
    3da4:	93 81       	ldd	r25, Z+3	; 0x03
    3da6:	69 2f       	mov	r22, r25
    3da8:	40 e0       	ldi	r20, 0x00	; 0
    3daa:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
				MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinBport,Ptr_SevenSegObj->PinB,PIN_LOW);
    3dae:	e9 81       	ldd	r30, Y+1	; 0x01
    3db0:	fa 81       	ldd	r31, Y+2	; 0x02
    3db2:	84 81       	ldd	r24, Z+4	; 0x04
    3db4:	e9 81       	ldd	r30, Y+1	; 0x01
    3db6:	fa 81       	ldd	r31, Y+2	; 0x02
    3db8:	95 81       	ldd	r25, Z+5	; 0x05
    3dba:	69 2f       	mov	r22, r25
    3dbc:	40 e0       	ldi	r20, 0x00	; 0
    3dbe:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
				MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinCport,Ptr_SevenSegObj->PinC,PIN_HIGH);
    3dc2:	e9 81       	ldd	r30, Y+1	; 0x01
    3dc4:	fa 81       	ldd	r31, Y+2	; 0x02
    3dc6:	86 81       	ldd	r24, Z+6	; 0x06
    3dc8:	e9 81       	ldd	r30, Y+1	; 0x01
    3dca:	fa 81       	ldd	r31, Y+2	; 0x02
    3dcc:	97 81       	ldd	r25, Z+7	; 0x07
    3dce:	69 2f       	mov	r22, r25
    3dd0:	41 e0       	ldi	r20, 0x01	; 1
    3dd2:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
				MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinDport,Ptr_SevenSegObj->PinD,PIN_LOW);
    3dd6:	e9 81       	ldd	r30, Y+1	; 0x01
    3dd8:	fa 81       	ldd	r31, Y+2	; 0x02
    3dda:	80 85       	ldd	r24, Z+8	; 0x08
    3ddc:	e9 81       	ldd	r30, Y+1	; 0x01
    3dde:	fa 81       	ldd	r31, Y+2	; 0x02
    3de0:	91 85       	ldd	r25, Z+9	; 0x09
    3de2:	69 2f       	mov	r22, r25
    3de4:	40 e0       	ldi	r20, 0x00	; 0
    3de6:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
    3dea:	f5 c0       	rjmp	.+490    	; 0x3fd6 <HSEVENSEGMENT_Display+0x444>

				break;
				case 5:
					MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinAport,Ptr_SevenSegObj->PinA,PIN_HIGH);
    3dec:	e9 81       	ldd	r30, Y+1	; 0x01
    3dee:	fa 81       	ldd	r31, Y+2	; 0x02
    3df0:	82 81       	ldd	r24, Z+2	; 0x02
    3df2:	e9 81       	ldd	r30, Y+1	; 0x01
    3df4:	fa 81       	ldd	r31, Y+2	; 0x02
    3df6:	93 81       	ldd	r25, Z+3	; 0x03
    3df8:	69 2f       	mov	r22, r25
    3dfa:	41 e0       	ldi	r20, 0x01	; 1
    3dfc:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
					MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinBport,Ptr_SevenSegObj->PinB,PIN_LOW);
    3e00:	e9 81       	ldd	r30, Y+1	; 0x01
    3e02:	fa 81       	ldd	r31, Y+2	; 0x02
    3e04:	84 81       	ldd	r24, Z+4	; 0x04
    3e06:	e9 81       	ldd	r30, Y+1	; 0x01
    3e08:	fa 81       	ldd	r31, Y+2	; 0x02
    3e0a:	95 81       	ldd	r25, Z+5	; 0x05
    3e0c:	69 2f       	mov	r22, r25
    3e0e:	40 e0       	ldi	r20, 0x00	; 0
    3e10:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
					MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinCport,Ptr_SevenSegObj->PinC,PIN_HIGH);
    3e14:	e9 81       	ldd	r30, Y+1	; 0x01
    3e16:	fa 81       	ldd	r31, Y+2	; 0x02
    3e18:	86 81       	ldd	r24, Z+6	; 0x06
    3e1a:	e9 81       	ldd	r30, Y+1	; 0x01
    3e1c:	fa 81       	ldd	r31, Y+2	; 0x02
    3e1e:	97 81       	ldd	r25, Z+7	; 0x07
    3e20:	69 2f       	mov	r22, r25
    3e22:	41 e0       	ldi	r20, 0x01	; 1
    3e24:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
					MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinDport,Ptr_SevenSegObj->PinD,PIN_LOW);
    3e28:	e9 81       	ldd	r30, Y+1	; 0x01
    3e2a:	fa 81       	ldd	r31, Y+2	; 0x02
    3e2c:	80 85       	ldd	r24, Z+8	; 0x08
    3e2e:	e9 81       	ldd	r30, Y+1	; 0x01
    3e30:	fa 81       	ldd	r31, Y+2	; 0x02
    3e32:	91 85       	ldd	r25, Z+9	; 0x09
    3e34:	69 2f       	mov	r22, r25
    3e36:	40 e0       	ldi	r20, 0x00	; 0
    3e38:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
    3e3c:	cc c0       	rjmp	.+408    	; 0x3fd6 <HSEVENSEGMENT_Display+0x444>

					break;
					case 6:
						MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinAport,Ptr_SevenSegObj->PinA,PIN_LOW);
    3e3e:	e9 81       	ldd	r30, Y+1	; 0x01
    3e40:	fa 81       	ldd	r31, Y+2	; 0x02
    3e42:	82 81       	ldd	r24, Z+2	; 0x02
    3e44:	e9 81       	ldd	r30, Y+1	; 0x01
    3e46:	fa 81       	ldd	r31, Y+2	; 0x02
    3e48:	93 81       	ldd	r25, Z+3	; 0x03
    3e4a:	69 2f       	mov	r22, r25
    3e4c:	40 e0       	ldi	r20, 0x00	; 0
    3e4e:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
						MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinBport,Ptr_SevenSegObj->PinB,PIN_HIGH);
    3e52:	e9 81       	ldd	r30, Y+1	; 0x01
    3e54:	fa 81       	ldd	r31, Y+2	; 0x02
    3e56:	84 81       	ldd	r24, Z+4	; 0x04
    3e58:	e9 81       	ldd	r30, Y+1	; 0x01
    3e5a:	fa 81       	ldd	r31, Y+2	; 0x02
    3e5c:	95 81       	ldd	r25, Z+5	; 0x05
    3e5e:	69 2f       	mov	r22, r25
    3e60:	41 e0       	ldi	r20, 0x01	; 1
    3e62:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
						MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinCport,Ptr_SevenSegObj->PinC,PIN_HIGH);
    3e66:	e9 81       	ldd	r30, Y+1	; 0x01
    3e68:	fa 81       	ldd	r31, Y+2	; 0x02
    3e6a:	86 81       	ldd	r24, Z+6	; 0x06
    3e6c:	e9 81       	ldd	r30, Y+1	; 0x01
    3e6e:	fa 81       	ldd	r31, Y+2	; 0x02
    3e70:	97 81       	ldd	r25, Z+7	; 0x07
    3e72:	69 2f       	mov	r22, r25
    3e74:	41 e0       	ldi	r20, 0x01	; 1
    3e76:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
						MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinDport,Ptr_SevenSegObj->PinD,PIN_LOW);
    3e7a:	e9 81       	ldd	r30, Y+1	; 0x01
    3e7c:	fa 81       	ldd	r31, Y+2	; 0x02
    3e7e:	80 85       	ldd	r24, Z+8	; 0x08
    3e80:	e9 81       	ldd	r30, Y+1	; 0x01
    3e82:	fa 81       	ldd	r31, Y+2	; 0x02
    3e84:	91 85       	ldd	r25, Z+9	; 0x09
    3e86:	69 2f       	mov	r22, r25
    3e88:	40 e0       	ldi	r20, 0x00	; 0
    3e8a:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
    3e8e:	a3 c0       	rjmp	.+326    	; 0x3fd6 <HSEVENSEGMENT_Display+0x444>

						break;
						case 7:
							MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinAport,Ptr_SevenSegObj->PinA,PIN_HIGH);
    3e90:	e9 81       	ldd	r30, Y+1	; 0x01
    3e92:	fa 81       	ldd	r31, Y+2	; 0x02
    3e94:	82 81       	ldd	r24, Z+2	; 0x02
    3e96:	e9 81       	ldd	r30, Y+1	; 0x01
    3e98:	fa 81       	ldd	r31, Y+2	; 0x02
    3e9a:	93 81       	ldd	r25, Z+3	; 0x03
    3e9c:	69 2f       	mov	r22, r25
    3e9e:	41 e0       	ldi	r20, 0x01	; 1
    3ea0:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
							MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinBport,Ptr_SevenSegObj->PinB,PIN_HIGH);
    3ea4:	e9 81       	ldd	r30, Y+1	; 0x01
    3ea6:	fa 81       	ldd	r31, Y+2	; 0x02
    3ea8:	84 81       	ldd	r24, Z+4	; 0x04
    3eaa:	e9 81       	ldd	r30, Y+1	; 0x01
    3eac:	fa 81       	ldd	r31, Y+2	; 0x02
    3eae:	95 81       	ldd	r25, Z+5	; 0x05
    3eb0:	69 2f       	mov	r22, r25
    3eb2:	41 e0       	ldi	r20, 0x01	; 1
    3eb4:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
							MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinCport,Ptr_SevenSegObj->PinC,PIN_HIGH);
    3eb8:	e9 81       	ldd	r30, Y+1	; 0x01
    3eba:	fa 81       	ldd	r31, Y+2	; 0x02
    3ebc:	86 81       	ldd	r24, Z+6	; 0x06
    3ebe:	e9 81       	ldd	r30, Y+1	; 0x01
    3ec0:	fa 81       	ldd	r31, Y+2	; 0x02
    3ec2:	97 81       	ldd	r25, Z+7	; 0x07
    3ec4:	69 2f       	mov	r22, r25
    3ec6:	41 e0       	ldi	r20, 0x01	; 1
    3ec8:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
							MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinDport,Ptr_SevenSegObj->PinD,PIN_LOW);
    3ecc:	e9 81       	ldd	r30, Y+1	; 0x01
    3ece:	fa 81       	ldd	r31, Y+2	; 0x02
    3ed0:	80 85       	ldd	r24, Z+8	; 0x08
    3ed2:	e9 81       	ldd	r30, Y+1	; 0x01
    3ed4:	fa 81       	ldd	r31, Y+2	; 0x02
    3ed6:	91 85       	ldd	r25, Z+9	; 0x09
    3ed8:	69 2f       	mov	r22, r25
    3eda:	40 e0       	ldi	r20, 0x00	; 0
    3edc:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
    3ee0:	7a c0       	rjmp	.+244    	; 0x3fd6 <HSEVENSEGMENT_Display+0x444>

							break;
							case 8:
								MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinAport,Ptr_SevenSegObj->PinA,PIN_LOW);
    3ee2:	e9 81       	ldd	r30, Y+1	; 0x01
    3ee4:	fa 81       	ldd	r31, Y+2	; 0x02
    3ee6:	82 81       	ldd	r24, Z+2	; 0x02
    3ee8:	e9 81       	ldd	r30, Y+1	; 0x01
    3eea:	fa 81       	ldd	r31, Y+2	; 0x02
    3eec:	93 81       	ldd	r25, Z+3	; 0x03
    3eee:	69 2f       	mov	r22, r25
    3ef0:	40 e0       	ldi	r20, 0x00	; 0
    3ef2:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
								MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinBport,Ptr_SevenSegObj->PinB,PIN_LOW);
    3ef6:	e9 81       	ldd	r30, Y+1	; 0x01
    3ef8:	fa 81       	ldd	r31, Y+2	; 0x02
    3efa:	84 81       	ldd	r24, Z+4	; 0x04
    3efc:	e9 81       	ldd	r30, Y+1	; 0x01
    3efe:	fa 81       	ldd	r31, Y+2	; 0x02
    3f00:	95 81       	ldd	r25, Z+5	; 0x05
    3f02:	69 2f       	mov	r22, r25
    3f04:	40 e0       	ldi	r20, 0x00	; 0
    3f06:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
								MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinCport,Ptr_SevenSegObj->PinC,PIN_LOW);
    3f0a:	e9 81       	ldd	r30, Y+1	; 0x01
    3f0c:	fa 81       	ldd	r31, Y+2	; 0x02
    3f0e:	86 81       	ldd	r24, Z+6	; 0x06
    3f10:	e9 81       	ldd	r30, Y+1	; 0x01
    3f12:	fa 81       	ldd	r31, Y+2	; 0x02
    3f14:	97 81       	ldd	r25, Z+7	; 0x07
    3f16:	69 2f       	mov	r22, r25
    3f18:	40 e0       	ldi	r20, 0x00	; 0
    3f1a:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
								MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinDport,Ptr_SevenSegObj->PinD,PIN_HIGH);
    3f1e:	e9 81       	ldd	r30, Y+1	; 0x01
    3f20:	fa 81       	ldd	r31, Y+2	; 0x02
    3f22:	80 85       	ldd	r24, Z+8	; 0x08
    3f24:	e9 81       	ldd	r30, Y+1	; 0x01
    3f26:	fa 81       	ldd	r31, Y+2	; 0x02
    3f28:	91 85       	ldd	r25, Z+9	; 0x09
    3f2a:	69 2f       	mov	r22, r25
    3f2c:	41 e0       	ldi	r20, 0x01	; 1
    3f2e:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
    3f32:	51 c0       	rjmp	.+162    	; 0x3fd6 <HSEVENSEGMENT_Display+0x444>


								break;
								case 9:
									MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinAport,Ptr_SevenSegObj->PinA,PIN_HIGH);
    3f34:	e9 81       	ldd	r30, Y+1	; 0x01
    3f36:	fa 81       	ldd	r31, Y+2	; 0x02
    3f38:	82 81       	ldd	r24, Z+2	; 0x02
    3f3a:	e9 81       	ldd	r30, Y+1	; 0x01
    3f3c:	fa 81       	ldd	r31, Y+2	; 0x02
    3f3e:	93 81       	ldd	r25, Z+3	; 0x03
    3f40:	69 2f       	mov	r22, r25
    3f42:	41 e0       	ldi	r20, 0x01	; 1
    3f44:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
									MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinBport,Ptr_SevenSegObj->PinB,PIN_LOW);
    3f48:	e9 81       	ldd	r30, Y+1	; 0x01
    3f4a:	fa 81       	ldd	r31, Y+2	; 0x02
    3f4c:	84 81       	ldd	r24, Z+4	; 0x04
    3f4e:	e9 81       	ldd	r30, Y+1	; 0x01
    3f50:	fa 81       	ldd	r31, Y+2	; 0x02
    3f52:	95 81       	ldd	r25, Z+5	; 0x05
    3f54:	69 2f       	mov	r22, r25
    3f56:	40 e0       	ldi	r20, 0x00	; 0
    3f58:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
									MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinCport,Ptr_SevenSegObj->PinC,PIN_LOW);
    3f5c:	e9 81       	ldd	r30, Y+1	; 0x01
    3f5e:	fa 81       	ldd	r31, Y+2	; 0x02
    3f60:	86 81       	ldd	r24, Z+6	; 0x06
    3f62:	e9 81       	ldd	r30, Y+1	; 0x01
    3f64:	fa 81       	ldd	r31, Y+2	; 0x02
    3f66:	97 81       	ldd	r25, Z+7	; 0x07
    3f68:	69 2f       	mov	r22, r25
    3f6a:	40 e0       	ldi	r20, 0x00	; 0
    3f6c:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
									MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinDport,Ptr_SevenSegObj->PinD,PIN_HIGH);
    3f70:	e9 81       	ldd	r30, Y+1	; 0x01
    3f72:	fa 81       	ldd	r31, Y+2	; 0x02
    3f74:	80 85       	ldd	r24, Z+8	; 0x08
    3f76:	e9 81       	ldd	r30, Y+1	; 0x01
    3f78:	fa 81       	ldd	r31, Y+2	; 0x02
    3f7a:	91 85       	ldd	r25, Z+9	; 0x09
    3f7c:	69 2f       	mov	r22, r25
    3f7e:	41 e0       	ldi	r20, 0x01	; 1
    3f80:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
    3f84:	28 c0       	rjmp	.+80     	; 0x3fd6 <HSEVENSEGMENT_Display+0x444>

									break;

								default :
									MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinAport,Ptr_SevenSegObj->PinA,PIN_LOW);
    3f86:	e9 81       	ldd	r30, Y+1	; 0x01
    3f88:	fa 81       	ldd	r31, Y+2	; 0x02
    3f8a:	82 81       	ldd	r24, Z+2	; 0x02
    3f8c:	e9 81       	ldd	r30, Y+1	; 0x01
    3f8e:	fa 81       	ldd	r31, Y+2	; 0x02
    3f90:	93 81       	ldd	r25, Z+3	; 0x03
    3f92:	69 2f       	mov	r22, r25
    3f94:	40 e0       	ldi	r20, 0x00	; 0
    3f96:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
									MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinBport,Ptr_SevenSegObj->PinB,PIN_LOW);
    3f9a:	e9 81       	ldd	r30, Y+1	; 0x01
    3f9c:	fa 81       	ldd	r31, Y+2	; 0x02
    3f9e:	84 81       	ldd	r24, Z+4	; 0x04
    3fa0:	e9 81       	ldd	r30, Y+1	; 0x01
    3fa2:	fa 81       	ldd	r31, Y+2	; 0x02
    3fa4:	95 81       	ldd	r25, Z+5	; 0x05
    3fa6:	69 2f       	mov	r22, r25
    3fa8:	40 e0       	ldi	r20, 0x00	; 0
    3faa:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
									MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinCport,Ptr_SevenSegObj->PinC,PIN_LOW);
    3fae:	e9 81       	ldd	r30, Y+1	; 0x01
    3fb0:	fa 81       	ldd	r31, Y+2	; 0x02
    3fb2:	86 81       	ldd	r24, Z+6	; 0x06
    3fb4:	e9 81       	ldd	r30, Y+1	; 0x01
    3fb6:	fa 81       	ldd	r31, Y+2	; 0x02
    3fb8:	97 81       	ldd	r25, Z+7	; 0x07
    3fba:	69 2f       	mov	r22, r25
    3fbc:	40 e0       	ldi	r20, 0x00	; 0
    3fbe:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
									MDIO_Set_PIN_VALUE(Ptr_SevenSegObj->PinDport,Ptr_SevenSegObj->PinD,PIN_LOW);
    3fc2:	e9 81       	ldd	r30, Y+1	; 0x01
    3fc4:	fa 81       	ldd	r31, Y+2	; 0x02
    3fc6:	80 85       	ldd	r24, Z+8	; 0x08
    3fc8:	e9 81       	ldd	r30, Y+1	; 0x01
    3fca:	fa 81       	ldd	r31, Y+2	; 0x02
    3fcc:	91 85       	ldd	r25, Z+9	; 0x09
    3fce:	69 2f       	mov	r22, r25
    3fd0:	40 e0       	ldi	r20, 0x00	; 0
    3fd2:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
}
else{

}

}
    3fd6:	0f 90       	pop	r0
    3fd8:	0f 90       	pop	r0
    3fda:	0f 90       	pop	r0
    3fdc:	0f 90       	pop	r0
    3fde:	0f 90       	pop	r0
    3fe0:	cf 91       	pop	r28
    3fe2:	df 91       	pop	r29
    3fe4:	08 95       	ret

00003fe6 <HServoInit>:
#include"HServoMotor_Private.h"
#include"../../MCAL/MDIO/MDIO_Interface.h"
#include"../../MCAL/MTIMER1/MTIMER1_Interface.h"

void HServoInit()
{
    3fe6:	df 93       	push	r29
    3fe8:	cf 93       	push	r28
    3fea:	cd b7       	in	r28, 0x3d	; 61
    3fec:	de b7       	in	r29, 0x3e	; 62
	MDIO_Set_PIN_DIR(MDIO_PORTD,SERVO_OUTPUT_PIN, PIN_OUTPUT);
    3fee:	83 e0       	ldi	r24, 0x03	; 3
    3ff0:	65 e0       	ldi	r22, 0x05	; 5
    3ff2:	41 e0       	ldi	r20, 0x01	; 1
    3ff4:	0e 94 20 18 	call	0x3040	; 0x3040 <MDIO_Set_PIN_DIR>
	MPWM1Init();
    3ff8:	0e 94 b5 13 	call	0x276a	; 0x276a <MPWM1Init>
	MPWM1SetFrequency(50); // 50HZ FREQUENCY FOR OPERATION
    3ffc:	82 e3       	ldi	r24, 0x32	; 50
    3ffe:	90 e0       	ldi	r25, 0x00	; 0
    4000:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <MPWM1SetFrequency>
}
    4004:	cf 91       	pop	r28
    4006:	df 91       	pop	r29
    4008:	08 95       	ret

0000400a <HServoSetAngel>:

void HServoSetAngel	(f32 Localf32DesiredAngel)
{
    400a:	df 93       	push	r29
    400c:	cf 93       	push	r28
    400e:	00 d0       	rcall	.+0      	; 0x4010 <HServoSetAngel+0x6>
    4010:	00 d0       	rcall	.+0      	; 0x4012 <HServoSetAngel+0x8>
    4012:	cd b7       	in	r28, 0x3d	; 61
    4014:	de b7       	in	r29, 0x3e	; 62
    4016:	69 83       	std	Y+1, r22	; 0x01
    4018:	7a 83       	std	Y+2, r23	; 0x02
    401a:	8b 83       	std	Y+3, r24	; 0x03
    401c:	9c 83       	std	Y+4, r25	; 0x04
	//scaling from 180 degrees to 5 to 10 Percents

	Localf32DesiredAngel *= 5;
    401e:	69 81       	ldd	r22, Y+1	; 0x01
    4020:	7a 81       	ldd	r23, Y+2	; 0x02
    4022:	8b 81       	ldd	r24, Y+3	; 0x03
    4024:	9c 81       	ldd	r25, Y+4	; 0x04
    4026:	20 e0       	ldi	r18, 0x00	; 0
    4028:	30 e0       	ldi	r19, 0x00	; 0
    402a:	40 ea       	ldi	r20, 0xA0	; 160
    402c:	50 e4       	ldi	r21, 0x40	; 64
    402e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4032:	dc 01       	movw	r26, r24
    4034:	cb 01       	movw	r24, r22
    4036:	89 83       	std	Y+1, r24	; 0x01
    4038:	9a 83       	std	Y+2, r25	; 0x02
    403a:	ab 83       	std	Y+3, r26	; 0x03
    403c:	bc 83       	std	Y+4, r27	; 0x04
 	Localf32DesiredAngel /= 180;
    403e:	69 81       	ldd	r22, Y+1	; 0x01
    4040:	7a 81       	ldd	r23, Y+2	; 0x02
    4042:	8b 81       	ldd	r24, Y+3	; 0x03
    4044:	9c 81       	ldd	r25, Y+4	; 0x04
    4046:	20 e0       	ldi	r18, 0x00	; 0
    4048:	30 e0       	ldi	r19, 0x00	; 0
    404a:	44 e3       	ldi	r20, 0x34	; 52
    404c:	53 e4       	ldi	r21, 0x43	; 67
    404e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4052:	dc 01       	movw	r26, r24
    4054:	cb 01       	movw	r24, r22
    4056:	89 83       	std	Y+1, r24	; 0x01
    4058:	9a 83       	std	Y+2, r25	; 0x02
    405a:	ab 83       	std	Y+3, r26	; 0x03
    405c:	bc 83       	std	Y+4, r27	; 0x04
	Localf32DesiredAngel += 5;
    405e:	69 81       	ldd	r22, Y+1	; 0x01
    4060:	7a 81       	ldd	r23, Y+2	; 0x02
    4062:	8b 81       	ldd	r24, Y+3	; 0x03
    4064:	9c 81       	ldd	r25, Y+4	; 0x04
    4066:	20 e0       	ldi	r18, 0x00	; 0
    4068:	30 e0       	ldi	r19, 0x00	; 0
    406a:	40 ea       	ldi	r20, 0xA0	; 160
    406c:	50 e4       	ldi	r21, 0x40	; 64
    406e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    4072:	dc 01       	movw	r26, r24
    4074:	cb 01       	movw	r24, r22
    4076:	89 83       	std	Y+1, r24	; 0x01
    4078:	9a 83       	std	Y+2, r25	; 0x02
    407a:	ab 83       	std	Y+3, r26	; 0x03
    407c:	bc 83       	std	Y+4, r27	; 0x04

MPWM1SetDutyCycle(Localf32DesiredAngel);
    407e:	89 81       	ldd	r24, Y+1	; 0x01
    4080:	9a 81       	ldd	r25, Y+2	; 0x02
    4082:	ab 81       	ldd	r26, Y+3	; 0x03
    4084:	bc 81       	ldd	r27, Y+4	; 0x04
    4086:	bc 01       	movw	r22, r24
    4088:	cd 01       	movw	r24, r26
    408a:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <MPWM1SetDutyCycle>
MPWM1Start();
    408e:	0e 94 17 14 	call	0x282e	; 0x282e <MPWM1Start>
}
    4092:	0f 90       	pop	r0
    4094:	0f 90       	pop	r0
    4096:	0f 90       	pop	r0
    4098:	0f 90       	pop	r0
    409a:	cf 91       	pop	r28
    409c:	df 91       	pop	r29
    409e:	08 95       	ret

000040a0 <HServoTurnOff>:

void HServoTurnOff()
{
    40a0:	df 93       	push	r29
    40a2:	cf 93       	push	r28
    40a4:	cd b7       	in	r28, 0x3d	; 61
    40a6:	de b7       	in	r29, 0x3e	; 62
MPWM1Stop();
    40a8:	0e 94 33 14 	call	0x2866	; 0x2866 <MPWM1Stop>
}
    40ac:	cf 91       	pop	r28
    40ae:	df 91       	pop	r29
    40b0:	08 95       	ret

000040b2 <HRELAYInit>:
#include"HRELAY_Interface.h"
#include"HRELAY_Private.h"


void HRELAYInit()
{
    40b2:	df 93       	push	r29
    40b4:	cf 93       	push	r28
    40b6:	cd b7       	in	r28, 0x3d	; 61
    40b8:	de b7       	in	r29, 0x3e	; 62
	MDIO_Set_PIN_DIR(MDIO_PORTA,HRELAYPIN,PIN_OUTPUT);
    40ba:	80 e0       	ldi	r24, 0x00	; 0
    40bc:	64 e0       	ldi	r22, 0x04	; 4
    40be:	41 e0       	ldi	r20, 0x01	; 1
    40c0:	0e 94 20 18 	call	0x3040	; 0x3040 <MDIO_Set_PIN_DIR>
}
    40c4:	cf 91       	pop	r28
    40c6:	df 91       	pop	r29
    40c8:	08 95       	ret

000040ca <HRELAYON>:

void HRELAYON()
{
    40ca:	df 93       	push	r29
    40cc:	cf 93       	push	r28
    40ce:	cd b7       	in	r28, 0x3d	; 61
    40d0:	de b7       	in	r29, 0x3e	; 62
	MDIO_Set_PIN_VALUE(MDIO_PORTA,HRELAYPIN,PIN_HIGH);
    40d2:	80 e0       	ldi	r24, 0x00	; 0
    40d4:	64 e0       	ldi	r22, 0x04	; 4
    40d6:	41 e0       	ldi	r20, 0x01	; 1
    40d8:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
}
    40dc:	cf 91       	pop	r28
    40de:	df 91       	pop	r29
    40e0:	08 95       	ret

000040e2 <HRELAYOFF>:

void HRELAYOFF()
{
    40e2:	df 93       	push	r29
    40e4:	cf 93       	push	r28
    40e6:	cd b7       	in	r28, 0x3d	; 61
    40e8:	de b7       	in	r29, 0x3e	; 62
	MDIO_Set_PIN_VALUE(MDIO_PORTA,HRELAYPIN,PIN_LOW);
    40ea:	80 e0       	ldi	r24, 0x00	; 0
    40ec:	64 e0       	ldi	r22, 0x04	; 4
    40ee:	40 e0       	ldi	r20, 0x00	; 0
    40f0:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
}
    40f4:	cf 91       	pop	r28
    40f6:	df 91       	pop	r29
    40f8:	08 95       	ret

000040fa <HPushButton_Init>:
 */

#include"HPushButton_Interface.h"
#include"HPushButton_Config.h"
void HPushButton_Init(void)
{
    40fa:	df 93       	push	r29
    40fc:	cf 93       	push	r28
    40fe:	cd b7       	in	r28, 0x3d	; 61
    4100:	de b7       	in	r29, 0x3e	; 62
	MDIO_Set_PIN_DIR(MDIO_PORTD,PUSH_BUTTON,PIN_INPUT);
    4102:	83 e0       	ldi	r24, 0x03	; 3
    4104:	62 e0       	ldi	r22, 0x02	; 2
    4106:	40 e0       	ldi	r20, 0x00	; 0
    4108:	0e 94 20 18 	call	0x3040	; 0x3040 <MDIO_Set_PIN_DIR>
}
    410c:	cf 91       	pop	r28
    410e:	df 91       	pop	r29
    4110:	08 95       	ret

00004112 <HPushButton_Read>:
u8   HPushButton_Read(void)
{
    4112:	df 93       	push	r29
    4114:	cf 93       	push	r28
    4116:	00 d0       	rcall	.+0      	; 0x4118 <HPushButton_Read+0x6>
    4118:	cd b7       	in	r28, 0x3d	; 61
    411a:	de b7       	in	r29, 0x3e	; 62
	u8 *Local_u8_Reading = 0;
    411c:	1a 82       	std	Y+2, r1	; 0x02
    411e:	19 82       	std	Y+1, r1	; 0x01
	 MDIO_Read_PIN(MDIO_PORTD,PUSH_BUTTON,Local_u8_Reading);
    4120:	29 81       	ldd	r18, Y+1	; 0x01
    4122:	3a 81       	ldd	r19, Y+2	; 0x02
    4124:	83 e0       	ldi	r24, 0x03	; 3
    4126:	62 e0       	ldi	r22, 0x02	; 2
    4128:	a9 01       	movw	r20, r18
    412a:	0e 94 a0 1a 	call	0x3540	; 0x3540 <MDIO_Read_PIN>
	return *Local_u8_Reading;
    412e:	e9 81       	ldd	r30, Y+1	; 0x01
    4130:	fa 81       	ldd	r31, Y+2	; 0x02
    4132:	80 81       	ld	r24, Z
}
    4134:	0f 90       	pop	r0
    4136:	0f 90       	pop	r0
    4138:	cf 91       	pop	r28
    413a:	df 91       	pop	r29
    413c:	08 95       	ret

0000413e <HLM35Init>:
 */

#include "HLM35_Interface.h"
//the used pin is adc channel 0
void HLM35Init()
{
    413e:	df 93       	push	r29
    4140:	cf 93       	push	r28
    4142:	cd b7       	in	r28, 0x3d	; 61
    4144:	de b7       	in	r29, 0x3e	; 62
MADC_Init();
    4146:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <MADC_Init>
}
    414a:	cf 91       	pop	r28
    414c:	df 91       	pop	r29
    414e:	08 95       	ret

00004150 <HLM35Read>:
void  HLM35Read(u16* PtrTou16_Data)
{
    4150:	df 93       	push	r29
    4152:	cf 93       	push	r28
    4154:	00 d0       	rcall	.+0      	; 0x4156 <HLM35Read+0x6>
    4156:	00 d0       	rcall	.+0      	; 0x4158 <HLM35Read+0x8>
    4158:	00 d0       	rcall	.+0      	; 0x415a <HLM35Read+0xa>
    415a:	cd b7       	in	r28, 0x3d	; 61
    415c:	de b7       	in	r29, 0x3e	; 62
    415e:	9e 83       	std	Y+6, r25	; 0x06
    4160:	8d 83       	std	Y+5, r24	; 0x05
	u16 Local_u16ADCReading	=	MADC_StartConversion(MADC_CHANNEL_0);
    4162:	80 e0       	ldi	r24, 0x00	; 0
    4164:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <MADC_StartConversion>
    4168:	9c 83       	std	Y+4, r25	; 0x04
    416a:	8b 83       	std	Y+3, r24	; 0x03
	u16 Local_u16Temp			=	(((u32)Local_u16ADCReading * 500)/1023);
    416c:	8b 81       	ldd	r24, Y+3	; 0x03
    416e:	9c 81       	ldd	r25, Y+4	; 0x04
    4170:	cc 01       	movw	r24, r24
    4172:	a0 e0       	ldi	r26, 0x00	; 0
    4174:	b0 e0       	ldi	r27, 0x00	; 0
    4176:	24 ef       	ldi	r18, 0xF4	; 244
    4178:	31 e0       	ldi	r19, 0x01	; 1
    417a:	40 e0       	ldi	r20, 0x00	; 0
    417c:	50 e0       	ldi	r21, 0x00	; 0
    417e:	bc 01       	movw	r22, r24
    4180:	cd 01       	movw	r24, r26
    4182:	0e 94 b8 54 	call	0xa970	; 0xa970 <__mulsi3>
    4186:	dc 01       	movw	r26, r24
    4188:	cb 01       	movw	r24, r22
    418a:	2f ef       	ldi	r18, 0xFF	; 255
    418c:	33 e0       	ldi	r19, 0x03	; 3
    418e:	40 e0       	ldi	r20, 0x00	; 0
    4190:	50 e0       	ldi	r21, 0x00	; 0
    4192:	bc 01       	movw	r22, r24
    4194:	cd 01       	movw	r24, r26
    4196:	0e 94 ea 54 	call	0xa9d4	; 0xa9d4 <__udivmodsi4>
    419a:	da 01       	movw	r26, r20
    419c:	c9 01       	movw	r24, r18
    419e:	9a 83       	std	Y+2, r25	; 0x02
    41a0:	89 83       	std	Y+1, r24	; 0x01
	*PtrTou16_Data = Local_u16Temp;
    41a2:	ed 81       	ldd	r30, Y+5	; 0x05
    41a4:	fe 81       	ldd	r31, Y+6	; 0x06
    41a6:	89 81       	ldd	r24, Y+1	; 0x01
    41a8:	9a 81       	ldd	r25, Y+2	; 0x02
    41aa:	91 83       	std	Z+1, r25	; 0x01
    41ac:	80 83       	st	Z, r24

}
    41ae:	26 96       	adiw	r28, 0x06	; 6
    41b0:	0f b6       	in	r0, 0x3f	; 63
    41b2:	f8 94       	cli
    41b4:	de bf       	out	0x3e, r29	; 62
    41b6:	0f be       	out	0x3f, r0	; 63
    41b8:	cd bf       	out	0x3d, r28	; 61
    41ba:	cf 91       	pop	r28
    41bc:	df 91       	pop	r29
    41be:	08 95       	ret

000041c0 <HLED_Init>:
 */

#include"HLED_Interface.h"
//MDIO PORTC FOR LED 0&1  PIN2 PIN3//
//MDIO PORTD FOR LED 2  PIN4 //
void HLED_Init(u8 Local_u8LedNumber){
    41c0:	df 93       	push	r29
    41c2:	cf 93       	push	r28
    41c4:	00 d0       	rcall	.+0      	; 0x41c6 <HLED_Init+0x6>
    41c6:	0f 92       	push	r0
    41c8:	cd b7       	in	r28, 0x3d	; 61
    41ca:	de b7       	in	r29, 0x3e	; 62
    41cc:	89 83       	std	Y+1, r24	; 0x01
		switch(Local_u8LedNumber)
    41ce:	89 81       	ldd	r24, Y+1	; 0x01
    41d0:	28 2f       	mov	r18, r24
    41d2:	30 e0       	ldi	r19, 0x00	; 0
    41d4:	3b 83       	std	Y+3, r19	; 0x03
    41d6:	2a 83       	std	Y+2, r18	; 0x02
    41d8:	8a 81       	ldd	r24, Y+2	; 0x02
    41da:	9b 81       	ldd	r25, Y+3	; 0x03
    41dc:	81 30       	cpi	r24, 0x01	; 1
    41de:	91 05       	cpc	r25, r1
    41e0:	79 f0       	breq	.+30     	; 0x4200 <HLED_Init+0x40>
    41e2:	2a 81       	ldd	r18, Y+2	; 0x02
    41e4:	3b 81       	ldd	r19, Y+3	; 0x03
    41e6:	22 30       	cpi	r18, 0x02	; 2
    41e8:	31 05       	cpc	r19, r1
    41ea:	81 f0       	breq	.+32     	; 0x420c <HLED_Init+0x4c>
    41ec:	8a 81       	ldd	r24, Y+2	; 0x02
    41ee:	9b 81       	ldd	r25, Y+3	; 0x03
    41f0:	00 97       	sbiw	r24, 0x00	; 0
    41f2:	89 f4       	brne	.+34     	; 0x4216 <HLED_Init+0x56>
		{
		case LED0:
			MDIO_Set_PIN_DIR(MDIO_PORTC,PIN2,PIN_OUTPUT);
    41f4:	82 e0       	ldi	r24, 0x02	; 2
    41f6:	62 e0       	ldi	r22, 0x02	; 2
    41f8:	41 e0       	ldi	r20, 0x01	; 1
    41fa:	0e 94 20 18 	call	0x3040	; 0x3040 <MDIO_Set_PIN_DIR>
    41fe:	0b c0       	rjmp	.+22     	; 0x4216 <HLED_Init+0x56>
			break;
		case LED1:
			MDIO_Set_PIN_DIR(MDIO_PORTC,PIN3,PIN_OUTPUT);
    4200:	82 e0       	ldi	r24, 0x02	; 2
    4202:	63 e0       	ldi	r22, 0x03	; 3
    4204:	41 e0       	ldi	r20, 0x01	; 1
    4206:	0e 94 20 18 	call	0x3040	; 0x3040 <MDIO_Set_PIN_DIR>
    420a:	05 c0       	rjmp	.+10     	; 0x4216 <HLED_Init+0x56>
				break;
		case LED2:
			MDIO_Set_PIN_DIR(MDIO_PORTD,PIN4,PIN_OUTPUT);
    420c:	83 e0       	ldi	r24, 0x03	; 3
    420e:	64 e0       	ldi	r22, 0x04	; 4
    4210:	41 e0       	ldi	r20, 0x01	; 1
    4212:	0e 94 20 18 	call	0x3040	; 0x3040 <MDIO_Set_PIN_DIR>
	default:
		/*wrong LED number passed */
		break;

}
}
    4216:	0f 90       	pop	r0
    4218:	0f 90       	pop	r0
    421a:	0f 90       	pop	r0
    421c:	cf 91       	pop	r28
    421e:	df 91       	pop	r29
    4220:	08 95       	ret

00004222 <HLED_ON>:
void HLED_ON(u8 Local_u8LedNumber){
    4222:	df 93       	push	r29
    4224:	cf 93       	push	r28
    4226:	00 d0       	rcall	.+0      	; 0x4228 <HLED_ON+0x6>
    4228:	0f 92       	push	r0
    422a:	cd b7       	in	r28, 0x3d	; 61
    422c:	de b7       	in	r29, 0x3e	; 62
    422e:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_u8LedNumber)
    4230:	89 81       	ldd	r24, Y+1	; 0x01
    4232:	28 2f       	mov	r18, r24
    4234:	30 e0       	ldi	r19, 0x00	; 0
    4236:	3b 83       	std	Y+3, r19	; 0x03
    4238:	2a 83       	std	Y+2, r18	; 0x02
    423a:	8a 81       	ldd	r24, Y+2	; 0x02
    423c:	9b 81       	ldd	r25, Y+3	; 0x03
    423e:	81 30       	cpi	r24, 0x01	; 1
    4240:	91 05       	cpc	r25, r1
    4242:	79 f0       	breq	.+30     	; 0x4262 <HLED_ON+0x40>
    4244:	2a 81       	ldd	r18, Y+2	; 0x02
    4246:	3b 81       	ldd	r19, Y+3	; 0x03
    4248:	22 30       	cpi	r18, 0x02	; 2
    424a:	31 05       	cpc	r19, r1
    424c:	81 f0       	breq	.+32     	; 0x426e <HLED_ON+0x4c>
    424e:	8a 81       	ldd	r24, Y+2	; 0x02
    4250:	9b 81       	ldd	r25, Y+3	; 0x03
    4252:	00 97       	sbiw	r24, 0x00	; 0
    4254:	89 f4       	brne	.+34     	; 0x4278 <HLED_ON+0x56>
	{
	case LED0:
		MDIO_Set_PIN_VALUE(MDIO_PORTC,PIN2,PIN_HIGH);
    4256:	82 e0       	ldi	r24, 0x02	; 2
    4258:	62 e0       	ldi	r22, 0x02	; 2
    425a:	41 e0       	ldi	r20, 0x01	; 1
    425c:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
    4260:	0b c0       	rjmp	.+22     	; 0x4278 <HLED_ON+0x56>
		break;
	case LED1:
		MDIO_Set_PIN_DIR(MDIO_PORTC,PIN3,PIN_HIGH);
    4262:	82 e0       	ldi	r24, 0x02	; 2
    4264:	63 e0       	ldi	r22, 0x03	; 3
    4266:	41 e0       	ldi	r20, 0x01	; 1
    4268:	0e 94 20 18 	call	0x3040	; 0x3040 <MDIO_Set_PIN_DIR>
    426c:	05 c0       	rjmp	.+10     	; 0x4278 <HLED_ON+0x56>
			break;
	case LED2:
		MDIO_Set_PIN_DIR(MDIO_PORTD,PIN4,PIN_HIGH);
    426e:	83 e0       	ldi	r24, 0x03	; 3
    4270:	64 e0       	ldi	r22, 0x04	; 4
    4272:	41 e0       	ldi	r20, 0x01	; 1
    4274:	0e 94 20 18 	call	0x3040	; 0x3040 <MDIO_Set_PIN_DIR>
			break;
default:
	/*wrong LED number passed */
	break;
}
}
    4278:	0f 90       	pop	r0
    427a:	0f 90       	pop	r0
    427c:	0f 90       	pop	r0
    427e:	cf 91       	pop	r28
    4280:	df 91       	pop	r29
    4282:	08 95       	ret

00004284 <HLED_OFF>:
void HLED_OFF(u8 Local_u8LedNumber){
    4284:	df 93       	push	r29
    4286:	cf 93       	push	r28
    4288:	00 d0       	rcall	.+0      	; 0x428a <HLED_OFF+0x6>
    428a:	0f 92       	push	r0
    428c:	cd b7       	in	r28, 0x3d	; 61
    428e:	de b7       	in	r29, 0x3e	; 62
    4290:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_u8LedNumber)
    4292:	89 81       	ldd	r24, Y+1	; 0x01
    4294:	28 2f       	mov	r18, r24
    4296:	30 e0       	ldi	r19, 0x00	; 0
    4298:	3b 83       	std	Y+3, r19	; 0x03
    429a:	2a 83       	std	Y+2, r18	; 0x02
    429c:	8a 81       	ldd	r24, Y+2	; 0x02
    429e:	9b 81       	ldd	r25, Y+3	; 0x03
    42a0:	81 30       	cpi	r24, 0x01	; 1
    42a2:	91 05       	cpc	r25, r1
    42a4:	79 f0       	breq	.+30     	; 0x42c4 <HLED_OFF+0x40>
    42a6:	2a 81       	ldd	r18, Y+2	; 0x02
    42a8:	3b 81       	ldd	r19, Y+3	; 0x03
    42aa:	22 30       	cpi	r18, 0x02	; 2
    42ac:	31 05       	cpc	r19, r1
    42ae:	81 f0       	breq	.+32     	; 0x42d0 <HLED_OFF+0x4c>
    42b0:	8a 81       	ldd	r24, Y+2	; 0x02
    42b2:	9b 81       	ldd	r25, Y+3	; 0x03
    42b4:	00 97       	sbiw	r24, 0x00	; 0
    42b6:	89 f4       	brne	.+34     	; 0x42da <HLED_OFF+0x56>
	{
	case LED0:
		MDIO_Set_PIN_VALUE(MDIO_PORTC,PIN2,PIN_LOW);
    42b8:	82 e0       	ldi	r24, 0x02	; 2
    42ba:	62 e0       	ldi	r22, 0x02	; 2
    42bc:	40 e0       	ldi	r20, 0x00	; 0
    42be:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
    42c2:	0b c0       	rjmp	.+22     	; 0x42da <HLED_OFF+0x56>
		break;
	case LED1:
		MDIO_Set_PIN_DIR(MDIO_PORTC,PIN3,PIN_LOW);
    42c4:	82 e0       	ldi	r24, 0x02	; 2
    42c6:	63 e0       	ldi	r22, 0x03	; 3
    42c8:	40 e0       	ldi	r20, 0x00	; 0
    42ca:	0e 94 20 18 	call	0x3040	; 0x3040 <MDIO_Set_PIN_DIR>
    42ce:	05 c0       	rjmp	.+10     	; 0x42da <HLED_OFF+0x56>
			break;
	case LED2:
		MDIO_Set_PIN_DIR(MDIO_PORTD,PIN4,PIN_LOW);
    42d0:	83 e0       	ldi	r24, 0x03	; 3
    42d2:	64 e0       	ldi	r22, 0x04	; 4
    42d4:	40 e0       	ldi	r20, 0x00	; 0
    42d6:	0e 94 20 18 	call	0x3040	; 0x3040 <MDIO_Set_PIN_DIR>
			break;
default:
	/*wrong LED number passed */
	break;
}
}
    42da:	0f 90       	pop	r0
    42dc:	0f 90       	pop	r0
    42de:	0f 90       	pop	r0
    42e0:	cf 91       	pop	r28
    42e2:	df 91       	pop	r29
    42e4:	08 95       	ret

000042e6 <HLED_Blink>:
void HLED_Blink(u8 Local_u8LedNumber){
    42e6:	df 93       	push	r29
    42e8:	cf 93       	push	r28
    42ea:	cd b7       	in	r28, 0x3d	; 61
    42ec:	de b7       	in	r29, 0x3e	; 62
    42ee:	ad 97       	sbiw	r28, 0x2d	; 45
    42f0:	0f b6       	in	r0, 0x3f	; 63
    42f2:	f8 94       	cli
    42f4:	de bf       	out	0x3e, r29	; 62
    42f6:	0f be       	out	0x3f, r0	; 63
    42f8:	cd bf       	out	0x3d, r28	; 61
    42fa:	8b a7       	std	Y+43, r24	; 0x2b
	switch(Local_u8LedNumber)
    42fc:	8b a5       	ldd	r24, Y+43	; 0x2b
    42fe:	28 2f       	mov	r18, r24
    4300:	30 e0       	ldi	r19, 0x00	; 0
    4302:	3d a7       	std	Y+45, r19	; 0x2d
    4304:	2c a7       	std	Y+44, r18	; 0x2c
    4306:	8c a5       	ldd	r24, Y+44	; 0x2c
    4308:	9d a5       	ldd	r25, Y+45	; 0x2d
    430a:	81 30       	cpi	r24, 0x01	; 1
    430c:	91 05       	cpc	r25, r1
    430e:	09 f4       	brne	.+2      	; 0x4312 <HLED_Blink+0x2c>
    4310:	88 c0       	rjmp	.+272    	; 0x4422 <HLED_Blink+0x13c>
    4312:	2c a5       	ldd	r18, Y+44	; 0x2c
    4314:	3d a5       	ldd	r19, Y+45	; 0x2d
    4316:	22 30       	cpi	r18, 0x02	; 2
    4318:	31 05       	cpc	r19, r1
    431a:	09 f4       	brne	.+2      	; 0x431e <HLED_Blink+0x38>
    431c:	ff c0       	rjmp	.+510    	; 0x451c <HLED_Blink+0x236>
    431e:	8c a5       	ldd	r24, Y+44	; 0x2c
    4320:	9d a5       	ldd	r25, Y+45	; 0x2d
    4322:	00 97       	sbiw	r24, 0x00	; 0
    4324:	09 f0       	breq	.+2      	; 0x4328 <HLED_Blink+0x42>
    4326:	76 c1       	rjmp	.+748    	; 0x4614 <HLED_Blink+0x32e>
	{
	case LED0:
		MDIO_Set_PIN_VALUE(MDIO_PORTC,PIN2,PIN_HIGH);
    4328:	82 e0       	ldi	r24, 0x02	; 2
    432a:	62 e0       	ldi	r22, 0x02	; 2
    432c:	41 e0       	ldi	r20, 0x01	; 1
    432e:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
    4332:	80 e0       	ldi	r24, 0x00	; 0
    4334:	90 e0       	ldi	r25, 0x00	; 0
    4336:	aa ef       	ldi	r26, 0xFA	; 250
    4338:	b3 e4       	ldi	r27, 0x43	; 67
    433a:	8f a3       	std	Y+39, r24	; 0x27
    433c:	98 a7       	std	Y+40, r25	; 0x28
    433e:	a9 a7       	std	Y+41, r26	; 0x29
    4340:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4342:	6f a1       	ldd	r22, Y+39	; 0x27
    4344:	78 a5       	ldd	r23, Y+40	; 0x28
    4346:	89 a5       	ldd	r24, Y+41	; 0x29
    4348:	9a a5       	ldd	r25, Y+42	; 0x2a
    434a:	20 e0       	ldi	r18, 0x00	; 0
    434c:	30 e0       	ldi	r19, 0x00	; 0
    434e:	4a e7       	ldi	r20, 0x7A	; 122
    4350:	55 e4       	ldi	r21, 0x45	; 69
    4352:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4356:	dc 01       	movw	r26, r24
    4358:	cb 01       	movw	r24, r22
    435a:	8b a3       	std	Y+35, r24	; 0x23
    435c:	9c a3       	std	Y+36, r25	; 0x24
    435e:	ad a3       	std	Y+37, r26	; 0x25
    4360:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4362:	6b a1       	ldd	r22, Y+35	; 0x23
    4364:	7c a1       	ldd	r23, Y+36	; 0x24
    4366:	8d a1       	ldd	r24, Y+37	; 0x25
    4368:	9e a1       	ldd	r25, Y+38	; 0x26
    436a:	20 e0       	ldi	r18, 0x00	; 0
    436c:	30 e0       	ldi	r19, 0x00	; 0
    436e:	40 e8       	ldi	r20, 0x80	; 128
    4370:	5f e3       	ldi	r21, 0x3F	; 63
    4372:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4376:	88 23       	and	r24, r24
    4378:	2c f4       	brge	.+10     	; 0x4384 <HLED_Blink+0x9e>
		__ticks = 1;
    437a:	81 e0       	ldi	r24, 0x01	; 1
    437c:	90 e0       	ldi	r25, 0x00	; 0
    437e:	9a a3       	std	Y+34, r25	; 0x22
    4380:	89 a3       	std	Y+33, r24	; 0x21
    4382:	3f c0       	rjmp	.+126    	; 0x4402 <HLED_Blink+0x11c>
	else if (__tmp > 65535)
    4384:	6b a1       	ldd	r22, Y+35	; 0x23
    4386:	7c a1       	ldd	r23, Y+36	; 0x24
    4388:	8d a1       	ldd	r24, Y+37	; 0x25
    438a:	9e a1       	ldd	r25, Y+38	; 0x26
    438c:	20 e0       	ldi	r18, 0x00	; 0
    438e:	3f ef       	ldi	r19, 0xFF	; 255
    4390:	4f e7       	ldi	r20, 0x7F	; 127
    4392:	57 e4       	ldi	r21, 0x47	; 71
    4394:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4398:	18 16       	cp	r1, r24
    439a:	4c f5       	brge	.+82     	; 0x43ee <HLED_Blink+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    439c:	6f a1       	ldd	r22, Y+39	; 0x27
    439e:	78 a5       	ldd	r23, Y+40	; 0x28
    43a0:	89 a5       	ldd	r24, Y+41	; 0x29
    43a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    43a4:	20 e0       	ldi	r18, 0x00	; 0
    43a6:	30 e0       	ldi	r19, 0x00	; 0
    43a8:	40 e2       	ldi	r20, 0x20	; 32
    43aa:	51 e4       	ldi	r21, 0x41	; 65
    43ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43b0:	dc 01       	movw	r26, r24
    43b2:	cb 01       	movw	r24, r22
    43b4:	bc 01       	movw	r22, r24
    43b6:	cd 01       	movw	r24, r26
    43b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43bc:	dc 01       	movw	r26, r24
    43be:	cb 01       	movw	r24, r22
    43c0:	9a a3       	std	Y+34, r25	; 0x22
    43c2:	89 a3       	std	Y+33, r24	; 0x21
    43c4:	0f c0       	rjmp	.+30     	; 0x43e4 <HLED_Blink+0xfe>
    43c6:	80 e9       	ldi	r24, 0x90	; 144
    43c8:	91 e0       	ldi	r25, 0x01	; 1
    43ca:	98 a3       	std	Y+32, r25	; 0x20
    43cc:	8f 8f       	std	Y+31, r24	; 0x1f
    43ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    43d0:	98 a1       	ldd	r25, Y+32	; 0x20
    43d2:	01 97       	sbiw	r24, 0x01	; 1
    43d4:	f1 f7       	brne	.-4      	; 0x43d2 <HLED_Blink+0xec>
    43d6:	98 a3       	std	Y+32, r25	; 0x20
    43d8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43da:	89 a1       	ldd	r24, Y+33	; 0x21
    43dc:	9a a1       	ldd	r25, Y+34	; 0x22
    43de:	01 97       	sbiw	r24, 0x01	; 1
    43e0:	9a a3       	std	Y+34, r25	; 0x22
    43e2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43e4:	89 a1       	ldd	r24, Y+33	; 0x21
    43e6:	9a a1       	ldd	r25, Y+34	; 0x22
    43e8:	00 97       	sbiw	r24, 0x00	; 0
    43ea:	69 f7       	brne	.-38     	; 0x43c6 <HLED_Blink+0xe0>
    43ec:	14 c0       	rjmp	.+40     	; 0x4416 <HLED_Blink+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43ee:	6b a1       	ldd	r22, Y+35	; 0x23
    43f0:	7c a1       	ldd	r23, Y+36	; 0x24
    43f2:	8d a1       	ldd	r24, Y+37	; 0x25
    43f4:	9e a1       	ldd	r25, Y+38	; 0x26
    43f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43fa:	dc 01       	movw	r26, r24
    43fc:	cb 01       	movw	r24, r22
    43fe:	9a a3       	std	Y+34, r25	; 0x22
    4400:	89 a3       	std	Y+33, r24	; 0x21
    4402:	89 a1       	ldd	r24, Y+33	; 0x21
    4404:	9a a1       	ldd	r25, Y+34	; 0x22
    4406:	9e 8f       	std	Y+30, r25	; 0x1e
    4408:	8d 8f       	std	Y+29, r24	; 0x1d
    440a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    440c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    440e:	01 97       	sbiw	r24, 0x01	; 1
    4410:	f1 f7       	brne	.-4      	; 0x440e <HLED_Blink+0x128>
    4412:	9e 8f       	std	Y+30, r25	; 0x1e
    4414:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(500);
		MDIO_Set_PIN_VALUE(MDIO_PORTC,PIN2,PIN_LOW);
    4416:	82 e0       	ldi	r24, 0x02	; 2
    4418:	62 e0       	ldi	r22, 0x02	; 2
    441a:	40 e0       	ldi	r20, 0x00	; 0
    441c:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
    4420:	f9 c0       	rjmp	.+498    	; 0x4614 <HLED_Blink+0x32e>
		break;
	case LED1:
		MDIO_Set_PIN_DIR(MDIO_PORTC,PIN3,PIN_HIGH);
    4422:	82 e0       	ldi	r24, 0x02	; 2
    4424:	63 e0       	ldi	r22, 0x03	; 3
    4426:	41 e0       	ldi	r20, 0x01	; 1
    4428:	0e 94 20 18 	call	0x3040	; 0x3040 <MDIO_Set_PIN_DIR>
    442c:	80 e0       	ldi	r24, 0x00	; 0
    442e:	90 e0       	ldi	r25, 0x00	; 0
    4430:	aa ef       	ldi	r26, 0xFA	; 250
    4432:	b3 e4       	ldi	r27, 0x43	; 67
    4434:	89 8f       	std	Y+25, r24	; 0x19
    4436:	9a 8f       	std	Y+26, r25	; 0x1a
    4438:	ab 8f       	std	Y+27, r26	; 0x1b
    443a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    443c:	69 8d       	ldd	r22, Y+25	; 0x19
    443e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4440:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4442:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4444:	20 e0       	ldi	r18, 0x00	; 0
    4446:	30 e0       	ldi	r19, 0x00	; 0
    4448:	4a e7       	ldi	r20, 0x7A	; 122
    444a:	55 e4       	ldi	r21, 0x45	; 69
    444c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4450:	dc 01       	movw	r26, r24
    4452:	cb 01       	movw	r24, r22
    4454:	8d 8b       	std	Y+21, r24	; 0x15
    4456:	9e 8b       	std	Y+22, r25	; 0x16
    4458:	af 8b       	std	Y+23, r26	; 0x17
    445a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    445c:	6d 89       	ldd	r22, Y+21	; 0x15
    445e:	7e 89       	ldd	r23, Y+22	; 0x16
    4460:	8f 89       	ldd	r24, Y+23	; 0x17
    4462:	98 8d       	ldd	r25, Y+24	; 0x18
    4464:	20 e0       	ldi	r18, 0x00	; 0
    4466:	30 e0       	ldi	r19, 0x00	; 0
    4468:	40 e8       	ldi	r20, 0x80	; 128
    446a:	5f e3       	ldi	r21, 0x3F	; 63
    446c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4470:	88 23       	and	r24, r24
    4472:	2c f4       	brge	.+10     	; 0x447e <HLED_Blink+0x198>
		__ticks = 1;
    4474:	81 e0       	ldi	r24, 0x01	; 1
    4476:	90 e0       	ldi	r25, 0x00	; 0
    4478:	9c 8b       	std	Y+20, r25	; 0x14
    447a:	8b 8b       	std	Y+19, r24	; 0x13
    447c:	3f c0       	rjmp	.+126    	; 0x44fc <HLED_Blink+0x216>
	else if (__tmp > 65535)
    447e:	6d 89       	ldd	r22, Y+21	; 0x15
    4480:	7e 89       	ldd	r23, Y+22	; 0x16
    4482:	8f 89       	ldd	r24, Y+23	; 0x17
    4484:	98 8d       	ldd	r25, Y+24	; 0x18
    4486:	20 e0       	ldi	r18, 0x00	; 0
    4488:	3f ef       	ldi	r19, 0xFF	; 255
    448a:	4f e7       	ldi	r20, 0x7F	; 127
    448c:	57 e4       	ldi	r21, 0x47	; 71
    448e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4492:	18 16       	cp	r1, r24
    4494:	4c f5       	brge	.+82     	; 0x44e8 <HLED_Blink+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4496:	69 8d       	ldd	r22, Y+25	; 0x19
    4498:	7a 8d       	ldd	r23, Y+26	; 0x1a
    449a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    449c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    449e:	20 e0       	ldi	r18, 0x00	; 0
    44a0:	30 e0       	ldi	r19, 0x00	; 0
    44a2:	40 e2       	ldi	r20, 0x20	; 32
    44a4:	51 e4       	ldi	r21, 0x41	; 65
    44a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44aa:	dc 01       	movw	r26, r24
    44ac:	cb 01       	movw	r24, r22
    44ae:	bc 01       	movw	r22, r24
    44b0:	cd 01       	movw	r24, r26
    44b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44b6:	dc 01       	movw	r26, r24
    44b8:	cb 01       	movw	r24, r22
    44ba:	9c 8b       	std	Y+20, r25	; 0x14
    44bc:	8b 8b       	std	Y+19, r24	; 0x13
    44be:	0f c0       	rjmp	.+30     	; 0x44de <HLED_Blink+0x1f8>
    44c0:	80 e9       	ldi	r24, 0x90	; 144
    44c2:	91 e0       	ldi	r25, 0x01	; 1
    44c4:	9a 8b       	std	Y+18, r25	; 0x12
    44c6:	89 8b       	std	Y+17, r24	; 0x11
    44c8:	89 89       	ldd	r24, Y+17	; 0x11
    44ca:	9a 89       	ldd	r25, Y+18	; 0x12
    44cc:	01 97       	sbiw	r24, 0x01	; 1
    44ce:	f1 f7       	brne	.-4      	; 0x44cc <HLED_Blink+0x1e6>
    44d0:	9a 8b       	std	Y+18, r25	; 0x12
    44d2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44d4:	8b 89       	ldd	r24, Y+19	; 0x13
    44d6:	9c 89       	ldd	r25, Y+20	; 0x14
    44d8:	01 97       	sbiw	r24, 0x01	; 1
    44da:	9c 8b       	std	Y+20, r25	; 0x14
    44dc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44de:	8b 89       	ldd	r24, Y+19	; 0x13
    44e0:	9c 89       	ldd	r25, Y+20	; 0x14
    44e2:	00 97       	sbiw	r24, 0x00	; 0
    44e4:	69 f7       	brne	.-38     	; 0x44c0 <HLED_Blink+0x1da>
    44e6:	14 c0       	rjmp	.+40     	; 0x4510 <HLED_Blink+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44e8:	6d 89       	ldd	r22, Y+21	; 0x15
    44ea:	7e 89       	ldd	r23, Y+22	; 0x16
    44ec:	8f 89       	ldd	r24, Y+23	; 0x17
    44ee:	98 8d       	ldd	r25, Y+24	; 0x18
    44f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44f4:	dc 01       	movw	r26, r24
    44f6:	cb 01       	movw	r24, r22
    44f8:	9c 8b       	std	Y+20, r25	; 0x14
    44fa:	8b 8b       	std	Y+19, r24	; 0x13
    44fc:	8b 89       	ldd	r24, Y+19	; 0x13
    44fe:	9c 89       	ldd	r25, Y+20	; 0x14
    4500:	98 8b       	std	Y+16, r25	; 0x10
    4502:	8f 87       	std	Y+15, r24	; 0x0f
    4504:	8f 85       	ldd	r24, Y+15	; 0x0f
    4506:	98 89       	ldd	r25, Y+16	; 0x10
    4508:	01 97       	sbiw	r24, 0x01	; 1
    450a:	f1 f7       	brne	.-4      	; 0x4508 <HLED_Blink+0x222>
    450c:	98 8b       	std	Y+16, r25	; 0x10
    450e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		MDIO_Set_PIN_VALUE(MDIO_PORTC,PIN3,PIN_LOW);
    4510:	82 e0       	ldi	r24, 0x02	; 2
    4512:	63 e0       	ldi	r22, 0x03	; 3
    4514:	40 e0       	ldi	r20, 0x00	; 0
    4516:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
    451a:	7c c0       	rjmp	.+248    	; 0x4614 <HLED_Blink+0x32e>
			break;
	case LED2:
		MDIO_Set_PIN_DIR(MDIO_PORTD,PIN4,PIN_HIGH);
    451c:	83 e0       	ldi	r24, 0x03	; 3
    451e:	64 e0       	ldi	r22, 0x04	; 4
    4520:	41 e0       	ldi	r20, 0x01	; 1
    4522:	0e 94 20 18 	call	0x3040	; 0x3040 <MDIO_Set_PIN_DIR>
    4526:	80 e0       	ldi	r24, 0x00	; 0
    4528:	90 e0       	ldi	r25, 0x00	; 0
    452a:	aa ef       	ldi	r26, 0xFA	; 250
    452c:	b3 e4       	ldi	r27, 0x43	; 67
    452e:	8b 87       	std	Y+11, r24	; 0x0b
    4530:	9c 87       	std	Y+12, r25	; 0x0c
    4532:	ad 87       	std	Y+13, r26	; 0x0d
    4534:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4536:	6b 85       	ldd	r22, Y+11	; 0x0b
    4538:	7c 85       	ldd	r23, Y+12	; 0x0c
    453a:	8d 85       	ldd	r24, Y+13	; 0x0d
    453c:	9e 85       	ldd	r25, Y+14	; 0x0e
    453e:	20 e0       	ldi	r18, 0x00	; 0
    4540:	30 e0       	ldi	r19, 0x00	; 0
    4542:	4a e7       	ldi	r20, 0x7A	; 122
    4544:	55 e4       	ldi	r21, 0x45	; 69
    4546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    454a:	dc 01       	movw	r26, r24
    454c:	cb 01       	movw	r24, r22
    454e:	8f 83       	std	Y+7, r24	; 0x07
    4550:	98 87       	std	Y+8, r25	; 0x08
    4552:	a9 87       	std	Y+9, r26	; 0x09
    4554:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4556:	6f 81       	ldd	r22, Y+7	; 0x07
    4558:	78 85       	ldd	r23, Y+8	; 0x08
    455a:	89 85       	ldd	r24, Y+9	; 0x09
    455c:	9a 85       	ldd	r25, Y+10	; 0x0a
    455e:	20 e0       	ldi	r18, 0x00	; 0
    4560:	30 e0       	ldi	r19, 0x00	; 0
    4562:	40 e8       	ldi	r20, 0x80	; 128
    4564:	5f e3       	ldi	r21, 0x3F	; 63
    4566:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    456a:	88 23       	and	r24, r24
    456c:	2c f4       	brge	.+10     	; 0x4578 <HLED_Blink+0x292>
		__ticks = 1;
    456e:	81 e0       	ldi	r24, 0x01	; 1
    4570:	90 e0       	ldi	r25, 0x00	; 0
    4572:	9e 83       	std	Y+6, r25	; 0x06
    4574:	8d 83       	std	Y+5, r24	; 0x05
    4576:	3f c0       	rjmp	.+126    	; 0x45f6 <HLED_Blink+0x310>
	else if (__tmp > 65535)
    4578:	6f 81       	ldd	r22, Y+7	; 0x07
    457a:	78 85       	ldd	r23, Y+8	; 0x08
    457c:	89 85       	ldd	r24, Y+9	; 0x09
    457e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4580:	20 e0       	ldi	r18, 0x00	; 0
    4582:	3f ef       	ldi	r19, 0xFF	; 255
    4584:	4f e7       	ldi	r20, 0x7F	; 127
    4586:	57 e4       	ldi	r21, 0x47	; 71
    4588:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    458c:	18 16       	cp	r1, r24
    458e:	4c f5       	brge	.+82     	; 0x45e2 <HLED_Blink+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4590:	6b 85       	ldd	r22, Y+11	; 0x0b
    4592:	7c 85       	ldd	r23, Y+12	; 0x0c
    4594:	8d 85       	ldd	r24, Y+13	; 0x0d
    4596:	9e 85       	ldd	r25, Y+14	; 0x0e
    4598:	20 e0       	ldi	r18, 0x00	; 0
    459a:	30 e0       	ldi	r19, 0x00	; 0
    459c:	40 e2       	ldi	r20, 0x20	; 32
    459e:	51 e4       	ldi	r21, 0x41	; 65
    45a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45a4:	dc 01       	movw	r26, r24
    45a6:	cb 01       	movw	r24, r22
    45a8:	bc 01       	movw	r22, r24
    45aa:	cd 01       	movw	r24, r26
    45ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45b0:	dc 01       	movw	r26, r24
    45b2:	cb 01       	movw	r24, r22
    45b4:	9e 83       	std	Y+6, r25	; 0x06
    45b6:	8d 83       	std	Y+5, r24	; 0x05
    45b8:	0f c0       	rjmp	.+30     	; 0x45d8 <HLED_Blink+0x2f2>
    45ba:	80 e9       	ldi	r24, 0x90	; 144
    45bc:	91 e0       	ldi	r25, 0x01	; 1
    45be:	9c 83       	std	Y+4, r25	; 0x04
    45c0:	8b 83       	std	Y+3, r24	; 0x03
    45c2:	8b 81       	ldd	r24, Y+3	; 0x03
    45c4:	9c 81       	ldd	r25, Y+4	; 0x04
    45c6:	01 97       	sbiw	r24, 0x01	; 1
    45c8:	f1 f7       	brne	.-4      	; 0x45c6 <HLED_Blink+0x2e0>
    45ca:	9c 83       	std	Y+4, r25	; 0x04
    45cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45ce:	8d 81       	ldd	r24, Y+5	; 0x05
    45d0:	9e 81       	ldd	r25, Y+6	; 0x06
    45d2:	01 97       	sbiw	r24, 0x01	; 1
    45d4:	9e 83       	std	Y+6, r25	; 0x06
    45d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45d8:	8d 81       	ldd	r24, Y+5	; 0x05
    45da:	9e 81       	ldd	r25, Y+6	; 0x06
    45dc:	00 97       	sbiw	r24, 0x00	; 0
    45de:	69 f7       	brne	.-38     	; 0x45ba <HLED_Blink+0x2d4>
    45e0:	14 c0       	rjmp	.+40     	; 0x460a <HLED_Blink+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45e2:	6f 81       	ldd	r22, Y+7	; 0x07
    45e4:	78 85       	ldd	r23, Y+8	; 0x08
    45e6:	89 85       	ldd	r24, Y+9	; 0x09
    45e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    45ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45ee:	dc 01       	movw	r26, r24
    45f0:	cb 01       	movw	r24, r22
    45f2:	9e 83       	std	Y+6, r25	; 0x06
    45f4:	8d 83       	std	Y+5, r24	; 0x05
    45f6:	8d 81       	ldd	r24, Y+5	; 0x05
    45f8:	9e 81       	ldd	r25, Y+6	; 0x06
    45fa:	9a 83       	std	Y+2, r25	; 0x02
    45fc:	89 83       	std	Y+1, r24	; 0x01
    45fe:	89 81       	ldd	r24, Y+1	; 0x01
    4600:	9a 81       	ldd	r25, Y+2	; 0x02
    4602:	01 97       	sbiw	r24, 0x01	; 1
    4604:	f1 f7       	brne	.-4      	; 0x4602 <HLED_Blink+0x31c>
    4606:	9a 83       	std	Y+2, r25	; 0x02
    4608:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		MDIO_Set_PIN_VALUE(MDIO_PORTD,PIN4,PIN_LOW);
    460a:	83 e0       	ldi	r24, 0x03	; 3
    460c:	64 e0       	ldi	r22, 0x04	; 4
    460e:	40 e0       	ldi	r20, 0x00	; 0
    4610:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
			break;
default:
	/*wrong LED number passed */
	break;
}
}
    4614:	ad 96       	adiw	r28, 0x2d	; 45
    4616:	0f b6       	in	r0, 0x3f	; 63
    4618:	f8 94       	cli
    461a:	de bf       	out	0x3e, r29	; 62
    461c:	0f be       	out	0x3f, r0	; 63
    461e:	cd bf       	out	0x3d, r28	; 61
    4620:	cf 91       	pop	r28
    4622:	df 91       	pop	r29
    4624:	08 95       	ret

00004626 <HKPD_Init>:
#include"HKPD_Private.h"
#include "../../MCAL/MDIO/MDIO_Interface.h"
#include <util/delay.h>

void HKPD_Init()
{
    4626:	df 93       	push	r29
    4628:	cf 93       	push	r28
    462a:	cd b7       	in	r28, 0x3d	; 61
    462c:	de b7       	in	r29, 0x3e	; 62
	/*Set Columns Pins Direction Output*/
	MDIO_Set_PIN_DIR(HKPD_COLUMN_PORT,PIN5,PIN_OUTPUT);
    462e:	80 e0       	ldi	r24, 0x00	; 0
    4630:	65 e0       	ldi	r22, 0x05	; 5
    4632:	41 e0       	ldi	r20, 0x01	; 1
    4634:	0e 94 20 18 	call	0x3040	; 0x3040 <MDIO_Set_PIN_DIR>
	MDIO_Set_PIN_DIR(HKPD_COLUMN_PORT,PIN6,PIN_OUTPUT);
    4638:	80 e0       	ldi	r24, 0x00	; 0
    463a:	66 e0       	ldi	r22, 0x06	; 6
    463c:	41 e0       	ldi	r20, 0x01	; 1
    463e:	0e 94 20 18 	call	0x3040	; 0x3040 <MDIO_Set_PIN_DIR>
	MDIO_Set_PIN_DIR(HKPD_COLUMN_PORT,PIN7,PIN_OUTPUT);
    4642:	80 e0       	ldi	r24, 0x00	; 0
    4644:	67 e0       	ldi	r22, 0x07	; 7
    4646:	41 e0       	ldi	r20, 0x01	; 1
    4648:	0e 94 20 18 	call	0x3040	; 0x3040 <MDIO_Set_PIN_DIR>
	MDIO_Set_PIN_DIR(MDIO_PORTB,PIN3,PIN_OUTPUT);
    464c:	81 e0       	ldi	r24, 0x01	; 1
    464e:	63 e0       	ldi	r22, 0x03	; 3
    4650:	41 e0       	ldi	r20, 0x01	; 1
    4652:	0e 94 20 18 	call	0x3040	; 0x3040 <MDIO_Set_PIN_DIR>

	/*Set Row Pins Direction Input*/
	MDIO_Set_PIN_DIR(HKPD_ROW_PORT,HKPD_ROW_0_PIN,PIN_INPUT);
    4656:	82 e0       	ldi	r24, 0x02	; 2
    4658:	64 e0       	ldi	r22, 0x04	; 4
    465a:	40 e0       	ldi	r20, 0x00	; 0
    465c:	0e 94 20 18 	call	0x3040	; 0x3040 <MDIO_Set_PIN_DIR>
	MDIO_Set_PIN_DIR(HKPD_ROW_PORT,HKPD_ROW_1_PIN,PIN_INPUT);
    4660:	82 e0       	ldi	r24, 0x02	; 2
    4662:	65 e0       	ldi	r22, 0x05	; 5
    4664:	40 e0       	ldi	r20, 0x00	; 0
    4666:	0e 94 20 18 	call	0x3040	; 0x3040 <MDIO_Set_PIN_DIR>
	MDIO_Set_PIN_DIR(HKPD_ROW_PORT,HKPD_ROW_2_PIN,PIN_INPUT);
    466a:	82 e0       	ldi	r24, 0x02	; 2
    466c:	66 e0       	ldi	r22, 0x06	; 6
    466e:	40 e0       	ldi	r20, 0x00	; 0
    4670:	0e 94 20 18 	call	0x3040	; 0x3040 <MDIO_Set_PIN_DIR>
	MDIO_Set_PIN_DIR(HKPD_ROW_PORT,HKPD_ROW_3_PIN,PIN_INPUT);
    4674:	82 e0       	ldi	r24, 0x02	; 2
    4676:	67 e0       	ldi	r22, 0x07	; 7
    4678:	40 e0       	ldi	r20, 0x00	; 0
    467a:	0e 94 20 18 	call	0x3040	; 0x3040 <MDIO_Set_PIN_DIR>

	/*Activate Pull up Resistor */
MDIO_Set_PIN_VALUE(HKPD_ROW_PORT,HKPD_ROW_0_PIN,PIN_HIGH);
    467e:	82 e0       	ldi	r24, 0x02	; 2
    4680:	64 e0       	ldi	r22, 0x04	; 4
    4682:	41 e0       	ldi	r20, 0x01	; 1
    4684:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
MDIO_Set_PIN_VALUE(HKPD_ROW_PORT,HKPD_ROW_1_PIN,PIN_HIGH);
    4688:	82 e0       	ldi	r24, 0x02	; 2
    468a:	65 e0       	ldi	r22, 0x05	; 5
    468c:	41 e0       	ldi	r20, 0x01	; 1
    468e:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
MDIO_Set_PIN_VALUE(HKPD_ROW_PORT,HKPD_ROW_2_PIN,PIN_HIGH);
    4692:	82 e0       	ldi	r24, 0x02	; 2
    4694:	66 e0       	ldi	r22, 0x06	; 6
    4696:	41 e0       	ldi	r20, 0x01	; 1
    4698:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
MDIO_Set_PIN_VALUE(HKPD_ROW_PORT,HKPD_ROW_3_PIN,PIN_HIGH);
    469c:	82 e0       	ldi	r24, 0x02	; 2
    469e:	67 e0       	ldi	r22, 0x07	; 7
    46a0:	41 e0       	ldi	r20, 0x01	; 1
    46a2:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
/*DEACTIVATE COULMNS*/
MDIO_Set_PIN_VALUE(HKPD_COLUMN_PORT,PIN5,PIN_HIGH);
    46a6:	80 e0       	ldi	r24, 0x00	; 0
    46a8:	65 e0       	ldi	r22, 0x05	; 5
    46aa:	41 e0       	ldi	r20, 0x01	; 1
    46ac:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
MDIO_Set_PIN_VALUE(HKPD_COLUMN_PORT,PIN6,PIN_HIGH);
    46b0:	80 e0       	ldi	r24, 0x00	; 0
    46b2:	66 e0       	ldi	r22, 0x06	; 6
    46b4:	41 e0       	ldi	r20, 0x01	; 1
    46b6:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
MDIO_Set_PIN_VALUE(HKPD_COLUMN_PORT,PIN7,PIN_HIGH);
    46ba:	80 e0       	ldi	r24, 0x00	; 0
    46bc:	67 e0       	ldi	r22, 0x07	; 7
    46be:	41 e0       	ldi	r20, 0x01	; 1
    46c0:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
MDIO_Set_PIN_VALUE(MDIO_PORTB,PIN3,PIN_HIGH);
    46c4:	81 e0       	ldi	r24, 0x01	; 1
    46c6:	63 e0       	ldi	r22, 0x03	; 3
    46c8:	41 e0       	ldi	r20, 0x01	; 1
    46ca:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>

}
    46ce:	cf 91       	pop	r28
    46d0:	df 91       	pop	r29
    46d2:	08 95       	ret

000046d4 <HKPD_GetPressedButton>:



u8 HKPD_GetPressedButton()
{//EDITED SO THAT THE USED PINS DOESN'T CONLICT WITH OTHER PERIPHERALS
    46d4:	0f 93       	push	r16
    46d6:	1f 93       	push	r17
    46d8:	df 93       	push	r29
    46da:	cf 93       	push	r28
    46dc:	cd b7       	in	r28, 0x3d	; 61
    46de:	de b7       	in	r29, 0x3e	; 62
    46e0:	c6 5f       	subi	r28, 0xF6	; 246
    46e2:	d0 40       	sbci	r29, 0x00	; 0
    46e4:	0f b6       	in	r0, 0x3f	; 63
    46e6:	f8 94       	cli
    46e8:	de bf       	out	0x3e, r29	; 62
    46ea:	0f be       	out	0x3f, r0	; 63
    46ec:	cd bf       	out	0x3d, r28	; 61





	u8 Local_u8_KeypadReading		=0;
    46ee:	fe 01       	movw	r30, r28
    46f0:	ef 51       	subi	r30, 0x1F	; 31
    46f2:	ff 4f       	sbci	r31, 0xFF	; 255
    46f4:	10 82       	st	Z, r1
		u8 Local_u8_KeyPadArr [4][4]	={{'7','8','9','/'},
											{'4','5','6','*'},
											{'1','2','3','-'},
											{'C','0','=','+'}};
    46f6:	ce 01       	movw	r24, r28
    46f8:	8e 51       	subi	r24, 0x1E	; 30
    46fa:	9f 4f       	sbci	r25, 0xFF	; 255
    46fc:	ce 50       	subi	r28, 0x0E	; 14
    46fe:	df 4f       	sbci	r29, 0xFF	; 255
    4700:	99 83       	std	Y+1, r25	; 0x01
    4702:	88 83       	st	Y, r24
    4704:	c2 5f       	subi	r28, 0xF2	; 242
    4706:	d0 40       	sbci	r29, 0x00	; 0
    4708:	8a e9       	ldi	r24, 0x9A	; 154
    470a:	94 e0       	ldi	r25, 0x04	; 4
    470c:	cc 50       	subi	r28, 0x0C	; 12
    470e:	df 4f       	sbci	r29, 0xFF	; 255
    4710:	99 83       	std	Y+1, r25	; 0x01
    4712:	88 83       	st	Y, r24
    4714:	c4 5f       	subi	r28, 0xF4	; 244
    4716:	d0 40       	sbci	r29, 0x00	; 0
    4718:	90 e1       	ldi	r25, 0x10	; 16
    471a:	ca 50       	subi	r28, 0x0A	; 10
    471c:	df 4f       	sbci	r29, 0xFF	; 255
    471e:	98 83       	st	Y, r25
    4720:	c6 5f       	subi	r28, 0xF6	; 246
    4722:	d0 40       	sbci	r29, 0x00	; 0
    4724:	cc 50       	subi	r28, 0x0C	; 12
    4726:	df 4f       	sbci	r29, 0xFF	; 255
    4728:	e8 81       	ld	r30, Y
    472a:	f9 81       	ldd	r31, Y+1	; 0x01
    472c:	c4 5f       	subi	r28, 0xF4	; 244
    472e:	d0 40       	sbci	r29, 0x00	; 0
    4730:	00 80       	ld	r0, Z
    4732:	cc 50       	subi	r28, 0x0C	; 12
    4734:	df 4f       	sbci	r29, 0xFF	; 255
    4736:	88 81       	ld	r24, Y
    4738:	99 81       	ldd	r25, Y+1	; 0x01
    473a:	c4 5f       	subi	r28, 0xF4	; 244
    473c:	d0 40       	sbci	r29, 0x00	; 0
    473e:	01 96       	adiw	r24, 0x01	; 1
    4740:	cc 50       	subi	r28, 0x0C	; 12
    4742:	df 4f       	sbci	r29, 0xFF	; 255
    4744:	99 83       	std	Y+1, r25	; 0x01
    4746:	88 83       	st	Y, r24
    4748:	c4 5f       	subi	r28, 0xF4	; 244
    474a:	d0 40       	sbci	r29, 0x00	; 0
    474c:	ce 50       	subi	r28, 0x0E	; 14
    474e:	df 4f       	sbci	r29, 0xFF	; 255
    4750:	e8 81       	ld	r30, Y
    4752:	f9 81       	ldd	r31, Y+1	; 0x01
    4754:	c2 5f       	subi	r28, 0xF2	; 242
    4756:	d0 40       	sbci	r29, 0x00	; 0
    4758:	00 82       	st	Z, r0
    475a:	ce 50       	subi	r28, 0x0E	; 14
    475c:	df 4f       	sbci	r29, 0xFF	; 255
    475e:	88 81       	ld	r24, Y
    4760:	99 81       	ldd	r25, Y+1	; 0x01
    4762:	c2 5f       	subi	r28, 0xF2	; 242
    4764:	d0 40       	sbci	r29, 0x00	; 0
    4766:	01 96       	adiw	r24, 0x01	; 1
    4768:	ce 50       	subi	r28, 0x0E	; 14
    476a:	df 4f       	sbci	r29, 0xFF	; 255
    476c:	99 83       	std	Y+1, r25	; 0x01
    476e:	88 83       	st	Y, r24
    4770:	c2 5f       	subi	r28, 0xF2	; 242
    4772:	d0 40       	sbci	r29, 0x00	; 0
    4774:	ca 50       	subi	r28, 0x0A	; 10
    4776:	df 4f       	sbci	r29, 0xFF	; 255
    4778:	98 81       	ld	r25, Y
    477a:	c6 5f       	subi	r28, 0xF6	; 246
    477c:	d0 40       	sbci	r29, 0x00	; 0
    477e:	91 50       	subi	r25, 0x01	; 1
    4780:	ca 50       	subi	r28, 0x0A	; 10
    4782:	df 4f       	sbci	r29, 0xFF	; 255
    4784:	98 83       	st	Y, r25
    4786:	c6 5f       	subi	r28, 0xF6	; 246
    4788:	d0 40       	sbci	r29, 0x00	; 0
    478a:	ca 50       	subi	r28, 0x0A	; 10
    478c:	df 4f       	sbci	r29, 0xFF	; 255
    478e:	e8 81       	ld	r30, Y
    4790:	c6 5f       	subi	r28, 0xF6	; 246
    4792:	d0 40       	sbci	r29, 0x00	; 0
    4794:	ee 23       	and	r30, r30
    4796:	31 f6       	brne	.-116    	; 0x4724 <HKPD_GetPressedButton+0x50>


		MDIO_Set_PIN_VALUE(MDIO_PORTC,PIN3,PIN_LOW);
    4798:	82 e0       	ldi	r24, 0x02	; 2
    479a:	63 e0       	ldi	r22, 0x03	; 3
    479c:	40 e0       	ldi	r20, 0x00	; 0
    479e:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>

		if(MDIO_Return_PINValue(MDIO_PORTA,PIN5) == 0) { _delay_ms(30);if(MDIO_Return_PINValue(MDIO_PORTA,PIN5) == 0) {while(MDIO_Return_PINValue(MDIO_PORTA,PIN5) == 0); MDIO_Set_PIN_VALUE(MDIO_PORTC,PIN3,PIN_HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [0][0];}}
    47a2:	80 e0       	ldi	r24, 0x00	; 0
    47a4:	65 e0       	ldi	r22, 0x05	; 5
    47a6:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    47aa:	88 23       	and	r24, r24
    47ac:	09 f0       	breq	.+2      	; 0x47b0 <HKPD_GetPressedButton+0xdc>
    47ae:	cc c0       	rjmp	.+408    	; 0x4948 <HKPD_GetPressedButton+0x274>
    47b0:	fe 01       	movw	r30, r28
    47b2:	e3 52       	subi	r30, 0x23	; 35
    47b4:	ff 4f       	sbci	r31, 0xFF	; 255
    47b6:	80 e0       	ldi	r24, 0x00	; 0
    47b8:	90 e0       	ldi	r25, 0x00	; 0
    47ba:	a0 ef       	ldi	r26, 0xF0	; 240
    47bc:	b1 e4       	ldi	r27, 0x41	; 65
    47be:	80 83       	st	Z, r24
    47c0:	91 83       	std	Z+1, r25	; 0x01
    47c2:	a2 83       	std	Z+2, r26	; 0x02
    47c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47c6:	8e 01       	movw	r16, r28
    47c8:	07 52       	subi	r16, 0x27	; 39
    47ca:	1f 4f       	sbci	r17, 0xFF	; 255
    47cc:	fe 01       	movw	r30, r28
    47ce:	e3 52       	subi	r30, 0x23	; 35
    47d0:	ff 4f       	sbci	r31, 0xFF	; 255
    47d2:	60 81       	ld	r22, Z
    47d4:	71 81       	ldd	r23, Z+1	; 0x01
    47d6:	82 81       	ldd	r24, Z+2	; 0x02
    47d8:	93 81       	ldd	r25, Z+3	; 0x03
    47da:	20 e0       	ldi	r18, 0x00	; 0
    47dc:	30 e0       	ldi	r19, 0x00	; 0
    47de:	4a e7       	ldi	r20, 0x7A	; 122
    47e0:	55 e4       	ldi	r21, 0x45	; 69
    47e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47e6:	dc 01       	movw	r26, r24
    47e8:	cb 01       	movw	r24, r22
    47ea:	f8 01       	movw	r30, r16
    47ec:	80 83       	st	Z, r24
    47ee:	91 83       	std	Z+1, r25	; 0x01
    47f0:	a2 83       	std	Z+2, r26	; 0x02
    47f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    47f4:	fe 01       	movw	r30, r28
    47f6:	e7 52       	subi	r30, 0x27	; 39
    47f8:	ff 4f       	sbci	r31, 0xFF	; 255
    47fa:	60 81       	ld	r22, Z
    47fc:	71 81       	ldd	r23, Z+1	; 0x01
    47fe:	82 81       	ldd	r24, Z+2	; 0x02
    4800:	93 81       	ldd	r25, Z+3	; 0x03
    4802:	20 e0       	ldi	r18, 0x00	; 0
    4804:	30 e0       	ldi	r19, 0x00	; 0
    4806:	40 e8       	ldi	r20, 0x80	; 128
    4808:	5f e3       	ldi	r21, 0x3F	; 63
    480a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    480e:	88 23       	and	r24, r24
    4810:	44 f4       	brge	.+16     	; 0x4822 <HKPD_GetPressedButton+0x14e>
		__ticks = 1;
    4812:	fe 01       	movw	r30, r28
    4814:	e9 52       	subi	r30, 0x29	; 41
    4816:	ff 4f       	sbci	r31, 0xFF	; 255
    4818:	81 e0       	ldi	r24, 0x01	; 1
    481a:	90 e0       	ldi	r25, 0x00	; 0
    481c:	91 83       	std	Z+1, r25	; 0x01
    481e:	80 83       	st	Z, r24
    4820:	64 c0       	rjmp	.+200    	; 0x48ea <HKPD_GetPressedButton+0x216>
	else if (__tmp > 65535)
    4822:	fe 01       	movw	r30, r28
    4824:	e7 52       	subi	r30, 0x27	; 39
    4826:	ff 4f       	sbci	r31, 0xFF	; 255
    4828:	60 81       	ld	r22, Z
    482a:	71 81       	ldd	r23, Z+1	; 0x01
    482c:	82 81       	ldd	r24, Z+2	; 0x02
    482e:	93 81       	ldd	r25, Z+3	; 0x03
    4830:	20 e0       	ldi	r18, 0x00	; 0
    4832:	3f ef       	ldi	r19, 0xFF	; 255
    4834:	4f e7       	ldi	r20, 0x7F	; 127
    4836:	57 e4       	ldi	r21, 0x47	; 71
    4838:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    483c:	18 16       	cp	r1, r24
    483e:	0c f0       	brlt	.+2      	; 0x4842 <HKPD_GetPressedButton+0x16e>
    4840:	43 c0       	rjmp	.+134    	; 0x48c8 <HKPD_GetPressedButton+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4842:	fe 01       	movw	r30, r28
    4844:	e3 52       	subi	r30, 0x23	; 35
    4846:	ff 4f       	sbci	r31, 0xFF	; 255
    4848:	60 81       	ld	r22, Z
    484a:	71 81       	ldd	r23, Z+1	; 0x01
    484c:	82 81       	ldd	r24, Z+2	; 0x02
    484e:	93 81       	ldd	r25, Z+3	; 0x03
    4850:	20 e0       	ldi	r18, 0x00	; 0
    4852:	30 e0       	ldi	r19, 0x00	; 0
    4854:	40 e2       	ldi	r20, 0x20	; 32
    4856:	51 e4       	ldi	r21, 0x41	; 65
    4858:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    485c:	dc 01       	movw	r26, r24
    485e:	cb 01       	movw	r24, r22
    4860:	8e 01       	movw	r16, r28
    4862:	09 52       	subi	r16, 0x29	; 41
    4864:	1f 4f       	sbci	r17, 0xFF	; 255
    4866:	bc 01       	movw	r22, r24
    4868:	cd 01       	movw	r24, r26
    486a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    486e:	dc 01       	movw	r26, r24
    4870:	cb 01       	movw	r24, r22
    4872:	f8 01       	movw	r30, r16
    4874:	91 83       	std	Z+1, r25	; 0x01
    4876:	80 83       	st	Z, r24
    4878:	1f c0       	rjmp	.+62     	; 0x48b8 <HKPD_GetPressedButton+0x1e4>
    487a:	fe 01       	movw	r30, r28
    487c:	eb 52       	subi	r30, 0x2B	; 43
    487e:	ff 4f       	sbci	r31, 0xFF	; 255
    4880:	80 e9       	ldi	r24, 0x90	; 144
    4882:	91 e0       	ldi	r25, 0x01	; 1
    4884:	91 83       	std	Z+1, r25	; 0x01
    4886:	80 83       	st	Z, r24
    4888:	fe 01       	movw	r30, r28
    488a:	eb 52       	subi	r30, 0x2B	; 43
    488c:	ff 4f       	sbci	r31, 0xFF	; 255
    488e:	80 81       	ld	r24, Z
    4890:	91 81       	ldd	r25, Z+1	; 0x01
    4892:	01 97       	sbiw	r24, 0x01	; 1
    4894:	f1 f7       	brne	.-4      	; 0x4892 <HKPD_GetPressedButton+0x1be>
    4896:	fe 01       	movw	r30, r28
    4898:	eb 52       	subi	r30, 0x2B	; 43
    489a:	ff 4f       	sbci	r31, 0xFF	; 255
    489c:	91 83       	std	Z+1, r25	; 0x01
    489e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48a0:	de 01       	movw	r26, r28
    48a2:	a9 52       	subi	r26, 0x29	; 41
    48a4:	bf 4f       	sbci	r27, 0xFF	; 255
    48a6:	fe 01       	movw	r30, r28
    48a8:	e9 52       	subi	r30, 0x29	; 41
    48aa:	ff 4f       	sbci	r31, 0xFF	; 255
    48ac:	80 81       	ld	r24, Z
    48ae:	91 81       	ldd	r25, Z+1	; 0x01
    48b0:	01 97       	sbiw	r24, 0x01	; 1
    48b2:	11 96       	adiw	r26, 0x01	; 1
    48b4:	9c 93       	st	X, r25
    48b6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48b8:	fe 01       	movw	r30, r28
    48ba:	e9 52       	subi	r30, 0x29	; 41
    48bc:	ff 4f       	sbci	r31, 0xFF	; 255
    48be:	80 81       	ld	r24, Z
    48c0:	91 81       	ldd	r25, Z+1	; 0x01
    48c2:	00 97       	sbiw	r24, 0x00	; 0
    48c4:	d1 f6       	brne	.-76     	; 0x487a <HKPD_GetPressedButton+0x1a6>
    48c6:	27 c0       	rjmp	.+78     	; 0x4916 <HKPD_GetPressedButton+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48c8:	8e 01       	movw	r16, r28
    48ca:	09 52       	subi	r16, 0x29	; 41
    48cc:	1f 4f       	sbci	r17, 0xFF	; 255
    48ce:	fe 01       	movw	r30, r28
    48d0:	e7 52       	subi	r30, 0x27	; 39
    48d2:	ff 4f       	sbci	r31, 0xFF	; 255
    48d4:	60 81       	ld	r22, Z
    48d6:	71 81       	ldd	r23, Z+1	; 0x01
    48d8:	82 81       	ldd	r24, Z+2	; 0x02
    48da:	93 81       	ldd	r25, Z+3	; 0x03
    48dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48e0:	dc 01       	movw	r26, r24
    48e2:	cb 01       	movw	r24, r22
    48e4:	f8 01       	movw	r30, r16
    48e6:	91 83       	std	Z+1, r25	; 0x01
    48e8:	80 83       	st	Z, r24
    48ea:	de 01       	movw	r26, r28
    48ec:	ad 52       	subi	r26, 0x2D	; 45
    48ee:	bf 4f       	sbci	r27, 0xFF	; 255
    48f0:	fe 01       	movw	r30, r28
    48f2:	e9 52       	subi	r30, 0x29	; 41
    48f4:	ff 4f       	sbci	r31, 0xFF	; 255
    48f6:	80 81       	ld	r24, Z
    48f8:	91 81       	ldd	r25, Z+1	; 0x01
    48fa:	8d 93       	st	X+, r24
    48fc:	9c 93       	st	X, r25
    48fe:	fe 01       	movw	r30, r28
    4900:	ed 52       	subi	r30, 0x2D	; 45
    4902:	ff 4f       	sbci	r31, 0xFF	; 255
    4904:	80 81       	ld	r24, Z
    4906:	91 81       	ldd	r25, Z+1	; 0x01
    4908:	01 97       	sbiw	r24, 0x01	; 1
    490a:	f1 f7       	brne	.-4      	; 0x4908 <HKPD_GetPressedButton+0x234>
    490c:	fe 01       	movw	r30, r28
    490e:	ed 52       	subi	r30, 0x2D	; 45
    4910:	ff 4f       	sbci	r31, 0xFF	; 255
    4912:	91 83       	std	Z+1, r25	; 0x01
    4914:	80 83       	st	Z, r24
    4916:	80 e0       	ldi	r24, 0x00	; 0
    4918:	65 e0       	ldi	r22, 0x05	; 5
    491a:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    491e:	88 23       	and	r24, r24
    4920:	99 f4       	brne	.+38     	; 0x4948 <HKPD_GetPressedButton+0x274>
    4922:	80 e0       	ldi	r24, 0x00	; 0
    4924:	65 e0       	ldi	r22, 0x05	; 5
    4926:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    492a:	88 23       	and	r24, r24
    492c:	d1 f3       	breq	.-12     	; 0x4922 <HKPD_GetPressedButton+0x24e>
    492e:	82 e0       	ldi	r24, 0x02	; 2
    4930:	63 e0       	ldi	r22, 0x03	; 3
    4932:	41 e0       	ldi	r20, 0x01	; 1
    4934:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
    4938:	fe 01       	movw	r30, r28
    493a:	ef 51       	subi	r30, 0x1F	; 31
    493c:	ff 4f       	sbci	r31, 0xFF	; 255
    493e:	de 01       	movw	r26, r28
    4940:	ae 51       	subi	r26, 0x1E	; 30
    4942:	bf 4f       	sbci	r27, 0xFF	; 255
    4944:	8c 91       	ld	r24, X
    4946:	80 83       	st	Z, r24
		if(MDIO_Return_PINValue(MDIO_PORTA,PIN6) == 0) { _delay_ms(30);if(MDIO_Return_PINValue(MDIO_PORTA,PIN6) == 0) {while(MDIO_Return_PINValue(MDIO_PORTA,PIN6) == 0); MDIO_Set_PIN_VALUE(MDIO_PORTC,PIN3,PIN_HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [0][1];}}
    4948:	80 e0       	ldi	r24, 0x00	; 0
    494a:	66 e0       	ldi	r22, 0x06	; 6
    494c:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    4950:	88 23       	and	r24, r24
    4952:	09 f0       	breq	.+2      	; 0x4956 <HKPD_GetPressedButton+0x282>
    4954:	cd c0       	rjmp	.+410    	; 0x4af0 <HKPD_GetPressedButton+0x41c>
    4956:	fe 01       	movw	r30, r28
    4958:	e1 53       	subi	r30, 0x31	; 49
    495a:	ff 4f       	sbci	r31, 0xFF	; 255
    495c:	80 e0       	ldi	r24, 0x00	; 0
    495e:	90 e0       	ldi	r25, 0x00	; 0
    4960:	a0 ef       	ldi	r26, 0xF0	; 240
    4962:	b1 e4       	ldi	r27, 0x41	; 65
    4964:	80 83       	st	Z, r24
    4966:	91 83       	std	Z+1, r25	; 0x01
    4968:	a2 83       	std	Z+2, r26	; 0x02
    496a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    496c:	8e 01       	movw	r16, r28
    496e:	05 53       	subi	r16, 0x35	; 53
    4970:	1f 4f       	sbci	r17, 0xFF	; 255
    4972:	fe 01       	movw	r30, r28
    4974:	e1 53       	subi	r30, 0x31	; 49
    4976:	ff 4f       	sbci	r31, 0xFF	; 255
    4978:	60 81       	ld	r22, Z
    497a:	71 81       	ldd	r23, Z+1	; 0x01
    497c:	82 81       	ldd	r24, Z+2	; 0x02
    497e:	93 81       	ldd	r25, Z+3	; 0x03
    4980:	20 e0       	ldi	r18, 0x00	; 0
    4982:	30 e0       	ldi	r19, 0x00	; 0
    4984:	4a e7       	ldi	r20, 0x7A	; 122
    4986:	55 e4       	ldi	r21, 0x45	; 69
    4988:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    498c:	dc 01       	movw	r26, r24
    498e:	cb 01       	movw	r24, r22
    4990:	f8 01       	movw	r30, r16
    4992:	80 83       	st	Z, r24
    4994:	91 83       	std	Z+1, r25	; 0x01
    4996:	a2 83       	std	Z+2, r26	; 0x02
    4998:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    499a:	fe 01       	movw	r30, r28
    499c:	e5 53       	subi	r30, 0x35	; 53
    499e:	ff 4f       	sbci	r31, 0xFF	; 255
    49a0:	60 81       	ld	r22, Z
    49a2:	71 81       	ldd	r23, Z+1	; 0x01
    49a4:	82 81       	ldd	r24, Z+2	; 0x02
    49a6:	93 81       	ldd	r25, Z+3	; 0x03
    49a8:	20 e0       	ldi	r18, 0x00	; 0
    49aa:	30 e0       	ldi	r19, 0x00	; 0
    49ac:	40 e8       	ldi	r20, 0x80	; 128
    49ae:	5f e3       	ldi	r21, 0x3F	; 63
    49b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    49b4:	88 23       	and	r24, r24
    49b6:	44 f4       	brge	.+16     	; 0x49c8 <HKPD_GetPressedButton+0x2f4>
		__ticks = 1;
    49b8:	fe 01       	movw	r30, r28
    49ba:	e7 53       	subi	r30, 0x37	; 55
    49bc:	ff 4f       	sbci	r31, 0xFF	; 255
    49be:	81 e0       	ldi	r24, 0x01	; 1
    49c0:	90 e0       	ldi	r25, 0x00	; 0
    49c2:	91 83       	std	Z+1, r25	; 0x01
    49c4:	80 83       	st	Z, r24
    49c6:	64 c0       	rjmp	.+200    	; 0x4a90 <HKPD_GetPressedButton+0x3bc>
	else if (__tmp > 65535)
    49c8:	fe 01       	movw	r30, r28
    49ca:	e5 53       	subi	r30, 0x35	; 53
    49cc:	ff 4f       	sbci	r31, 0xFF	; 255
    49ce:	60 81       	ld	r22, Z
    49d0:	71 81       	ldd	r23, Z+1	; 0x01
    49d2:	82 81       	ldd	r24, Z+2	; 0x02
    49d4:	93 81       	ldd	r25, Z+3	; 0x03
    49d6:	20 e0       	ldi	r18, 0x00	; 0
    49d8:	3f ef       	ldi	r19, 0xFF	; 255
    49da:	4f e7       	ldi	r20, 0x7F	; 127
    49dc:	57 e4       	ldi	r21, 0x47	; 71
    49de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    49e2:	18 16       	cp	r1, r24
    49e4:	0c f0       	brlt	.+2      	; 0x49e8 <HKPD_GetPressedButton+0x314>
    49e6:	43 c0       	rjmp	.+134    	; 0x4a6e <HKPD_GetPressedButton+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49e8:	fe 01       	movw	r30, r28
    49ea:	e1 53       	subi	r30, 0x31	; 49
    49ec:	ff 4f       	sbci	r31, 0xFF	; 255
    49ee:	60 81       	ld	r22, Z
    49f0:	71 81       	ldd	r23, Z+1	; 0x01
    49f2:	82 81       	ldd	r24, Z+2	; 0x02
    49f4:	93 81       	ldd	r25, Z+3	; 0x03
    49f6:	20 e0       	ldi	r18, 0x00	; 0
    49f8:	30 e0       	ldi	r19, 0x00	; 0
    49fa:	40 e2       	ldi	r20, 0x20	; 32
    49fc:	51 e4       	ldi	r21, 0x41	; 65
    49fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a02:	dc 01       	movw	r26, r24
    4a04:	cb 01       	movw	r24, r22
    4a06:	8e 01       	movw	r16, r28
    4a08:	07 53       	subi	r16, 0x37	; 55
    4a0a:	1f 4f       	sbci	r17, 0xFF	; 255
    4a0c:	bc 01       	movw	r22, r24
    4a0e:	cd 01       	movw	r24, r26
    4a10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a14:	dc 01       	movw	r26, r24
    4a16:	cb 01       	movw	r24, r22
    4a18:	f8 01       	movw	r30, r16
    4a1a:	91 83       	std	Z+1, r25	; 0x01
    4a1c:	80 83       	st	Z, r24
    4a1e:	1f c0       	rjmp	.+62     	; 0x4a5e <HKPD_GetPressedButton+0x38a>
    4a20:	fe 01       	movw	r30, r28
    4a22:	e9 53       	subi	r30, 0x39	; 57
    4a24:	ff 4f       	sbci	r31, 0xFF	; 255
    4a26:	80 e9       	ldi	r24, 0x90	; 144
    4a28:	91 e0       	ldi	r25, 0x01	; 1
    4a2a:	91 83       	std	Z+1, r25	; 0x01
    4a2c:	80 83       	st	Z, r24
    4a2e:	fe 01       	movw	r30, r28
    4a30:	e9 53       	subi	r30, 0x39	; 57
    4a32:	ff 4f       	sbci	r31, 0xFF	; 255
    4a34:	80 81       	ld	r24, Z
    4a36:	91 81       	ldd	r25, Z+1	; 0x01
    4a38:	01 97       	sbiw	r24, 0x01	; 1
    4a3a:	f1 f7       	brne	.-4      	; 0x4a38 <HKPD_GetPressedButton+0x364>
    4a3c:	fe 01       	movw	r30, r28
    4a3e:	e9 53       	subi	r30, 0x39	; 57
    4a40:	ff 4f       	sbci	r31, 0xFF	; 255
    4a42:	91 83       	std	Z+1, r25	; 0x01
    4a44:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a46:	de 01       	movw	r26, r28
    4a48:	a7 53       	subi	r26, 0x37	; 55
    4a4a:	bf 4f       	sbci	r27, 0xFF	; 255
    4a4c:	fe 01       	movw	r30, r28
    4a4e:	e7 53       	subi	r30, 0x37	; 55
    4a50:	ff 4f       	sbci	r31, 0xFF	; 255
    4a52:	80 81       	ld	r24, Z
    4a54:	91 81       	ldd	r25, Z+1	; 0x01
    4a56:	01 97       	sbiw	r24, 0x01	; 1
    4a58:	11 96       	adiw	r26, 0x01	; 1
    4a5a:	9c 93       	st	X, r25
    4a5c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a5e:	fe 01       	movw	r30, r28
    4a60:	e7 53       	subi	r30, 0x37	; 55
    4a62:	ff 4f       	sbci	r31, 0xFF	; 255
    4a64:	80 81       	ld	r24, Z
    4a66:	91 81       	ldd	r25, Z+1	; 0x01
    4a68:	00 97       	sbiw	r24, 0x00	; 0
    4a6a:	d1 f6       	brne	.-76     	; 0x4a20 <HKPD_GetPressedButton+0x34c>
    4a6c:	27 c0       	rjmp	.+78     	; 0x4abc <HKPD_GetPressedButton+0x3e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a6e:	8e 01       	movw	r16, r28
    4a70:	07 53       	subi	r16, 0x37	; 55
    4a72:	1f 4f       	sbci	r17, 0xFF	; 255
    4a74:	fe 01       	movw	r30, r28
    4a76:	e5 53       	subi	r30, 0x35	; 53
    4a78:	ff 4f       	sbci	r31, 0xFF	; 255
    4a7a:	60 81       	ld	r22, Z
    4a7c:	71 81       	ldd	r23, Z+1	; 0x01
    4a7e:	82 81       	ldd	r24, Z+2	; 0x02
    4a80:	93 81       	ldd	r25, Z+3	; 0x03
    4a82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a86:	dc 01       	movw	r26, r24
    4a88:	cb 01       	movw	r24, r22
    4a8a:	f8 01       	movw	r30, r16
    4a8c:	91 83       	std	Z+1, r25	; 0x01
    4a8e:	80 83       	st	Z, r24
    4a90:	de 01       	movw	r26, r28
    4a92:	ab 53       	subi	r26, 0x3B	; 59
    4a94:	bf 4f       	sbci	r27, 0xFF	; 255
    4a96:	fe 01       	movw	r30, r28
    4a98:	e7 53       	subi	r30, 0x37	; 55
    4a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a9c:	80 81       	ld	r24, Z
    4a9e:	91 81       	ldd	r25, Z+1	; 0x01
    4aa0:	8d 93       	st	X+, r24
    4aa2:	9c 93       	st	X, r25
    4aa4:	fe 01       	movw	r30, r28
    4aa6:	eb 53       	subi	r30, 0x3B	; 59
    4aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    4aaa:	80 81       	ld	r24, Z
    4aac:	91 81       	ldd	r25, Z+1	; 0x01
    4aae:	01 97       	sbiw	r24, 0x01	; 1
    4ab0:	f1 f7       	brne	.-4      	; 0x4aae <HKPD_GetPressedButton+0x3da>
    4ab2:	fe 01       	movw	r30, r28
    4ab4:	eb 53       	subi	r30, 0x3B	; 59
    4ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ab8:	91 83       	std	Z+1, r25	; 0x01
    4aba:	80 83       	st	Z, r24
    4abc:	80 e0       	ldi	r24, 0x00	; 0
    4abe:	66 e0       	ldi	r22, 0x06	; 6
    4ac0:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    4ac4:	88 23       	and	r24, r24
    4ac6:	a1 f4       	brne	.+40     	; 0x4af0 <HKPD_GetPressedButton+0x41c>
    4ac8:	80 e0       	ldi	r24, 0x00	; 0
    4aca:	66 e0       	ldi	r22, 0x06	; 6
    4acc:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    4ad0:	88 23       	and	r24, r24
    4ad2:	d1 f3       	breq	.-12     	; 0x4ac8 <HKPD_GetPressedButton+0x3f4>
    4ad4:	82 e0       	ldi	r24, 0x02	; 2
    4ad6:	63 e0       	ldi	r22, 0x03	; 3
    4ad8:	41 e0       	ldi	r20, 0x01	; 1
    4ada:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
    4ade:	fe 01       	movw	r30, r28
    4ae0:	ef 51       	subi	r30, 0x1F	; 31
    4ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ae4:	de 01       	movw	r26, r28
    4ae6:	ae 51       	subi	r26, 0x1E	; 30
    4ae8:	bf 4f       	sbci	r27, 0xFF	; 255
    4aea:	11 96       	adiw	r26, 0x01	; 1
    4aec:	8c 91       	ld	r24, X
    4aee:	80 83       	st	Z, r24
		if(MDIO_Return_PINValue(MDIO_PORTA,PIN7) == 0) { _delay_ms(30);if(MDIO_Return_PINValue(MDIO_PORTA,PIN7) == 0) {while(MDIO_Return_PINValue(MDIO_PORTA,PIN7) == 0); MDIO_Set_PIN_VALUE(MDIO_PORTC,PIN3,PIN_HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [0][2];}}
    4af0:	80 e0       	ldi	r24, 0x00	; 0
    4af2:	67 e0       	ldi	r22, 0x07	; 7
    4af4:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    4af8:	88 23       	and	r24, r24
    4afa:	09 f0       	breq	.+2      	; 0x4afe <HKPD_GetPressedButton+0x42a>
    4afc:	cd c0       	rjmp	.+410    	; 0x4c98 <HKPD_GetPressedButton+0x5c4>
    4afe:	fe 01       	movw	r30, r28
    4b00:	ef 53       	subi	r30, 0x3F	; 63
    4b02:	ff 4f       	sbci	r31, 0xFF	; 255
    4b04:	80 e0       	ldi	r24, 0x00	; 0
    4b06:	90 e0       	ldi	r25, 0x00	; 0
    4b08:	a0 ef       	ldi	r26, 0xF0	; 240
    4b0a:	b1 e4       	ldi	r27, 0x41	; 65
    4b0c:	80 83       	st	Z, r24
    4b0e:	91 83       	std	Z+1, r25	; 0x01
    4b10:	a2 83       	std	Z+2, r26	; 0x02
    4b12:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b14:	8e 01       	movw	r16, r28
    4b16:	03 54       	subi	r16, 0x43	; 67
    4b18:	1f 4f       	sbci	r17, 0xFF	; 255
    4b1a:	fe 01       	movw	r30, r28
    4b1c:	ef 53       	subi	r30, 0x3F	; 63
    4b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b20:	60 81       	ld	r22, Z
    4b22:	71 81       	ldd	r23, Z+1	; 0x01
    4b24:	82 81       	ldd	r24, Z+2	; 0x02
    4b26:	93 81       	ldd	r25, Z+3	; 0x03
    4b28:	20 e0       	ldi	r18, 0x00	; 0
    4b2a:	30 e0       	ldi	r19, 0x00	; 0
    4b2c:	4a e7       	ldi	r20, 0x7A	; 122
    4b2e:	55 e4       	ldi	r21, 0x45	; 69
    4b30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b34:	dc 01       	movw	r26, r24
    4b36:	cb 01       	movw	r24, r22
    4b38:	f8 01       	movw	r30, r16
    4b3a:	80 83       	st	Z, r24
    4b3c:	91 83       	std	Z+1, r25	; 0x01
    4b3e:	a2 83       	std	Z+2, r26	; 0x02
    4b40:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4b42:	fe 01       	movw	r30, r28
    4b44:	e3 54       	subi	r30, 0x43	; 67
    4b46:	ff 4f       	sbci	r31, 0xFF	; 255
    4b48:	60 81       	ld	r22, Z
    4b4a:	71 81       	ldd	r23, Z+1	; 0x01
    4b4c:	82 81       	ldd	r24, Z+2	; 0x02
    4b4e:	93 81       	ldd	r25, Z+3	; 0x03
    4b50:	20 e0       	ldi	r18, 0x00	; 0
    4b52:	30 e0       	ldi	r19, 0x00	; 0
    4b54:	40 e8       	ldi	r20, 0x80	; 128
    4b56:	5f e3       	ldi	r21, 0x3F	; 63
    4b58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b5c:	88 23       	and	r24, r24
    4b5e:	44 f4       	brge	.+16     	; 0x4b70 <HKPD_GetPressedButton+0x49c>
		__ticks = 1;
    4b60:	fe 01       	movw	r30, r28
    4b62:	e5 54       	subi	r30, 0x45	; 69
    4b64:	ff 4f       	sbci	r31, 0xFF	; 255
    4b66:	81 e0       	ldi	r24, 0x01	; 1
    4b68:	90 e0       	ldi	r25, 0x00	; 0
    4b6a:	91 83       	std	Z+1, r25	; 0x01
    4b6c:	80 83       	st	Z, r24
    4b6e:	64 c0       	rjmp	.+200    	; 0x4c38 <HKPD_GetPressedButton+0x564>
	else if (__tmp > 65535)
    4b70:	fe 01       	movw	r30, r28
    4b72:	e3 54       	subi	r30, 0x43	; 67
    4b74:	ff 4f       	sbci	r31, 0xFF	; 255
    4b76:	60 81       	ld	r22, Z
    4b78:	71 81       	ldd	r23, Z+1	; 0x01
    4b7a:	82 81       	ldd	r24, Z+2	; 0x02
    4b7c:	93 81       	ldd	r25, Z+3	; 0x03
    4b7e:	20 e0       	ldi	r18, 0x00	; 0
    4b80:	3f ef       	ldi	r19, 0xFF	; 255
    4b82:	4f e7       	ldi	r20, 0x7F	; 127
    4b84:	57 e4       	ldi	r21, 0x47	; 71
    4b86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b8a:	18 16       	cp	r1, r24
    4b8c:	0c f0       	brlt	.+2      	; 0x4b90 <HKPD_GetPressedButton+0x4bc>
    4b8e:	43 c0       	rjmp	.+134    	; 0x4c16 <HKPD_GetPressedButton+0x542>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b90:	fe 01       	movw	r30, r28
    4b92:	ef 53       	subi	r30, 0x3F	; 63
    4b94:	ff 4f       	sbci	r31, 0xFF	; 255
    4b96:	60 81       	ld	r22, Z
    4b98:	71 81       	ldd	r23, Z+1	; 0x01
    4b9a:	82 81       	ldd	r24, Z+2	; 0x02
    4b9c:	93 81       	ldd	r25, Z+3	; 0x03
    4b9e:	20 e0       	ldi	r18, 0x00	; 0
    4ba0:	30 e0       	ldi	r19, 0x00	; 0
    4ba2:	40 e2       	ldi	r20, 0x20	; 32
    4ba4:	51 e4       	ldi	r21, 0x41	; 65
    4ba6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4baa:	dc 01       	movw	r26, r24
    4bac:	cb 01       	movw	r24, r22
    4bae:	8e 01       	movw	r16, r28
    4bb0:	05 54       	subi	r16, 0x45	; 69
    4bb2:	1f 4f       	sbci	r17, 0xFF	; 255
    4bb4:	bc 01       	movw	r22, r24
    4bb6:	cd 01       	movw	r24, r26
    4bb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bbc:	dc 01       	movw	r26, r24
    4bbe:	cb 01       	movw	r24, r22
    4bc0:	f8 01       	movw	r30, r16
    4bc2:	91 83       	std	Z+1, r25	; 0x01
    4bc4:	80 83       	st	Z, r24
    4bc6:	1f c0       	rjmp	.+62     	; 0x4c06 <HKPD_GetPressedButton+0x532>
    4bc8:	fe 01       	movw	r30, r28
    4bca:	e7 54       	subi	r30, 0x47	; 71
    4bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    4bce:	80 e9       	ldi	r24, 0x90	; 144
    4bd0:	91 e0       	ldi	r25, 0x01	; 1
    4bd2:	91 83       	std	Z+1, r25	; 0x01
    4bd4:	80 83       	st	Z, r24
    4bd6:	fe 01       	movw	r30, r28
    4bd8:	e7 54       	subi	r30, 0x47	; 71
    4bda:	ff 4f       	sbci	r31, 0xFF	; 255
    4bdc:	80 81       	ld	r24, Z
    4bde:	91 81       	ldd	r25, Z+1	; 0x01
    4be0:	01 97       	sbiw	r24, 0x01	; 1
    4be2:	f1 f7       	brne	.-4      	; 0x4be0 <HKPD_GetPressedButton+0x50c>
    4be4:	fe 01       	movw	r30, r28
    4be6:	e7 54       	subi	r30, 0x47	; 71
    4be8:	ff 4f       	sbci	r31, 0xFF	; 255
    4bea:	91 83       	std	Z+1, r25	; 0x01
    4bec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bee:	de 01       	movw	r26, r28
    4bf0:	a5 54       	subi	r26, 0x45	; 69
    4bf2:	bf 4f       	sbci	r27, 0xFF	; 255
    4bf4:	fe 01       	movw	r30, r28
    4bf6:	e5 54       	subi	r30, 0x45	; 69
    4bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    4bfa:	80 81       	ld	r24, Z
    4bfc:	91 81       	ldd	r25, Z+1	; 0x01
    4bfe:	01 97       	sbiw	r24, 0x01	; 1
    4c00:	11 96       	adiw	r26, 0x01	; 1
    4c02:	9c 93       	st	X, r25
    4c04:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c06:	fe 01       	movw	r30, r28
    4c08:	e5 54       	subi	r30, 0x45	; 69
    4c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c0c:	80 81       	ld	r24, Z
    4c0e:	91 81       	ldd	r25, Z+1	; 0x01
    4c10:	00 97       	sbiw	r24, 0x00	; 0
    4c12:	d1 f6       	brne	.-76     	; 0x4bc8 <HKPD_GetPressedButton+0x4f4>
    4c14:	27 c0       	rjmp	.+78     	; 0x4c64 <HKPD_GetPressedButton+0x590>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c16:	8e 01       	movw	r16, r28
    4c18:	05 54       	subi	r16, 0x45	; 69
    4c1a:	1f 4f       	sbci	r17, 0xFF	; 255
    4c1c:	fe 01       	movw	r30, r28
    4c1e:	e3 54       	subi	r30, 0x43	; 67
    4c20:	ff 4f       	sbci	r31, 0xFF	; 255
    4c22:	60 81       	ld	r22, Z
    4c24:	71 81       	ldd	r23, Z+1	; 0x01
    4c26:	82 81       	ldd	r24, Z+2	; 0x02
    4c28:	93 81       	ldd	r25, Z+3	; 0x03
    4c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c2e:	dc 01       	movw	r26, r24
    4c30:	cb 01       	movw	r24, r22
    4c32:	f8 01       	movw	r30, r16
    4c34:	91 83       	std	Z+1, r25	; 0x01
    4c36:	80 83       	st	Z, r24
    4c38:	de 01       	movw	r26, r28
    4c3a:	a9 54       	subi	r26, 0x49	; 73
    4c3c:	bf 4f       	sbci	r27, 0xFF	; 255
    4c3e:	fe 01       	movw	r30, r28
    4c40:	e5 54       	subi	r30, 0x45	; 69
    4c42:	ff 4f       	sbci	r31, 0xFF	; 255
    4c44:	80 81       	ld	r24, Z
    4c46:	91 81       	ldd	r25, Z+1	; 0x01
    4c48:	8d 93       	st	X+, r24
    4c4a:	9c 93       	st	X, r25
    4c4c:	fe 01       	movw	r30, r28
    4c4e:	e9 54       	subi	r30, 0x49	; 73
    4c50:	ff 4f       	sbci	r31, 0xFF	; 255
    4c52:	80 81       	ld	r24, Z
    4c54:	91 81       	ldd	r25, Z+1	; 0x01
    4c56:	01 97       	sbiw	r24, 0x01	; 1
    4c58:	f1 f7       	brne	.-4      	; 0x4c56 <HKPD_GetPressedButton+0x582>
    4c5a:	fe 01       	movw	r30, r28
    4c5c:	e9 54       	subi	r30, 0x49	; 73
    4c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c60:	91 83       	std	Z+1, r25	; 0x01
    4c62:	80 83       	st	Z, r24
    4c64:	80 e0       	ldi	r24, 0x00	; 0
    4c66:	67 e0       	ldi	r22, 0x07	; 7
    4c68:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    4c6c:	88 23       	and	r24, r24
    4c6e:	a1 f4       	brne	.+40     	; 0x4c98 <HKPD_GetPressedButton+0x5c4>
    4c70:	80 e0       	ldi	r24, 0x00	; 0
    4c72:	67 e0       	ldi	r22, 0x07	; 7
    4c74:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    4c78:	88 23       	and	r24, r24
    4c7a:	d1 f3       	breq	.-12     	; 0x4c70 <HKPD_GetPressedButton+0x59c>
    4c7c:	82 e0       	ldi	r24, 0x02	; 2
    4c7e:	63 e0       	ldi	r22, 0x03	; 3
    4c80:	41 e0       	ldi	r20, 0x01	; 1
    4c82:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
    4c86:	fe 01       	movw	r30, r28
    4c88:	ef 51       	subi	r30, 0x1F	; 31
    4c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c8c:	de 01       	movw	r26, r28
    4c8e:	ae 51       	subi	r26, 0x1E	; 30
    4c90:	bf 4f       	sbci	r27, 0xFF	; 255
    4c92:	12 96       	adiw	r26, 0x02	; 2
    4c94:	8c 91       	ld	r24, X
    4c96:	80 83       	st	Z, r24
		if(MDIO_Return_PINValue(MDIO_PORTB,PIN3) == 0) { _delay_ms(30);if(MDIO_Return_PINValue(MDIO_PORTB,PIN3) == 0) {while(MDIO_Return_PINValue(MDIO_PORTB,PIN3) == 0); MDIO_Set_PIN_VALUE(MDIO_PORTC,PIN3,PIN_HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [0][3];}}
    4c98:	81 e0       	ldi	r24, 0x01	; 1
    4c9a:	63 e0       	ldi	r22, 0x03	; 3
    4c9c:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    4ca0:	88 23       	and	r24, r24
    4ca2:	09 f0       	breq	.+2      	; 0x4ca6 <HKPD_GetPressedButton+0x5d2>
    4ca4:	cd c0       	rjmp	.+410    	; 0x4e40 <HKPD_GetPressedButton+0x76c>
    4ca6:	fe 01       	movw	r30, r28
    4ca8:	ed 54       	subi	r30, 0x4D	; 77
    4caa:	ff 4f       	sbci	r31, 0xFF	; 255
    4cac:	80 e0       	ldi	r24, 0x00	; 0
    4cae:	90 e0       	ldi	r25, 0x00	; 0
    4cb0:	a0 ef       	ldi	r26, 0xF0	; 240
    4cb2:	b1 e4       	ldi	r27, 0x41	; 65
    4cb4:	80 83       	st	Z, r24
    4cb6:	91 83       	std	Z+1, r25	; 0x01
    4cb8:	a2 83       	std	Z+2, r26	; 0x02
    4cba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cbc:	8e 01       	movw	r16, r28
    4cbe:	01 55       	subi	r16, 0x51	; 81
    4cc0:	1f 4f       	sbci	r17, 0xFF	; 255
    4cc2:	fe 01       	movw	r30, r28
    4cc4:	ed 54       	subi	r30, 0x4D	; 77
    4cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    4cc8:	60 81       	ld	r22, Z
    4cca:	71 81       	ldd	r23, Z+1	; 0x01
    4ccc:	82 81       	ldd	r24, Z+2	; 0x02
    4cce:	93 81       	ldd	r25, Z+3	; 0x03
    4cd0:	20 e0       	ldi	r18, 0x00	; 0
    4cd2:	30 e0       	ldi	r19, 0x00	; 0
    4cd4:	4a e7       	ldi	r20, 0x7A	; 122
    4cd6:	55 e4       	ldi	r21, 0x45	; 69
    4cd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cdc:	dc 01       	movw	r26, r24
    4cde:	cb 01       	movw	r24, r22
    4ce0:	f8 01       	movw	r30, r16
    4ce2:	80 83       	st	Z, r24
    4ce4:	91 83       	std	Z+1, r25	; 0x01
    4ce6:	a2 83       	std	Z+2, r26	; 0x02
    4ce8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4cea:	fe 01       	movw	r30, r28
    4cec:	e1 55       	subi	r30, 0x51	; 81
    4cee:	ff 4f       	sbci	r31, 0xFF	; 255
    4cf0:	60 81       	ld	r22, Z
    4cf2:	71 81       	ldd	r23, Z+1	; 0x01
    4cf4:	82 81       	ldd	r24, Z+2	; 0x02
    4cf6:	93 81       	ldd	r25, Z+3	; 0x03
    4cf8:	20 e0       	ldi	r18, 0x00	; 0
    4cfa:	30 e0       	ldi	r19, 0x00	; 0
    4cfc:	40 e8       	ldi	r20, 0x80	; 128
    4cfe:	5f e3       	ldi	r21, 0x3F	; 63
    4d00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d04:	88 23       	and	r24, r24
    4d06:	44 f4       	brge	.+16     	; 0x4d18 <HKPD_GetPressedButton+0x644>
		__ticks = 1;
    4d08:	fe 01       	movw	r30, r28
    4d0a:	e3 55       	subi	r30, 0x53	; 83
    4d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d0e:	81 e0       	ldi	r24, 0x01	; 1
    4d10:	90 e0       	ldi	r25, 0x00	; 0
    4d12:	91 83       	std	Z+1, r25	; 0x01
    4d14:	80 83       	st	Z, r24
    4d16:	64 c0       	rjmp	.+200    	; 0x4de0 <HKPD_GetPressedButton+0x70c>
	else if (__tmp > 65535)
    4d18:	fe 01       	movw	r30, r28
    4d1a:	e1 55       	subi	r30, 0x51	; 81
    4d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d1e:	60 81       	ld	r22, Z
    4d20:	71 81       	ldd	r23, Z+1	; 0x01
    4d22:	82 81       	ldd	r24, Z+2	; 0x02
    4d24:	93 81       	ldd	r25, Z+3	; 0x03
    4d26:	20 e0       	ldi	r18, 0x00	; 0
    4d28:	3f ef       	ldi	r19, 0xFF	; 255
    4d2a:	4f e7       	ldi	r20, 0x7F	; 127
    4d2c:	57 e4       	ldi	r21, 0x47	; 71
    4d2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d32:	18 16       	cp	r1, r24
    4d34:	0c f0       	brlt	.+2      	; 0x4d38 <HKPD_GetPressedButton+0x664>
    4d36:	43 c0       	rjmp	.+134    	; 0x4dbe <HKPD_GetPressedButton+0x6ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d38:	fe 01       	movw	r30, r28
    4d3a:	ed 54       	subi	r30, 0x4D	; 77
    4d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d3e:	60 81       	ld	r22, Z
    4d40:	71 81       	ldd	r23, Z+1	; 0x01
    4d42:	82 81       	ldd	r24, Z+2	; 0x02
    4d44:	93 81       	ldd	r25, Z+3	; 0x03
    4d46:	20 e0       	ldi	r18, 0x00	; 0
    4d48:	30 e0       	ldi	r19, 0x00	; 0
    4d4a:	40 e2       	ldi	r20, 0x20	; 32
    4d4c:	51 e4       	ldi	r21, 0x41	; 65
    4d4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d52:	dc 01       	movw	r26, r24
    4d54:	cb 01       	movw	r24, r22
    4d56:	8e 01       	movw	r16, r28
    4d58:	03 55       	subi	r16, 0x53	; 83
    4d5a:	1f 4f       	sbci	r17, 0xFF	; 255
    4d5c:	bc 01       	movw	r22, r24
    4d5e:	cd 01       	movw	r24, r26
    4d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d64:	dc 01       	movw	r26, r24
    4d66:	cb 01       	movw	r24, r22
    4d68:	f8 01       	movw	r30, r16
    4d6a:	91 83       	std	Z+1, r25	; 0x01
    4d6c:	80 83       	st	Z, r24
    4d6e:	1f c0       	rjmp	.+62     	; 0x4dae <HKPD_GetPressedButton+0x6da>
    4d70:	fe 01       	movw	r30, r28
    4d72:	e5 55       	subi	r30, 0x55	; 85
    4d74:	ff 4f       	sbci	r31, 0xFF	; 255
    4d76:	80 e9       	ldi	r24, 0x90	; 144
    4d78:	91 e0       	ldi	r25, 0x01	; 1
    4d7a:	91 83       	std	Z+1, r25	; 0x01
    4d7c:	80 83       	st	Z, r24
    4d7e:	fe 01       	movw	r30, r28
    4d80:	e5 55       	subi	r30, 0x55	; 85
    4d82:	ff 4f       	sbci	r31, 0xFF	; 255
    4d84:	80 81       	ld	r24, Z
    4d86:	91 81       	ldd	r25, Z+1	; 0x01
    4d88:	01 97       	sbiw	r24, 0x01	; 1
    4d8a:	f1 f7       	brne	.-4      	; 0x4d88 <HKPD_GetPressedButton+0x6b4>
    4d8c:	fe 01       	movw	r30, r28
    4d8e:	e5 55       	subi	r30, 0x55	; 85
    4d90:	ff 4f       	sbci	r31, 0xFF	; 255
    4d92:	91 83       	std	Z+1, r25	; 0x01
    4d94:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d96:	de 01       	movw	r26, r28
    4d98:	a3 55       	subi	r26, 0x53	; 83
    4d9a:	bf 4f       	sbci	r27, 0xFF	; 255
    4d9c:	fe 01       	movw	r30, r28
    4d9e:	e3 55       	subi	r30, 0x53	; 83
    4da0:	ff 4f       	sbci	r31, 0xFF	; 255
    4da2:	80 81       	ld	r24, Z
    4da4:	91 81       	ldd	r25, Z+1	; 0x01
    4da6:	01 97       	sbiw	r24, 0x01	; 1
    4da8:	11 96       	adiw	r26, 0x01	; 1
    4daa:	9c 93       	st	X, r25
    4dac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dae:	fe 01       	movw	r30, r28
    4db0:	e3 55       	subi	r30, 0x53	; 83
    4db2:	ff 4f       	sbci	r31, 0xFF	; 255
    4db4:	80 81       	ld	r24, Z
    4db6:	91 81       	ldd	r25, Z+1	; 0x01
    4db8:	00 97       	sbiw	r24, 0x00	; 0
    4dba:	d1 f6       	brne	.-76     	; 0x4d70 <HKPD_GetPressedButton+0x69c>
    4dbc:	27 c0       	rjmp	.+78     	; 0x4e0c <HKPD_GetPressedButton+0x738>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dbe:	8e 01       	movw	r16, r28
    4dc0:	03 55       	subi	r16, 0x53	; 83
    4dc2:	1f 4f       	sbci	r17, 0xFF	; 255
    4dc4:	fe 01       	movw	r30, r28
    4dc6:	e1 55       	subi	r30, 0x51	; 81
    4dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    4dca:	60 81       	ld	r22, Z
    4dcc:	71 81       	ldd	r23, Z+1	; 0x01
    4dce:	82 81       	ldd	r24, Z+2	; 0x02
    4dd0:	93 81       	ldd	r25, Z+3	; 0x03
    4dd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dd6:	dc 01       	movw	r26, r24
    4dd8:	cb 01       	movw	r24, r22
    4dda:	f8 01       	movw	r30, r16
    4ddc:	91 83       	std	Z+1, r25	; 0x01
    4dde:	80 83       	st	Z, r24
    4de0:	de 01       	movw	r26, r28
    4de2:	a7 55       	subi	r26, 0x57	; 87
    4de4:	bf 4f       	sbci	r27, 0xFF	; 255
    4de6:	fe 01       	movw	r30, r28
    4de8:	e3 55       	subi	r30, 0x53	; 83
    4dea:	ff 4f       	sbci	r31, 0xFF	; 255
    4dec:	80 81       	ld	r24, Z
    4dee:	91 81       	ldd	r25, Z+1	; 0x01
    4df0:	8d 93       	st	X+, r24
    4df2:	9c 93       	st	X, r25
    4df4:	fe 01       	movw	r30, r28
    4df6:	e7 55       	subi	r30, 0x57	; 87
    4df8:	ff 4f       	sbci	r31, 0xFF	; 255
    4dfa:	80 81       	ld	r24, Z
    4dfc:	91 81       	ldd	r25, Z+1	; 0x01
    4dfe:	01 97       	sbiw	r24, 0x01	; 1
    4e00:	f1 f7       	brne	.-4      	; 0x4dfe <HKPD_GetPressedButton+0x72a>
    4e02:	fe 01       	movw	r30, r28
    4e04:	e7 55       	subi	r30, 0x57	; 87
    4e06:	ff 4f       	sbci	r31, 0xFF	; 255
    4e08:	91 83       	std	Z+1, r25	; 0x01
    4e0a:	80 83       	st	Z, r24
    4e0c:	81 e0       	ldi	r24, 0x01	; 1
    4e0e:	63 e0       	ldi	r22, 0x03	; 3
    4e10:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    4e14:	88 23       	and	r24, r24
    4e16:	a1 f4       	brne	.+40     	; 0x4e40 <HKPD_GetPressedButton+0x76c>
    4e18:	81 e0       	ldi	r24, 0x01	; 1
    4e1a:	63 e0       	ldi	r22, 0x03	; 3
    4e1c:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    4e20:	88 23       	and	r24, r24
    4e22:	d1 f3       	breq	.-12     	; 0x4e18 <HKPD_GetPressedButton+0x744>
    4e24:	82 e0       	ldi	r24, 0x02	; 2
    4e26:	63 e0       	ldi	r22, 0x03	; 3
    4e28:	41 e0       	ldi	r20, 0x01	; 1
    4e2a:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
    4e2e:	fe 01       	movw	r30, r28
    4e30:	ef 51       	subi	r30, 0x1F	; 31
    4e32:	ff 4f       	sbci	r31, 0xFF	; 255
    4e34:	de 01       	movw	r26, r28
    4e36:	ae 51       	subi	r26, 0x1E	; 30
    4e38:	bf 4f       	sbci	r27, 0xFF	; 255
    4e3a:	13 96       	adiw	r26, 0x03	; 3
    4e3c:	8c 91       	ld	r24, X
    4e3e:	80 83       	st	Z, r24

		 MDIO_Set_PIN_VALUE(MDIO_PORTC,PIN3,PIN_HIGH);
    4e40:	82 e0       	ldi	r24, 0x02	; 2
    4e42:	63 e0       	ldi	r22, 0x03	; 3
    4e44:	41 e0       	ldi	r20, 0x01	; 1
    4e46:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>

		 MDIO_Set_PIN_VALUE(MDIO_PORTC,PIN5,PIN_LOW);
    4e4a:	82 e0       	ldi	r24, 0x02	; 2
    4e4c:	65 e0       	ldi	r22, 0x05	; 5
    4e4e:	40 e0       	ldi	r20, 0x00	; 0
    4e50:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>

		if(MDIO_Return_PINValue(MDIO_PORTA,PIN5) == 0) { _delay_ms(30);if(MDIO_Return_PINValue(MDIO_PORTA,PIN5) == 0) {while(MDIO_Return_PINValue(MDIO_PORTA,PIN5) == 0); MDIO_Set_PIN_VALUE(MDIO_PORTC,PIN5,PIN_HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [1][0];}}
    4e54:	80 e0       	ldi	r24, 0x00	; 0
    4e56:	65 e0       	ldi	r22, 0x05	; 5
    4e58:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    4e5c:	88 23       	and	r24, r24
    4e5e:	09 f0       	breq	.+2      	; 0x4e62 <HKPD_GetPressedButton+0x78e>
    4e60:	cd c0       	rjmp	.+410    	; 0x4ffc <HKPD_GetPressedButton+0x928>
    4e62:	fe 01       	movw	r30, r28
    4e64:	eb 55       	subi	r30, 0x5B	; 91
    4e66:	ff 4f       	sbci	r31, 0xFF	; 255
    4e68:	80 e0       	ldi	r24, 0x00	; 0
    4e6a:	90 e0       	ldi	r25, 0x00	; 0
    4e6c:	a0 ef       	ldi	r26, 0xF0	; 240
    4e6e:	b1 e4       	ldi	r27, 0x41	; 65
    4e70:	80 83       	st	Z, r24
    4e72:	91 83       	std	Z+1, r25	; 0x01
    4e74:	a2 83       	std	Z+2, r26	; 0x02
    4e76:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e78:	8e 01       	movw	r16, r28
    4e7a:	0f 55       	subi	r16, 0x5F	; 95
    4e7c:	1f 4f       	sbci	r17, 0xFF	; 255
    4e7e:	fe 01       	movw	r30, r28
    4e80:	eb 55       	subi	r30, 0x5B	; 91
    4e82:	ff 4f       	sbci	r31, 0xFF	; 255
    4e84:	60 81       	ld	r22, Z
    4e86:	71 81       	ldd	r23, Z+1	; 0x01
    4e88:	82 81       	ldd	r24, Z+2	; 0x02
    4e8a:	93 81       	ldd	r25, Z+3	; 0x03
    4e8c:	20 e0       	ldi	r18, 0x00	; 0
    4e8e:	30 e0       	ldi	r19, 0x00	; 0
    4e90:	4a e7       	ldi	r20, 0x7A	; 122
    4e92:	55 e4       	ldi	r21, 0x45	; 69
    4e94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e98:	dc 01       	movw	r26, r24
    4e9a:	cb 01       	movw	r24, r22
    4e9c:	f8 01       	movw	r30, r16
    4e9e:	80 83       	st	Z, r24
    4ea0:	91 83       	std	Z+1, r25	; 0x01
    4ea2:	a2 83       	std	Z+2, r26	; 0x02
    4ea4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4ea6:	fe 01       	movw	r30, r28
    4ea8:	ef 55       	subi	r30, 0x5F	; 95
    4eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    4eac:	60 81       	ld	r22, Z
    4eae:	71 81       	ldd	r23, Z+1	; 0x01
    4eb0:	82 81       	ldd	r24, Z+2	; 0x02
    4eb2:	93 81       	ldd	r25, Z+3	; 0x03
    4eb4:	20 e0       	ldi	r18, 0x00	; 0
    4eb6:	30 e0       	ldi	r19, 0x00	; 0
    4eb8:	40 e8       	ldi	r20, 0x80	; 128
    4eba:	5f e3       	ldi	r21, 0x3F	; 63
    4ebc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ec0:	88 23       	and	r24, r24
    4ec2:	44 f4       	brge	.+16     	; 0x4ed4 <HKPD_GetPressedButton+0x800>
		__ticks = 1;
    4ec4:	fe 01       	movw	r30, r28
    4ec6:	e1 56       	subi	r30, 0x61	; 97
    4ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    4eca:	81 e0       	ldi	r24, 0x01	; 1
    4ecc:	90 e0       	ldi	r25, 0x00	; 0
    4ece:	91 83       	std	Z+1, r25	; 0x01
    4ed0:	80 83       	st	Z, r24
    4ed2:	64 c0       	rjmp	.+200    	; 0x4f9c <HKPD_GetPressedButton+0x8c8>
	else if (__tmp > 65535)
    4ed4:	fe 01       	movw	r30, r28
    4ed6:	ef 55       	subi	r30, 0x5F	; 95
    4ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    4eda:	60 81       	ld	r22, Z
    4edc:	71 81       	ldd	r23, Z+1	; 0x01
    4ede:	82 81       	ldd	r24, Z+2	; 0x02
    4ee0:	93 81       	ldd	r25, Z+3	; 0x03
    4ee2:	20 e0       	ldi	r18, 0x00	; 0
    4ee4:	3f ef       	ldi	r19, 0xFF	; 255
    4ee6:	4f e7       	ldi	r20, 0x7F	; 127
    4ee8:	57 e4       	ldi	r21, 0x47	; 71
    4eea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4eee:	18 16       	cp	r1, r24
    4ef0:	0c f0       	brlt	.+2      	; 0x4ef4 <HKPD_GetPressedButton+0x820>
    4ef2:	43 c0       	rjmp	.+134    	; 0x4f7a <HKPD_GetPressedButton+0x8a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ef4:	fe 01       	movw	r30, r28
    4ef6:	eb 55       	subi	r30, 0x5B	; 91
    4ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    4efa:	60 81       	ld	r22, Z
    4efc:	71 81       	ldd	r23, Z+1	; 0x01
    4efe:	82 81       	ldd	r24, Z+2	; 0x02
    4f00:	93 81       	ldd	r25, Z+3	; 0x03
    4f02:	20 e0       	ldi	r18, 0x00	; 0
    4f04:	30 e0       	ldi	r19, 0x00	; 0
    4f06:	40 e2       	ldi	r20, 0x20	; 32
    4f08:	51 e4       	ldi	r21, 0x41	; 65
    4f0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f0e:	dc 01       	movw	r26, r24
    4f10:	cb 01       	movw	r24, r22
    4f12:	8e 01       	movw	r16, r28
    4f14:	01 56       	subi	r16, 0x61	; 97
    4f16:	1f 4f       	sbci	r17, 0xFF	; 255
    4f18:	bc 01       	movw	r22, r24
    4f1a:	cd 01       	movw	r24, r26
    4f1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f20:	dc 01       	movw	r26, r24
    4f22:	cb 01       	movw	r24, r22
    4f24:	f8 01       	movw	r30, r16
    4f26:	91 83       	std	Z+1, r25	; 0x01
    4f28:	80 83       	st	Z, r24
    4f2a:	1f c0       	rjmp	.+62     	; 0x4f6a <HKPD_GetPressedButton+0x896>
    4f2c:	fe 01       	movw	r30, r28
    4f2e:	e3 56       	subi	r30, 0x63	; 99
    4f30:	ff 4f       	sbci	r31, 0xFF	; 255
    4f32:	80 e9       	ldi	r24, 0x90	; 144
    4f34:	91 e0       	ldi	r25, 0x01	; 1
    4f36:	91 83       	std	Z+1, r25	; 0x01
    4f38:	80 83       	st	Z, r24
    4f3a:	fe 01       	movw	r30, r28
    4f3c:	e3 56       	subi	r30, 0x63	; 99
    4f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f40:	80 81       	ld	r24, Z
    4f42:	91 81       	ldd	r25, Z+1	; 0x01
    4f44:	01 97       	sbiw	r24, 0x01	; 1
    4f46:	f1 f7       	brne	.-4      	; 0x4f44 <HKPD_GetPressedButton+0x870>
    4f48:	fe 01       	movw	r30, r28
    4f4a:	e3 56       	subi	r30, 0x63	; 99
    4f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f4e:	91 83       	std	Z+1, r25	; 0x01
    4f50:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f52:	de 01       	movw	r26, r28
    4f54:	a1 56       	subi	r26, 0x61	; 97
    4f56:	bf 4f       	sbci	r27, 0xFF	; 255
    4f58:	fe 01       	movw	r30, r28
    4f5a:	e1 56       	subi	r30, 0x61	; 97
    4f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f5e:	80 81       	ld	r24, Z
    4f60:	91 81       	ldd	r25, Z+1	; 0x01
    4f62:	01 97       	sbiw	r24, 0x01	; 1
    4f64:	11 96       	adiw	r26, 0x01	; 1
    4f66:	9c 93       	st	X, r25
    4f68:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f6a:	fe 01       	movw	r30, r28
    4f6c:	e1 56       	subi	r30, 0x61	; 97
    4f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f70:	80 81       	ld	r24, Z
    4f72:	91 81       	ldd	r25, Z+1	; 0x01
    4f74:	00 97       	sbiw	r24, 0x00	; 0
    4f76:	d1 f6       	brne	.-76     	; 0x4f2c <HKPD_GetPressedButton+0x858>
    4f78:	27 c0       	rjmp	.+78     	; 0x4fc8 <HKPD_GetPressedButton+0x8f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f7a:	8e 01       	movw	r16, r28
    4f7c:	01 56       	subi	r16, 0x61	; 97
    4f7e:	1f 4f       	sbci	r17, 0xFF	; 255
    4f80:	fe 01       	movw	r30, r28
    4f82:	ef 55       	subi	r30, 0x5F	; 95
    4f84:	ff 4f       	sbci	r31, 0xFF	; 255
    4f86:	60 81       	ld	r22, Z
    4f88:	71 81       	ldd	r23, Z+1	; 0x01
    4f8a:	82 81       	ldd	r24, Z+2	; 0x02
    4f8c:	93 81       	ldd	r25, Z+3	; 0x03
    4f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f92:	dc 01       	movw	r26, r24
    4f94:	cb 01       	movw	r24, r22
    4f96:	f8 01       	movw	r30, r16
    4f98:	91 83       	std	Z+1, r25	; 0x01
    4f9a:	80 83       	st	Z, r24
    4f9c:	de 01       	movw	r26, r28
    4f9e:	a5 56       	subi	r26, 0x65	; 101
    4fa0:	bf 4f       	sbci	r27, 0xFF	; 255
    4fa2:	fe 01       	movw	r30, r28
    4fa4:	e1 56       	subi	r30, 0x61	; 97
    4fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    4fa8:	80 81       	ld	r24, Z
    4faa:	91 81       	ldd	r25, Z+1	; 0x01
    4fac:	8d 93       	st	X+, r24
    4fae:	9c 93       	st	X, r25
    4fb0:	fe 01       	movw	r30, r28
    4fb2:	e5 56       	subi	r30, 0x65	; 101
    4fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    4fb6:	80 81       	ld	r24, Z
    4fb8:	91 81       	ldd	r25, Z+1	; 0x01
    4fba:	01 97       	sbiw	r24, 0x01	; 1
    4fbc:	f1 f7       	brne	.-4      	; 0x4fba <HKPD_GetPressedButton+0x8e6>
    4fbe:	fe 01       	movw	r30, r28
    4fc0:	e5 56       	subi	r30, 0x65	; 101
    4fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    4fc4:	91 83       	std	Z+1, r25	; 0x01
    4fc6:	80 83       	st	Z, r24
    4fc8:	80 e0       	ldi	r24, 0x00	; 0
    4fca:	65 e0       	ldi	r22, 0x05	; 5
    4fcc:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    4fd0:	88 23       	and	r24, r24
    4fd2:	a1 f4       	brne	.+40     	; 0x4ffc <HKPD_GetPressedButton+0x928>
    4fd4:	80 e0       	ldi	r24, 0x00	; 0
    4fd6:	65 e0       	ldi	r22, 0x05	; 5
    4fd8:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    4fdc:	88 23       	and	r24, r24
    4fde:	d1 f3       	breq	.-12     	; 0x4fd4 <HKPD_GetPressedButton+0x900>
    4fe0:	82 e0       	ldi	r24, 0x02	; 2
    4fe2:	65 e0       	ldi	r22, 0x05	; 5
    4fe4:	41 e0       	ldi	r20, 0x01	; 1
    4fe6:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
    4fea:	fe 01       	movw	r30, r28
    4fec:	ef 51       	subi	r30, 0x1F	; 31
    4fee:	ff 4f       	sbci	r31, 0xFF	; 255
    4ff0:	de 01       	movw	r26, r28
    4ff2:	ae 51       	subi	r26, 0x1E	; 30
    4ff4:	bf 4f       	sbci	r27, 0xFF	; 255
    4ff6:	14 96       	adiw	r26, 0x04	; 4
    4ff8:	8c 91       	ld	r24, X
    4ffa:	80 83       	st	Z, r24
		if(MDIO_Return_PINValue(MDIO_PORTA,PIN6) == 0) { _delay_ms(30);if(MDIO_Return_PINValue(MDIO_PORTA,PIN6) == 0) {while(MDIO_Return_PINValue(MDIO_PORTA,PIN6) == 0); MDIO_Set_PIN_VALUE(MDIO_PORTC,PIN5,PIN_HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [1][1];}}
    4ffc:	80 e0       	ldi	r24, 0x00	; 0
    4ffe:	66 e0       	ldi	r22, 0x06	; 6
    5000:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    5004:	88 23       	and	r24, r24
    5006:	09 f0       	breq	.+2      	; 0x500a <HKPD_GetPressedButton+0x936>
    5008:	cd c0       	rjmp	.+410    	; 0x51a4 <HKPD_GetPressedButton+0xad0>
    500a:	fe 01       	movw	r30, r28
    500c:	e9 56       	subi	r30, 0x69	; 105
    500e:	ff 4f       	sbci	r31, 0xFF	; 255
    5010:	80 e0       	ldi	r24, 0x00	; 0
    5012:	90 e0       	ldi	r25, 0x00	; 0
    5014:	a0 ef       	ldi	r26, 0xF0	; 240
    5016:	b1 e4       	ldi	r27, 0x41	; 65
    5018:	80 83       	st	Z, r24
    501a:	91 83       	std	Z+1, r25	; 0x01
    501c:	a2 83       	std	Z+2, r26	; 0x02
    501e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5020:	8e 01       	movw	r16, r28
    5022:	0d 56       	subi	r16, 0x6D	; 109
    5024:	1f 4f       	sbci	r17, 0xFF	; 255
    5026:	fe 01       	movw	r30, r28
    5028:	e9 56       	subi	r30, 0x69	; 105
    502a:	ff 4f       	sbci	r31, 0xFF	; 255
    502c:	60 81       	ld	r22, Z
    502e:	71 81       	ldd	r23, Z+1	; 0x01
    5030:	82 81       	ldd	r24, Z+2	; 0x02
    5032:	93 81       	ldd	r25, Z+3	; 0x03
    5034:	20 e0       	ldi	r18, 0x00	; 0
    5036:	30 e0       	ldi	r19, 0x00	; 0
    5038:	4a e7       	ldi	r20, 0x7A	; 122
    503a:	55 e4       	ldi	r21, 0x45	; 69
    503c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5040:	dc 01       	movw	r26, r24
    5042:	cb 01       	movw	r24, r22
    5044:	f8 01       	movw	r30, r16
    5046:	80 83       	st	Z, r24
    5048:	91 83       	std	Z+1, r25	; 0x01
    504a:	a2 83       	std	Z+2, r26	; 0x02
    504c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    504e:	fe 01       	movw	r30, r28
    5050:	ed 56       	subi	r30, 0x6D	; 109
    5052:	ff 4f       	sbci	r31, 0xFF	; 255
    5054:	60 81       	ld	r22, Z
    5056:	71 81       	ldd	r23, Z+1	; 0x01
    5058:	82 81       	ldd	r24, Z+2	; 0x02
    505a:	93 81       	ldd	r25, Z+3	; 0x03
    505c:	20 e0       	ldi	r18, 0x00	; 0
    505e:	30 e0       	ldi	r19, 0x00	; 0
    5060:	40 e8       	ldi	r20, 0x80	; 128
    5062:	5f e3       	ldi	r21, 0x3F	; 63
    5064:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5068:	88 23       	and	r24, r24
    506a:	44 f4       	brge	.+16     	; 0x507c <HKPD_GetPressedButton+0x9a8>
		__ticks = 1;
    506c:	fe 01       	movw	r30, r28
    506e:	ef 56       	subi	r30, 0x6F	; 111
    5070:	ff 4f       	sbci	r31, 0xFF	; 255
    5072:	81 e0       	ldi	r24, 0x01	; 1
    5074:	90 e0       	ldi	r25, 0x00	; 0
    5076:	91 83       	std	Z+1, r25	; 0x01
    5078:	80 83       	st	Z, r24
    507a:	64 c0       	rjmp	.+200    	; 0x5144 <HKPD_GetPressedButton+0xa70>
	else if (__tmp > 65535)
    507c:	fe 01       	movw	r30, r28
    507e:	ed 56       	subi	r30, 0x6D	; 109
    5080:	ff 4f       	sbci	r31, 0xFF	; 255
    5082:	60 81       	ld	r22, Z
    5084:	71 81       	ldd	r23, Z+1	; 0x01
    5086:	82 81       	ldd	r24, Z+2	; 0x02
    5088:	93 81       	ldd	r25, Z+3	; 0x03
    508a:	20 e0       	ldi	r18, 0x00	; 0
    508c:	3f ef       	ldi	r19, 0xFF	; 255
    508e:	4f e7       	ldi	r20, 0x7F	; 127
    5090:	57 e4       	ldi	r21, 0x47	; 71
    5092:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5096:	18 16       	cp	r1, r24
    5098:	0c f0       	brlt	.+2      	; 0x509c <HKPD_GetPressedButton+0x9c8>
    509a:	43 c0       	rjmp	.+134    	; 0x5122 <HKPD_GetPressedButton+0xa4e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    509c:	fe 01       	movw	r30, r28
    509e:	e9 56       	subi	r30, 0x69	; 105
    50a0:	ff 4f       	sbci	r31, 0xFF	; 255
    50a2:	60 81       	ld	r22, Z
    50a4:	71 81       	ldd	r23, Z+1	; 0x01
    50a6:	82 81       	ldd	r24, Z+2	; 0x02
    50a8:	93 81       	ldd	r25, Z+3	; 0x03
    50aa:	20 e0       	ldi	r18, 0x00	; 0
    50ac:	30 e0       	ldi	r19, 0x00	; 0
    50ae:	40 e2       	ldi	r20, 0x20	; 32
    50b0:	51 e4       	ldi	r21, 0x41	; 65
    50b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50b6:	dc 01       	movw	r26, r24
    50b8:	cb 01       	movw	r24, r22
    50ba:	8e 01       	movw	r16, r28
    50bc:	0f 56       	subi	r16, 0x6F	; 111
    50be:	1f 4f       	sbci	r17, 0xFF	; 255
    50c0:	bc 01       	movw	r22, r24
    50c2:	cd 01       	movw	r24, r26
    50c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50c8:	dc 01       	movw	r26, r24
    50ca:	cb 01       	movw	r24, r22
    50cc:	f8 01       	movw	r30, r16
    50ce:	91 83       	std	Z+1, r25	; 0x01
    50d0:	80 83       	st	Z, r24
    50d2:	1f c0       	rjmp	.+62     	; 0x5112 <HKPD_GetPressedButton+0xa3e>
    50d4:	fe 01       	movw	r30, r28
    50d6:	e1 57       	subi	r30, 0x71	; 113
    50d8:	ff 4f       	sbci	r31, 0xFF	; 255
    50da:	80 e9       	ldi	r24, 0x90	; 144
    50dc:	91 e0       	ldi	r25, 0x01	; 1
    50de:	91 83       	std	Z+1, r25	; 0x01
    50e0:	80 83       	st	Z, r24
    50e2:	fe 01       	movw	r30, r28
    50e4:	e1 57       	subi	r30, 0x71	; 113
    50e6:	ff 4f       	sbci	r31, 0xFF	; 255
    50e8:	80 81       	ld	r24, Z
    50ea:	91 81       	ldd	r25, Z+1	; 0x01
    50ec:	01 97       	sbiw	r24, 0x01	; 1
    50ee:	f1 f7       	brne	.-4      	; 0x50ec <HKPD_GetPressedButton+0xa18>
    50f0:	fe 01       	movw	r30, r28
    50f2:	e1 57       	subi	r30, 0x71	; 113
    50f4:	ff 4f       	sbci	r31, 0xFF	; 255
    50f6:	91 83       	std	Z+1, r25	; 0x01
    50f8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50fa:	de 01       	movw	r26, r28
    50fc:	af 56       	subi	r26, 0x6F	; 111
    50fe:	bf 4f       	sbci	r27, 0xFF	; 255
    5100:	fe 01       	movw	r30, r28
    5102:	ef 56       	subi	r30, 0x6F	; 111
    5104:	ff 4f       	sbci	r31, 0xFF	; 255
    5106:	80 81       	ld	r24, Z
    5108:	91 81       	ldd	r25, Z+1	; 0x01
    510a:	01 97       	sbiw	r24, 0x01	; 1
    510c:	11 96       	adiw	r26, 0x01	; 1
    510e:	9c 93       	st	X, r25
    5110:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5112:	fe 01       	movw	r30, r28
    5114:	ef 56       	subi	r30, 0x6F	; 111
    5116:	ff 4f       	sbci	r31, 0xFF	; 255
    5118:	80 81       	ld	r24, Z
    511a:	91 81       	ldd	r25, Z+1	; 0x01
    511c:	00 97       	sbiw	r24, 0x00	; 0
    511e:	d1 f6       	brne	.-76     	; 0x50d4 <HKPD_GetPressedButton+0xa00>
    5120:	27 c0       	rjmp	.+78     	; 0x5170 <HKPD_GetPressedButton+0xa9c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5122:	8e 01       	movw	r16, r28
    5124:	0f 56       	subi	r16, 0x6F	; 111
    5126:	1f 4f       	sbci	r17, 0xFF	; 255
    5128:	fe 01       	movw	r30, r28
    512a:	ed 56       	subi	r30, 0x6D	; 109
    512c:	ff 4f       	sbci	r31, 0xFF	; 255
    512e:	60 81       	ld	r22, Z
    5130:	71 81       	ldd	r23, Z+1	; 0x01
    5132:	82 81       	ldd	r24, Z+2	; 0x02
    5134:	93 81       	ldd	r25, Z+3	; 0x03
    5136:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    513a:	dc 01       	movw	r26, r24
    513c:	cb 01       	movw	r24, r22
    513e:	f8 01       	movw	r30, r16
    5140:	91 83       	std	Z+1, r25	; 0x01
    5142:	80 83       	st	Z, r24
    5144:	de 01       	movw	r26, r28
    5146:	a3 57       	subi	r26, 0x73	; 115
    5148:	bf 4f       	sbci	r27, 0xFF	; 255
    514a:	fe 01       	movw	r30, r28
    514c:	ef 56       	subi	r30, 0x6F	; 111
    514e:	ff 4f       	sbci	r31, 0xFF	; 255
    5150:	80 81       	ld	r24, Z
    5152:	91 81       	ldd	r25, Z+1	; 0x01
    5154:	8d 93       	st	X+, r24
    5156:	9c 93       	st	X, r25
    5158:	fe 01       	movw	r30, r28
    515a:	e3 57       	subi	r30, 0x73	; 115
    515c:	ff 4f       	sbci	r31, 0xFF	; 255
    515e:	80 81       	ld	r24, Z
    5160:	91 81       	ldd	r25, Z+1	; 0x01
    5162:	01 97       	sbiw	r24, 0x01	; 1
    5164:	f1 f7       	brne	.-4      	; 0x5162 <HKPD_GetPressedButton+0xa8e>
    5166:	fe 01       	movw	r30, r28
    5168:	e3 57       	subi	r30, 0x73	; 115
    516a:	ff 4f       	sbci	r31, 0xFF	; 255
    516c:	91 83       	std	Z+1, r25	; 0x01
    516e:	80 83       	st	Z, r24
    5170:	80 e0       	ldi	r24, 0x00	; 0
    5172:	66 e0       	ldi	r22, 0x06	; 6
    5174:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    5178:	88 23       	and	r24, r24
    517a:	a1 f4       	brne	.+40     	; 0x51a4 <HKPD_GetPressedButton+0xad0>
    517c:	80 e0       	ldi	r24, 0x00	; 0
    517e:	66 e0       	ldi	r22, 0x06	; 6
    5180:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    5184:	88 23       	and	r24, r24
    5186:	d1 f3       	breq	.-12     	; 0x517c <HKPD_GetPressedButton+0xaa8>
    5188:	82 e0       	ldi	r24, 0x02	; 2
    518a:	65 e0       	ldi	r22, 0x05	; 5
    518c:	41 e0       	ldi	r20, 0x01	; 1
    518e:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
    5192:	fe 01       	movw	r30, r28
    5194:	ef 51       	subi	r30, 0x1F	; 31
    5196:	ff 4f       	sbci	r31, 0xFF	; 255
    5198:	de 01       	movw	r26, r28
    519a:	ae 51       	subi	r26, 0x1E	; 30
    519c:	bf 4f       	sbci	r27, 0xFF	; 255
    519e:	15 96       	adiw	r26, 0x05	; 5
    51a0:	8c 91       	ld	r24, X
    51a2:	80 83       	st	Z, r24
		if(MDIO_Return_PINValue(MDIO_PORTA,PIN7)==0 )  { _delay_ms(30);if(MDIO_Return_PINValue(MDIO_PORTA,PIN7) == 0) {while(MDIO_Return_PINValue(MDIO_PORTA,PIN7) == 0); MDIO_Set_PIN_VALUE(MDIO_PORTC,PIN5,PIN_HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [1][2];}}
    51a4:	80 e0       	ldi	r24, 0x00	; 0
    51a6:	67 e0       	ldi	r22, 0x07	; 7
    51a8:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    51ac:	88 23       	and	r24, r24
    51ae:	09 f0       	breq	.+2      	; 0x51b2 <HKPD_GetPressedButton+0xade>
    51b0:	cd c0       	rjmp	.+410    	; 0x534c <HKPD_GetPressedButton+0xc78>
    51b2:	fe 01       	movw	r30, r28
    51b4:	e7 57       	subi	r30, 0x77	; 119
    51b6:	ff 4f       	sbci	r31, 0xFF	; 255
    51b8:	80 e0       	ldi	r24, 0x00	; 0
    51ba:	90 e0       	ldi	r25, 0x00	; 0
    51bc:	a0 ef       	ldi	r26, 0xF0	; 240
    51be:	b1 e4       	ldi	r27, 0x41	; 65
    51c0:	80 83       	st	Z, r24
    51c2:	91 83       	std	Z+1, r25	; 0x01
    51c4:	a2 83       	std	Z+2, r26	; 0x02
    51c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51c8:	8e 01       	movw	r16, r28
    51ca:	0b 57       	subi	r16, 0x7B	; 123
    51cc:	1f 4f       	sbci	r17, 0xFF	; 255
    51ce:	fe 01       	movw	r30, r28
    51d0:	e7 57       	subi	r30, 0x77	; 119
    51d2:	ff 4f       	sbci	r31, 0xFF	; 255
    51d4:	60 81       	ld	r22, Z
    51d6:	71 81       	ldd	r23, Z+1	; 0x01
    51d8:	82 81       	ldd	r24, Z+2	; 0x02
    51da:	93 81       	ldd	r25, Z+3	; 0x03
    51dc:	20 e0       	ldi	r18, 0x00	; 0
    51de:	30 e0       	ldi	r19, 0x00	; 0
    51e0:	4a e7       	ldi	r20, 0x7A	; 122
    51e2:	55 e4       	ldi	r21, 0x45	; 69
    51e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51e8:	dc 01       	movw	r26, r24
    51ea:	cb 01       	movw	r24, r22
    51ec:	f8 01       	movw	r30, r16
    51ee:	80 83       	st	Z, r24
    51f0:	91 83       	std	Z+1, r25	; 0x01
    51f2:	a2 83       	std	Z+2, r26	; 0x02
    51f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    51f6:	fe 01       	movw	r30, r28
    51f8:	eb 57       	subi	r30, 0x7B	; 123
    51fa:	ff 4f       	sbci	r31, 0xFF	; 255
    51fc:	60 81       	ld	r22, Z
    51fe:	71 81       	ldd	r23, Z+1	; 0x01
    5200:	82 81       	ldd	r24, Z+2	; 0x02
    5202:	93 81       	ldd	r25, Z+3	; 0x03
    5204:	20 e0       	ldi	r18, 0x00	; 0
    5206:	30 e0       	ldi	r19, 0x00	; 0
    5208:	40 e8       	ldi	r20, 0x80	; 128
    520a:	5f e3       	ldi	r21, 0x3F	; 63
    520c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5210:	88 23       	and	r24, r24
    5212:	44 f4       	brge	.+16     	; 0x5224 <HKPD_GetPressedButton+0xb50>
		__ticks = 1;
    5214:	fe 01       	movw	r30, r28
    5216:	ed 57       	subi	r30, 0x7D	; 125
    5218:	ff 4f       	sbci	r31, 0xFF	; 255
    521a:	81 e0       	ldi	r24, 0x01	; 1
    521c:	90 e0       	ldi	r25, 0x00	; 0
    521e:	91 83       	std	Z+1, r25	; 0x01
    5220:	80 83       	st	Z, r24
    5222:	64 c0       	rjmp	.+200    	; 0x52ec <HKPD_GetPressedButton+0xc18>
	else if (__tmp > 65535)
    5224:	fe 01       	movw	r30, r28
    5226:	eb 57       	subi	r30, 0x7B	; 123
    5228:	ff 4f       	sbci	r31, 0xFF	; 255
    522a:	60 81       	ld	r22, Z
    522c:	71 81       	ldd	r23, Z+1	; 0x01
    522e:	82 81       	ldd	r24, Z+2	; 0x02
    5230:	93 81       	ldd	r25, Z+3	; 0x03
    5232:	20 e0       	ldi	r18, 0x00	; 0
    5234:	3f ef       	ldi	r19, 0xFF	; 255
    5236:	4f e7       	ldi	r20, 0x7F	; 127
    5238:	57 e4       	ldi	r21, 0x47	; 71
    523a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    523e:	18 16       	cp	r1, r24
    5240:	0c f0       	brlt	.+2      	; 0x5244 <HKPD_GetPressedButton+0xb70>
    5242:	43 c0       	rjmp	.+134    	; 0x52ca <HKPD_GetPressedButton+0xbf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5244:	fe 01       	movw	r30, r28
    5246:	e7 57       	subi	r30, 0x77	; 119
    5248:	ff 4f       	sbci	r31, 0xFF	; 255
    524a:	60 81       	ld	r22, Z
    524c:	71 81       	ldd	r23, Z+1	; 0x01
    524e:	82 81       	ldd	r24, Z+2	; 0x02
    5250:	93 81       	ldd	r25, Z+3	; 0x03
    5252:	20 e0       	ldi	r18, 0x00	; 0
    5254:	30 e0       	ldi	r19, 0x00	; 0
    5256:	40 e2       	ldi	r20, 0x20	; 32
    5258:	51 e4       	ldi	r21, 0x41	; 65
    525a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    525e:	dc 01       	movw	r26, r24
    5260:	cb 01       	movw	r24, r22
    5262:	8e 01       	movw	r16, r28
    5264:	0d 57       	subi	r16, 0x7D	; 125
    5266:	1f 4f       	sbci	r17, 0xFF	; 255
    5268:	bc 01       	movw	r22, r24
    526a:	cd 01       	movw	r24, r26
    526c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5270:	dc 01       	movw	r26, r24
    5272:	cb 01       	movw	r24, r22
    5274:	f8 01       	movw	r30, r16
    5276:	91 83       	std	Z+1, r25	; 0x01
    5278:	80 83       	st	Z, r24
    527a:	1f c0       	rjmp	.+62     	; 0x52ba <HKPD_GetPressedButton+0xbe6>
    527c:	fe 01       	movw	r30, r28
    527e:	ef 57       	subi	r30, 0x7F	; 127
    5280:	ff 4f       	sbci	r31, 0xFF	; 255
    5282:	80 e9       	ldi	r24, 0x90	; 144
    5284:	91 e0       	ldi	r25, 0x01	; 1
    5286:	91 83       	std	Z+1, r25	; 0x01
    5288:	80 83       	st	Z, r24
    528a:	fe 01       	movw	r30, r28
    528c:	ef 57       	subi	r30, 0x7F	; 127
    528e:	ff 4f       	sbci	r31, 0xFF	; 255
    5290:	80 81       	ld	r24, Z
    5292:	91 81       	ldd	r25, Z+1	; 0x01
    5294:	01 97       	sbiw	r24, 0x01	; 1
    5296:	f1 f7       	brne	.-4      	; 0x5294 <HKPD_GetPressedButton+0xbc0>
    5298:	fe 01       	movw	r30, r28
    529a:	ef 57       	subi	r30, 0x7F	; 127
    529c:	ff 4f       	sbci	r31, 0xFF	; 255
    529e:	91 83       	std	Z+1, r25	; 0x01
    52a0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52a2:	de 01       	movw	r26, r28
    52a4:	ad 57       	subi	r26, 0x7D	; 125
    52a6:	bf 4f       	sbci	r27, 0xFF	; 255
    52a8:	fe 01       	movw	r30, r28
    52aa:	ed 57       	subi	r30, 0x7D	; 125
    52ac:	ff 4f       	sbci	r31, 0xFF	; 255
    52ae:	80 81       	ld	r24, Z
    52b0:	91 81       	ldd	r25, Z+1	; 0x01
    52b2:	01 97       	sbiw	r24, 0x01	; 1
    52b4:	11 96       	adiw	r26, 0x01	; 1
    52b6:	9c 93       	st	X, r25
    52b8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52ba:	fe 01       	movw	r30, r28
    52bc:	ed 57       	subi	r30, 0x7D	; 125
    52be:	ff 4f       	sbci	r31, 0xFF	; 255
    52c0:	80 81       	ld	r24, Z
    52c2:	91 81       	ldd	r25, Z+1	; 0x01
    52c4:	00 97       	sbiw	r24, 0x00	; 0
    52c6:	d1 f6       	brne	.-76     	; 0x527c <HKPD_GetPressedButton+0xba8>
    52c8:	27 c0       	rjmp	.+78     	; 0x5318 <HKPD_GetPressedButton+0xc44>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52ca:	8e 01       	movw	r16, r28
    52cc:	0d 57       	subi	r16, 0x7D	; 125
    52ce:	1f 4f       	sbci	r17, 0xFF	; 255
    52d0:	fe 01       	movw	r30, r28
    52d2:	eb 57       	subi	r30, 0x7B	; 123
    52d4:	ff 4f       	sbci	r31, 0xFF	; 255
    52d6:	60 81       	ld	r22, Z
    52d8:	71 81       	ldd	r23, Z+1	; 0x01
    52da:	82 81       	ldd	r24, Z+2	; 0x02
    52dc:	93 81       	ldd	r25, Z+3	; 0x03
    52de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52e2:	dc 01       	movw	r26, r24
    52e4:	cb 01       	movw	r24, r22
    52e6:	f8 01       	movw	r30, r16
    52e8:	91 83       	std	Z+1, r25	; 0x01
    52ea:	80 83       	st	Z, r24
    52ec:	de 01       	movw	r26, r28
    52ee:	a1 58       	subi	r26, 0x81	; 129
    52f0:	bf 4f       	sbci	r27, 0xFF	; 255
    52f2:	fe 01       	movw	r30, r28
    52f4:	ed 57       	subi	r30, 0x7D	; 125
    52f6:	ff 4f       	sbci	r31, 0xFF	; 255
    52f8:	80 81       	ld	r24, Z
    52fa:	91 81       	ldd	r25, Z+1	; 0x01
    52fc:	8d 93       	st	X+, r24
    52fe:	9c 93       	st	X, r25
    5300:	fe 01       	movw	r30, r28
    5302:	e1 58       	subi	r30, 0x81	; 129
    5304:	ff 4f       	sbci	r31, 0xFF	; 255
    5306:	80 81       	ld	r24, Z
    5308:	91 81       	ldd	r25, Z+1	; 0x01
    530a:	01 97       	sbiw	r24, 0x01	; 1
    530c:	f1 f7       	brne	.-4      	; 0x530a <HKPD_GetPressedButton+0xc36>
    530e:	fe 01       	movw	r30, r28
    5310:	e1 58       	subi	r30, 0x81	; 129
    5312:	ff 4f       	sbci	r31, 0xFF	; 255
    5314:	91 83       	std	Z+1, r25	; 0x01
    5316:	80 83       	st	Z, r24
    5318:	80 e0       	ldi	r24, 0x00	; 0
    531a:	67 e0       	ldi	r22, 0x07	; 7
    531c:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    5320:	88 23       	and	r24, r24
    5322:	a1 f4       	brne	.+40     	; 0x534c <HKPD_GetPressedButton+0xc78>
    5324:	80 e0       	ldi	r24, 0x00	; 0
    5326:	67 e0       	ldi	r22, 0x07	; 7
    5328:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    532c:	88 23       	and	r24, r24
    532e:	d1 f3       	breq	.-12     	; 0x5324 <HKPD_GetPressedButton+0xc50>
    5330:	82 e0       	ldi	r24, 0x02	; 2
    5332:	65 e0       	ldi	r22, 0x05	; 5
    5334:	41 e0       	ldi	r20, 0x01	; 1
    5336:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
    533a:	fe 01       	movw	r30, r28
    533c:	ef 51       	subi	r30, 0x1F	; 31
    533e:	ff 4f       	sbci	r31, 0xFF	; 255
    5340:	de 01       	movw	r26, r28
    5342:	ae 51       	subi	r26, 0x1E	; 30
    5344:	bf 4f       	sbci	r27, 0xFF	; 255
    5346:	16 96       	adiw	r26, 0x06	; 6
    5348:	8c 91       	ld	r24, X
    534a:	80 83       	st	Z, r24
		if(MDIO_Return_PINValue(MDIO_PORTB,PIN3)==0 )  { _delay_ms(30);if(MDIO_Return_PINValue(MDIO_PORTB,PIN3) == 0) {while(MDIO_Return_PINValue(MDIO_PORTB,PIN3)==0) ;  MDIO_Set_PIN_VALUE(MDIO_PORTC,PIN5,PIN_HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [1][3];}}
    534c:	81 e0       	ldi	r24, 0x01	; 1
    534e:	63 e0       	ldi	r22, 0x03	; 3
    5350:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    5354:	88 23       	and	r24, r24
    5356:	09 f0       	breq	.+2      	; 0x535a <HKPD_GetPressedButton+0xc86>
    5358:	cd c0       	rjmp	.+410    	; 0x54f4 <HKPD_GetPressedButton+0xe20>
    535a:	fe 01       	movw	r30, r28
    535c:	e5 58       	subi	r30, 0x85	; 133
    535e:	ff 4f       	sbci	r31, 0xFF	; 255
    5360:	80 e0       	ldi	r24, 0x00	; 0
    5362:	90 e0       	ldi	r25, 0x00	; 0
    5364:	a0 ef       	ldi	r26, 0xF0	; 240
    5366:	b1 e4       	ldi	r27, 0x41	; 65
    5368:	80 83       	st	Z, r24
    536a:	91 83       	std	Z+1, r25	; 0x01
    536c:	a2 83       	std	Z+2, r26	; 0x02
    536e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5370:	8e 01       	movw	r16, r28
    5372:	09 58       	subi	r16, 0x89	; 137
    5374:	1f 4f       	sbci	r17, 0xFF	; 255
    5376:	fe 01       	movw	r30, r28
    5378:	e5 58       	subi	r30, 0x85	; 133
    537a:	ff 4f       	sbci	r31, 0xFF	; 255
    537c:	60 81       	ld	r22, Z
    537e:	71 81       	ldd	r23, Z+1	; 0x01
    5380:	82 81       	ldd	r24, Z+2	; 0x02
    5382:	93 81       	ldd	r25, Z+3	; 0x03
    5384:	20 e0       	ldi	r18, 0x00	; 0
    5386:	30 e0       	ldi	r19, 0x00	; 0
    5388:	4a e7       	ldi	r20, 0x7A	; 122
    538a:	55 e4       	ldi	r21, 0x45	; 69
    538c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5390:	dc 01       	movw	r26, r24
    5392:	cb 01       	movw	r24, r22
    5394:	f8 01       	movw	r30, r16
    5396:	80 83       	st	Z, r24
    5398:	91 83       	std	Z+1, r25	; 0x01
    539a:	a2 83       	std	Z+2, r26	; 0x02
    539c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    539e:	fe 01       	movw	r30, r28
    53a0:	e9 58       	subi	r30, 0x89	; 137
    53a2:	ff 4f       	sbci	r31, 0xFF	; 255
    53a4:	60 81       	ld	r22, Z
    53a6:	71 81       	ldd	r23, Z+1	; 0x01
    53a8:	82 81       	ldd	r24, Z+2	; 0x02
    53aa:	93 81       	ldd	r25, Z+3	; 0x03
    53ac:	20 e0       	ldi	r18, 0x00	; 0
    53ae:	30 e0       	ldi	r19, 0x00	; 0
    53b0:	40 e8       	ldi	r20, 0x80	; 128
    53b2:	5f e3       	ldi	r21, 0x3F	; 63
    53b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    53b8:	88 23       	and	r24, r24
    53ba:	44 f4       	brge	.+16     	; 0x53cc <HKPD_GetPressedButton+0xcf8>
		__ticks = 1;
    53bc:	fe 01       	movw	r30, r28
    53be:	eb 58       	subi	r30, 0x8B	; 139
    53c0:	ff 4f       	sbci	r31, 0xFF	; 255
    53c2:	81 e0       	ldi	r24, 0x01	; 1
    53c4:	90 e0       	ldi	r25, 0x00	; 0
    53c6:	91 83       	std	Z+1, r25	; 0x01
    53c8:	80 83       	st	Z, r24
    53ca:	64 c0       	rjmp	.+200    	; 0x5494 <HKPD_GetPressedButton+0xdc0>
	else if (__tmp > 65535)
    53cc:	fe 01       	movw	r30, r28
    53ce:	e9 58       	subi	r30, 0x89	; 137
    53d0:	ff 4f       	sbci	r31, 0xFF	; 255
    53d2:	60 81       	ld	r22, Z
    53d4:	71 81       	ldd	r23, Z+1	; 0x01
    53d6:	82 81       	ldd	r24, Z+2	; 0x02
    53d8:	93 81       	ldd	r25, Z+3	; 0x03
    53da:	20 e0       	ldi	r18, 0x00	; 0
    53dc:	3f ef       	ldi	r19, 0xFF	; 255
    53de:	4f e7       	ldi	r20, 0x7F	; 127
    53e0:	57 e4       	ldi	r21, 0x47	; 71
    53e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    53e6:	18 16       	cp	r1, r24
    53e8:	0c f0       	brlt	.+2      	; 0x53ec <HKPD_GetPressedButton+0xd18>
    53ea:	43 c0       	rjmp	.+134    	; 0x5472 <HKPD_GetPressedButton+0xd9e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53ec:	fe 01       	movw	r30, r28
    53ee:	e5 58       	subi	r30, 0x85	; 133
    53f0:	ff 4f       	sbci	r31, 0xFF	; 255
    53f2:	60 81       	ld	r22, Z
    53f4:	71 81       	ldd	r23, Z+1	; 0x01
    53f6:	82 81       	ldd	r24, Z+2	; 0x02
    53f8:	93 81       	ldd	r25, Z+3	; 0x03
    53fa:	20 e0       	ldi	r18, 0x00	; 0
    53fc:	30 e0       	ldi	r19, 0x00	; 0
    53fe:	40 e2       	ldi	r20, 0x20	; 32
    5400:	51 e4       	ldi	r21, 0x41	; 65
    5402:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5406:	dc 01       	movw	r26, r24
    5408:	cb 01       	movw	r24, r22
    540a:	8e 01       	movw	r16, r28
    540c:	0b 58       	subi	r16, 0x8B	; 139
    540e:	1f 4f       	sbci	r17, 0xFF	; 255
    5410:	bc 01       	movw	r22, r24
    5412:	cd 01       	movw	r24, r26
    5414:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5418:	dc 01       	movw	r26, r24
    541a:	cb 01       	movw	r24, r22
    541c:	f8 01       	movw	r30, r16
    541e:	91 83       	std	Z+1, r25	; 0x01
    5420:	80 83       	st	Z, r24
    5422:	1f c0       	rjmp	.+62     	; 0x5462 <HKPD_GetPressedButton+0xd8e>
    5424:	fe 01       	movw	r30, r28
    5426:	ed 58       	subi	r30, 0x8D	; 141
    5428:	ff 4f       	sbci	r31, 0xFF	; 255
    542a:	80 e9       	ldi	r24, 0x90	; 144
    542c:	91 e0       	ldi	r25, 0x01	; 1
    542e:	91 83       	std	Z+1, r25	; 0x01
    5430:	80 83       	st	Z, r24
    5432:	fe 01       	movw	r30, r28
    5434:	ed 58       	subi	r30, 0x8D	; 141
    5436:	ff 4f       	sbci	r31, 0xFF	; 255
    5438:	80 81       	ld	r24, Z
    543a:	91 81       	ldd	r25, Z+1	; 0x01
    543c:	01 97       	sbiw	r24, 0x01	; 1
    543e:	f1 f7       	brne	.-4      	; 0x543c <HKPD_GetPressedButton+0xd68>
    5440:	fe 01       	movw	r30, r28
    5442:	ed 58       	subi	r30, 0x8D	; 141
    5444:	ff 4f       	sbci	r31, 0xFF	; 255
    5446:	91 83       	std	Z+1, r25	; 0x01
    5448:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    544a:	de 01       	movw	r26, r28
    544c:	ab 58       	subi	r26, 0x8B	; 139
    544e:	bf 4f       	sbci	r27, 0xFF	; 255
    5450:	fe 01       	movw	r30, r28
    5452:	eb 58       	subi	r30, 0x8B	; 139
    5454:	ff 4f       	sbci	r31, 0xFF	; 255
    5456:	80 81       	ld	r24, Z
    5458:	91 81       	ldd	r25, Z+1	; 0x01
    545a:	01 97       	sbiw	r24, 0x01	; 1
    545c:	11 96       	adiw	r26, 0x01	; 1
    545e:	9c 93       	st	X, r25
    5460:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5462:	fe 01       	movw	r30, r28
    5464:	eb 58       	subi	r30, 0x8B	; 139
    5466:	ff 4f       	sbci	r31, 0xFF	; 255
    5468:	80 81       	ld	r24, Z
    546a:	91 81       	ldd	r25, Z+1	; 0x01
    546c:	00 97       	sbiw	r24, 0x00	; 0
    546e:	d1 f6       	brne	.-76     	; 0x5424 <HKPD_GetPressedButton+0xd50>
    5470:	27 c0       	rjmp	.+78     	; 0x54c0 <HKPD_GetPressedButton+0xdec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5472:	8e 01       	movw	r16, r28
    5474:	0b 58       	subi	r16, 0x8B	; 139
    5476:	1f 4f       	sbci	r17, 0xFF	; 255
    5478:	fe 01       	movw	r30, r28
    547a:	e9 58       	subi	r30, 0x89	; 137
    547c:	ff 4f       	sbci	r31, 0xFF	; 255
    547e:	60 81       	ld	r22, Z
    5480:	71 81       	ldd	r23, Z+1	; 0x01
    5482:	82 81       	ldd	r24, Z+2	; 0x02
    5484:	93 81       	ldd	r25, Z+3	; 0x03
    5486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    548a:	dc 01       	movw	r26, r24
    548c:	cb 01       	movw	r24, r22
    548e:	f8 01       	movw	r30, r16
    5490:	91 83       	std	Z+1, r25	; 0x01
    5492:	80 83       	st	Z, r24
    5494:	de 01       	movw	r26, r28
    5496:	af 58       	subi	r26, 0x8F	; 143
    5498:	bf 4f       	sbci	r27, 0xFF	; 255
    549a:	fe 01       	movw	r30, r28
    549c:	eb 58       	subi	r30, 0x8B	; 139
    549e:	ff 4f       	sbci	r31, 0xFF	; 255
    54a0:	80 81       	ld	r24, Z
    54a2:	91 81       	ldd	r25, Z+1	; 0x01
    54a4:	8d 93       	st	X+, r24
    54a6:	9c 93       	st	X, r25
    54a8:	fe 01       	movw	r30, r28
    54aa:	ef 58       	subi	r30, 0x8F	; 143
    54ac:	ff 4f       	sbci	r31, 0xFF	; 255
    54ae:	80 81       	ld	r24, Z
    54b0:	91 81       	ldd	r25, Z+1	; 0x01
    54b2:	01 97       	sbiw	r24, 0x01	; 1
    54b4:	f1 f7       	brne	.-4      	; 0x54b2 <HKPD_GetPressedButton+0xdde>
    54b6:	fe 01       	movw	r30, r28
    54b8:	ef 58       	subi	r30, 0x8F	; 143
    54ba:	ff 4f       	sbci	r31, 0xFF	; 255
    54bc:	91 83       	std	Z+1, r25	; 0x01
    54be:	80 83       	st	Z, r24
    54c0:	81 e0       	ldi	r24, 0x01	; 1
    54c2:	63 e0       	ldi	r22, 0x03	; 3
    54c4:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    54c8:	88 23       	and	r24, r24
    54ca:	a1 f4       	brne	.+40     	; 0x54f4 <HKPD_GetPressedButton+0xe20>
    54cc:	81 e0       	ldi	r24, 0x01	; 1
    54ce:	63 e0       	ldi	r22, 0x03	; 3
    54d0:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    54d4:	88 23       	and	r24, r24
    54d6:	d1 f3       	breq	.-12     	; 0x54cc <HKPD_GetPressedButton+0xdf8>
    54d8:	82 e0       	ldi	r24, 0x02	; 2
    54da:	65 e0       	ldi	r22, 0x05	; 5
    54dc:	41 e0       	ldi	r20, 0x01	; 1
    54de:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
    54e2:	fe 01       	movw	r30, r28
    54e4:	ef 51       	subi	r30, 0x1F	; 31
    54e6:	ff 4f       	sbci	r31, 0xFF	; 255
    54e8:	de 01       	movw	r26, r28
    54ea:	ae 51       	subi	r26, 0x1E	; 30
    54ec:	bf 4f       	sbci	r27, 0xFF	; 255
    54ee:	17 96       	adiw	r26, 0x07	; 7
    54f0:	8c 91       	ld	r24, X
    54f2:	80 83       	st	Z, r24

		MDIO_Set_PIN_VALUE(MDIO_PORTC,PIN5,PIN_HIGH);
    54f4:	82 e0       	ldi	r24, 0x02	; 2
    54f6:	65 e0       	ldi	r22, 0x05	; 5
    54f8:	41 e0       	ldi	r20, 0x01	; 1
    54fa:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>


		MDIO_Set_PIN_VALUE(MDIO_PORTC,PIN6,PIN_LOW);
    54fe:	82 e0       	ldi	r24, 0x02	; 2
    5500:	66 e0       	ldi	r22, 0x06	; 6
    5502:	40 e0       	ldi	r20, 0x00	; 0
    5504:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>

		if(MDIO_Return_PINValue(MDIO_PORTA,PIN5) == 0) { _delay_ms(30);if(MDIO_Return_PINValue(MDIO_PORTA,PIN5) == 0) {while(MDIO_Return_PINValue(MDIO_PORTA,PIN5) == 0);MDIO_Set_PIN_VALUE(MDIO_PORTC,PIN6,PIN_HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [2][0];}}
    5508:	80 e0       	ldi	r24, 0x00	; 0
    550a:	65 e0       	ldi	r22, 0x05	; 5
    550c:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    5510:	88 23       	and	r24, r24
    5512:	09 f0       	breq	.+2      	; 0x5516 <HKPD_GetPressedButton+0xe42>
    5514:	cd c0       	rjmp	.+410    	; 0x56b0 <HKPD_GetPressedButton+0xfdc>
    5516:	fe 01       	movw	r30, r28
    5518:	e3 59       	subi	r30, 0x93	; 147
    551a:	ff 4f       	sbci	r31, 0xFF	; 255
    551c:	80 e0       	ldi	r24, 0x00	; 0
    551e:	90 e0       	ldi	r25, 0x00	; 0
    5520:	a0 ef       	ldi	r26, 0xF0	; 240
    5522:	b1 e4       	ldi	r27, 0x41	; 65
    5524:	80 83       	st	Z, r24
    5526:	91 83       	std	Z+1, r25	; 0x01
    5528:	a2 83       	std	Z+2, r26	; 0x02
    552a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    552c:	8e 01       	movw	r16, r28
    552e:	07 59       	subi	r16, 0x97	; 151
    5530:	1f 4f       	sbci	r17, 0xFF	; 255
    5532:	fe 01       	movw	r30, r28
    5534:	e3 59       	subi	r30, 0x93	; 147
    5536:	ff 4f       	sbci	r31, 0xFF	; 255
    5538:	60 81       	ld	r22, Z
    553a:	71 81       	ldd	r23, Z+1	; 0x01
    553c:	82 81       	ldd	r24, Z+2	; 0x02
    553e:	93 81       	ldd	r25, Z+3	; 0x03
    5540:	20 e0       	ldi	r18, 0x00	; 0
    5542:	30 e0       	ldi	r19, 0x00	; 0
    5544:	4a e7       	ldi	r20, 0x7A	; 122
    5546:	55 e4       	ldi	r21, 0x45	; 69
    5548:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    554c:	dc 01       	movw	r26, r24
    554e:	cb 01       	movw	r24, r22
    5550:	f8 01       	movw	r30, r16
    5552:	80 83       	st	Z, r24
    5554:	91 83       	std	Z+1, r25	; 0x01
    5556:	a2 83       	std	Z+2, r26	; 0x02
    5558:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    555a:	fe 01       	movw	r30, r28
    555c:	e7 59       	subi	r30, 0x97	; 151
    555e:	ff 4f       	sbci	r31, 0xFF	; 255
    5560:	60 81       	ld	r22, Z
    5562:	71 81       	ldd	r23, Z+1	; 0x01
    5564:	82 81       	ldd	r24, Z+2	; 0x02
    5566:	93 81       	ldd	r25, Z+3	; 0x03
    5568:	20 e0       	ldi	r18, 0x00	; 0
    556a:	30 e0       	ldi	r19, 0x00	; 0
    556c:	40 e8       	ldi	r20, 0x80	; 128
    556e:	5f e3       	ldi	r21, 0x3F	; 63
    5570:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5574:	88 23       	and	r24, r24
    5576:	44 f4       	brge	.+16     	; 0x5588 <HKPD_GetPressedButton+0xeb4>
		__ticks = 1;
    5578:	fe 01       	movw	r30, r28
    557a:	e9 59       	subi	r30, 0x99	; 153
    557c:	ff 4f       	sbci	r31, 0xFF	; 255
    557e:	81 e0       	ldi	r24, 0x01	; 1
    5580:	90 e0       	ldi	r25, 0x00	; 0
    5582:	91 83       	std	Z+1, r25	; 0x01
    5584:	80 83       	st	Z, r24
    5586:	64 c0       	rjmp	.+200    	; 0x5650 <HKPD_GetPressedButton+0xf7c>
	else if (__tmp > 65535)
    5588:	fe 01       	movw	r30, r28
    558a:	e7 59       	subi	r30, 0x97	; 151
    558c:	ff 4f       	sbci	r31, 0xFF	; 255
    558e:	60 81       	ld	r22, Z
    5590:	71 81       	ldd	r23, Z+1	; 0x01
    5592:	82 81       	ldd	r24, Z+2	; 0x02
    5594:	93 81       	ldd	r25, Z+3	; 0x03
    5596:	20 e0       	ldi	r18, 0x00	; 0
    5598:	3f ef       	ldi	r19, 0xFF	; 255
    559a:	4f e7       	ldi	r20, 0x7F	; 127
    559c:	57 e4       	ldi	r21, 0x47	; 71
    559e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    55a2:	18 16       	cp	r1, r24
    55a4:	0c f0       	brlt	.+2      	; 0x55a8 <HKPD_GetPressedButton+0xed4>
    55a6:	43 c0       	rjmp	.+134    	; 0x562e <HKPD_GetPressedButton+0xf5a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55a8:	fe 01       	movw	r30, r28
    55aa:	e3 59       	subi	r30, 0x93	; 147
    55ac:	ff 4f       	sbci	r31, 0xFF	; 255
    55ae:	60 81       	ld	r22, Z
    55b0:	71 81       	ldd	r23, Z+1	; 0x01
    55b2:	82 81       	ldd	r24, Z+2	; 0x02
    55b4:	93 81       	ldd	r25, Z+3	; 0x03
    55b6:	20 e0       	ldi	r18, 0x00	; 0
    55b8:	30 e0       	ldi	r19, 0x00	; 0
    55ba:	40 e2       	ldi	r20, 0x20	; 32
    55bc:	51 e4       	ldi	r21, 0x41	; 65
    55be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55c2:	dc 01       	movw	r26, r24
    55c4:	cb 01       	movw	r24, r22
    55c6:	8e 01       	movw	r16, r28
    55c8:	09 59       	subi	r16, 0x99	; 153
    55ca:	1f 4f       	sbci	r17, 0xFF	; 255
    55cc:	bc 01       	movw	r22, r24
    55ce:	cd 01       	movw	r24, r26
    55d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55d4:	dc 01       	movw	r26, r24
    55d6:	cb 01       	movw	r24, r22
    55d8:	f8 01       	movw	r30, r16
    55da:	91 83       	std	Z+1, r25	; 0x01
    55dc:	80 83       	st	Z, r24
    55de:	1f c0       	rjmp	.+62     	; 0x561e <HKPD_GetPressedButton+0xf4a>
    55e0:	fe 01       	movw	r30, r28
    55e2:	eb 59       	subi	r30, 0x9B	; 155
    55e4:	ff 4f       	sbci	r31, 0xFF	; 255
    55e6:	80 e9       	ldi	r24, 0x90	; 144
    55e8:	91 e0       	ldi	r25, 0x01	; 1
    55ea:	91 83       	std	Z+1, r25	; 0x01
    55ec:	80 83       	st	Z, r24
    55ee:	fe 01       	movw	r30, r28
    55f0:	eb 59       	subi	r30, 0x9B	; 155
    55f2:	ff 4f       	sbci	r31, 0xFF	; 255
    55f4:	80 81       	ld	r24, Z
    55f6:	91 81       	ldd	r25, Z+1	; 0x01
    55f8:	01 97       	sbiw	r24, 0x01	; 1
    55fa:	f1 f7       	brne	.-4      	; 0x55f8 <HKPD_GetPressedButton+0xf24>
    55fc:	fe 01       	movw	r30, r28
    55fe:	eb 59       	subi	r30, 0x9B	; 155
    5600:	ff 4f       	sbci	r31, 0xFF	; 255
    5602:	91 83       	std	Z+1, r25	; 0x01
    5604:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5606:	de 01       	movw	r26, r28
    5608:	a9 59       	subi	r26, 0x99	; 153
    560a:	bf 4f       	sbci	r27, 0xFF	; 255
    560c:	fe 01       	movw	r30, r28
    560e:	e9 59       	subi	r30, 0x99	; 153
    5610:	ff 4f       	sbci	r31, 0xFF	; 255
    5612:	80 81       	ld	r24, Z
    5614:	91 81       	ldd	r25, Z+1	; 0x01
    5616:	01 97       	sbiw	r24, 0x01	; 1
    5618:	11 96       	adiw	r26, 0x01	; 1
    561a:	9c 93       	st	X, r25
    561c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    561e:	fe 01       	movw	r30, r28
    5620:	e9 59       	subi	r30, 0x99	; 153
    5622:	ff 4f       	sbci	r31, 0xFF	; 255
    5624:	80 81       	ld	r24, Z
    5626:	91 81       	ldd	r25, Z+1	; 0x01
    5628:	00 97       	sbiw	r24, 0x00	; 0
    562a:	d1 f6       	brne	.-76     	; 0x55e0 <HKPD_GetPressedButton+0xf0c>
    562c:	27 c0       	rjmp	.+78     	; 0x567c <HKPD_GetPressedButton+0xfa8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    562e:	8e 01       	movw	r16, r28
    5630:	09 59       	subi	r16, 0x99	; 153
    5632:	1f 4f       	sbci	r17, 0xFF	; 255
    5634:	fe 01       	movw	r30, r28
    5636:	e7 59       	subi	r30, 0x97	; 151
    5638:	ff 4f       	sbci	r31, 0xFF	; 255
    563a:	60 81       	ld	r22, Z
    563c:	71 81       	ldd	r23, Z+1	; 0x01
    563e:	82 81       	ldd	r24, Z+2	; 0x02
    5640:	93 81       	ldd	r25, Z+3	; 0x03
    5642:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5646:	dc 01       	movw	r26, r24
    5648:	cb 01       	movw	r24, r22
    564a:	f8 01       	movw	r30, r16
    564c:	91 83       	std	Z+1, r25	; 0x01
    564e:	80 83       	st	Z, r24
    5650:	de 01       	movw	r26, r28
    5652:	ad 59       	subi	r26, 0x9D	; 157
    5654:	bf 4f       	sbci	r27, 0xFF	; 255
    5656:	fe 01       	movw	r30, r28
    5658:	e9 59       	subi	r30, 0x99	; 153
    565a:	ff 4f       	sbci	r31, 0xFF	; 255
    565c:	80 81       	ld	r24, Z
    565e:	91 81       	ldd	r25, Z+1	; 0x01
    5660:	8d 93       	st	X+, r24
    5662:	9c 93       	st	X, r25
    5664:	fe 01       	movw	r30, r28
    5666:	ed 59       	subi	r30, 0x9D	; 157
    5668:	ff 4f       	sbci	r31, 0xFF	; 255
    566a:	80 81       	ld	r24, Z
    566c:	91 81       	ldd	r25, Z+1	; 0x01
    566e:	01 97       	sbiw	r24, 0x01	; 1
    5670:	f1 f7       	brne	.-4      	; 0x566e <HKPD_GetPressedButton+0xf9a>
    5672:	fe 01       	movw	r30, r28
    5674:	ed 59       	subi	r30, 0x9D	; 157
    5676:	ff 4f       	sbci	r31, 0xFF	; 255
    5678:	91 83       	std	Z+1, r25	; 0x01
    567a:	80 83       	st	Z, r24
    567c:	80 e0       	ldi	r24, 0x00	; 0
    567e:	65 e0       	ldi	r22, 0x05	; 5
    5680:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    5684:	88 23       	and	r24, r24
    5686:	a1 f4       	brne	.+40     	; 0x56b0 <HKPD_GetPressedButton+0xfdc>
    5688:	80 e0       	ldi	r24, 0x00	; 0
    568a:	65 e0       	ldi	r22, 0x05	; 5
    568c:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    5690:	88 23       	and	r24, r24
    5692:	d1 f3       	breq	.-12     	; 0x5688 <HKPD_GetPressedButton+0xfb4>
    5694:	82 e0       	ldi	r24, 0x02	; 2
    5696:	66 e0       	ldi	r22, 0x06	; 6
    5698:	41 e0       	ldi	r20, 0x01	; 1
    569a:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
    569e:	fe 01       	movw	r30, r28
    56a0:	ef 51       	subi	r30, 0x1F	; 31
    56a2:	ff 4f       	sbci	r31, 0xFF	; 255
    56a4:	de 01       	movw	r26, r28
    56a6:	ae 51       	subi	r26, 0x1E	; 30
    56a8:	bf 4f       	sbci	r27, 0xFF	; 255
    56aa:	18 96       	adiw	r26, 0x08	; 8
    56ac:	8c 91       	ld	r24, X
    56ae:	80 83       	st	Z, r24
		if(MDIO_Return_PINValue(MDIO_PORTA,PIN6) == 0) { _delay_ms(30);if(MDIO_Return_PINValue(MDIO_PORTA,PIN6) == 0) {while(MDIO_Return_PINValue(MDIO_PORTA,PIN6) == 0);MDIO_Set_PIN_VALUE(MDIO_PORTC,PIN6,PIN_HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [2][1];}}
    56b0:	80 e0       	ldi	r24, 0x00	; 0
    56b2:	66 e0       	ldi	r22, 0x06	; 6
    56b4:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    56b8:	88 23       	and	r24, r24
    56ba:	09 f0       	breq	.+2      	; 0x56be <HKPD_GetPressedButton+0xfea>
    56bc:	cd c0       	rjmp	.+410    	; 0x5858 <HKPD_GetPressedButton+0x1184>
    56be:	fe 01       	movw	r30, r28
    56c0:	e1 5a       	subi	r30, 0xA1	; 161
    56c2:	ff 4f       	sbci	r31, 0xFF	; 255
    56c4:	80 e0       	ldi	r24, 0x00	; 0
    56c6:	90 e0       	ldi	r25, 0x00	; 0
    56c8:	a0 ef       	ldi	r26, 0xF0	; 240
    56ca:	b1 e4       	ldi	r27, 0x41	; 65
    56cc:	80 83       	st	Z, r24
    56ce:	91 83       	std	Z+1, r25	; 0x01
    56d0:	a2 83       	std	Z+2, r26	; 0x02
    56d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    56d4:	8e 01       	movw	r16, r28
    56d6:	05 5a       	subi	r16, 0xA5	; 165
    56d8:	1f 4f       	sbci	r17, 0xFF	; 255
    56da:	fe 01       	movw	r30, r28
    56dc:	e1 5a       	subi	r30, 0xA1	; 161
    56de:	ff 4f       	sbci	r31, 0xFF	; 255
    56e0:	60 81       	ld	r22, Z
    56e2:	71 81       	ldd	r23, Z+1	; 0x01
    56e4:	82 81       	ldd	r24, Z+2	; 0x02
    56e6:	93 81       	ldd	r25, Z+3	; 0x03
    56e8:	20 e0       	ldi	r18, 0x00	; 0
    56ea:	30 e0       	ldi	r19, 0x00	; 0
    56ec:	4a e7       	ldi	r20, 0x7A	; 122
    56ee:	55 e4       	ldi	r21, 0x45	; 69
    56f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56f4:	dc 01       	movw	r26, r24
    56f6:	cb 01       	movw	r24, r22
    56f8:	f8 01       	movw	r30, r16
    56fa:	80 83       	st	Z, r24
    56fc:	91 83       	std	Z+1, r25	; 0x01
    56fe:	a2 83       	std	Z+2, r26	; 0x02
    5700:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5702:	fe 01       	movw	r30, r28
    5704:	e5 5a       	subi	r30, 0xA5	; 165
    5706:	ff 4f       	sbci	r31, 0xFF	; 255
    5708:	60 81       	ld	r22, Z
    570a:	71 81       	ldd	r23, Z+1	; 0x01
    570c:	82 81       	ldd	r24, Z+2	; 0x02
    570e:	93 81       	ldd	r25, Z+3	; 0x03
    5710:	20 e0       	ldi	r18, 0x00	; 0
    5712:	30 e0       	ldi	r19, 0x00	; 0
    5714:	40 e8       	ldi	r20, 0x80	; 128
    5716:	5f e3       	ldi	r21, 0x3F	; 63
    5718:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    571c:	88 23       	and	r24, r24
    571e:	44 f4       	brge	.+16     	; 0x5730 <HKPD_GetPressedButton+0x105c>
		__ticks = 1;
    5720:	fe 01       	movw	r30, r28
    5722:	e7 5a       	subi	r30, 0xA7	; 167
    5724:	ff 4f       	sbci	r31, 0xFF	; 255
    5726:	81 e0       	ldi	r24, 0x01	; 1
    5728:	90 e0       	ldi	r25, 0x00	; 0
    572a:	91 83       	std	Z+1, r25	; 0x01
    572c:	80 83       	st	Z, r24
    572e:	64 c0       	rjmp	.+200    	; 0x57f8 <HKPD_GetPressedButton+0x1124>
	else if (__tmp > 65535)
    5730:	fe 01       	movw	r30, r28
    5732:	e5 5a       	subi	r30, 0xA5	; 165
    5734:	ff 4f       	sbci	r31, 0xFF	; 255
    5736:	60 81       	ld	r22, Z
    5738:	71 81       	ldd	r23, Z+1	; 0x01
    573a:	82 81       	ldd	r24, Z+2	; 0x02
    573c:	93 81       	ldd	r25, Z+3	; 0x03
    573e:	20 e0       	ldi	r18, 0x00	; 0
    5740:	3f ef       	ldi	r19, 0xFF	; 255
    5742:	4f e7       	ldi	r20, 0x7F	; 127
    5744:	57 e4       	ldi	r21, 0x47	; 71
    5746:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    574a:	18 16       	cp	r1, r24
    574c:	0c f0       	brlt	.+2      	; 0x5750 <HKPD_GetPressedButton+0x107c>
    574e:	43 c0       	rjmp	.+134    	; 0x57d6 <HKPD_GetPressedButton+0x1102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5750:	fe 01       	movw	r30, r28
    5752:	e1 5a       	subi	r30, 0xA1	; 161
    5754:	ff 4f       	sbci	r31, 0xFF	; 255
    5756:	60 81       	ld	r22, Z
    5758:	71 81       	ldd	r23, Z+1	; 0x01
    575a:	82 81       	ldd	r24, Z+2	; 0x02
    575c:	93 81       	ldd	r25, Z+3	; 0x03
    575e:	20 e0       	ldi	r18, 0x00	; 0
    5760:	30 e0       	ldi	r19, 0x00	; 0
    5762:	40 e2       	ldi	r20, 0x20	; 32
    5764:	51 e4       	ldi	r21, 0x41	; 65
    5766:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    576a:	dc 01       	movw	r26, r24
    576c:	cb 01       	movw	r24, r22
    576e:	8e 01       	movw	r16, r28
    5770:	07 5a       	subi	r16, 0xA7	; 167
    5772:	1f 4f       	sbci	r17, 0xFF	; 255
    5774:	bc 01       	movw	r22, r24
    5776:	cd 01       	movw	r24, r26
    5778:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    577c:	dc 01       	movw	r26, r24
    577e:	cb 01       	movw	r24, r22
    5780:	f8 01       	movw	r30, r16
    5782:	91 83       	std	Z+1, r25	; 0x01
    5784:	80 83       	st	Z, r24
    5786:	1f c0       	rjmp	.+62     	; 0x57c6 <HKPD_GetPressedButton+0x10f2>
    5788:	fe 01       	movw	r30, r28
    578a:	e9 5a       	subi	r30, 0xA9	; 169
    578c:	ff 4f       	sbci	r31, 0xFF	; 255
    578e:	80 e9       	ldi	r24, 0x90	; 144
    5790:	91 e0       	ldi	r25, 0x01	; 1
    5792:	91 83       	std	Z+1, r25	; 0x01
    5794:	80 83       	st	Z, r24
    5796:	fe 01       	movw	r30, r28
    5798:	e9 5a       	subi	r30, 0xA9	; 169
    579a:	ff 4f       	sbci	r31, 0xFF	; 255
    579c:	80 81       	ld	r24, Z
    579e:	91 81       	ldd	r25, Z+1	; 0x01
    57a0:	01 97       	sbiw	r24, 0x01	; 1
    57a2:	f1 f7       	brne	.-4      	; 0x57a0 <HKPD_GetPressedButton+0x10cc>
    57a4:	fe 01       	movw	r30, r28
    57a6:	e9 5a       	subi	r30, 0xA9	; 169
    57a8:	ff 4f       	sbci	r31, 0xFF	; 255
    57aa:	91 83       	std	Z+1, r25	; 0x01
    57ac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57ae:	de 01       	movw	r26, r28
    57b0:	a7 5a       	subi	r26, 0xA7	; 167
    57b2:	bf 4f       	sbci	r27, 0xFF	; 255
    57b4:	fe 01       	movw	r30, r28
    57b6:	e7 5a       	subi	r30, 0xA7	; 167
    57b8:	ff 4f       	sbci	r31, 0xFF	; 255
    57ba:	80 81       	ld	r24, Z
    57bc:	91 81       	ldd	r25, Z+1	; 0x01
    57be:	01 97       	sbiw	r24, 0x01	; 1
    57c0:	11 96       	adiw	r26, 0x01	; 1
    57c2:	9c 93       	st	X, r25
    57c4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57c6:	fe 01       	movw	r30, r28
    57c8:	e7 5a       	subi	r30, 0xA7	; 167
    57ca:	ff 4f       	sbci	r31, 0xFF	; 255
    57cc:	80 81       	ld	r24, Z
    57ce:	91 81       	ldd	r25, Z+1	; 0x01
    57d0:	00 97       	sbiw	r24, 0x00	; 0
    57d2:	d1 f6       	brne	.-76     	; 0x5788 <HKPD_GetPressedButton+0x10b4>
    57d4:	27 c0       	rjmp	.+78     	; 0x5824 <HKPD_GetPressedButton+0x1150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57d6:	8e 01       	movw	r16, r28
    57d8:	07 5a       	subi	r16, 0xA7	; 167
    57da:	1f 4f       	sbci	r17, 0xFF	; 255
    57dc:	fe 01       	movw	r30, r28
    57de:	e5 5a       	subi	r30, 0xA5	; 165
    57e0:	ff 4f       	sbci	r31, 0xFF	; 255
    57e2:	60 81       	ld	r22, Z
    57e4:	71 81       	ldd	r23, Z+1	; 0x01
    57e6:	82 81       	ldd	r24, Z+2	; 0x02
    57e8:	93 81       	ldd	r25, Z+3	; 0x03
    57ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57ee:	dc 01       	movw	r26, r24
    57f0:	cb 01       	movw	r24, r22
    57f2:	f8 01       	movw	r30, r16
    57f4:	91 83       	std	Z+1, r25	; 0x01
    57f6:	80 83       	st	Z, r24
    57f8:	de 01       	movw	r26, r28
    57fa:	ab 5a       	subi	r26, 0xAB	; 171
    57fc:	bf 4f       	sbci	r27, 0xFF	; 255
    57fe:	fe 01       	movw	r30, r28
    5800:	e7 5a       	subi	r30, 0xA7	; 167
    5802:	ff 4f       	sbci	r31, 0xFF	; 255
    5804:	80 81       	ld	r24, Z
    5806:	91 81       	ldd	r25, Z+1	; 0x01
    5808:	8d 93       	st	X+, r24
    580a:	9c 93       	st	X, r25
    580c:	fe 01       	movw	r30, r28
    580e:	eb 5a       	subi	r30, 0xAB	; 171
    5810:	ff 4f       	sbci	r31, 0xFF	; 255
    5812:	80 81       	ld	r24, Z
    5814:	91 81       	ldd	r25, Z+1	; 0x01
    5816:	01 97       	sbiw	r24, 0x01	; 1
    5818:	f1 f7       	brne	.-4      	; 0x5816 <HKPD_GetPressedButton+0x1142>
    581a:	fe 01       	movw	r30, r28
    581c:	eb 5a       	subi	r30, 0xAB	; 171
    581e:	ff 4f       	sbci	r31, 0xFF	; 255
    5820:	91 83       	std	Z+1, r25	; 0x01
    5822:	80 83       	st	Z, r24
    5824:	80 e0       	ldi	r24, 0x00	; 0
    5826:	66 e0       	ldi	r22, 0x06	; 6
    5828:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    582c:	88 23       	and	r24, r24
    582e:	a1 f4       	brne	.+40     	; 0x5858 <HKPD_GetPressedButton+0x1184>
    5830:	80 e0       	ldi	r24, 0x00	; 0
    5832:	66 e0       	ldi	r22, 0x06	; 6
    5834:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    5838:	88 23       	and	r24, r24
    583a:	d1 f3       	breq	.-12     	; 0x5830 <HKPD_GetPressedButton+0x115c>
    583c:	82 e0       	ldi	r24, 0x02	; 2
    583e:	66 e0       	ldi	r22, 0x06	; 6
    5840:	41 e0       	ldi	r20, 0x01	; 1
    5842:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
    5846:	fe 01       	movw	r30, r28
    5848:	ef 51       	subi	r30, 0x1F	; 31
    584a:	ff 4f       	sbci	r31, 0xFF	; 255
    584c:	de 01       	movw	r26, r28
    584e:	ae 51       	subi	r26, 0x1E	; 30
    5850:	bf 4f       	sbci	r27, 0xFF	; 255
    5852:	19 96       	adiw	r26, 0x09	; 9
    5854:	8c 91       	ld	r24, X
    5856:	80 83       	st	Z, r24
		if(MDIO_Return_PINValue(MDIO_PORTA,PIN7) == 0) { _delay_ms(30);if(MDIO_Return_PINValue(MDIO_PORTA,PIN7) == 0) {while(MDIO_Return_PINValue(MDIO_PORTA,PIN7) == 0);MDIO_Set_PIN_VALUE(MDIO_PORTC,PIN6,PIN_HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [2][2];}}
    5858:	80 e0       	ldi	r24, 0x00	; 0
    585a:	67 e0       	ldi	r22, 0x07	; 7
    585c:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    5860:	88 23       	and	r24, r24
    5862:	09 f0       	breq	.+2      	; 0x5866 <HKPD_GetPressedButton+0x1192>
    5864:	cd c0       	rjmp	.+410    	; 0x5a00 <HKPD_GetPressedButton+0x132c>
    5866:	fe 01       	movw	r30, r28
    5868:	ef 5a       	subi	r30, 0xAF	; 175
    586a:	ff 4f       	sbci	r31, 0xFF	; 255
    586c:	80 e0       	ldi	r24, 0x00	; 0
    586e:	90 e0       	ldi	r25, 0x00	; 0
    5870:	a0 ef       	ldi	r26, 0xF0	; 240
    5872:	b1 e4       	ldi	r27, 0x41	; 65
    5874:	80 83       	st	Z, r24
    5876:	91 83       	std	Z+1, r25	; 0x01
    5878:	a2 83       	std	Z+2, r26	; 0x02
    587a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    587c:	8e 01       	movw	r16, r28
    587e:	03 5b       	subi	r16, 0xB3	; 179
    5880:	1f 4f       	sbci	r17, 0xFF	; 255
    5882:	fe 01       	movw	r30, r28
    5884:	ef 5a       	subi	r30, 0xAF	; 175
    5886:	ff 4f       	sbci	r31, 0xFF	; 255
    5888:	60 81       	ld	r22, Z
    588a:	71 81       	ldd	r23, Z+1	; 0x01
    588c:	82 81       	ldd	r24, Z+2	; 0x02
    588e:	93 81       	ldd	r25, Z+3	; 0x03
    5890:	20 e0       	ldi	r18, 0x00	; 0
    5892:	30 e0       	ldi	r19, 0x00	; 0
    5894:	4a e7       	ldi	r20, 0x7A	; 122
    5896:	55 e4       	ldi	r21, 0x45	; 69
    5898:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    589c:	dc 01       	movw	r26, r24
    589e:	cb 01       	movw	r24, r22
    58a0:	f8 01       	movw	r30, r16
    58a2:	80 83       	st	Z, r24
    58a4:	91 83       	std	Z+1, r25	; 0x01
    58a6:	a2 83       	std	Z+2, r26	; 0x02
    58a8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    58aa:	fe 01       	movw	r30, r28
    58ac:	e3 5b       	subi	r30, 0xB3	; 179
    58ae:	ff 4f       	sbci	r31, 0xFF	; 255
    58b0:	60 81       	ld	r22, Z
    58b2:	71 81       	ldd	r23, Z+1	; 0x01
    58b4:	82 81       	ldd	r24, Z+2	; 0x02
    58b6:	93 81       	ldd	r25, Z+3	; 0x03
    58b8:	20 e0       	ldi	r18, 0x00	; 0
    58ba:	30 e0       	ldi	r19, 0x00	; 0
    58bc:	40 e8       	ldi	r20, 0x80	; 128
    58be:	5f e3       	ldi	r21, 0x3F	; 63
    58c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    58c4:	88 23       	and	r24, r24
    58c6:	44 f4       	brge	.+16     	; 0x58d8 <HKPD_GetPressedButton+0x1204>
		__ticks = 1;
    58c8:	fe 01       	movw	r30, r28
    58ca:	e5 5b       	subi	r30, 0xB5	; 181
    58cc:	ff 4f       	sbci	r31, 0xFF	; 255
    58ce:	81 e0       	ldi	r24, 0x01	; 1
    58d0:	90 e0       	ldi	r25, 0x00	; 0
    58d2:	91 83       	std	Z+1, r25	; 0x01
    58d4:	80 83       	st	Z, r24
    58d6:	64 c0       	rjmp	.+200    	; 0x59a0 <HKPD_GetPressedButton+0x12cc>
	else if (__tmp > 65535)
    58d8:	fe 01       	movw	r30, r28
    58da:	e3 5b       	subi	r30, 0xB3	; 179
    58dc:	ff 4f       	sbci	r31, 0xFF	; 255
    58de:	60 81       	ld	r22, Z
    58e0:	71 81       	ldd	r23, Z+1	; 0x01
    58e2:	82 81       	ldd	r24, Z+2	; 0x02
    58e4:	93 81       	ldd	r25, Z+3	; 0x03
    58e6:	20 e0       	ldi	r18, 0x00	; 0
    58e8:	3f ef       	ldi	r19, 0xFF	; 255
    58ea:	4f e7       	ldi	r20, 0x7F	; 127
    58ec:	57 e4       	ldi	r21, 0x47	; 71
    58ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    58f2:	18 16       	cp	r1, r24
    58f4:	0c f0       	brlt	.+2      	; 0x58f8 <HKPD_GetPressedButton+0x1224>
    58f6:	43 c0       	rjmp	.+134    	; 0x597e <HKPD_GetPressedButton+0x12aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    58f8:	fe 01       	movw	r30, r28
    58fa:	ef 5a       	subi	r30, 0xAF	; 175
    58fc:	ff 4f       	sbci	r31, 0xFF	; 255
    58fe:	60 81       	ld	r22, Z
    5900:	71 81       	ldd	r23, Z+1	; 0x01
    5902:	82 81       	ldd	r24, Z+2	; 0x02
    5904:	93 81       	ldd	r25, Z+3	; 0x03
    5906:	20 e0       	ldi	r18, 0x00	; 0
    5908:	30 e0       	ldi	r19, 0x00	; 0
    590a:	40 e2       	ldi	r20, 0x20	; 32
    590c:	51 e4       	ldi	r21, 0x41	; 65
    590e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5912:	dc 01       	movw	r26, r24
    5914:	cb 01       	movw	r24, r22
    5916:	8e 01       	movw	r16, r28
    5918:	05 5b       	subi	r16, 0xB5	; 181
    591a:	1f 4f       	sbci	r17, 0xFF	; 255
    591c:	bc 01       	movw	r22, r24
    591e:	cd 01       	movw	r24, r26
    5920:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5924:	dc 01       	movw	r26, r24
    5926:	cb 01       	movw	r24, r22
    5928:	f8 01       	movw	r30, r16
    592a:	91 83       	std	Z+1, r25	; 0x01
    592c:	80 83       	st	Z, r24
    592e:	1f c0       	rjmp	.+62     	; 0x596e <HKPD_GetPressedButton+0x129a>
    5930:	fe 01       	movw	r30, r28
    5932:	e7 5b       	subi	r30, 0xB7	; 183
    5934:	ff 4f       	sbci	r31, 0xFF	; 255
    5936:	80 e9       	ldi	r24, 0x90	; 144
    5938:	91 e0       	ldi	r25, 0x01	; 1
    593a:	91 83       	std	Z+1, r25	; 0x01
    593c:	80 83       	st	Z, r24
    593e:	fe 01       	movw	r30, r28
    5940:	e7 5b       	subi	r30, 0xB7	; 183
    5942:	ff 4f       	sbci	r31, 0xFF	; 255
    5944:	80 81       	ld	r24, Z
    5946:	91 81       	ldd	r25, Z+1	; 0x01
    5948:	01 97       	sbiw	r24, 0x01	; 1
    594a:	f1 f7       	brne	.-4      	; 0x5948 <HKPD_GetPressedButton+0x1274>
    594c:	fe 01       	movw	r30, r28
    594e:	e7 5b       	subi	r30, 0xB7	; 183
    5950:	ff 4f       	sbci	r31, 0xFF	; 255
    5952:	91 83       	std	Z+1, r25	; 0x01
    5954:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5956:	de 01       	movw	r26, r28
    5958:	a5 5b       	subi	r26, 0xB5	; 181
    595a:	bf 4f       	sbci	r27, 0xFF	; 255
    595c:	fe 01       	movw	r30, r28
    595e:	e5 5b       	subi	r30, 0xB5	; 181
    5960:	ff 4f       	sbci	r31, 0xFF	; 255
    5962:	80 81       	ld	r24, Z
    5964:	91 81       	ldd	r25, Z+1	; 0x01
    5966:	01 97       	sbiw	r24, 0x01	; 1
    5968:	11 96       	adiw	r26, 0x01	; 1
    596a:	9c 93       	st	X, r25
    596c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    596e:	fe 01       	movw	r30, r28
    5970:	e5 5b       	subi	r30, 0xB5	; 181
    5972:	ff 4f       	sbci	r31, 0xFF	; 255
    5974:	80 81       	ld	r24, Z
    5976:	91 81       	ldd	r25, Z+1	; 0x01
    5978:	00 97       	sbiw	r24, 0x00	; 0
    597a:	d1 f6       	brne	.-76     	; 0x5930 <HKPD_GetPressedButton+0x125c>
    597c:	27 c0       	rjmp	.+78     	; 0x59cc <HKPD_GetPressedButton+0x12f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    597e:	8e 01       	movw	r16, r28
    5980:	05 5b       	subi	r16, 0xB5	; 181
    5982:	1f 4f       	sbci	r17, 0xFF	; 255
    5984:	fe 01       	movw	r30, r28
    5986:	e3 5b       	subi	r30, 0xB3	; 179
    5988:	ff 4f       	sbci	r31, 0xFF	; 255
    598a:	60 81       	ld	r22, Z
    598c:	71 81       	ldd	r23, Z+1	; 0x01
    598e:	82 81       	ldd	r24, Z+2	; 0x02
    5990:	93 81       	ldd	r25, Z+3	; 0x03
    5992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5996:	dc 01       	movw	r26, r24
    5998:	cb 01       	movw	r24, r22
    599a:	f8 01       	movw	r30, r16
    599c:	91 83       	std	Z+1, r25	; 0x01
    599e:	80 83       	st	Z, r24
    59a0:	de 01       	movw	r26, r28
    59a2:	a9 5b       	subi	r26, 0xB9	; 185
    59a4:	bf 4f       	sbci	r27, 0xFF	; 255
    59a6:	fe 01       	movw	r30, r28
    59a8:	e5 5b       	subi	r30, 0xB5	; 181
    59aa:	ff 4f       	sbci	r31, 0xFF	; 255
    59ac:	80 81       	ld	r24, Z
    59ae:	91 81       	ldd	r25, Z+1	; 0x01
    59b0:	8d 93       	st	X+, r24
    59b2:	9c 93       	st	X, r25
    59b4:	fe 01       	movw	r30, r28
    59b6:	e9 5b       	subi	r30, 0xB9	; 185
    59b8:	ff 4f       	sbci	r31, 0xFF	; 255
    59ba:	80 81       	ld	r24, Z
    59bc:	91 81       	ldd	r25, Z+1	; 0x01
    59be:	01 97       	sbiw	r24, 0x01	; 1
    59c0:	f1 f7       	brne	.-4      	; 0x59be <HKPD_GetPressedButton+0x12ea>
    59c2:	fe 01       	movw	r30, r28
    59c4:	e9 5b       	subi	r30, 0xB9	; 185
    59c6:	ff 4f       	sbci	r31, 0xFF	; 255
    59c8:	91 83       	std	Z+1, r25	; 0x01
    59ca:	80 83       	st	Z, r24
    59cc:	80 e0       	ldi	r24, 0x00	; 0
    59ce:	67 e0       	ldi	r22, 0x07	; 7
    59d0:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    59d4:	88 23       	and	r24, r24
    59d6:	a1 f4       	brne	.+40     	; 0x5a00 <HKPD_GetPressedButton+0x132c>
    59d8:	80 e0       	ldi	r24, 0x00	; 0
    59da:	67 e0       	ldi	r22, 0x07	; 7
    59dc:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    59e0:	88 23       	and	r24, r24
    59e2:	d1 f3       	breq	.-12     	; 0x59d8 <HKPD_GetPressedButton+0x1304>
    59e4:	82 e0       	ldi	r24, 0x02	; 2
    59e6:	66 e0       	ldi	r22, 0x06	; 6
    59e8:	41 e0       	ldi	r20, 0x01	; 1
    59ea:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
    59ee:	fe 01       	movw	r30, r28
    59f0:	ef 51       	subi	r30, 0x1F	; 31
    59f2:	ff 4f       	sbci	r31, 0xFF	; 255
    59f4:	de 01       	movw	r26, r28
    59f6:	ae 51       	subi	r26, 0x1E	; 30
    59f8:	bf 4f       	sbci	r27, 0xFF	; 255
    59fa:	1a 96       	adiw	r26, 0x0a	; 10
    59fc:	8c 91       	ld	r24, X
    59fe:	80 83       	st	Z, r24
		if(MDIO_Return_PINValue(MDIO_PORTB,PIN3) == 0) { _delay_ms(30);if(MDIO_Return_PINValue(MDIO_PORTB,PIN3) == 0) {while(MDIO_Return_PINValue(MDIO_PORTB,PIN3) == 0);MDIO_Set_PIN_VALUE(MDIO_PORTC,PIN6,PIN_HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [2][3];}}
    5a00:	81 e0       	ldi	r24, 0x01	; 1
    5a02:	63 e0       	ldi	r22, 0x03	; 3
    5a04:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    5a08:	88 23       	and	r24, r24
    5a0a:	09 f0       	breq	.+2      	; 0x5a0e <HKPD_GetPressedButton+0x133a>
    5a0c:	9f c0       	rjmp	.+318    	; 0x5b4c <HKPD_GetPressedButton+0x1478>
    5a0e:	fe 01       	movw	r30, r28
    5a10:	ed 5b       	subi	r30, 0xBD	; 189
    5a12:	ff 4f       	sbci	r31, 0xFF	; 255
    5a14:	80 e0       	ldi	r24, 0x00	; 0
    5a16:	90 e0       	ldi	r25, 0x00	; 0
    5a18:	a0 ef       	ldi	r26, 0xF0	; 240
    5a1a:	b1 e4       	ldi	r27, 0x41	; 65
    5a1c:	80 83       	st	Z, r24
    5a1e:	91 83       	std	Z+1, r25	; 0x01
    5a20:	a2 83       	std	Z+2, r26	; 0x02
    5a22:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a24:	8e 01       	movw	r16, r28
    5a26:	01 5c       	subi	r16, 0xC1	; 193
    5a28:	1f 4f       	sbci	r17, 0xFF	; 255
    5a2a:	fe 01       	movw	r30, r28
    5a2c:	ed 5b       	subi	r30, 0xBD	; 189
    5a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    5a30:	60 81       	ld	r22, Z
    5a32:	71 81       	ldd	r23, Z+1	; 0x01
    5a34:	82 81       	ldd	r24, Z+2	; 0x02
    5a36:	93 81       	ldd	r25, Z+3	; 0x03
    5a38:	20 e0       	ldi	r18, 0x00	; 0
    5a3a:	30 e0       	ldi	r19, 0x00	; 0
    5a3c:	4a e7       	ldi	r20, 0x7A	; 122
    5a3e:	55 e4       	ldi	r21, 0x45	; 69
    5a40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a44:	dc 01       	movw	r26, r24
    5a46:	cb 01       	movw	r24, r22
    5a48:	f8 01       	movw	r30, r16
    5a4a:	80 83       	st	Z, r24
    5a4c:	91 83       	std	Z+1, r25	; 0x01
    5a4e:	a2 83       	std	Z+2, r26	; 0x02
    5a50:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5a52:	fe 01       	movw	r30, r28
    5a54:	ff 96       	adiw	r30, 0x3f	; 63
    5a56:	60 81       	ld	r22, Z
    5a58:	71 81       	ldd	r23, Z+1	; 0x01
    5a5a:	82 81       	ldd	r24, Z+2	; 0x02
    5a5c:	93 81       	ldd	r25, Z+3	; 0x03
    5a5e:	20 e0       	ldi	r18, 0x00	; 0
    5a60:	30 e0       	ldi	r19, 0x00	; 0
    5a62:	40 e8       	ldi	r20, 0x80	; 128
    5a64:	5f e3       	ldi	r21, 0x3F	; 63
    5a66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5a6a:	88 23       	and	r24, r24
    5a6c:	2c f4       	brge	.+10     	; 0x5a78 <HKPD_GetPressedButton+0x13a4>
		__ticks = 1;
    5a6e:	81 e0       	ldi	r24, 0x01	; 1
    5a70:	90 e0       	ldi	r25, 0x00	; 0
    5a72:	9e af       	std	Y+62, r25	; 0x3e
    5a74:	8d af       	std	Y+61, r24	; 0x3d
    5a76:	46 c0       	rjmp	.+140    	; 0x5b04 <HKPD_GetPressedButton+0x1430>
	else if (__tmp > 65535)
    5a78:	fe 01       	movw	r30, r28
    5a7a:	ff 96       	adiw	r30, 0x3f	; 63
    5a7c:	60 81       	ld	r22, Z
    5a7e:	71 81       	ldd	r23, Z+1	; 0x01
    5a80:	82 81       	ldd	r24, Z+2	; 0x02
    5a82:	93 81       	ldd	r25, Z+3	; 0x03
    5a84:	20 e0       	ldi	r18, 0x00	; 0
    5a86:	3f ef       	ldi	r19, 0xFF	; 255
    5a88:	4f e7       	ldi	r20, 0x7F	; 127
    5a8a:	57 e4       	ldi	r21, 0x47	; 71
    5a8c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5a90:	18 16       	cp	r1, r24
    5a92:	64 f5       	brge	.+88     	; 0x5aec <HKPD_GetPressedButton+0x1418>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a94:	fe 01       	movw	r30, r28
    5a96:	ed 5b       	subi	r30, 0xBD	; 189
    5a98:	ff 4f       	sbci	r31, 0xFF	; 255
    5a9a:	60 81       	ld	r22, Z
    5a9c:	71 81       	ldd	r23, Z+1	; 0x01
    5a9e:	82 81       	ldd	r24, Z+2	; 0x02
    5aa0:	93 81       	ldd	r25, Z+3	; 0x03
    5aa2:	20 e0       	ldi	r18, 0x00	; 0
    5aa4:	30 e0       	ldi	r19, 0x00	; 0
    5aa6:	40 e2       	ldi	r20, 0x20	; 32
    5aa8:	51 e4       	ldi	r21, 0x41	; 65
    5aaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5aae:	dc 01       	movw	r26, r24
    5ab0:	cb 01       	movw	r24, r22
    5ab2:	bc 01       	movw	r22, r24
    5ab4:	cd 01       	movw	r24, r26
    5ab6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5aba:	dc 01       	movw	r26, r24
    5abc:	cb 01       	movw	r24, r22
    5abe:	9e af       	std	Y+62, r25	; 0x3e
    5ac0:	8d af       	std	Y+61, r24	; 0x3d
    5ac2:	0f c0       	rjmp	.+30     	; 0x5ae2 <HKPD_GetPressedButton+0x140e>
    5ac4:	80 e9       	ldi	r24, 0x90	; 144
    5ac6:	91 e0       	ldi	r25, 0x01	; 1
    5ac8:	9c af       	std	Y+60, r25	; 0x3c
    5aca:	8b af       	std	Y+59, r24	; 0x3b
    5acc:	8b ad       	ldd	r24, Y+59	; 0x3b
    5ace:	9c ad       	ldd	r25, Y+60	; 0x3c
    5ad0:	01 97       	sbiw	r24, 0x01	; 1
    5ad2:	f1 f7       	brne	.-4      	; 0x5ad0 <HKPD_GetPressedButton+0x13fc>
    5ad4:	9c af       	std	Y+60, r25	; 0x3c
    5ad6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ad8:	8d ad       	ldd	r24, Y+61	; 0x3d
    5ada:	9e ad       	ldd	r25, Y+62	; 0x3e
    5adc:	01 97       	sbiw	r24, 0x01	; 1
    5ade:	9e af       	std	Y+62, r25	; 0x3e
    5ae0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ae2:	8d ad       	ldd	r24, Y+61	; 0x3d
    5ae4:	9e ad       	ldd	r25, Y+62	; 0x3e
    5ae6:	00 97       	sbiw	r24, 0x00	; 0
    5ae8:	69 f7       	brne	.-38     	; 0x5ac4 <HKPD_GetPressedButton+0x13f0>
    5aea:	16 c0       	rjmp	.+44     	; 0x5b18 <HKPD_GetPressedButton+0x1444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5aec:	fe 01       	movw	r30, r28
    5aee:	ff 96       	adiw	r30, 0x3f	; 63
    5af0:	60 81       	ld	r22, Z
    5af2:	71 81       	ldd	r23, Z+1	; 0x01
    5af4:	82 81       	ldd	r24, Z+2	; 0x02
    5af6:	93 81       	ldd	r25, Z+3	; 0x03
    5af8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5afc:	dc 01       	movw	r26, r24
    5afe:	cb 01       	movw	r24, r22
    5b00:	9e af       	std	Y+62, r25	; 0x3e
    5b02:	8d af       	std	Y+61, r24	; 0x3d
    5b04:	8d ad       	ldd	r24, Y+61	; 0x3d
    5b06:	9e ad       	ldd	r25, Y+62	; 0x3e
    5b08:	9a af       	std	Y+58, r25	; 0x3a
    5b0a:	89 af       	std	Y+57, r24	; 0x39
    5b0c:	89 ad       	ldd	r24, Y+57	; 0x39
    5b0e:	9a ad       	ldd	r25, Y+58	; 0x3a
    5b10:	01 97       	sbiw	r24, 0x01	; 1
    5b12:	f1 f7       	brne	.-4      	; 0x5b10 <HKPD_GetPressedButton+0x143c>
    5b14:	9a af       	std	Y+58, r25	; 0x3a
    5b16:	89 af       	std	Y+57, r24	; 0x39
    5b18:	81 e0       	ldi	r24, 0x01	; 1
    5b1a:	63 e0       	ldi	r22, 0x03	; 3
    5b1c:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    5b20:	88 23       	and	r24, r24
    5b22:	a1 f4       	brne	.+40     	; 0x5b4c <HKPD_GetPressedButton+0x1478>
    5b24:	81 e0       	ldi	r24, 0x01	; 1
    5b26:	63 e0       	ldi	r22, 0x03	; 3
    5b28:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    5b2c:	88 23       	and	r24, r24
    5b2e:	d1 f3       	breq	.-12     	; 0x5b24 <HKPD_GetPressedButton+0x1450>
    5b30:	82 e0       	ldi	r24, 0x02	; 2
    5b32:	66 e0       	ldi	r22, 0x06	; 6
    5b34:	41 e0       	ldi	r20, 0x01	; 1
    5b36:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
    5b3a:	fe 01       	movw	r30, r28
    5b3c:	ef 51       	subi	r30, 0x1F	; 31
    5b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    5b40:	de 01       	movw	r26, r28
    5b42:	ae 51       	subi	r26, 0x1E	; 30
    5b44:	bf 4f       	sbci	r27, 0xFF	; 255
    5b46:	1b 96       	adiw	r26, 0x0b	; 11
    5b48:	8c 91       	ld	r24, X
    5b4a:	80 83       	st	Z, r24

		MDIO_Set_PIN_VALUE(MDIO_PORTC,PIN6,PIN_HIGH);
    5b4c:	82 e0       	ldi	r24, 0x02	; 2
    5b4e:	66 e0       	ldi	r22, 0x06	; 6
    5b50:	41 e0       	ldi	r20, 0x01	; 1
    5b52:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>


		MDIO_Set_PIN_VALUE(MDIO_PORTC,PIN7,PIN_LOW);
    5b56:	82 e0       	ldi	r24, 0x02	; 2
    5b58:	67 e0       	ldi	r22, 0x07	; 7
    5b5a:	40 e0       	ldi	r20, 0x00	; 0
    5b5c:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>

		if(MDIO_Return_PINValue(MDIO_PORTA,PIN5) == 0) { _delay_ms(30);if(MDIO_Return_PINValue(MDIO_PORTA,PIN5) == 0) {while(MDIO_Return_PINValue(MDIO_PORTA,PIN5) == 0);MDIO_Set_PIN_VALUE(MDIO_PORTC,PIN7,PIN_HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [3][0];}}
    5b60:	80 e0       	ldi	r24, 0x00	; 0
    5b62:	65 e0       	ldi	r22, 0x05	; 5
    5b64:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    5b68:	88 23       	and	r24, r24
    5b6a:	09 f0       	breq	.+2      	; 0x5b6e <HKPD_GetPressedButton+0x149a>
    5b6c:	8c c0       	rjmp	.+280    	; 0x5c86 <HKPD_GetPressedButton+0x15b2>
    5b6e:	80 e0       	ldi	r24, 0x00	; 0
    5b70:	90 e0       	ldi	r25, 0x00	; 0
    5b72:	a0 ef       	ldi	r26, 0xF0	; 240
    5b74:	b1 e4       	ldi	r27, 0x41	; 65
    5b76:	8d ab       	std	Y+53, r24	; 0x35
    5b78:	9e ab       	std	Y+54, r25	; 0x36
    5b7a:	af ab       	std	Y+55, r26	; 0x37
    5b7c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b7e:	6d a9       	ldd	r22, Y+53	; 0x35
    5b80:	7e a9       	ldd	r23, Y+54	; 0x36
    5b82:	8f a9       	ldd	r24, Y+55	; 0x37
    5b84:	98 ad       	ldd	r25, Y+56	; 0x38
    5b86:	20 e0       	ldi	r18, 0x00	; 0
    5b88:	30 e0       	ldi	r19, 0x00	; 0
    5b8a:	4a e7       	ldi	r20, 0x7A	; 122
    5b8c:	55 e4       	ldi	r21, 0x45	; 69
    5b8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b92:	dc 01       	movw	r26, r24
    5b94:	cb 01       	movw	r24, r22
    5b96:	89 ab       	std	Y+49, r24	; 0x31
    5b98:	9a ab       	std	Y+50, r25	; 0x32
    5b9a:	ab ab       	std	Y+51, r26	; 0x33
    5b9c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5b9e:	69 a9       	ldd	r22, Y+49	; 0x31
    5ba0:	7a a9       	ldd	r23, Y+50	; 0x32
    5ba2:	8b a9       	ldd	r24, Y+51	; 0x33
    5ba4:	9c a9       	ldd	r25, Y+52	; 0x34
    5ba6:	20 e0       	ldi	r18, 0x00	; 0
    5ba8:	30 e0       	ldi	r19, 0x00	; 0
    5baa:	40 e8       	ldi	r20, 0x80	; 128
    5bac:	5f e3       	ldi	r21, 0x3F	; 63
    5bae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5bb2:	88 23       	and	r24, r24
    5bb4:	2c f4       	brge	.+10     	; 0x5bc0 <HKPD_GetPressedButton+0x14ec>
		__ticks = 1;
    5bb6:	81 e0       	ldi	r24, 0x01	; 1
    5bb8:	90 e0       	ldi	r25, 0x00	; 0
    5bba:	98 ab       	std	Y+48, r25	; 0x30
    5bbc:	8f a7       	std	Y+47, r24	; 0x2f
    5bbe:	3f c0       	rjmp	.+126    	; 0x5c3e <HKPD_GetPressedButton+0x156a>
	else if (__tmp > 65535)
    5bc0:	69 a9       	ldd	r22, Y+49	; 0x31
    5bc2:	7a a9       	ldd	r23, Y+50	; 0x32
    5bc4:	8b a9       	ldd	r24, Y+51	; 0x33
    5bc6:	9c a9       	ldd	r25, Y+52	; 0x34
    5bc8:	20 e0       	ldi	r18, 0x00	; 0
    5bca:	3f ef       	ldi	r19, 0xFF	; 255
    5bcc:	4f e7       	ldi	r20, 0x7F	; 127
    5bce:	57 e4       	ldi	r21, 0x47	; 71
    5bd0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5bd4:	18 16       	cp	r1, r24
    5bd6:	4c f5       	brge	.+82     	; 0x5c2a <HKPD_GetPressedButton+0x1556>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5bd8:	6d a9       	ldd	r22, Y+53	; 0x35
    5bda:	7e a9       	ldd	r23, Y+54	; 0x36
    5bdc:	8f a9       	ldd	r24, Y+55	; 0x37
    5bde:	98 ad       	ldd	r25, Y+56	; 0x38
    5be0:	20 e0       	ldi	r18, 0x00	; 0
    5be2:	30 e0       	ldi	r19, 0x00	; 0
    5be4:	40 e2       	ldi	r20, 0x20	; 32
    5be6:	51 e4       	ldi	r21, 0x41	; 65
    5be8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5bec:	dc 01       	movw	r26, r24
    5bee:	cb 01       	movw	r24, r22
    5bf0:	bc 01       	movw	r22, r24
    5bf2:	cd 01       	movw	r24, r26
    5bf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bf8:	dc 01       	movw	r26, r24
    5bfa:	cb 01       	movw	r24, r22
    5bfc:	98 ab       	std	Y+48, r25	; 0x30
    5bfe:	8f a7       	std	Y+47, r24	; 0x2f
    5c00:	0f c0       	rjmp	.+30     	; 0x5c20 <HKPD_GetPressedButton+0x154c>
    5c02:	80 e9       	ldi	r24, 0x90	; 144
    5c04:	91 e0       	ldi	r25, 0x01	; 1
    5c06:	9e a7       	std	Y+46, r25	; 0x2e
    5c08:	8d a7       	std	Y+45, r24	; 0x2d
    5c0a:	8d a5       	ldd	r24, Y+45	; 0x2d
    5c0c:	9e a5       	ldd	r25, Y+46	; 0x2e
    5c0e:	01 97       	sbiw	r24, 0x01	; 1
    5c10:	f1 f7       	brne	.-4      	; 0x5c0e <HKPD_GetPressedButton+0x153a>
    5c12:	9e a7       	std	Y+46, r25	; 0x2e
    5c14:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c16:	8f a5       	ldd	r24, Y+47	; 0x2f
    5c18:	98 a9       	ldd	r25, Y+48	; 0x30
    5c1a:	01 97       	sbiw	r24, 0x01	; 1
    5c1c:	98 ab       	std	Y+48, r25	; 0x30
    5c1e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c20:	8f a5       	ldd	r24, Y+47	; 0x2f
    5c22:	98 a9       	ldd	r25, Y+48	; 0x30
    5c24:	00 97       	sbiw	r24, 0x00	; 0
    5c26:	69 f7       	brne	.-38     	; 0x5c02 <HKPD_GetPressedButton+0x152e>
    5c28:	14 c0       	rjmp	.+40     	; 0x5c52 <HKPD_GetPressedButton+0x157e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c2a:	69 a9       	ldd	r22, Y+49	; 0x31
    5c2c:	7a a9       	ldd	r23, Y+50	; 0x32
    5c2e:	8b a9       	ldd	r24, Y+51	; 0x33
    5c30:	9c a9       	ldd	r25, Y+52	; 0x34
    5c32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c36:	dc 01       	movw	r26, r24
    5c38:	cb 01       	movw	r24, r22
    5c3a:	98 ab       	std	Y+48, r25	; 0x30
    5c3c:	8f a7       	std	Y+47, r24	; 0x2f
    5c3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    5c40:	98 a9       	ldd	r25, Y+48	; 0x30
    5c42:	9c a7       	std	Y+44, r25	; 0x2c
    5c44:	8b a7       	std	Y+43, r24	; 0x2b
    5c46:	8b a5       	ldd	r24, Y+43	; 0x2b
    5c48:	9c a5       	ldd	r25, Y+44	; 0x2c
    5c4a:	01 97       	sbiw	r24, 0x01	; 1
    5c4c:	f1 f7       	brne	.-4      	; 0x5c4a <HKPD_GetPressedButton+0x1576>
    5c4e:	9c a7       	std	Y+44, r25	; 0x2c
    5c50:	8b a7       	std	Y+43, r24	; 0x2b
    5c52:	80 e0       	ldi	r24, 0x00	; 0
    5c54:	65 e0       	ldi	r22, 0x05	; 5
    5c56:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    5c5a:	88 23       	and	r24, r24
    5c5c:	a1 f4       	brne	.+40     	; 0x5c86 <HKPD_GetPressedButton+0x15b2>
    5c5e:	80 e0       	ldi	r24, 0x00	; 0
    5c60:	65 e0       	ldi	r22, 0x05	; 5
    5c62:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    5c66:	88 23       	and	r24, r24
    5c68:	d1 f3       	breq	.-12     	; 0x5c5e <HKPD_GetPressedButton+0x158a>
    5c6a:	82 e0       	ldi	r24, 0x02	; 2
    5c6c:	67 e0       	ldi	r22, 0x07	; 7
    5c6e:	41 e0       	ldi	r20, 0x01	; 1
    5c70:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
    5c74:	fe 01       	movw	r30, r28
    5c76:	ef 51       	subi	r30, 0x1F	; 31
    5c78:	ff 4f       	sbci	r31, 0xFF	; 255
    5c7a:	de 01       	movw	r26, r28
    5c7c:	ae 51       	subi	r26, 0x1E	; 30
    5c7e:	bf 4f       	sbci	r27, 0xFF	; 255
    5c80:	1c 96       	adiw	r26, 0x0c	; 12
    5c82:	8c 91       	ld	r24, X
    5c84:	80 83       	st	Z, r24
		if(MDIO_Return_PINValue(MDIO_PORTA,PIN6) == 0) { _delay_ms(30);if(MDIO_Return_PINValue(MDIO_PORTA,PIN6) == 0) {while(MDIO_Return_PINValue(MDIO_PORTA,PIN6) == 0);MDIO_Set_PIN_VALUE(MDIO_PORTC,PIN7,PIN_HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [3][1];}}
    5c86:	80 e0       	ldi	r24, 0x00	; 0
    5c88:	66 e0       	ldi	r22, 0x06	; 6
    5c8a:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    5c8e:	88 23       	and	r24, r24
    5c90:	09 f0       	breq	.+2      	; 0x5c94 <HKPD_GetPressedButton+0x15c0>
    5c92:	8c c0       	rjmp	.+280    	; 0x5dac <HKPD_GetPressedButton+0x16d8>
    5c94:	80 e0       	ldi	r24, 0x00	; 0
    5c96:	90 e0       	ldi	r25, 0x00	; 0
    5c98:	a0 ef       	ldi	r26, 0xF0	; 240
    5c9a:	b1 e4       	ldi	r27, 0x41	; 65
    5c9c:	8f a3       	std	Y+39, r24	; 0x27
    5c9e:	98 a7       	std	Y+40, r25	; 0x28
    5ca0:	a9 a7       	std	Y+41, r26	; 0x29
    5ca2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ca4:	6f a1       	ldd	r22, Y+39	; 0x27
    5ca6:	78 a5       	ldd	r23, Y+40	; 0x28
    5ca8:	89 a5       	ldd	r24, Y+41	; 0x29
    5caa:	9a a5       	ldd	r25, Y+42	; 0x2a
    5cac:	20 e0       	ldi	r18, 0x00	; 0
    5cae:	30 e0       	ldi	r19, 0x00	; 0
    5cb0:	4a e7       	ldi	r20, 0x7A	; 122
    5cb2:	55 e4       	ldi	r21, 0x45	; 69
    5cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5cb8:	dc 01       	movw	r26, r24
    5cba:	cb 01       	movw	r24, r22
    5cbc:	8b a3       	std	Y+35, r24	; 0x23
    5cbe:	9c a3       	std	Y+36, r25	; 0x24
    5cc0:	ad a3       	std	Y+37, r26	; 0x25
    5cc2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5cc4:	6b a1       	ldd	r22, Y+35	; 0x23
    5cc6:	7c a1       	ldd	r23, Y+36	; 0x24
    5cc8:	8d a1       	ldd	r24, Y+37	; 0x25
    5cca:	9e a1       	ldd	r25, Y+38	; 0x26
    5ccc:	20 e0       	ldi	r18, 0x00	; 0
    5cce:	30 e0       	ldi	r19, 0x00	; 0
    5cd0:	40 e8       	ldi	r20, 0x80	; 128
    5cd2:	5f e3       	ldi	r21, 0x3F	; 63
    5cd4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5cd8:	88 23       	and	r24, r24
    5cda:	2c f4       	brge	.+10     	; 0x5ce6 <HKPD_GetPressedButton+0x1612>
		__ticks = 1;
    5cdc:	81 e0       	ldi	r24, 0x01	; 1
    5cde:	90 e0       	ldi	r25, 0x00	; 0
    5ce0:	9a a3       	std	Y+34, r25	; 0x22
    5ce2:	89 a3       	std	Y+33, r24	; 0x21
    5ce4:	3f c0       	rjmp	.+126    	; 0x5d64 <HKPD_GetPressedButton+0x1690>
	else if (__tmp > 65535)
    5ce6:	6b a1       	ldd	r22, Y+35	; 0x23
    5ce8:	7c a1       	ldd	r23, Y+36	; 0x24
    5cea:	8d a1       	ldd	r24, Y+37	; 0x25
    5cec:	9e a1       	ldd	r25, Y+38	; 0x26
    5cee:	20 e0       	ldi	r18, 0x00	; 0
    5cf0:	3f ef       	ldi	r19, 0xFF	; 255
    5cf2:	4f e7       	ldi	r20, 0x7F	; 127
    5cf4:	57 e4       	ldi	r21, 0x47	; 71
    5cf6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5cfa:	18 16       	cp	r1, r24
    5cfc:	4c f5       	brge	.+82     	; 0x5d50 <HKPD_GetPressedButton+0x167c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5cfe:	6f a1       	ldd	r22, Y+39	; 0x27
    5d00:	78 a5       	ldd	r23, Y+40	; 0x28
    5d02:	89 a5       	ldd	r24, Y+41	; 0x29
    5d04:	9a a5       	ldd	r25, Y+42	; 0x2a
    5d06:	20 e0       	ldi	r18, 0x00	; 0
    5d08:	30 e0       	ldi	r19, 0x00	; 0
    5d0a:	40 e2       	ldi	r20, 0x20	; 32
    5d0c:	51 e4       	ldi	r21, 0x41	; 65
    5d0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d12:	dc 01       	movw	r26, r24
    5d14:	cb 01       	movw	r24, r22
    5d16:	bc 01       	movw	r22, r24
    5d18:	cd 01       	movw	r24, r26
    5d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d1e:	dc 01       	movw	r26, r24
    5d20:	cb 01       	movw	r24, r22
    5d22:	9a a3       	std	Y+34, r25	; 0x22
    5d24:	89 a3       	std	Y+33, r24	; 0x21
    5d26:	0f c0       	rjmp	.+30     	; 0x5d46 <HKPD_GetPressedButton+0x1672>
    5d28:	80 e9       	ldi	r24, 0x90	; 144
    5d2a:	91 e0       	ldi	r25, 0x01	; 1
    5d2c:	98 a3       	std	Y+32, r25	; 0x20
    5d2e:	8f 8f       	std	Y+31, r24	; 0x1f
    5d30:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5d32:	98 a1       	ldd	r25, Y+32	; 0x20
    5d34:	01 97       	sbiw	r24, 0x01	; 1
    5d36:	f1 f7       	brne	.-4      	; 0x5d34 <HKPD_GetPressedButton+0x1660>
    5d38:	98 a3       	std	Y+32, r25	; 0x20
    5d3a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d3c:	89 a1       	ldd	r24, Y+33	; 0x21
    5d3e:	9a a1       	ldd	r25, Y+34	; 0x22
    5d40:	01 97       	sbiw	r24, 0x01	; 1
    5d42:	9a a3       	std	Y+34, r25	; 0x22
    5d44:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d46:	89 a1       	ldd	r24, Y+33	; 0x21
    5d48:	9a a1       	ldd	r25, Y+34	; 0x22
    5d4a:	00 97       	sbiw	r24, 0x00	; 0
    5d4c:	69 f7       	brne	.-38     	; 0x5d28 <HKPD_GetPressedButton+0x1654>
    5d4e:	14 c0       	rjmp	.+40     	; 0x5d78 <HKPD_GetPressedButton+0x16a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d50:	6b a1       	ldd	r22, Y+35	; 0x23
    5d52:	7c a1       	ldd	r23, Y+36	; 0x24
    5d54:	8d a1       	ldd	r24, Y+37	; 0x25
    5d56:	9e a1       	ldd	r25, Y+38	; 0x26
    5d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d5c:	dc 01       	movw	r26, r24
    5d5e:	cb 01       	movw	r24, r22
    5d60:	9a a3       	std	Y+34, r25	; 0x22
    5d62:	89 a3       	std	Y+33, r24	; 0x21
    5d64:	89 a1       	ldd	r24, Y+33	; 0x21
    5d66:	9a a1       	ldd	r25, Y+34	; 0x22
    5d68:	9e 8f       	std	Y+30, r25	; 0x1e
    5d6a:	8d 8f       	std	Y+29, r24	; 0x1d
    5d6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5d6e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5d70:	01 97       	sbiw	r24, 0x01	; 1
    5d72:	f1 f7       	brne	.-4      	; 0x5d70 <HKPD_GetPressedButton+0x169c>
    5d74:	9e 8f       	std	Y+30, r25	; 0x1e
    5d76:	8d 8f       	std	Y+29, r24	; 0x1d
    5d78:	80 e0       	ldi	r24, 0x00	; 0
    5d7a:	66 e0       	ldi	r22, 0x06	; 6
    5d7c:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    5d80:	88 23       	and	r24, r24
    5d82:	a1 f4       	brne	.+40     	; 0x5dac <HKPD_GetPressedButton+0x16d8>
    5d84:	80 e0       	ldi	r24, 0x00	; 0
    5d86:	66 e0       	ldi	r22, 0x06	; 6
    5d88:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    5d8c:	88 23       	and	r24, r24
    5d8e:	d1 f3       	breq	.-12     	; 0x5d84 <HKPD_GetPressedButton+0x16b0>
    5d90:	82 e0       	ldi	r24, 0x02	; 2
    5d92:	67 e0       	ldi	r22, 0x07	; 7
    5d94:	41 e0       	ldi	r20, 0x01	; 1
    5d96:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
    5d9a:	fe 01       	movw	r30, r28
    5d9c:	ef 51       	subi	r30, 0x1F	; 31
    5d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    5da0:	de 01       	movw	r26, r28
    5da2:	ae 51       	subi	r26, 0x1E	; 30
    5da4:	bf 4f       	sbci	r27, 0xFF	; 255
    5da6:	1d 96       	adiw	r26, 0x0d	; 13
    5da8:	8c 91       	ld	r24, X
    5daa:	80 83       	st	Z, r24
		if(MDIO_Return_PINValue(MDIO_PORTA,PIN7) == 0) { _delay_ms(30);if(MDIO_Return_PINValue(MDIO_PORTA,PIN7) == 0) {while(MDIO_Return_PINValue(MDIO_PORTA,PIN7) == 0);MDIO_Set_PIN_VALUE(MDIO_PORTC,PIN7,PIN_HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [3][2];}}
    5dac:	80 e0       	ldi	r24, 0x00	; 0
    5dae:	67 e0       	ldi	r22, 0x07	; 7
    5db0:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    5db4:	88 23       	and	r24, r24
    5db6:	09 f0       	breq	.+2      	; 0x5dba <HKPD_GetPressedButton+0x16e6>
    5db8:	8c c0       	rjmp	.+280    	; 0x5ed2 <HKPD_GetPressedButton+0x17fe>
    5dba:	80 e0       	ldi	r24, 0x00	; 0
    5dbc:	90 e0       	ldi	r25, 0x00	; 0
    5dbe:	a0 ef       	ldi	r26, 0xF0	; 240
    5dc0:	b1 e4       	ldi	r27, 0x41	; 65
    5dc2:	89 8f       	std	Y+25, r24	; 0x19
    5dc4:	9a 8f       	std	Y+26, r25	; 0x1a
    5dc6:	ab 8f       	std	Y+27, r26	; 0x1b
    5dc8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5dca:	69 8d       	ldd	r22, Y+25	; 0x19
    5dcc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5dce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5dd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5dd2:	20 e0       	ldi	r18, 0x00	; 0
    5dd4:	30 e0       	ldi	r19, 0x00	; 0
    5dd6:	4a e7       	ldi	r20, 0x7A	; 122
    5dd8:	55 e4       	ldi	r21, 0x45	; 69
    5dda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5dde:	dc 01       	movw	r26, r24
    5de0:	cb 01       	movw	r24, r22
    5de2:	8d 8b       	std	Y+21, r24	; 0x15
    5de4:	9e 8b       	std	Y+22, r25	; 0x16
    5de6:	af 8b       	std	Y+23, r26	; 0x17
    5de8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5dea:	6d 89       	ldd	r22, Y+21	; 0x15
    5dec:	7e 89       	ldd	r23, Y+22	; 0x16
    5dee:	8f 89       	ldd	r24, Y+23	; 0x17
    5df0:	98 8d       	ldd	r25, Y+24	; 0x18
    5df2:	20 e0       	ldi	r18, 0x00	; 0
    5df4:	30 e0       	ldi	r19, 0x00	; 0
    5df6:	40 e8       	ldi	r20, 0x80	; 128
    5df8:	5f e3       	ldi	r21, 0x3F	; 63
    5dfa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5dfe:	88 23       	and	r24, r24
    5e00:	2c f4       	brge	.+10     	; 0x5e0c <HKPD_GetPressedButton+0x1738>
		__ticks = 1;
    5e02:	81 e0       	ldi	r24, 0x01	; 1
    5e04:	90 e0       	ldi	r25, 0x00	; 0
    5e06:	9c 8b       	std	Y+20, r25	; 0x14
    5e08:	8b 8b       	std	Y+19, r24	; 0x13
    5e0a:	3f c0       	rjmp	.+126    	; 0x5e8a <HKPD_GetPressedButton+0x17b6>
	else if (__tmp > 65535)
    5e0c:	6d 89       	ldd	r22, Y+21	; 0x15
    5e0e:	7e 89       	ldd	r23, Y+22	; 0x16
    5e10:	8f 89       	ldd	r24, Y+23	; 0x17
    5e12:	98 8d       	ldd	r25, Y+24	; 0x18
    5e14:	20 e0       	ldi	r18, 0x00	; 0
    5e16:	3f ef       	ldi	r19, 0xFF	; 255
    5e18:	4f e7       	ldi	r20, 0x7F	; 127
    5e1a:	57 e4       	ldi	r21, 0x47	; 71
    5e1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5e20:	18 16       	cp	r1, r24
    5e22:	4c f5       	brge	.+82     	; 0x5e76 <HKPD_GetPressedButton+0x17a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e24:	69 8d       	ldd	r22, Y+25	; 0x19
    5e26:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5e28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5e2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5e2c:	20 e0       	ldi	r18, 0x00	; 0
    5e2e:	30 e0       	ldi	r19, 0x00	; 0
    5e30:	40 e2       	ldi	r20, 0x20	; 32
    5e32:	51 e4       	ldi	r21, 0x41	; 65
    5e34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e38:	dc 01       	movw	r26, r24
    5e3a:	cb 01       	movw	r24, r22
    5e3c:	bc 01       	movw	r22, r24
    5e3e:	cd 01       	movw	r24, r26
    5e40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e44:	dc 01       	movw	r26, r24
    5e46:	cb 01       	movw	r24, r22
    5e48:	9c 8b       	std	Y+20, r25	; 0x14
    5e4a:	8b 8b       	std	Y+19, r24	; 0x13
    5e4c:	0f c0       	rjmp	.+30     	; 0x5e6c <HKPD_GetPressedButton+0x1798>
    5e4e:	80 e9       	ldi	r24, 0x90	; 144
    5e50:	91 e0       	ldi	r25, 0x01	; 1
    5e52:	9a 8b       	std	Y+18, r25	; 0x12
    5e54:	89 8b       	std	Y+17, r24	; 0x11
    5e56:	89 89       	ldd	r24, Y+17	; 0x11
    5e58:	9a 89       	ldd	r25, Y+18	; 0x12
    5e5a:	01 97       	sbiw	r24, 0x01	; 1
    5e5c:	f1 f7       	brne	.-4      	; 0x5e5a <HKPD_GetPressedButton+0x1786>
    5e5e:	9a 8b       	std	Y+18, r25	; 0x12
    5e60:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e62:	8b 89       	ldd	r24, Y+19	; 0x13
    5e64:	9c 89       	ldd	r25, Y+20	; 0x14
    5e66:	01 97       	sbiw	r24, 0x01	; 1
    5e68:	9c 8b       	std	Y+20, r25	; 0x14
    5e6a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e6c:	8b 89       	ldd	r24, Y+19	; 0x13
    5e6e:	9c 89       	ldd	r25, Y+20	; 0x14
    5e70:	00 97       	sbiw	r24, 0x00	; 0
    5e72:	69 f7       	brne	.-38     	; 0x5e4e <HKPD_GetPressedButton+0x177a>
    5e74:	14 c0       	rjmp	.+40     	; 0x5e9e <HKPD_GetPressedButton+0x17ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e76:	6d 89       	ldd	r22, Y+21	; 0x15
    5e78:	7e 89       	ldd	r23, Y+22	; 0x16
    5e7a:	8f 89       	ldd	r24, Y+23	; 0x17
    5e7c:	98 8d       	ldd	r25, Y+24	; 0x18
    5e7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e82:	dc 01       	movw	r26, r24
    5e84:	cb 01       	movw	r24, r22
    5e86:	9c 8b       	std	Y+20, r25	; 0x14
    5e88:	8b 8b       	std	Y+19, r24	; 0x13
    5e8a:	8b 89       	ldd	r24, Y+19	; 0x13
    5e8c:	9c 89       	ldd	r25, Y+20	; 0x14
    5e8e:	98 8b       	std	Y+16, r25	; 0x10
    5e90:	8f 87       	std	Y+15, r24	; 0x0f
    5e92:	8f 85       	ldd	r24, Y+15	; 0x0f
    5e94:	98 89       	ldd	r25, Y+16	; 0x10
    5e96:	01 97       	sbiw	r24, 0x01	; 1
    5e98:	f1 f7       	brne	.-4      	; 0x5e96 <HKPD_GetPressedButton+0x17c2>
    5e9a:	98 8b       	std	Y+16, r25	; 0x10
    5e9c:	8f 87       	std	Y+15, r24	; 0x0f
    5e9e:	80 e0       	ldi	r24, 0x00	; 0
    5ea0:	67 e0       	ldi	r22, 0x07	; 7
    5ea2:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    5ea6:	88 23       	and	r24, r24
    5ea8:	a1 f4       	brne	.+40     	; 0x5ed2 <HKPD_GetPressedButton+0x17fe>
    5eaa:	80 e0       	ldi	r24, 0x00	; 0
    5eac:	67 e0       	ldi	r22, 0x07	; 7
    5eae:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    5eb2:	88 23       	and	r24, r24
    5eb4:	d1 f3       	breq	.-12     	; 0x5eaa <HKPD_GetPressedButton+0x17d6>
    5eb6:	82 e0       	ldi	r24, 0x02	; 2
    5eb8:	67 e0       	ldi	r22, 0x07	; 7
    5eba:	41 e0       	ldi	r20, 0x01	; 1
    5ebc:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
    5ec0:	fe 01       	movw	r30, r28
    5ec2:	ef 51       	subi	r30, 0x1F	; 31
    5ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    5ec6:	de 01       	movw	r26, r28
    5ec8:	ae 51       	subi	r26, 0x1E	; 30
    5eca:	bf 4f       	sbci	r27, 0xFF	; 255
    5ecc:	1e 96       	adiw	r26, 0x0e	; 14
    5ece:	8c 91       	ld	r24, X
    5ed0:	80 83       	st	Z, r24
		if(MDIO_Return_PINValue(MDIO_PORTB,PIN3) == 0) { _delay_ms(30);if(MDIO_Return_PINValue(MDIO_PORTB,PIN3) == 0) {while(MDIO_Return_PINValue(MDIO_PORTB,PIN3) == 0);MDIO_Set_PIN_VALUE(MDIO_PORTC,PIN7,PIN_HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [3][3];}}
    5ed2:	81 e0       	ldi	r24, 0x01	; 1
    5ed4:	63 e0       	ldi	r22, 0x03	; 3
    5ed6:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    5eda:	88 23       	and	r24, r24
    5edc:	09 f0       	breq	.+2      	; 0x5ee0 <HKPD_GetPressedButton+0x180c>
    5ede:	8c c0       	rjmp	.+280    	; 0x5ff8 <HKPD_GetPressedButton+0x1924>
    5ee0:	80 e0       	ldi	r24, 0x00	; 0
    5ee2:	90 e0       	ldi	r25, 0x00	; 0
    5ee4:	a0 ef       	ldi	r26, 0xF0	; 240
    5ee6:	b1 e4       	ldi	r27, 0x41	; 65
    5ee8:	8b 87       	std	Y+11, r24	; 0x0b
    5eea:	9c 87       	std	Y+12, r25	; 0x0c
    5eec:	ad 87       	std	Y+13, r26	; 0x0d
    5eee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ef0:	6b 85       	ldd	r22, Y+11	; 0x0b
    5ef2:	7c 85       	ldd	r23, Y+12	; 0x0c
    5ef4:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ef6:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ef8:	20 e0       	ldi	r18, 0x00	; 0
    5efa:	30 e0       	ldi	r19, 0x00	; 0
    5efc:	4a e7       	ldi	r20, 0x7A	; 122
    5efe:	55 e4       	ldi	r21, 0x45	; 69
    5f00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f04:	dc 01       	movw	r26, r24
    5f06:	cb 01       	movw	r24, r22
    5f08:	8f 83       	std	Y+7, r24	; 0x07
    5f0a:	98 87       	std	Y+8, r25	; 0x08
    5f0c:	a9 87       	std	Y+9, r26	; 0x09
    5f0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5f10:	6f 81       	ldd	r22, Y+7	; 0x07
    5f12:	78 85       	ldd	r23, Y+8	; 0x08
    5f14:	89 85       	ldd	r24, Y+9	; 0x09
    5f16:	9a 85       	ldd	r25, Y+10	; 0x0a
    5f18:	20 e0       	ldi	r18, 0x00	; 0
    5f1a:	30 e0       	ldi	r19, 0x00	; 0
    5f1c:	40 e8       	ldi	r20, 0x80	; 128
    5f1e:	5f e3       	ldi	r21, 0x3F	; 63
    5f20:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5f24:	88 23       	and	r24, r24
    5f26:	2c f4       	brge	.+10     	; 0x5f32 <HKPD_GetPressedButton+0x185e>
		__ticks = 1;
    5f28:	81 e0       	ldi	r24, 0x01	; 1
    5f2a:	90 e0       	ldi	r25, 0x00	; 0
    5f2c:	9e 83       	std	Y+6, r25	; 0x06
    5f2e:	8d 83       	std	Y+5, r24	; 0x05
    5f30:	3f c0       	rjmp	.+126    	; 0x5fb0 <HKPD_GetPressedButton+0x18dc>
	else if (__tmp > 65535)
    5f32:	6f 81       	ldd	r22, Y+7	; 0x07
    5f34:	78 85       	ldd	r23, Y+8	; 0x08
    5f36:	89 85       	ldd	r24, Y+9	; 0x09
    5f38:	9a 85       	ldd	r25, Y+10	; 0x0a
    5f3a:	20 e0       	ldi	r18, 0x00	; 0
    5f3c:	3f ef       	ldi	r19, 0xFF	; 255
    5f3e:	4f e7       	ldi	r20, 0x7F	; 127
    5f40:	57 e4       	ldi	r21, 0x47	; 71
    5f42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5f46:	18 16       	cp	r1, r24
    5f48:	4c f5       	brge	.+82     	; 0x5f9c <HKPD_GetPressedButton+0x18c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    5f4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    5f4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5f50:	9e 85       	ldd	r25, Y+14	; 0x0e
    5f52:	20 e0       	ldi	r18, 0x00	; 0
    5f54:	30 e0       	ldi	r19, 0x00	; 0
    5f56:	40 e2       	ldi	r20, 0x20	; 32
    5f58:	51 e4       	ldi	r21, 0x41	; 65
    5f5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f5e:	dc 01       	movw	r26, r24
    5f60:	cb 01       	movw	r24, r22
    5f62:	bc 01       	movw	r22, r24
    5f64:	cd 01       	movw	r24, r26
    5f66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f6a:	dc 01       	movw	r26, r24
    5f6c:	cb 01       	movw	r24, r22
    5f6e:	9e 83       	std	Y+6, r25	; 0x06
    5f70:	8d 83       	std	Y+5, r24	; 0x05
    5f72:	0f c0       	rjmp	.+30     	; 0x5f92 <HKPD_GetPressedButton+0x18be>
    5f74:	80 e9       	ldi	r24, 0x90	; 144
    5f76:	91 e0       	ldi	r25, 0x01	; 1
    5f78:	9c 83       	std	Y+4, r25	; 0x04
    5f7a:	8b 83       	std	Y+3, r24	; 0x03
    5f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    5f7e:	9c 81       	ldd	r25, Y+4	; 0x04
    5f80:	01 97       	sbiw	r24, 0x01	; 1
    5f82:	f1 f7       	brne	.-4      	; 0x5f80 <HKPD_GetPressedButton+0x18ac>
    5f84:	9c 83       	std	Y+4, r25	; 0x04
    5f86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f88:	8d 81       	ldd	r24, Y+5	; 0x05
    5f8a:	9e 81       	ldd	r25, Y+6	; 0x06
    5f8c:	01 97       	sbiw	r24, 0x01	; 1
    5f8e:	9e 83       	std	Y+6, r25	; 0x06
    5f90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f92:	8d 81       	ldd	r24, Y+5	; 0x05
    5f94:	9e 81       	ldd	r25, Y+6	; 0x06
    5f96:	00 97       	sbiw	r24, 0x00	; 0
    5f98:	69 f7       	brne	.-38     	; 0x5f74 <HKPD_GetPressedButton+0x18a0>
    5f9a:	14 c0       	rjmp	.+40     	; 0x5fc4 <HKPD_GetPressedButton+0x18f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f9c:	6f 81       	ldd	r22, Y+7	; 0x07
    5f9e:	78 85       	ldd	r23, Y+8	; 0x08
    5fa0:	89 85       	ldd	r24, Y+9	; 0x09
    5fa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    5fa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5fa8:	dc 01       	movw	r26, r24
    5faa:	cb 01       	movw	r24, r22
    5fac:	9e 83       	std	Y+6, r25	; 0x06
    5fae:	8d 83       	std	Y+5, r24	; 0x05
    5fb0:	8d 81       	ldd	r24, Y+5	; 0x05
    5fb2:	9e 81       	ldd	r25, Y+6	; 0x06
    5fb4:	9a 83       	std	Y+2, r25	; 0x02
    5fb6:	89 83       	std	Y+1, r24	; 0x01
    5fb8:	89 81       	ldd	r24, Y+1	; 0x01
    5fba:	9a 81       	ldd	r25, Y+2	; 0x02
    5fbc:	01 97       	sbiw	r24, 0x01	; 1
    5fbe:	f1 f7       	brne	.-4      	; 0x5fbc <HKPD_GetPressedButton+0x18e8>
    5fc0:	9a 83       	std	Y+2, r25	; 0x02
    5fc2:	89 83       	std	Y+1, r24	; 0x01
    5fc4:	81 e0       	ldi	r24, 0x01	; 1
    5fc6:	63 e0       	ldi	r22, 0x03	; 3
    5fc8:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    5fcc:	88 23       	and	r24, r24
    5fce:	a1 f4       	brne	.+40     	; 0x5ff8 <HKPD_GetPressedButton+0x1924>
    5fd0:	81 e0       	ldi	r24, 0x01	; 1
    5fd2:	63 e0       	ldi	r22, 0x03	; 3
    5fd4:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <MDIO_Return_PINValue>
    5fd8:	88 23       	and	r24, r24
    5fda:	d1 f3       	breq	.-12     	; 0x5fd0 <HKPD_GetPressedButton+0x18fc>
    5fdc:	82 e0       	ldi	r24, 0x02	; 2
    5fde:	67 e0       	ldi	r22, 0x07	; 7
    5fe0:	41 e0       	ldi	r20, 0x01	; 1
    5fe2:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
    5fe6:	fe 01       	movw	r30, r28
    5fe8:	ef 51       	subi	r30, 0x1F	; 31
    5fea:	ff 4f       	sbci	r31, 0xFF	; 255
    5fec:	de 01       	movw	r26, r28
    5fee:	ae 51       	subi	r26, 0x1E	; 30
    5ff0:	bf 4f       	sbci	r27, 0xFF	; 255
    5ff2:	1f 96       	adiw	r26, 0x0f	; 15
    5ff4:	8c 91       	ld	r24, X
    5ff6:	80 83       	st	Z, r24

		MDIO_Set_PIN_VALUE(MDIO_PORTC,PIN7,PIN_HIGH);
    5ff8:	82 e0       	ldi	r24, 0x02	; 2
    5ffa:	67 e0       	ldi	r22, 0x07	; 7
    5ffc:	41 e0       	ldi	r20, 0x01	; 1
    5ffe:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>

		return Local_u8_KeypadReading ;
    6002:	fe 01       	movw	r30, r28
    6004:	ef 51       	subi	r30, 0x1F	; 31
    6006:	ff 4f       	sbci	r31, 0xFF	; 255
    6008:	80 81       	ld	r24, Z





}
    600a:	ca 50       	subi	r28, 0x0A	; 10
    600c:	df 4f       	sbci	r29, 0xFF	; 255
    600e:	0f b6       	in	r0, 0x3f	; 63
    6010:	f8 94       	cli
    6012:	de bf       	out	0x3e, r29	; 62
    6014:	0f be       	out	0x3f, r0	; 63
    6016:	cd bf       	out	0x3d, r28	; 61
    6018:	cf 91       	pop	r28
    601a:	df 91       	pop	r29
    601c:	1f 91       	pop	r17
    601e:	0f 91       	pop	r16
    6020:	08 95       	ret

00006022 <HHC05_Init>:
 *  Created on: Dec 8, 2022
 *      Author: Ismail
 */
#include"HC05_Interface.h"

void HHC05_Init(void){
    6022:	df 93       	push	r29
    6024:	cf 93       	push	r28
    6026:	cd b7       	in	r28, 0x3d	; 61
    6028:	de b7       	in	r29, 0x3e	; 62
	MUSART_Init();
    602a:	0e 94 47 07 	call	0xe8e	; 0xe8e <MUSART_Init>
}
    602e:	cf 91       	pop	r28
    6030:	df 91       	pop	r29
    6032:	08 95       	ret

00006034 <HHC05_SendChar>:
void HHC05_SendChar(u8 Copy_u8Data){
    6034:	df 93       	push	r29
    6036:	cf 93       	push	r28
    6038:	0f 92       	push	r0
    603a:	cd b7       	in	r28, 0x3d	; 61
    603c:	de b7       	in	r29, 0x3e	; 62
    603e:	89 83       	std	Y+1, r24	; 0x01
	MUSART_SendChar(Copy_u8Data);
    6040:	89 81       	ldd	r24, Y+1	; 0x01
    6042:	88 2f       	mov	r24, r24
    6044:	90 e0       	ldi	r25, 0x00	; 0
    6046:	0e 94 8d 07 	call	0xf1a	; 0xf1a <MUSART_SendChar>
}
    604a:	0f 90       	pop	r0
    604c:	cf 91       	pop	r28
    604e:	df 91       	pop	r29
    6050:	08 95       	ret

00006052 <HHC05_SendString>:
void HHC05_SendString(u8 *Copy_u8PtrToData){
    6052:	df 93       	push	r29
    6054:	cf 93       	push	r28
    6056:	00 d0       	rcall	.+0      	; 0x6058 <HHC05_SendString+0x6>
    6058:	cd b7       	in	r28, 0x3d	; 61
    605a:	de b7       	in	r29, 0x3e	; 62
    605c:	9a 83       	std	Y+2, r25	; 0x02
    605e:	89 83       	std	Y+1, r24	; 0x01
MUSART_SendString(Copy_u8PtrToData);
    6060:	89 81       	ldd	r24, Y+1	; 0x01
    6062:	9a 81       	ldd	r25, Y+2	; 0x02
    6064:	0e 94 b6 07 	call	0xf6c	; 0xf6c <MUSART_SendString>
MUSART_SendChar(13);
    6068:	8d e0       	ldi	r24, 0x0D	; 13
    606a:	90 e0       	ldi	r25, 0x00	; 0
    606c:	0e 94 8d 07 	call	0xf1a	; 0xf1a <MUSART_SendChar>
}
    6070:	0f 90       	pop	r0
    6072:	0f 90       	pop	r0
    6074:	cf 91       	pop	r28
    6076:	df 91       	pop	r29
    6078:	08 95       	ret

0000607a <HHC05_RecieveData>:
u8 HHC05_RecieveData(void){
    607a:	df 93       	push	r29
    607c:	cf 93       	push	r28
    607e:	0f 92       	push	r0
    6080:	cd b7       	in	r28, 0x3d	; 61
    6082:	de b7       	in	r29, 0x3e	; 62

	u8 Local_u8_Data = 0;
    6084:	19 82       	std	Y+1, r1	; 0x01
	Local_u8_Data = M_Uart_Read();
    6086:	0e 94 a2 08 	call	0x1144	; 0x1144 <M_Uart_Read>
    608a:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8_Data;
    608c:	89 81       	ldd	r24, Y+1	; 0x01

}
    608e:	0f 90       	pop	r0
    6090:	cf 91       	pop	r28
    6092:	df 91       	pop	r29
    6094:	08 95       	ret

00006096 <HEEPROM_ReadByte>:
#include "HEEPROM_Private.h"
#include <util/delay.h>
#include "../../MCAL/MTWI/MTWI_Interface.h"

u8 HEEPROM_ReadByte(u8 Copy_u8BlockNo, u8 Copy_u8ByteAddress)
{
    6096:	df 93       	push	r29
    6098:	cf 93       	push	r28
    609a:	00 d0       	rcall	.+0      	; 0x609c <HEEPROM_ReadByte+0x6>
    609c:	00 d0       	rcall	.+0      	; 0x609e <HEEPROM_ReadByte+0x8>
    609e:	cd b7       	in	r28, 0x3d	; 61
    60a0:	de b7       	in	r29, 0x3e	; 62
    60a2:	8b 83       	std	Y+3, r24	; 0x03
    60a4:	6c 83       	std	Y+4, r22	; 0x04
	u8 Loc_ReturnedValue;
		u8 Loc_u8SlaveAdd;

		Loc_u8SlaveAdd=HEEPROM_FIXED_SLAVE_ADDRESS|(Copy_u8BlockNo);
    60a6:	8b 81       	ldd	r24, Y+3	; 0x03
    60a8:	80 65       	ori	r24, 0x50	; 80
    60aa:	89 83       	std	Y+1, r24	; 0x01

		/*Send Start Condition*/
		MTWI_SendStartCondition();
    60ac:	0e 94 b6 09 	call	0x136c	; 0x136c <MTWI_SendStartCondition>

		MTWI_SendSlaveAddress_WithWrite(Loc_u8SlaveAdd);
    60b0:	89 81       	ldd	r24, Y+1	; 0x01
    60b2:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <MTWI_SendSlaveAddress_WithWrite>

		/*Send the Remainder Byte Address as a Data Byte */
		MTWI_MasterSlaveWriteData(Copy_u8ByteAddress);
    60b6:	8c 81       	ldd	r24, Y+4	; 0x04
    60b8:	0e 94 b5 0b 	call	0x176a	; 0x176a <MTWI_MasterSlaveWriteData>

		/*Send Repeated Start*/
		MTWI_SendRepeatedStartCondition();
    60bc:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <MTWI_SendRepeatedStartCondition>

		/*No Need to Add one as LSB Because Next Function does this*/
		//Loc_u8SlaveAdd|=0x01;

		/*Send Slave Address with Read */
		MTWI_SendSlaveAddress_WithRead(Loc_u8SlaveAdd);
    60c0:	89 81       	ldd	r24, Y+1	; 0x01
    60c2:	0e 94 06 0b 	call	0x160c	; 0x160c <MTWI_SendSlaveAddress_WithRead>

		/*Read Data */
		Loc_ReturnedValue=MTWI_ReadByteNoAck();
    60c6:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <MTWI_ReadByteNoAck>
    60ca:	8a 83       	std	Y+2, r24	; 0x02

		MTWI_SendStopCondition();
    60cc:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <MTWI_SendStopCondition>

		return Loc_ReturnedValue;
    60d0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    60d2:	0f 90       	pop	r0
    60d4:	0f 90       	pop	r0
    60d6:	0f 90       	pop	r0
    60d8:	0f 90       	pop	r0
    60da:	cf 91       	pop	r28
    60dc:	df 91       	pop	r29
    60de:	08 95       	ret

000060e0 <HEEPROM_WriteByte>:


void HEEPROM_WriteByte(u8 Copy_u8Data,BlockNumber Copy_u8BlockNo,u8 Copy_u8ByteAddress){
    60e0:	df 93       	push	r29
    60e2:	cf 93       	push	r28
    60e4:	cd b7       	in	r28, 0x3d	; 61
    60e6:	de b7       	in	r29, 0x3e	; 62
    60e8:	62 97       	sbiw	r28, 0x12	; 18
    60ea:	0f b6       	in	r0, 0x3f	; 63
    60ec:	f8 94       	cli
    60ee:	de bf       	out	0x3e, r29	; 62
    60f0:	0f be       	out	0x3f, r0	; 63
    60f2:	cd bf       	out	0x3d, r28	; 61
    60f4:	88 8b       	std	Y+16, r24	; 0x10
    60f6:	69 8b       	std	Y+17, r22	; 0x11
    60f8:	4a 8b       	std	Y+18, r20	; 0x12
	u8 Loc_u8SlaveAdd;

		Loc_u8SlaveAdd=HEEPROM_FIXED_SLAVE_ADDRESS|(Copy_u8BlockNo);
    60fa:	89 89       	ldd	r24, Y+17	; 0x11
    60fc:	80 65       	ori	r24, 0x50	; 80
    60fe:	8f 87       	std	Y+15, r24	; 0x0f

		/*Send Start Condition*/
		MTWI_SendStartCondition();
    6100:	0e 94 b6 09 	call	0x136c	; 0x136c <MTWI_SendStartCondition>


		MTWI_SendSlaveAddress_WithWrite(Loc_u8SlaveAdd);
    6104:	8f 85       	ldd	r24, Y+15	; 0x0f
    6106:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <MTWI_SendSlaveAddress_WithWrite>

		/*Send the Remainder Byte Address as a Data Byte */
		MTWI_MasterSlaveWriteData(Copy_u8ByteAddress);
    610a:	8a 89       	ldd	r24, Y+18	; 0x12
    610c:	0e 94 b5 0b 	call	0x176a	; 0x176a <MTWI_MasterSlaveWriteData>

		/*Send The real data needed to be saved at the previous Address*/
		MTWI_MasterSlaveWriteData(Copy_u8Data);
    6110:	88 89       	ldd	r24, Y+16	; 0x10
    6112:	0e 94 b5 0b 	call	0x176a	; 0x176a <MTWI_MasterSlaveWriteData>

		/*Send Stop Condition*/
		MTWI_SendStopCondition();
    6116:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <MTWI_SendStopCondition>
    611a:	80 e0       	ldi	r24, 0x00	; 0
    611c:	90 e0       	ldi	r25, 0x00	; 0
    611e:	a8 ec       	ldi	r26, 0xC8	; 200
    6120:	b2 e4       	ldi	r27, 0x42	; 66
    6122:	8b 87       	std	Y+11, r24	; 0x0b
    6124:	9c 87       	std	Y+12, r25	; 0x0c
    6126:	ad 87       	std	Y+13, r26	; 0x0d
    6128:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    612a:	6b 85       	ldd	r22, Y+11	; 0x0b
    612c:	7c 85       	ldd	r23, Y+12	; 0x0c
    612e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6130:	9e 85       	ldd	r25, Y+14	; 0x0e
    6132:	20 e0       	ldi	r18, 0x00	; 0
    6134:	30 e0       	ldi	r19, 0x00	; 0
    6136:	4a e7       	ldi	r20, 0x7A	; 122
    6138:	55 e4       	ldi	r21, 0x45	; 69
    613a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    613e:	dc 01       	movw	r26, r24
    6140:	cb 01       	movw	r24, r22
    6142:	8f 83       	std	Y+7, r24	; 0x07
    6144:	98 87       	std	Y+8, r25	; 0x08
    6146:	a9 87       	std	Y+9, r26	; 0x09
    6148:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    614a:	6f 81       	ldd	r22, Y+7	; 0x07
    614c:	78 85       	ldd	r23, Y+8	; 0x08
    614e:	89 85       	ldd	r24, Y+9	; 0x09
    6150:	9a 85       	ldd	r25, Y+10	; 0x0a
    6152:	20 e0       	ldi	r18, 0x00	; 0
    6154:	30 e0       	ldi	r19, 0x00	; 0
    6156:	40 e8       	ldi	r20, 0x80	; 128
    6158:	5f e3       	ldi	r21, 0x3F	; 63
    615a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    615e:	88 23       	and	r24, r24
    6160:	2c f4       	brge	.+10     	; 0x616c <HEEPROM_WriteByte+0x8c>
		__ticks = 1;
    6162:	81 e0       	ldi	r24, 0x01	; 1
    6164:	90 e0       	ldi	r25, 0x00	; 0
    6166:	9e 83       	std	Y+6, r25	; 0x06
    6168:	8d 83       	std	Y+5, r24	; 0x05
    616a:	3f c0       	rjmp	.+126    	; 0x61ea <HEEPROM_WriteByte+0x10a>
	else if (__tmp > 65535)
    616c:	6f 81       	ldd	r22, Y+7	; 0x07
    616e:	78 85       	ldd	r23, Y+8	; 0x08
    6170:	89 85       	ldd	r24, Y+9	; 0x09
    6172:	9a 85       	ldd	r25, Y+10	; 0x0a
    6174:	20 e0       	ldi	r18, 0x00	; 0
    6176:	3f ef       	ldi	r19, 0xFF	; 255
    6178:	4f e7       	ldi	r20, 0x7F	; 127
    617a:	57 e4       	ldi	r21, 0x47	; 71
    617c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6180:	18 16       	cp	r1, r24
    6182:	4c f5       	brge	.+82     	; 0x61d6 <HEEPROM_WriteByte+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6184:	6b 85       	ldd	r22, Y+11	; 0x0b
    6186:	7c 85       	ldd	r23, Y+12	; 0x0c
    6188:	8d 85       	ldd	r24, Y+13	; 0x0d
    618a:	9e 85       	ldd	r25, Y+14	; 0x0e
    618c:	20 e0       	ldi	r18, 0x00	; 0
    618e:	30 e0       	ldi	r19, 0x00	; 0
    6190:	40 e2       	ldi	r20, 0x20	; 32
    6192:	51 e4       	ldi	r21, 0x41	; 65
    6194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6198:	dc 01       	movw	r26, r24
    619a:	cb 01       	movw	r24, r22
    619c:	bc 01       	movw	r22, r24
    619e:	cd 01       	movw	r24, r26
    61a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    61a4:	dc 01       	movw	r26, r24
    61a6:	cb 01       	movw	r24, r22
    61a8:	9e 83       	std	Y+6, r25	; 0x06
    61aa:	8d 83       	std	Y+5, r24	; 0x05
    61ac:	0f c0       	rjmp	.+30     	; 0x61cc <HEEPROM_WriteByte+0xec>
    61ae:	80 e9       	ldi	r24, 0x90	; 144
    61b0:	91 e0       	ldi	r25, 0x01	; 1
    61b2:	9c 83       	std	Y+4, r25	; 0x04
    61b4:	8b 83       	std	Y+3, r24	; 0x03
    61b6:	8b 81       	ldd	r24, Y+3	; 0x03
    61b8:	9c 81       	ldd	r25, Y+4	; 0x04
    61ba:	01 97       	sbiw	r24, 0x01	; 1
    61bc:	f1 f7       	brne	.-4      	; 0x61ba <HEEPROM_WriteByte+0xda>
    61be:	9c 83       	std	Y+4, r25	; 0x04
    61c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    61c2:	8d 81       	ldd	r24, Y+5	; 0x05
    61c4:	9e 81       	ldd	r25, Y+6	; 0x06
    61c6:	01 97       	sbiw	r24, 0x01	; 1
    61c8:	9e 83       	std	Y+6, r25	; 0x06
    61ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    61cc:	8d 81       	ldd	r24, Y+5	; 0x05
    61ce:	9e 81       	ldd	r25, Y+6	; 0x06
    61d0:	00 97       	sbiw	r24, 0x00	; 0
    61d2:	69 f7       	brne	.-38     	; 0x61ae <HEEPROM_WriteByte+0xce>
    61d4:	14 c0       	rjmp	.+40     	; 0x61fe <HEEPROM_WriteByte+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    61d6:	6f 81       	ldd	r22, Y+7	; 0x07
    61d8:	78 85       	ldd	r23, Y+8	; 0x08
    61da:	89 85       	ldd	r24, Y+9	; 0x09
    61dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    61de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    61e2:	dc 01       	movw	r26, r24
    61e4:	cb 01       	movw	r24, r22
    61e6:	9e 83       	std	Y+6, r25	; 0x06
    61e8:	8d 83       	std	Y+5, r24	; 0x05
    61ea:	8d 81       	ldd	r24, Y+5	; 0x05
    61ec:	9e 81       	ldd	r25, Y+6	; 0x06
    61ee:	9a 83       	std	Y+2, r25	; 0x02
    61f0:	89 83       	std	Y+1, r24	; 0x01
    61f2:	89 81       	ldd	r24, Y+1	; 0x01
    61f4:	9a 81       	ldd	r25, Y+2	; 0x02
    61f6:	01 97       	sbiw	r24, 0x01	; 1
    61f8:	f1 f7       	brne	.-4      	; 0x61f6 <HEEPROM_WriteByte+0x116>
    61fa:	9a 83       	std	Y+2, r25	; 0x02
    61fc:	89 83       	std	Y+1, r24	; 0x01

		/*Delay until Write Cycle Finishes*/
		_delay_ms(100);

}
    61fe:	62 96       	adiw	r28, 0x12	; 18
    6200:	0f b6       	in	r0, 0x3f	; 63
    6202:	f8 94       	cli
    6204:	de bf       	out	0x3e, r29	; 62
    6206:	0f be       	out	0x3f, r0	; 63
    6208:	cd bf       	out	0x3d, r28	; 61
    620a:	cf 91       	pop	r28
    620c:	df 91       	pop	r29
    620e:	08 95       	ret

00006210 <HDimmerLightInit>:


#include "Dimmer_Interface.h"

void HDimmerLightInit(void)
{
    6210:	df 93       	push	r29
    6212:	cf 93       	push	r28
    6214:	cd b7       	in	r28, 0x3d	; 61
    6216:	de b7       	in	r29, 0x3e	; 62
 MPWM1Init();
    6218:	0e 94 b5 13 	call	0x276a	; 0x276a <MPWM1Init>
MPWM1SetDutyCycle(F_PWM);
    621c:	60 e0       	ldi	r22, 0x00	; 0
    621e:	70 e0       	ldi	r23, 0x00	; 0
    6220:	88 e4       	ldi	r24, 0x48	; 72
    6222:	92 e4       	ldi	r25, 0x42	; 66
    6224:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <MPWM1SetDutyCycle>
}
    6228:	cf 91       	pop	r28
    622a:	df 91       	pop	r29
    622c:	08 95       	ret

0000622e <HDimmerLightSetLightIntense>:



void HDimmerLightSetLightIntense(u16 Local_u8_Intensity)
{
    622e:	df 93       	push	r29
    6230:	cf 93       	push	r28
    6232:	00 d0       	rcall	.+0      	; 0x6234 <HDimmerLightSetLightIntense+0x6>
    6234:	cd b7       	in	r28, 0x3d	; 61
    6236:	de b7       	in	r29, 0x3e	; 62
    6238:	9a 83       	std	Y+2, r25	; 0x02
    623a:	89 83       	std	Y+1, r24	; 0x01
	HDimmerLightStart();
    623c:	0e 94 3a 31 	call	0x6274	; 0x6274 <HDimmerLightStart>

	MPWM1SetDutyCycle(Local_u8_Intensity);
    6240:	89 81       	ldd	r24, Y+1	; 0x01
    6242:	9a 81       	ldd	r25, Y+2	; 0x02
    6244:	cc 01       	movw	r24, r24
    6246:	a0 e0       	ldi	r26, 0x00	; 0
    6248:	b0 e0       	ldi	r27, 0x00	; 0
    624a:	bc 01       	movw	r22, r24
    624c:	cd 01       	movw	r24, r26
    624e:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    6252:	dc 01       	movw	r26, r24
    6254:	cb 01       	movw	r24, r22
    6256:	bc 01       	movw	r22, r24
    6258:	cd 01       	movw	r24, r26
    625a:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <MPWM1SetDutyCycle>
	if(Local_u8_Intensity==0){
    625e:	89 81       	ldd	r24, Y+1	; 0x01
    6260:	9a 81       	ldd	r25, Y+2	; 0x02
    6262:	00 97       	sbiw	r24, 0x00	; 0
    6264:	11 f4       	brne	.+4      	; 0x626a <HDimmerLightSetLightIntense+0x3c>
		HDimmerLightStop();
    6266:	0e 94 43 31 	call	0x6286	; 0x6286 <HDimmerLightStop>
	}
}
    626a:	0f 90       	pop	r0
    626c:	0f 90       	pop	r0
    626e:	cf 91       	pop	r28
    6270:	df 91       	pop	r29
    6272:	08 95       	ret

00006274 <HDimmerLightStart>:
void HDimmerLightStart(void)
{
    6274:	df 93       	push	r29
    6276:	cf 93       	push	r28
    6278:	cd b7       	in	r28, 0x3d	; 61
    627a:	de b7       	in	r29, 0x3e	; 62
	MPWM1Start();
    627c:	0e 94 17 14 	call	0x282e	; 0x282e <MPWM1Start>
}
    6280:	cf 91       	pop	r28
    6282:	df 91       	pop	r29
    6284:	08 95       	ret

00006286 <HDimmerLightStop>:
void HDimmerLightStop(void)
{
    6286:	df 93       	push	r29
    6288:	cf 93       	push	r28
    628a:	cd b7       	in	r28, 0x3d	; 61
    628c:	de b7       	in	r29, 0x3e	; 62
	MPWM1Stop();
    628e:	0e 94 33 14 	call	0x2866	; 0x2866 <MPWM1Stop>
}
    6292:	cf 91       	pop	r28
    6294:	df 91       	pop	r29
    6296:	08 95       	ret

00006298 <HDCMotorInit>:
#include "../HDCMotor/HDC_Motor_Interface.h"
#include "../HDCMotor/HDC_Motor_Private.h"


void HDCMotorInit()
{
    6298:	df 93       	push	r29
    629a:	cf 93       	push	r28
    629c:	cd b7       	in	r28, 0x3d	; 61
    629e:	de b7       	in	r29, 0x3e	; 62

	MDIO_Set_PIN_DIR(MDIO_PORTD,DC_MOTOR_PIN_0,PIN_OUTPUT);
    62a0:	83 e0       	ldi	r24, 0x03	; 3
    62a2:	66 e0       	ldi	r22, 0x06	; 6
    62a4:	41 e0       	ldi	r20, 0x01	; 1
    62a6:	0e 94 20 18 	call	0x3040	; 0x3040 <MDIO_Set_PIN_DIR>
	MDIO_Set_PIN_DIR(MDIO_PORTD,DC_MOTOR_PIN_1,PIN_OUTPUT);
    62aa:	83 e0       	ldi	r24, 0x03	; 3
    62ac:	67 e0       	ldi	r22, 0x07	; 7
    62ae:	41 e0       	ldi	r20, 0x01	; 1
    62b0:	0e 94 20 18 	call	0x3040	; 0x3040 <MDIO_Set_PIN_DIR>
	MPWM2Init();
    62b4:	0e 94 39 10 	call	0x2072	; 0x2072 <MPWM2Init>

}
    62b8:	cf 91       	pop	r28
    62ba:	df 91       	pop	r29
    62bc:	08 95       	ret

000062be <HDCMotorSetDirection>:


void HDCMotorSetDirection(u8 Local_u8_Direction)
{
    62be:	df 93       	push	r29
    62c0:	cf 93       	push	r28
    62c2:	00 d0       	rcall	.+0      	; 0x62c4 <HDCMotorSetDirection+0x6>
    62c4:	0f 92       	push	r0
    62c6:	cd b7       	in	r28, 0x3d	; 61
    62c8:	de b7       	in	r29, 0x3e	; 62
    62ca:	89 83       	std	Y+1, r24	; 0x01


	switch(Local_u8_Direction)
    62cc:	89 81       	ldd	r24, Y+1	; 0x01
    62ce:	28 2f       	mov	r18, r24
    62d0:	30 e0       	ldi	r19, 0x00	; 0
    62d2:	3b 83       	std	Y+3, r19	; 0x03
    62d4:	2a 83       	std	Y+2, r18	; 0x02
    62d6:	8a 81       	ldd	r24, Y+2	; 0x02
    62d8:	9b 81       	ldd	r25, Y+3	; 0x03
    62da:	00 97       	sbiw	r24, 0x00	; 0
    62dc:	31 f0       	breq	.+12     	; 0x62ea <HDCMotorSetDirection+0x2c>
    62de:	2a 81       	ldd	r18, Y+2	; 0x02
    62e0:	3b 81       	ldd	r19, Y+3	; 0x03
    62e2:	21 30       	cpi	r18, 0x01	; 1
    62e4:	31 05       	cpc	r19, r1
    62e6:	61 f0       	breq	.+24     	; 0x6300 <HDCMotorSetDirection+0x42>
    62e8:	15 c0       	rjmp	.+42     	; 0x6314 <HDCMotorSetDirection+0x56>
	{
		case CW:
			MDIO_Set_PIN_VALUE(MDIO_PORTD,DC_MOTOR_PIN_0,PIN_HIGH);
    62ea:	83 e0       	ldi	r24, 0x03	; 3
    62ec:	66 e0       	ldi	r22, 0x06	; 6
    62ee:	41 e0       	ldi	r20, 0x01	; 1
    62f0:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
			MDIO_Set_PIN_VALUE(MDIO_PORTD,DC_MOTOR_PIN_1,PIN_LOW);
    62f4:	83 e0       	ldi	r24, 0x03	; 3
    62f6:	67 e0       	ldi	r22, 0x07	; 7
    62f8:	40 e0       	ldi	r20, 0x00	; 0
    62fa:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
    62fe:	0a c0       	rjmp	.+20     	; 0x6314 <HDCMotorSetDirection+0x56>
			break;
		case ACW:
			MDIO_Set_PIN_VALUE(MDIO_PORTD,DC_MOTOR_PIN_1,PIN_HIGH);
    6300:	83 e0       	ldi	r24, 0x03	; 3
    6302:	67 e0       	ldi	r22, 0x07	; 7
    6304:	41 e0       	ldi	r20, 0x01	; 1
    6306:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
			MDIO_Set_PIN_VALUE(MDIO_PORTD,DC_MOTOR_PIN_0,PIN_LOW);
    630a:	83 e0       	ldi	r24, 0x03	; 3
    630c:	66 e0       	ldi	r22, 0x06	; 6
    630e:	40 e0       	ldi	r20, 0x00	; 0
    6310:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
			break;
			default:
			break;
	}
}
    6314:	0f 90       	pop	r0
    6316:	0f 90       	pop	r0
    6318:	0f 90       	pop	r0
    631a:	cf 91       	pop	r28
    631c:	df 91       	pop	r29
    631e:	08 95       	ret

00006320 <HDCMotorSpeed>:


void HDCMotorSpeed(f32 Local_f32_Speed)
{
    6320:	df 93       	push	r29
    6322:	cf 93       	push	r28
    6324:	00 d0       	rcall	.+0      	; 0x6326 <HDCMotorSpeed+0x6>
    6326:	00 d0       	rcall	.+0      	; 0x6328 <HDCMotorSpeed+0x8>
    6328:	cd b7       	in	r28, 0x3d	; 61
    632a:	de b7       	in	r29, 0x3e	; 62
    632c:	69 83       	std	Y+1, r22	; 0x01
    632e:	7a 83       	std	Y+2, r23	; 0x02
    6330:	8b 83       	std	Y+3, r24	; 0x03
    6332:	9c 83       	std	Y+4, r25	; 0x04
MPWM2SetDutyCycle(Local_f32_Speed);
    6334:	69 81       	ldd	r22, Y+1	; 0x01
    6336:	7a 81       	ldd	r23, Y+2	; 0x02
    6338:	8b 81       	ldd	r24, Y+3	; 0x03
    633a:	9c 81       	ldd	r25, Y+4	; 0x04
    633c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6340:	dc 01       	movw	r26, r24
    6342:	cb 01       	movw	r24, r22
    6344:	0e 94 61 10 	call	0x20c2	; 0x20c2 <MPWM2SetDutyCycle>
}
    6348:	0f 90       	pop	r0
    634a:	0f 90       	pop	r0
    634c:	0f 90       	pop	r0
    634e:	0f 90       	pop	r0
    6350:	cf 91       	pop	r28
    6352:	df 91       	pop	r29
    6354:	08 95       	ret

00006356 <HDCMotorStart>:


void HDCMotorStart()
{
    6356:	df 93       	push	r29
    6358:	cf 93       	push	r28
    635a:	cd b7       	in	r28, 0x3d	; 61
    635c:	de b7       	in	r29, 0x3e	; 62
	MPWM2Start();
    635e:	0e 94 a9 10 	call	0x2152	; 0x2152 <MPWM2Start>
}
    6362:	cf 91       	pop	r28
    6364:	df 91       	pop	r29
    6366:	08 95       	ret

00006368 <HDCMotorStop>:
void HDCMotorStop()
{
    6368:	df 93       	push	r29
    636a:	cf 93       	push	r28
    636c:	cd b7       	in	r28, 0x3d	; 61
    636e:	de b7       	in	r29, 0x3e	; 62
	MPWM2Stop();
    6370:	0e 94 b7 10 	call	0x216e	; 0x216e <MPWM2Stop>
}
    6374:	cf 91       	pop	r28
    6376:	df 91       	pop	r29
    6378:	08 95       	ret

0000637a <HCLCDInit4BitMode>:
#include "HCLCD_Interface.h"
#include "../../LIB/STD_TYPE.h"
#include "../../LIB/BIT_MATH.h"
#include "HCLCD_Config.h"
#include <util/delay.h>
void HCLCDInit4BitMode(){
    637a:	0f 93       	push	r16
    637c:	1f 93       	push	r17
    637e:	df 93       	push	r29
    6380:	cf 93       	push	r28
    6382:	cd b7       	in	r28, 0x3d	; 61
    6384:	de b7       	in	r29, 0x3e	; 62
    6386:	c6 54       	subi	r28, 0x46	; 70
    6388:	d0 40       	sbci	r29, 0x00	; 0
    638a:	0f b6       	in	r0, 0x3f	; 63
    638c:	f8 94       	cli
    638e:	de bf       	out	0x3e, r29	; 62
    6390:	0f be       	out	0x3f, r0	; 63
    6392:	cd bf       	out	0x3d, r28	; 61
    6394:	fe 01       	movw	r30, r28
    6396:	ed 5b       	subi	r30, 0xBD	; 189
    6398:	ff 4f       	sbci	r31, 0xFF	; 255
    639a:	80 e0       	ldi	r24, 0x00	; 0
    639c:	90 e0       	ldi	r25, 0x00	; 0
    639e:	a0 ef       	ldi	r26, 0xF0	; 240
    63a0:	b1 e4       	ldi	r27, 0x41	; 65
    63a2:	80 83       	st	Z, r24
    63a4:	91 83       	std	Z+1, r25	; 0x01
    63a6:	a2 83       	std	Z+2, r26	; 0x02
    63a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    63aa:	8e 01       	movw	r16, r28
    63ac:	01 5c       	subi	r16, 0xC1	; 193
    63ae:	1f 4f       	sbci	r17, 0xFF	; 255
    63b0:	fe 01       	movw	r30, r28
    63b2:	ed 5b       	subi	r30, 0xBD	; 189
    63b4:	ff 4f       	sbci	r31, 0xFF	; 255
    63b6:	60 81       	ld	r22, Z
    63b8:	71 81       	ldd	r23, Z+1	; 0x01
    63ba:	82 81       	ldd	r24, Z+2	; 0x02
    63bc:	93 81       	ldd	r25, Z+3	; 0x03
    63be:	20 e0       	ldi	r18, 0x00	; 0
    63c0:	30 e0       	ldi	r19, 0x00	; 0
    63c2:	4a e7       	ldi	r20, 0x7A	; 122
    63c4:	55 e4       	ldi	r21, 0x45	; 69
    63c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    63ca:	dc 01       	movw	r26, r24
    63cc:	cb 01       	movw	r24, r22
    63ce:	f8 01       	movw	r30, r16
    63d0:	80 83       	st	Z, r24
    63d2:	91 83       	std	Z+1, r25	; 0x01
    63d4:	a2 83       	std	Z+2, r26	; 0x02
    63d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    63d8:	fe 01       	movw	r30, r28
    63da:	ff 96       	adiw	r30, 0x3f	; 63
    63dc:	60 81       	ld	r22, Z
    63de:	71 81       	ldd	r23, Z+1	; 0x01
    63e0:	82 81       	ldd	r24, Z+2	; 0x02
    63e2:	93 81       	ldd	r25, Z+3	; 0x03
    63e4:	20 e0       	ldi	r18, 0x00	; 0
    63e6:	30 e0       	ldi	r19, 0x00	; 0
    63e8:	40 e8       	ldi	r20, 0x80	; 128
    63ea:	5f e3       	ldi	r21, 0x3F	; 63
    63ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    63f0:	88 23       	and	r24, r24
    63f2:	2c f4       	brge	.+10     	; 0x63fe <HCLCDInit4BitMode+0x84>
		__ticks = 1;
    63f4:	81 e0       	ldi	r24, 0x01	; 1
    63f6:	90 e0       	ldi	r25, 0x00	; 0
    63f8:	9e af       	std	Y+62, r25	; 0x3e
    63fa:	8d af       	std	Y+61, r24	; 0x3d
    63fc:	46 c0       	rjmp	.+140    	; 0x648a <HCLCDInit4BitMode+0x110>
	else if (__tmp > 65535)
    63fe:	fe 01       	movw	r30, r28
    6400:	ff 96       	adiw	r30, 0x3f	; 63
    6402:	60 81       	ld	r22, Z
    6404:	71 81       	ldd	r23, Z+1	; 0x01
    6406:	82 81       	ldd	r24, Z+2	; 0x02
    6408:	93 81       	ldd	r25, Z+3	; 0x03
    640a:	20 e0       	ldi	r18, 0x00	; 0
    640c:	3f ef       	ldi	r19, 0xFF	; 255
    640e:	4f e7       	ldi	r20, 0x7F	; 127
    6410:	57 e4       	ldi	r21, 0x47	; 71
    6412:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6416:	18 16       	cp	r1, r24
    6418:	64 f5       	brge	.+88     	; 0x6472 <HCLCDInit4BitMode+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    641a:	fe 01       	movw	r30, r28
    641c:	ed 5b       	subi	r30, 0xBD	; 189
    641e:	ff 4f       	sbci	r31, 0xFF	; 255
    6420:	60 81       	ld	r22, Z
    6422:	71 81       	ldd	r23, Z+1	; 0x01
    6424:	82 81       	ldd	r24, Z+2	; 0x02
    6426:	93 81       	ldd	r25, Z+3	; 0x03
    6428:	20 e0       	ldi	r18, 0x00	; 0
    642a:	30 e0       	ldi	r19, 0x00	; 0
    642c:	40 e2       	ldi	r20, 0x20	; 32
    642e:	51 e4       	ldi	r21, 0x41	; 65
    6430:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6434:	dc 01       	movw	r26, r24
    6436:	cb 01       	movw	r24, r22
    6438:	bc 01       	movw	r22, r24
    643a:	cd 01       	movw	r24, r26
    643c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6440:	dc 01       	movw	r26, r24
    6442:	cb 01       	movw	r24, r22
    6444:	9e af       	std	Y+62, r25	; 0x3e
    6446:	8d af       	std	Y+61, r24	; 0x3d
    6448:	0f c0       	rjmp	.+30     	; 0x6468 <HCLCDInit4BitMode+0xee>
    644a:	80 e9       	ldi	r24, 0x90	; 144
    644c:	91 e0       	ldi	r25, 0x01	; 1
    644e:	9c af       	std	Y+60, r25	; 0x3c
    6450:	8b af       	std	Y+59, r24	; 0x3b
    6452:	8b ad       	ldd	r24, Y+59	; 0x3b
    6454:	9c ad       	ldd	r25, Y+60	; 0x3c
    6456:	01 97       	sbiw	r24, 0x01	; 1
    6458:	f1 f7       	brne	.-4      	; 0x6456 <HCLCDInit4BitMode+0xdc>
    645a:	9c af       	std	Y+60, r25	; 0x3c
    645c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    645e:	8d ad       	ldd	r24, Y+61	; 0x3d
    6460:	9e ad       	ldd	r25, Y+62	; 0x3e
    6462:	01 97       	sbiw	r24, 0x01	; 1
    6464:	9e af       	std	Y+62, r25	; 0x3e
    6466:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6468:	8d ad       	ldd	r24, Y+61	; 0x3d
    646a:	9e ad       	ldd	r25, Y+62	; 0x3e
    646c:	00 97       	sbiw	r24, 0x00	; 0
    646e:	69 f7       	brne	.-38     	; 0x644a <HCLCDInit4BitMode+0xd0>
    6470:	16 c0       	rjmp	.+44     	; 0x649e <HCLCDInit4BitMode+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6472:	fe 01       	movw	r30, r28
    6474:	ff 96       	adiw	r30, 0x3f	; 63
    6476:	60 81       	ld	r22, Z
    6478:	71 81       	ldd	r23, Z+1	; 0x01
    647a:	82 81       	ldd	r24, Z+2	; 0x02
    647c:	93 81       	ldd	r25, Z+3	; 0x03
    647e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6482:	dc 01       	movw	r26, r24
    6484:	cb 01       	movw	r24, r22
    6486:	9e af       	std	Y+62, r25	; 0x3e
    6488:	8d af       	std	Y+61, r24	; 0x3d
    648a:	8d ad       	ldd	r24, Y+61	; 0x3d
    648c:	9e ad       	ldd	r25, Y+62	; 0x3e
    648e:	9a af       	std	Y+58, r25	; 0x3a
    6490:	89 af       	std	Y+57, r24	; 0x39
    6492:	89 ad       	ldd	r24, Y+57	; 0x39
    6494:	9a ad       	ldd	r25, Y+58	; 0x3a
    6496:	01 97       	sbiw	r24, 0x01	; 1
    6498:	f1 f7       	brne	.-4      	; 0x6496 <HCLCDInit4BitMode+0x11c>
    649a:	9a af       	std	Y+58, r25	; 0x3a
    649c:	89 af       	std	Y+57, r24	; 0x39
_delay_ms(30);

//SET DIRECTION OF THE used PINS


	MDIO_Set_PIN_DIR(DATA_PORT,PIN4,PIN_OUTPUT);
    649e:	81 e0       	ldi	r24, 0x01	; 1
    64a0:	64 e0       	ldi	r22, 0x04	; 4
    64a2:	41 e0       	ldi	r20, 0x01	; 1
    64a4:	0e 94 20 18 	call	0x3040	; 0x3040 <MDIO_Set_PIN_DIR>
	MDIO_Set_PIN_DIR(DATA_PORT,PIN5,PIN_OUTPUT);
    64a8:	81 e0       	ldi	r24, 0x01	; 1
    64aa:	65 e0       	ldi	r22, 0x05	; 5
    64ac:	41 e0       	ldi	r20, 0x01	; 1
    64ae:	0e 94 20 18 	call	0x3040	; 0x3040 <MDIO_Set_PIN_DIR>
	MDIO_Set_PIN_DIR(DATA_PORT,PIN6,PIN_OUTPUT);
    64b2:	81 e0       	ldi	r24, 0x01	; 1
    64b4:	66 e0       	ldi	r22, 0x06	; 6
    64b6:	41 e0       	ldi	r20, 0x01	; 1
    64b8:	0e 94 20 18 	call	0x3040	; 0x3040 <MDIO_Set_PIN_DIR>
	MDIO_Set_PIN_DIR(DATA_PORT,PIN7,PIN_OUTPUT);
    64bc:	81 e0       	ldi	r24, 0x01	; 1
    64be:	67 e0       	ldi	r22, 0x07	; 7
    64c0:	41 e0       	ldi	r20, 0x01	; 1
    64c2:	0e 94 20 18 	call	0x3040	; 0x3040 <MDIO_Set_PIN_DIR>

//SET DIRECTION OF THE CONTROL PINS
MDIO_Set_PIN_DIR(CONTROL_PORT,RS,PIN_OUTPUT);
    64c6:	81 e0       	ldi	r24, 0x01	; 1
    64c8:	60 e0       	ldi	r22, 0x00	; 0
    64ca:	41 e0       	ldi	r20, 0x01	; 1
    64cc:	0e 94 20 18 	call	0x3040	; 0x3040 <MDIO_Set_PIN_DIR>
MDIO_Set_PIN_DIR(CONTROL_PORT,RW,PIN_OUTPUT);
    64d0:	81 e0       	ldi	r24, 0x01	; 1
    64d2:	61 e0       	ldi	r22, 0x01	; 1
    64d4:	41 e0       	ldi	r20, 0x01	; 1
    64d6:	0e 94 20 18 	call	0x3040	; 0x3040 <MDIO_Set_PIN_DIR>
MDIO_Set_PIN_DIR(CONTROL_PORT,E,PIN_OUTPUT);
    64da:	81 e0       	ldi	r24, 0x01	; 1
    64dc:	62 e0       	ldi	r22, 0x02	; 2
    64de:	41 e0       	ldi	r20, 0x01	; 1
    64e0:	0e 94 20 18 	call	0x3040	; 0x3040 <MDIO_Set_PIN_DIR>

//START OF THE INTIALIZATION SEQUENCE
//SEND FUNCTION SET COMMAND
MDIO_SetNibbleValue(HCLCD_PIN_START,DATA_PORT,FUNCTION_SET_MODE_COMMAND>>4);
    64e4:	84 e0       	ldi	r24, 0x04	; 4
    64e6:	61 e0       	ldi	r22, 0x01	; 1
    64e8:	42 e0       	ldi	r20, 0x02	; 2
    64ea:	0e 94 a9 1b 	call	0x3752	; 0x3752 <MDIO_SetNibbleValue>
//SEND THE FALLING EDGE ENABLE
	MDIO_Set_PIN_VALUE(CONTROL_PORT,E,PIN_HIGH);
    64ee:	81 e0       	ldi	r24, 0x01	; 1
    64f0:	62 e0       	ldi	r22, 0x02	; 2
    64f2:	41 e0       	ldi	r20, 0x01	; 1
    64f4:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
    64f8:	80 e0       	ldi	r24, 0x00	; 0
    64fa:	90 e0       	ldi	r25, 0x00	; 0
    64fc:	a0 e0       	ldi	r26, 0x00	; 0
    64fe:	b0 e4       	ldi	r27, 0x40	; 64
    6500:	8d ab       	std	Y+53, r24	; 0x35
    6502:	9e ab       	std	Y+54, r25	; 0x36
    6504:	af ab       	std	Y+55, r26	; 0x37
    6506:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6508:	6d a9       	ldd	r22, Y+53	; 0x35
    650a:	7e a9       	ldd	r23, Y+54	; 0x36
    650c:	8f a9       	ldd	r24, Y+55	; 0x37
    650e:	98 ad       	ldd	r25, Y+56	; 0x38
    6510:	20 e0       	ldi	r18, 0x00	; 0
    6512:	30 e0       	ldi	r19, 0x00	; 0
    6514:	4a e7       	ldi	r20, 0x7A	; 122
    6516:	55 e4       	ldi	r21, 0x45	; 69
    6518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    651c:	dc 01       	movw	r26, r24
    651e:	cb 01       	movw	r24, r22
    6520:	89 ab       	std	Y+49, r24	; 0x31
    6522:	9a ab       	std	Y+50, r25	; 0x32
    6524:	ab ab       	std	Y+51, r26	; 0x33
    6526:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    6528:	69 a9       	ldd	r22, Y+49	; 0x31
    652a:	7a a9       	ldd	r23, Y+50	; 0x32
    652c:	8b a9       	ldd	r24, Y+51	; 0x33
    652e:	9c a9       	ldd	r25, Y+52	; 0x34
    6530:	20 e0       	ldi	r18, 0x00	; 0
    6532:	30 e0       	ldi	r19, 0x00	; 0
    6534:	40 e8       	ldi	r20, 0x80	; 128
    6536:	5f e3       	ldi	r21, 0x3F	; 63
    6538:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    653c:	88 23       	and	r24, r24
    653e:	2c f4       	brge	.+10     	; 0x654a <HCLCDInit4BitMode+0x1d0>
		__ticks = 1;
    6540:	81 e0       	ldi	r24, 0x01	; 1
    6542:	90 e0       	ldi	r25, 0x00	; 0
    6544:	98 ab       	std	Y+48, r25	; 0x30
    6546:	8f a7       	std	Y+47, r24	; 0x2f
    6548:	3f c0       	rjmp	.+126    	; 0x65c8 <HCLCDInit4BitMode+0x24e>
	else if (__tmp > 65535)
    654a:	69 a9       	ldd	r22, Y+49	; 0x31
    654c:	7a a9       	ldd	r23, Y+50	; 0x32
    654e:	8b a9       	ldd	r24, Y+51	; 0x33
    6550:	9c a9       	ldd	r25, Y+52	; 0x34
    6552:	20 e0       	ldi	r18, 0x00	; 0
    6554:	3f ef       	ldi	r19, 0xFF	; 255
    6556:	4f e7       	ldi	r20, 0x7F	; 127
    6558:	57 e4       	ldi	r21, 0x47	; 71
    655a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    655e:	18 16       	cp	r1, r24
    6560:	4c f5       	brge	.+82     	; 0x65b4 <HCLCDInit4BitMode+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6562:	6d a9       	ldd	r22, Y+53	; 0x35
    6564:	7e a9       	ldd	r23, Y+54	; 0x36
    6566:	8f a9       	ldd	r24, Y+55	; 0x37
    6568:	98 ad       	ldd	r25, Y+56	; 0x38
    656a:	20 e0       	ldi	r18, 0x00	; 0
    656c:	30 e0       	ldi	r19, 0x00	; 0
    656e:	40 e2       	ldi	r20, 0x20	; 32
    6570:	51 e4       	ldi	r21, 0x41	; 65
    6572:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6576:	dc 01       	movw	r26, r24
    6578:	cb 01       	movw	r24, r22
    657a:	bc 01       	movw	r22, r24
    657c:	cd 01       	movw	r24, r26
    657e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6582:	dc 01       	movw	r26, r24
    6584:	cb 01       	movw	r24, r22
    6586:	98 ab       	std	Y+48, r25	; 0x30
    6588:	8f a7       	std	Y+47, r24	; 0x2f
    658a:	0f c0       	rjmp	.+30     	; 0x65aa <HCLCDInit4BitMode+0x230>
    658c:	80 e9       	ldi	r24, 0x90	; 144
    658e:	91 e0       	ldi	r25, 0x01	; 1
    6590:	9e a7       	std	Y+46, r25	; 0x2e
    6592:	8d a7       	std	Y+45, r24	; 0x2d
    6594:	8d a5       	ldd	r24, Y+45	; 0x2d
    6596:	9e a5       	ldd	r25, Y+46	; 0x2e
    6598:	01 97       	sbiw	r24, 0x01	; 1
    659a:	f1 f7       	brne	.-4      	; 0x6598 <HCLCDInit4BitMode+0x21e>
    659c:	9e a7       	std	Y+46, r25	; 0x2e
    659e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    65a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    65a2:	98 a9       	ldd	r25, Y+48	; 0x30
    65a4:	01 97       	sbiw	r24, 0x01	; 1
    65a6:	98 ab       	std	Y+48, r25	; 0x30
    65a8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    65aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    65ac:	98 a9       	ldd	r25, Y+48	; 0x30
    65ae:	00 97       	sbiw	r24, 0x00	; 0
    65b0:	69 f7       	brne	.-38     	; 0x658c <HCLCDInit4BitMode+0x212>
    65b2:	14 c0       	rjmp	.+40     	; 0x65dc <HCLCDInit4BitMode+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    65b4:	69 a9       	ldd	r22, Y+49	; 0x31
    65b6:	7a a9       	ldd	r23, Y+50	; 0x32
    65b8:	8b a9       	ldd	r24, Y+51	; 0x33
    65ba:	9c a9       	ldd	r25, Y+52	; 0x34
    65bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    65c0:	dc 01       	movw	r26, r24
    65c2:	cb 01       	movw	r24, r22
    65c4:	98 ab       	std	Y+48, r25	; 0x30
    65c6:	8f a7       	std	Y+47, r24	; 0x2f
    65c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    65ca:	98 a9       	ldd	r25, Y+48	; 0x30
    65cc:	9c a7       	std	Y+44, r25	; 0x2c
    65ce:	8b a7       	std	Y+43, r24	; 0x2b
    65d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    65d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    65d4:	01 97       	sbiw	r24, 0x01	; 1
    65d6:	f1 f7       	brne	.-4      	; 0x65d4 <HCLCDInit4BitMode+0x25a>
    65d8:	9c a7       	std	Y+44, r25	; 0x2c
    65da:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	MDIO_Set_PIN_VALUE(CONTROL_PORT,E,PIN_LOW);
    65dc:	81 e0       	ldi	r24, 0x01	; 1
    65de:	62 e0       	ldi	r22, 0x02	; 2
    65e0:	40 e0       	ldi	r20, 0x00	; 0
    65e2:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>

HCLCD_WriteCommand4Bit(FUNCTION_SET_MODE_COMMAND);
    65e6:	88 e2       	ldi	r24, 0x28	; 40
    65e8:	0e 94 61 34 	call	0x68c2	; 0x68c2 <HCLCD_WriteCommand4Bit>
    65ec:	80 e0       	ldi	r24, 0x00	; 0
    65ee:	90 e0       	ldi	r25, 0x00	; 0
    65f0:	a0 e8       	ldi	r26, 0x80	; 128
    65f2:	bf e3       	ldi	r27, 0x3F	; 63
    65f4:	8f a3       	std	Y+39, r24	; 0x27
    65f6:	98 a7       	std	Y+40, r25	; 0x28
    65f8:	a9 a7       	std	Y+41, r26	; 0x29
    65fa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    65fc:	6f a1       	ldd	r22, Y+39	; 0x27
    65fe:	78 a5       	ldd	r23, Y+40	; 0x28
    6600:	89 a5       	ldd	r24, Y+41	; 0x29
    6602:	9a a5       	ldd	r25, Y+42	; 0x2a
    6604:	20 e0       	ldi	r18, 0x00	; 0
    6606:	30 e0       	ldi	r19, 0x00	; 0
    6608:	4a e7       	ldi	r20, 0x7A	; 122
    660a:	55 e4       	ldi	r21, 0x45	; 69
    660c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6610:	dc 01       	movw	r26, r24
    6612:	cb 01       	movw	r24, r22
    6614:	8b a3       	std	Y+35, r24	; 0x23
    6616:	9c a3       	std	Y+36, r25	; 0x24
    6618:	ad a3       	std	Y+37, r26	; 0x25
    661a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    661c:	6b a1       	ldd	r22, Y+35	; 0x23
    661e:	7c a1       	ldd	r23, Y+36	; 0x24
    6620:	8d a1       	ldd	r24, Y+37	; 0x25
    6622:	9e a1       	ldd	r25, Y+38	; 0x26
    6624:	20 e0       	ldi	r18, 0x00	; 0
    6626:	30 e0       	ldi	r19, 0x00	; 0
    6628:	40 e8       	ldi	r20, 0x80	; 128
    662a:	5f e3       	ldi	r21, 0x3F	; 63
    662c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6630:	88 23       	and	r24, r24
    6632:	2c f4       	brge	.+10     	; 0x663e <HCLCDInit4BitMode+0x2c4>
		__ticks = 1;
    6634:	81 e0       	ldi	r24, 0x01	; 1
    6636:	90 e0       	ldi	r25, 0x00	; 0
    6638:	9a a3       	std	Y+34, r25	; 0x22
    663a:	89 a3       	std	Y+33, r24	; 0x21
    663c:	3f c0       	rjmp	.+126    	; 0x66bc <HCLCDInit4BitMode+0x342>
	else if (__tmp > 65535)
    663e:	6b a1       	ldd	r22, Y+35	; 0x23
    6640:	7c a1       	ldd	r23, Y+36	; 0x24
    6642:	8d a1       	ldd	r24, Y+37	; 0x25
    6644:	9e a1       	ldd	r25, Y+38	; 0x26
    6646:	20 e0       	ldi	r18, 0x00	; 0
    6648:	3f ef       	ldi	r19, 0xFF	; 255
    664a:	4f e7       	ldi	r20, 0x7F	; 127
    664c:	57 e4       	ldi	r21, 0x47	; 71
    664e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6652:	18 16       	cp	r1, r24
    6654:	4c f5       	brge	.+82     	; 0x66a8 <HCLCDInit4BitMode+0x32e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6656:	6f a1       	ldd	r22, Y+39	; 0x27
    6658:	78 a5       	ldd	r23, Y+40	; 0x28
    665a:	89 a5       	ldd	r24, Y+41	; 0x29
    665c:	9a a5       	ldd	r25, Y+42	; 0x2a
    665e:	20 e0       	ldi	r18, 0x00	; 0
    6660:	30 e0       	ldi	r19, 0x00	; 0
    6662:	40 e2       	ldi	r20, 0x20	; 32
    6664:	51 e4       	ldi	r21, 0x41	; 65
    6666:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    666a:	dc 01       	movw	r26, r24
    666c:	cb 01       	movw	r24, r22
    666e:	bc 01       	movw	r22, r24
    6670:	cd 01       	movw	r24, r26
    6672:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6676:	dc 01       	movw	r26, r24
    6678:	cb 01       	movw	r24, r22
    667a:	9a a3       	std	Y+34, r25	; 0x22
    667c:	89 a3       	std	Y+33, r24	; 0x21
    667e:	0f c0       	rjmp	.+30     	; 0x669e <HCLCDInit4BitMode+0x324>
    6680:	80 e9       	ldi	r24, 0x90	; 144
    6682:	91 e0       	ldi	r25, 0x01	; 1
    6684:	98 a3       	std	Y+32, r25	; 0x20
    6686:	8f 8f       	std	Y+31, r24	; 0x1f
    6688:	8f 8d       	ldd	r24, Y+31	; 0x1f
    668a:	98 a1       	ldd	r25, Y+32	; 0x20
    668c:	01 97       	sbiw	r24, 0x01	; 1
    668e:	f1 f7       	brne	.-4      	; 0x668c <HCLCDInit4BitMode+0x312>
    6690:	98 a3       	std	Y+32, r25	; 0x20
    6692:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6694:	89 a1       	ldd	r24, Y+33	; 0x21
    6696:	9a a1       	ldd	r25, Y+34	; 0x22
    6698:	01 97       	sbiw	r24, 0x01	; 1
    669a:	9a a3       	std	Y+34, r25	; 0x22
    669c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    669e:	89 a1       	ldd	r24, Y+33	; 0x21
    66a0:	9a a1       	ldd	r25, Y+34	; 0x22
    66a2:	00 97       	sbiw	r24, 0x00	; 0
    66a4:	69 f7       	brne	.-38     	; 0x6680 <HCLCDInit4BitMode+0x306>
    66a6:	14 c0       	rjmp	.+40     	; 0x66d0 <HCLCDInit4BitMode+0x356>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    66a8:	6b a1       	ldd	r22, Y+35	; 0x23
    66aa:	7c a1       	ldd	r23, Y+36	; 0x24
    66ac:	8d a1       	ldd	r24, Y+37	; 0x25
    66ae:	9e a1       	ldd	r25, Y+38	; 0x26
    66b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    66b4:	dc 01       	movw	r26, r24
    66b6:	cb 01       	movw	r24, r22
    66b8:	9a a3       	std	Y+34, r25	; 0x22
    66ba:	89 a3       	std	Y+33, r24	; 0x21
    66bc:	89 a1       	ldd	r24, Y+33	; 0x21
    66be:	9a a1       	ldd	r25, Y+34	; 0x22
    66c0:	9e 8f       	std	Y+30, r25	; 0x1e
    66c2:	8d 8f       	std	Y+29, r24	; 0x1d
    66c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    66c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    66c8:	01 97       	sbiw	r24, 0x01	; 1
    66ca:	f1 f7       	brne	.-4      	; 0x66c8 <HCLCDInit4BitMode+0x34e>
    66cc:	9e 8f       	std	Y+30, r25	; 0x1e
    66ce:	8d 8f       	std	Y+29, r24	; 0x1d
//SEND DISPLAY CONTROL COMMAND
_delay_ms(1); //SHOULD BE 39US
HCLCD_WriteCommand4Bit(DISPALY_ON_OFF_COMMAND);
    66d0:	8e e0       	ldi	r24, 0x0E	; 14
    66d2:	0e 94 61 34 	call	0x68c2	; 0x68c2 <HCLCD_WriteCommand4Bit>
    66d6:	80 e0       	ldi	r24, 0x00	; 0
    66d8:	90 e0       	ldi	r25, 0x00	; 0
    66da:	a0 e8       	ldi	r26, 0x80	; 128
    66dc:	bf e3       	ldi	r27, 0x3F	; 63
    66de:	89 8f       	std	Y+25, r24	; 0x19
    66e0:	9a 8f       	std	Y+26, r25	; 0x1a
    66e2:	ab 8f       	std	Y+27, r26	; 0x1b
    66e4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    66e6:	69 8d       	ldd	r22, Y+25	; 0x19
    66e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    66ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    66ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    66ee:	20 e0       	ldi	r18, 0x00	; 0
    66f0:	30 e0       	ldi	r19, 0x00	; 0
    66f2:	4a e7       	ldi	r20, 0x7A	; 122
    66f4:	55 e4       	ldi	r21, 0x45	; 69
    66f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    66fa:	dc 01       	movw	r26, r24
    66fc:	cb 01       	movw	r24, r22
    66fe:	8d 8b       	std	Y+21, r24	; 0x15
    6700:	9e 8b       	std	Y+22, r25	; 0x16
    6702:	af 8b       	std	Y+23, r26	; 0x17
    6704:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6706:	6d 89       	ldd	r22, Y+21	; 0x15
    6708:	7e 89       	ldd	r23, Y+22	; 0x16
    670a:	8f 89       	ldd	r24, Y+23	; 0x17
    670c:	98 8d       	ldd	r25, Y+24	; 0x18
    670e:	20 e0       	ldi	r18, 0x00	; 0
    6710:	30 e0       	ldi	r19, 0x00	; 0
    6712:	40 e8       	ldi	r20, 0x80	; 128
    6714:	5f e3       	ldi	r21, 0x3F	; 63
    6716:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    671a:	88 23       	and	r24, r24
    671c:	2c f4       	brge	.+10     	; 0x6728 <HCLCDInit4BitMode+0x3ae>
		__ticks = 1;
    671e:	81 e0       	ldi	r24, 0x01	; 1
    6720:	90 e0       	ldi	r25, 0x00	; 0
    6722:	9c 8b       	std	Y+20, r25	; 0x14
    6724:	8b 8b       	std	Y+19, r24	; 0x13
    6726:	3f c0       	rjmp	.+126    	; 0x67a6 <HCLCDInit4BitMode+0x42c>
	else if (__tmp > 65535)
    6728:	6d 89       	ldd	r22, Y+21	; 0x15
    672a:	7e 89       	ldd	r23, Y+22	; 0x16
    672c:	8f 89       	ldd	r24, Y+23	; 0x17
    672e:	98 8d       	ldd	r25, Y+24	; 0x18
    6730:	20 e0       	ldi	r18, 0x00	; 0
    6732:	3f ef       	ldi	r19, 0xFF	; 255
    6734:	4f e7       	ldi	r20, 0x7F	; 127
    6736:	57 e4       	ldi	r21, 0x47	; 71
    6738:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    673c:	18 16       	cp	r1, r24
    673e:	4c f5       	brge	.+82     	; 0x6792 <HCLCDInit4BitMode+0x418>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6740:	69 8d       	ldd	r22, Y+25	; 0x19
    6742:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6744:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6746:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6748:	20 e0       	ldi	r18, 0x00	; 0
    674a:	30 e0       	ldi	r19, 0x00	; 0
    674c:	40 e2       	ldi	r20, 0x20	; 32
    674e:	51 e4       	ldi	r21, 0x41	; 65
    6750:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6754:	dc 01       	movw	r26, r24
    6756:	cb 01       	movw	r24, r22
    6758:	bc 01       	movw	r22, r24
    675a:	cd 01       	movw	r24, r26
    675c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6760:	dc 01       	movw	r26, r24
    6762:	cb 01       	movw	r24, r22
    6764:	9c 8b       	std	Y+20, r25	; 0x14
    6766:	8b 8b       	std	Y+19, r24	; 0x13
    6768:	0f c0       	rjmp	.+30     	; 0x6788 <HCLCDInit4BitMode+0x40e>
    676a:	80 e9       	ldi	r24, 0x90	; 144
    676c:	91 e0       	ldi	r25, 0x01	; 1
    676e:	9a 8b       	std	Y+18, r25	; 0x12
    6770:	89 8b       	std	Y+17, r24	; 0x11
    6772:	89 89       	ldd	r24, Y+17	; 0x11
    6774:	9a 89       	ldd	r25, Y+18	; 0x12
    6776:	01 97       	sbiw	r24, 0x01	; 1
    6778:	f1 f7       	brne	.-4      	; 0x6776 <HCLCDInit4BitMode+0x3fc>
    677a:	9a 8b       	std	Y+18, r25	; 0x12
    677c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    677e:	8b 89       	ldd	r24, Y+19	; 0x13
    6780:	9c 89       	ldd	r25, Y+20	; 0x14
    6782:	01 97       	sbiw	r24, 0x01	; 1
    6784:	9c 8b       	std	Y+20, r25	; 0x14
    6786:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6788:	8b 89       	ldd	r24, Y+19	; 0x13
    678a:	9c 89       	ldd	r25, Y+20	; 0x14
    678c:	00 97       	sbiw	r24, 0x00	; 0
    678e:	69 f7       	brne	.-38     	; 0x676a <HCLCDInit4BitMode+0x3f0>
    6790:	14 c0       	rjmp	.+40     	; 0x67ba <HCLCDInit4BitMode+0x440>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6792:	6d 89       	ldd	r22, Y+21	; 0x15
    6794:	7e 89       	ldd	r23, Y+22	; 0x16
    6796:	8f 89       	ldd	r24, Y+23	; 0x17
    6798:	98 8d       	ldd	r25, Y+24	; 0x18
    679a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    679e:	dc 01       	movw	r26, r24
    67a0:	cb 01       	movw	r24, r22
    67a2:	9c 8b       	std	Y+20, r25	; 0x14
    67a4:	8b 8b       	std	Y+19, r24	; 0x13
    67a6:	8b 89       	ldd	r24, Y+19	; 0x13
    67a8:	9c 89       	ldd	r25, Y+20	; 0x14
    67aa:	98 8b       	std	Y+16, r25	; 0x10
    67ac:	8f 87       	std	Y+15, r24	; 0x0f
    67ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    67b0:	98 89       	ldd	r25, Y+16	; 0x10
    67b2:	01 97       	sbiw	r24, 0x01	; 1
    67b4:	f1 f7       	brne	.-4      	; 0x67b2 <HCLCDInit4BitMode+0x438>
    67b6:	98 8b       	std	Y+16, r25	; 0x10
    67b8:	8f 87       	std	Y+15, r24	; 0x0f
//SEND CLEAR COMMAND
_delay_ms(1); //SHOULD BE 39US
HCLCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
    67ba:	81 e0       	ldi	r24, 0x01	; 1
    67bc:	0e 94 61 34 	call	0x68c2	; 0x68c2 <HCLCD_WriteCommand4Bit>
    67c0:	80 e0       	ldi	r24, 0x00	; 0
    67c2:	90 e0       	ldi	r25, 0x00	; 0
    67c4:	a0 e0       	ldi	r26, 0x00	; 0
    67c6:	b0 e4       	ldi	r27, 0x40	; 64
    67c8:	8b 87       	std	Y+11, r24	; 0x0b
    67ca:	9c 87       	std	Y+12, r25	; 0x0c
    67cc:	ad 87       	std	Y+13, r26	; 0x0d
    67ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    67d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    67d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    67d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    67d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    67d8:	20 e0       	ldi	r18, 0x00	; 0
    67da:	30 e0       	ldi	r19, 0x00	; 0
    67dc:	4a e7       	ldi	r20, 0x7A	; 122
    67de:	55 e4       	ldi	r21, 0x45	; 69
    67e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    67e4:	dc 01       	movw	r26, r24
    67e6:	cb 01       	movw	r24, r22
    67e8:	8f 83       	std	Y+7, r24	; 0x07
    67ea:	98 87       	std	Y+8, r25	; 0x08
    67ec:	a9 87       	std	Y+9, r26	; 0x09
    67ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    67f0:	6f 81       	ldd	r22, Y+7	; 0x07
    67f2:	78 85       	ldd	r23, Y+8	; 0x08
    67f4:	89 85       	ldd	r24, Y+9	; 0x09
    67f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    67f8:	20 e0       	ldi	r18, 0x00	; 0
    67fa:	30 e0       	ldi	r19, 0x00	; 0
    67fc:	40 e8       	ldi	r20, 0x80	; 128
    67fe:	5f e3       	ldi	r21, 0x3F	; 63
    6800:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6804:	88 23       	and	r24, r24
    6806:	2c f4       	brge	.+10     	; 0x6812 <HCLCDInit4BitMode+0x498>
		__ticks = 1;
    6808:	81 e0       	ldi	r24, 0x01	; 1
    680a:	90 e0       	ldi	r25, 0x00	; 0
    680c:	9e 83       	std	Y+6, r25	; 0x06
    680e:	8d 83       	std	Y+5, r24	; 0x05
    6810:	3f c0       	rjmp	.+126    	; 0x6890 <HCLCDInit4BitMode+0x516>
	else if (__tmp > 65535)
    6812:	6f 81       	ldd	r22, Y+7	; 0x07
    6814:	78 85       	ldd	r23, Y+8	; 0x08
    6816:	89 85       	ldd	r24, Y+9	; 0x09
    6818:	9a 85       	ldd	r25, Y+10	; 0x0a
    681a:	20 e0       	ldi	r18, 0x00	; 0
    681c:	3f ef       	ldi	r19, 0xFF	; 255
    681e:	4f e7       	ldi	r20, 0x7F	; 127
    6820:	57 e4       	ldi	r21, 0x47	; 71
    6822:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6826:	18 16       	cp	r1, r24
    6828:	4c f5       	brge	.+82     	; 0x687c <HCLCDInit4BitMode+0x502>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    682a:	6b 85       	ldd	r22, Y+11	; 0x0b
    682c:	7c 85       	ldd	r23, Y+12	; 0x0c
    682e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6830:	9e 85       	ldd	r25, Y+14	; 0x0e
    6832:	20 e0       	ldi	r18, 0x00	; 0
    6834:	30 e0       	ldi	r19, 0x00	; 0
    6836:	40 e2       	ldi	r20, 0x20	; 32
    6838:	51 e4       	ldi	r21, 0x41	; 65
    683a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    683e:	dc 01       	movw	r26, r24
    6840:	cb 01       	movw	r24, r22
    6842:	bc 01       	movw	r22, r24
    6844:	cd 01       	movw	r24, r26
    6846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    684a:	dc 01       	movw	r26, r24
    684c:	cb 01       	movw	r24, r22
    684e:	9e 83       	std	Y+6, r25	; 0x06
    6850:	8d 83       	std	Y+5, r24	; 0x05
    6852:	0f c0       	rjmp	.+30     	; 0x6872 <HCLCDInit4BitMode+0x4f8>
    6854:	80 e9       	ldi	r24, 0x90	; 144
    6856:	91 e0       	ldi	r25, 0x01	; 1
    6858:	9c 83       	std	Y+4, r25	; 0x04
    685a:	8b 83       	std	Y+3, r24	; 0x03
    685c:	8b 81       	ldd	r24, Y+3	; 0x03
    685e:	9c 81       	ldd	r25, Y+4	; 0x04
    6860:	01 97       	sbiw	r24, 0x01	; 1
    6862:	f1 f7       	brne	.-4      	; 0x6860 <HCLCDInit4BitMode+0x4e6>
    6864:	9c 83       	std	Y+4, r25	; 0x04
    6866:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6868:	8d 81       	ldd	r24, Y+5	; 0x05
    686a:	9e 81       	ldd	r25, Y+6	; 0x06
    686c:	01 97       	sbiw	r24, 0x01	; 1
    686e:	9e 83       	std	Y+6, r25	; 0x06
    6870:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6872:	8d 81       	ldd	r24, Y+5	; 0x05
    6874:	9e 81       	ldd	r25, Y+6	; 0x06
    6876:	00 97       	sbiw	r24, 0x00	; 0
    6878:	69 f7       	brne	.-38     	; 0x6854 <HCLCDInit4BitMode+0x4da>
    687a:	14 c0       	rjmp	.+40     	; 0x68a4 <HCLCDInit4BitMode+0x52a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    687c:	6f 81       	ldd	r22, Y+7	; 0x07
    687e:	78 85       	ldd	r23, Y+8	; 0x08
    6880:	89 85       	ldd	r24, Y+9	; 0x09
    6882:	9a 85       	ldd	r25, Y+10	; 0x0a
    6884:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6888:	dc 01       	movw	r26, r24
    688a:	cb 01       	movw	r24, r22
    688c:	9e 83       	std	Y+6, r25	; 0x06
    688e:	8d 83       	std	Y+5, r24	; 0x05
    6890:	8d 81       	ldd	r24, Y+5	; 0x05
    6892:	9e 81       	ldd	r25, Y+6	; 0x06
    6894:	9a 83       	std	Y+2, r25	; 0x02
    6896:	89 83       	std	Y+1, r24	; 0x01
    6898:	89 81       	ldd	r24, Y+1	; 0x01
    689a:	9a 81       	ldd	r25, Y+2	; 0x02
    689c:	01 97       	sbiw	r24, 0x01	; 1
    689e:	f1 f7       	brne	.-4      	; 0x689c <HCLCDInit4BitMode+0x522>
    68a0:	9a 83       	std	Y+2, r25	; 0x02
    68a2:	89 83       	std	Y+1, r24	; 0x01
//SEND ENRTYMODE COMMAND
_delay_ms(2);
HCLCD_WriteCommand4Bit(ENTRY_MODE_COMMAND);
    68a4:	86 e0       	ldi	r24, 0x06	; 6
    68a6:	0e 94 61 34 	call	0x68c2	; 0x68c2 <HCLCD_WriteCommand4Bit>

}
    68aa:	ca 5b       	subi	r28, 0xBA	; 186
    68ac:	df 4f       	sbci	r29, 0xFF	; 255
    68ae:	0f b6       	in	r0, 0x3f	; 63
    68b0:	f8 94       	cli
    68b2:	de bf       	out	0x3e, r29	; 62
    68b4:	0f be       	out	0x3f, r0	; 63
    68b6:	cd bf       	out	0x3d, r28	; 61
    68b8:	cf 91       	pop	r28
    68ba:	df 91       	pop	r29
    68bc:	1f 91       	pop	r17
    68be:	0f 91       	pop	r16
    68c0:	08 95       	ret

000068c2 <HCLCD_WriteCommand4Bit>:
void HCLCD_WriteCommand4Bit(u8 Copy_u8Command){
    68c2:	df 93       	push	r29
    68c4:	cf 93       	push	r28
    68c6:	cd b7       	in	r28, 0x3d	; 61
    68c8:	de b7       	in	r29, 0x3e	; 62
    68ca:	6d 97       	sbiw	r28, 0x1d	; 29
    68cc:	0f b6       	in	r0, 0x3f	; 63
    68ce:	f8 94       	cli
    68d0:	de bf       	out	0x3e, r29	; 62
    68d2:	0f be       	out	0x3f, r0	; 63
    68d4:	cd bf       	out	0x3d, r28	; 61
    68d6:	8d 8f       	std	Y+29, r24	; 0x1d
	//SET RW TO ZERO
	MDIO_Set_PIN_VALUE(CONTROL_PORT,RW,PIN_LOW);
    68d8:	81 e0       	ldi	r24, 0x01	; 1
    68da:	61 e0       	ldi	r22, 0x01	; 1
    68dc:	40 e0       	ldi	r20, 0x00	; 0
    68de:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
	//SET RS TO ZERO
	MDIO_Set_PIN_VALUE(CONTROL_PORT,RS,PIN_LOW);
    68e2:	81 e0       	ldi	r24, 0x01	; 1
    68e4:	60 e0       	ldi	r22, 0x00	; 0
    68e6:	40 e0       	ldi	r20, 0x00	; 0
    68e8:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
	//set high nibble value of command
	MDIO_SetNibbleValue(HCLCD_PIN_START,DATA_PORT,Copy_u8Command>>4);
    68ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    68ee:	98 2f       	mov	r25, r24
    68f0:	92 95       	swap	r25
    68f2:	9f 70       	andi	r25, 0x0F	; 15
    68f4:	84 e0       	ldi	r24, 0x04	; 4
    68f6:	61 e0       	ldi	r22, 0x01	; 1
    68f8:	49 2f       	mov	r20, r25
    68fa:	0e 94 a9 1b 	call	0x3752	; 0x3752 <MDIO_SetNibbleValue>
	//SEND THE FALLING EDGE ENABLE
	MDIO_Set_PIN_VALUE(CONTROL_PORT,E,PIN_HIGH);
    68fe:	81 e0       	ldi	r24, 0x01	; 1
    6900:	62 e0       	ldi	r22, 0x02	; 2
    6902:	41 e0       	ldi	r20, 0x01	; 1
    6904:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
    6908:	80 e0       	ldi	r24, 0x00	; 0
    690a:	90 e0       	ldi	r25, 0x00	; 0
    690c:	a0 e0       	ldi	r26, 0x00	; 0
    690e:	b0 e4       	ldi	r27, 0x40	; 64
    6910:	89 8f       	std	Y+25, r24	; 0x19
    6912:	9a 8f       	std	Y+26, r25	; 0x1a
    6914:	ab 8f       	std	Y+27, r26	; 0x1b
    6916:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6918:	69 8d       	ldd	r22, Y+25	; 0x19
    691a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    691c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    691e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6920:	20 e0       	ldi	r18, 0x00	; 0
    6922:	30 e0       	ldi	r19, 0x00	; 0
    6924:	4a e7       	ldi	r20, 0x7A	; 122
    6926:	55 e4       	ldi	r21, 0x45	; 69
    6928:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    692c:	dc 01       	movw	r26, r24
    692e:	cb 01       	movw	r24, r22
    6930:	8d 8b       	std	Y+21, r24	; 0x15
    6932:	9e 8b       	std	Y+22, r25	; 0x16
    6934:	af 8b       	std	Y+23, r26	; 0x17
    6936:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6938:	6d 89       	ldd	r22, Y+21	; 0x15
    693a:	7e 89       	ldd	r23, Y+22	; 0x16
    693c:	8f 89       	ldd	r24, Y+23	; 0x17
    693e:	98 8d       	ldd	r25, Y+24	; 0x18
    6940:	20 e0       	ldi	r18, 0x00	; 0
    6942:	30 e0       	ldi	r19, 0x00	; 0
    6944:	40 e8       	ldi	r20, 0x80	; 128
    6946:	5f e3       	ldi	r21, 0x3F	; 63
    6948:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    694c:	88 23       	and	r24, r24
    694e:	2c f4       	brge	.+10     	; 0x695a <HCLCD_WriteCommand4Bit+0x98>
		__ticks = 1;
    6950:	81 e0       	ldi	r24, 0x01	; 1
    6952:	90 e0       	ldi	r25, 0x00	; 0
    6954:	9c 8b       	std	Y+20, r25	; 0x14
    6956:	8b 8b       	std	Y+19, r24	; 0x13
    6958:	3f c0       	rjmp	.+126    	; 0x69d8 <HCLCD_WriteCommand4Bit+0x116>
	else if (__tmp > 65535)
    695a:	6d 89       	ldd	r22, Y+21	; 0x15
    695c:	7e 89       	ldd	r23, Y+22	; 0x16
    695e:	8f 89       	ldd	r24, Y+23	; 0x17
    6960:	98 8d       	ldd	r25, Y+24	; 0x18
    6962:	20 e0       	ldi	r18, 0x00	; 0
    6964:	3f ef       	ldi	r19, 0xFF	; 255
    6966:	4f e7       	ldi	r20, 0x7F	; 127
    6968:	57 e4       	ldi	r21, 0x47	; 71
    696a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    696e:	18 16       	cp	r1, r24
    6970:	4c f5       	brge	.+82     	; 0x69c4 <HCLCD_WriteCommand4Bit+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6972:	69 8d       	ldd	r22, Y+25	; 0x19
    6974:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6976:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6978:	9c 8d       	ldd	r25, Y+28	; 0x1c
    697a:	20 e0       	ldi	r18, 0x00	; 0
    697c:	30 e0       	ldi	r19, 0x00	; 0
    697e:	40 e2       	ldi	r20, 0x20	; 32
    6980:	51 e4       	ldi	r21, 0x41	; 65
    6982:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6986:	dc 01       	movw	r26, r24
    6988:	cb 01       	movw	r24, r22
    698a:	bc 01       	movw	r22, r24
    698c:	cd 01       	movw	r24, r26
    698e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6992:	dc 01       	movw	r26, r24
    6994:	cb 01       	movw	r24, r22
    6996:	9c 8b       	std	Y+20, r25	; 0x14
    6998:	8b 8b       	std	Y+19, r24	; 0x13
    699a:	0f c0       	rjmp	.+30     	; 0x69ba <HCLCD_WriteCommand4Bit+0xf8>
    699c:	80 e9       	ldi	r24, 0x90	; 144
    699e:	91 e0       	ldi	r25, 0x01	; 1
    69a0:	9a 8b       	std	Y+18, r25	; 0x12
    69a2:	89 8b       	std	Y+17, r24	; 0x11
    69a4:	89 89       	ldd	r24, Y+17	; 0x11
    69a6:	9a 89       	ldd	r25, Y+18	; 0x12
    69a8:	01 97       	sbiw	r24, 0x01	; 1
    69aa:	f1 f7       	brne	.-4      	; 0x69a8 <HCLCD_WriteCommand4Bit+0xe6>
    69ac:	9a 8b       	std	Y+18, r25	; 0x12
    69ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    69b0:	8b 89       	ldd	r24, Y+19	; 0x13
    69b2:	9c 89       	ldd	r25, Y+20	; 0x14
    69b4:	01 97       	sbiw	r24, 0x01	; 1
    69b6:	9c 8b       	std	Y+20, r25	; 0x14
    69b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    69ba:	8b 89       	ldd	r24, Y+19	; 0x13
    69bc:	9c 89       	ldd	r25, Y+20	; 0x14
    69be:	00 97       	sbiw	r24, 0x00	; 0
    69c0:	69 f7       	brne	.-38     	; 0x699c <HCLCD_WriteCommand4Bit+0xda>
    69c2:	14 c0       	rjmp	.+40     	; 0x69ec <HCLCD_WriteCommand4Bit+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    69c4:	6d 89       	ldd	r22, Y+21	; 0x15
    69c6:	7e 89       	ldd	r23, Y+22	; 0x16
    69c8:	8f 89       	ldd	r24, Y+23	; 0x17
    69ca:	98 8d       	ldd	r25, Y+24	; 0x18
    69cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    69d0:	dc 01       	movw	r26, r24
    69d2:	cb 01       	movw	r24, r22
    69d4:	9c 8b       	std	Y+20, r25	; 0x14
    69d6:	8b 8b       	std	Y+19, r24	; 0x13
    69d8:	8b 89       	ldd	r24, Y+19	; 0x13
    69da:	9c 89       	ldd	r25, Y+20	; 0x14
    69dc:	98 8b       	std	Y+16, r25	; 0x10
    69de:	8f 87       	std	Y+15, r24	; 0x0f
    69e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    69e2:	98 89       	ldd	r25, Y+16	; 0x10
    69e4:	01 97       	sbiw	r24, 0x01	; 1
    69e6:	f1 f7       	brne	.-4      	; 0x69e4 <HCLCD_WriteCommand4Bit+0x122>
    69e8:	98 8b       	std	Y+16, r25	; 0x10
    69ea:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Set_PIN_VALUE(CONTROL_PORT,E,PIN_LOW);
    69ec:	81 e0       	ldi	r24, 0x01	; 1
    69ee:	62 e0       	ldi	r22, 0x02	; 2
    69f0:	40 e0       	ldi	r20, 0x00	; 0
    69f2:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
	//set LOW nibble value of command
	MDIO_SetNibbleValue(HCLCD_PIN_START,DATA_PORT,Copy_u8Command);
    69f6:	84 e0       	ldi	r24, 0x04	; 4
    69f8:	61 e0       	ldi	r22, 0x01	; 1
    69fa:	4d 8d       	ldd	r20, Y+29	; 0x1d
    69fc:	0e 94 a9 1b 	call	0x3752	; 0x3752 <MDIO_SetNibbleValue>
	//SEND THE FALLING EDGE ENABLE
		MDIO_Set_PIN_VALUE(CONTROL_PORT,E,PIN_HIGH);
    6a00:	81 e0       	ldi	r24, 0x01	; 1
    6a02:	62 e0       	ldi	r22, 0x02	; 2
    6a04:	41 e0       	ldi	r20, 0x01	; 1
    6a06:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
    6a0a:	80 e0       	ldi	r24, 0x00	; 0
    6a0c:	90 e0       	ldi	r25, 0x00	; 0
    6a0e:	a0 e0       	ldi	r26, 0x00	; 0
    6a10:	b0 e4       	ldi	r27, 0x40	; 64
    6a12:	8b 87       	std	Y+11, r24	; 0x0b
    6a14:	9c 87       	std	Y+12, r25	; 0x0c
    6a16:	ad 87       	std	Y+13, r26	; 0x0d
    6a18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6a1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    6a1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    6a1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6a20:	9e 85       	ldd	r25, Y+14	; 0x0e
    6a22:	20 e0       	ldi	r18, 0x00	; 0
    6a24:	30 e0       	ldi	r19, 0x00	; 0
    6a26:	4a e7       	ldi	r20, 0x7A	; 122
    6a28:	55 e4       	ldi	r21, 0x45	; 69
    6a2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6a2e:	dc 01       	movw	r26, r24
    6a30:	cb 01       	movw	r24, r22
    6a32:	8f 83       	std	Y+7, r24	; 0x07
    6a34:	98 87       	std	Y+8, r25	; 0x08
    6a36:	a9 87       	std	Y+9, r26	; 0x09
    6a38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6a3a:	6f 81       	ldd	r22, Y+7	; 0x07
    6a3c:	78 85       	ldd	r23, Y+8	; 0x08
    6a3e:	89 85       	ldd	r24, Y+9	; 0x09
    6a40:	9a 85       	ldd	r25, Y+10	; 0x0a
    6a42:	20 e0       	ldi	r18, 0x00	; 0
    6a44:	30 e0       	ldi	r19, 0x00	; 0
    6a46:	40 e8       	ldi	r20, 0x80	; 128
    6a48:	5f e3       	ldi	r21, 0x3F	; 63
    6a4a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6a4e:	88 23       	and	r24, r24
    6a50:	2c f4       	brge	.+10     	; 0x6a5c <HCLCD_WriteCommand4Bit+0x19a>
		__ticks = 1;
    6a52:	81 e0       	ldi	r24, 0x01	; 1
    6a54:	90 e0       	ldi	r25, 0x00	; 0
    6a56:	9e 83       	std	Y+6, r25	; 0x06
    6a58:	8d 83       	std	Y+5, r24	; 0x05
    6a5a:	3f c0       	rjmp	.+126    	; 0x6ada <HCLCD_WriteCommand4Bit+0x218>
	else if (__tmp > 65535)
    6a5c:	6f 81       	ldd	r22, Y+7	; 0x07
    6a5e:	78 85       	ldd	r23, Y+8	; 0x08
    6a60:	89 85       	ldd	r24, Y+9	; 0x09
    6a62:	9a 85       	ldd	r25, Y+10	; 0x0a
    6a64:	20 e0       	ldi	r18, 0x00	; 0
    6a66:	3f ef       	ldi	r19, 0xFF	; 255
    6a68:	4f e7       	ldi	r20, 0x7F	; 127
    6a6a:	57 e4       	ldi	r21, 0x47	; 71
    6a6c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6a70:	18 16       	cp	r1, r24
    6a72:	4c f5       	brge	.+82     	; 0x6ac6 <HCLCD_WriteCommand4Bit+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6a74:	6b 85       	ldd	r22, Y+11	; 0x0b
    6a76:	7c 85       	ldd	r23, Y+12	; 0x0c
    6a78:	8d 85       	ldd	r24, Y+13	; 0x0d
    6a7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    6a7c:	20 e0       	ldi	r18, 0x00	; 0
    6a7e:	30 e0       	ldi	r19, 0x00	; 0
    6a80:	40 e2       	ldi	r20, 0x20	; 32
    6a82:	51 e4       	ldi	r21, 0x41	; 65
    6a84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6a88:	dc 01       	movw	r26, r24
    6a8a:	cb 01       	movw	r24, r22
    6a8c:	bc 01       	movw	r22, r24
    6a8e:	cd 01       	movw	r24, r26
    6a90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a94:	dc 01       	movw	r26, r24
    6a96:	cb 01       	movw	r24, r22
    6a98:	9e 83       	std	Y+6, r25	; 0x06
    6a9a:	8d 83       	std	Y+5, r24	; 0x05
    6a9c:	0f c0       	rjmp	.+30     	; 0x6abc <HCLCD_WriteCommand4Bit+0x1fa>
    6a9e:	80 e9       	ldi	r24, 0x90	; 144
    6aa0:	91 e0       	ldi	r25, 0x01	; 1
    6aa2:	9c 83       	std	Y+4, r25	; 0x04
    6aa4:	8b 83       	std	Y+3, r24	; 0x03
    6aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    6aa8:	9c 81       	ldd	r25, Y+4	; 0x04
    6aaa:	01 97       	sbiw	r24, 0x01	; 1
    6aac:	f1 f7       	brne	.-4      	; 0x6aaa <HCLCD_WriteCommand4Bit+0x1e8>
    6aae:	9c 83       	std	Y+4, r25	; 0x04
    6ab0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6ab2:	8d 81       	ldd	r24, Y+5	; 0x05
    6ab4:	9e 81       	ldd	r25, Y+6	; 0x06
    6ab6:	01 97       	sbiw	r24, 0x01	; 1
    6ab8:	9e 83       	std	Y+6, r25	; 0x06
    6aba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6abc:	8d 81       	ldd	r24, Y+5	; 0x05
    6abe:	9e 81       	ldd	r25, Y+6	; 0x06
    6ac0:	00 97       	sbiw	r24, 0x00	; 0
    6ac2:	69 f7       	brne	.-38     	; 0x6a9e <HCLCD_WriteCommand4Bit+0x1dc>
    6ac4:	14 c0       	rjmp	.+40     	; 0x6aee <HCLCD_WriteCommand4Bit+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6ac6:	6f 81       	ldd	r22, Y+7	; 0x07
    6ac8:	78 85       	ldd	r23, Y+8	; 0x08
    6aca:	89 85       	ldd	r24, Y+9	; 0x09
    6acc:	9a 85       	ldd	r25, Y+10	; 0x0a
    6ace:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6ad2:	dc 01       	movw	r26, r24
    6ad4:	cb 01       	movw	r24, r22
    6ad6:	9e 83       	std	Y+6, r25	; 0x06
    6ad8:	8d 83       	std	Y+5, r24	; 0x05
    6ada:	8d 81       	ldd	r24, Y+5	; 0x05
    6adc:	9e 81       	ldd	r25, Y+6	; 0x06
    6ade:	9a 83       	std	Y+2, r25	; 0x02
    6ae0:	89 83       	std	Y+1, r24	; 0x01
    6ae2:	89 81       	ldd	r24, Y+1	; 0x01
    6ae4:	9a 81       	ldd	r25, Y+2	; 0x02
    6ae6:	01 97       	sbiw	r24, 0x01	; 1
    6ae8:	f1 f7       	brne	.-4      	; 0x6ae6 <HCLCD_WriteCommand4Bit+0x224>
    6aea:	9a 83       	std	Y+2, r25	; 0x02
    6aec:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		MDIO_Set_PIN_VALUE(CONTROL_PORT,E,PIN_LOW);
    6aee:	81 e0       	ldi	r24, 0x01	; 1
    6af0:	62 e0       	ldi	r22, 0x02	; 2
    6af2:	40 e0       	ldi	r20, 0x00	; 0
    6af4:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
}
    6af8:	6d 96       	adiw	r28, 0x1d	; 29
    6afa:	0f b6       	in	r0, 0x3f	; 63
    6afc:	f8 94       	cli
    6afe:	de bf       	out	0x3e, r29	; 62
    6b00:	0f be       	out	0x3f, r0	; 63
    6b02:	cd bf       	out	0x3d, r28	; 61
    6b04:	cf 91       	pop	r28
    6b06:	df 91       	pop	r29
    6b08:	08 95       	ret

00006b0a <HCLCD_WriteChar4Bit>:
void HCLCD_WriteChar4Bit(u8 Copy_u8Data){
    6b0a:	df 93       	push	r29
    6b0c:	cf 93       	push	r28
    6b0e:	cd b7       	in	r28, 0x3d	; 61
    6b10:	de b7       	in	r29, 0x3e	; 62
    6b12:	6d 97       	sbiw	r28, 0x1d	; 29
    6b14:	0f b6       	in	r0, 0x3f	; 63
    6b16:	f8 94       	cli
    6b18:	de bf       	out	0x3e, r29	; 62
    6b1a:	0f be       	out	0x3f, r0	; 63
    6b1c:	cd bf       	out	0x3d, r28	; 61
    6b1e:	8d 8f       	std	Y+29, r24	; 0x1d
	//SET RW TO low
	MDIO_Set_PIN_VALUE(CONTROL_PORT,RW,PIN_LOW);
    6b20:	81 e0       	ldi	r24, 0x01	; 1
    6b22:	61 e0       	ldi	r22, 0x01	; 1
    6b24:	40 e0       	ldi	r20, 0x00	; 0
    6b26:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
	//SET RS TO high
	MDIO_Set_PIN_VALUE(CONTROL_PORT,RS,PIN_HIGH);
    6b2a:	81 e0       	ldi	r24, 0x01	; 1
    6b2c:	60 e0       	ldi	r22, 0x00	; 0
    6b2e:	41 e0       	ldi	r20, 0x01	; 1
    6b30:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
	//set high nibble value of DATA
	MDIO_SetNibbleValue(HCLCD_PIN_START,DATA_PORT,Copy_u8Data>>4);
    6b34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6b36:	98 2f       	mov	r25, r24
    6b38:	92 95       	swap	r25
    6b3a:	9f 70       	andi	r25, 0x0F	; 15
    6b3c:	84 e0       	ldi	r24, 0x04	; 4
    6b3e:	61 e0       	ldi	r22, 0x01	; 1
    6b40:	49 2f       	mov	r20, r25
    6b42:	0e 94 a9 1b 	call	0x3752	; 0x3752 <MDIO_SetNibbleValue>
	//SEND THE FALLING EDGE ENABLE
	MDIO_Set_PIN_VALUE(CONTROL_PORT,E,PIN_HIGH);
    6b46:	81 e0       	ldi	r24, 0x01	; 1
    6b48:	62 e0       	ldi	r22, 0x02	; 2
    6b4a:	41 e0       	ldi	r20, 0x01	; 1
    6b4c:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
    6b50:	80 e0       	ldi	r24, 0x00	; 0
    6b52:	90 e0       	ldi	r25, 0x00	; 0
    6b54:	a0 e0       	ldi	r26, 0x00	; 0
    6b56:	b0 e4       	ldi	r27, 0x40	; 64
    6b58:	89 8f       	std	Y+25, r24	; 0x19
    6b5a:	9a 8f       	std	Y+26, r25	; 0x1a
    6b5c:	ab 8f       	std	Y+27, r26	; 0x1b
    6b5e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6b60:	69 8d       	ldd	r22, Y+25	; 0x19
    6b62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6b64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6b66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6b68:	20 e0       	ldi	r18, 0x00	; 0
    6b6a:	30 e0       	ldi	r19, 0x00	; 0
    6b6c:	4a e7       	ldi	r20, 0x7A	; 122
    6b6e:	55 e4       	ldi	r21, 0x45	; 69
    6b70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6b74:	dc 01       	movw	r26, r24
    6b76:	cb 01       	movw	r24, r22
    6b78:	8d 8b       	std	Y+21, r24	; 0x15
    6b7a:	9e 8b       	std	Y+22, r25	; 0x16
    6b7c:	af 8b       	std	Y+23, r26	; 0x17
    6b7e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6b80:	6d 89       	ldd	r22, Y+21	; 0x15
    6b82:	7e 89       	ldd	r23, Y+22	; 0x16
    6b84:	8f 89       	ldd	r24, Y+23	; 0x17
    6b86:	98 8d       	ldd	r25, Y+24	; 0x18
    6b88:	20 e0       	ldi	r18, 0x00	; 0
    6b8a:	30 e0       	ldi	r19, 0x00	; 0
    6b8c:	40 e8       	ldi	r20, 0x80	; 128
    6b8e:	5f e3       	ldi	r21, 0x3F	; 63
    6b90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6b94:	88 23       	and	r24, r24
    6b96:	2c f4       	brge	.+10     	; 0x6ba2 <HCLCD_WriteChar4Bit+0x98>
		__ticks = 1;
    6b98:	81 e0       	ldi	r24, 0x01	; 1
    6b9a:	90 e0       	ldi	r25, 0x00	; 0
    6b9c:	9c 8b       	std	Y+20, r25	; 0x14
    6b9e:	8b 8b       	std	Y+19, r24	; 0x13
    6ba0:	3f c0       	rjmp	.+126    	; 0x6c20 <HCLCD_WriteChar4Bit+0x116>
	else if (__tmp > 65535)
    6ba2:	6d 89       	ldd	r22, Y+21	; 0x15
    6ba4:	7e 89       	ldd	r23, Y+22	; 0x16
    6ba6:	8f 89       	ldd	r24, Y+23	; 0x17
    6ba8:	98 8d       	ldd	r25, Y+24	; 0x18
    6baa:	20 e0       	ldi	r18, 0x00	; 0
    6bac:	3f ef       	ldi	r19, 0xFF	; 255
    6bae:	4f e7       	ldi	r20, 0x7F	; 127
    6bb0:	57 e4       	ldi	r21, 0x47	; 71
    6bb2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6bb6:	18 16       	cp	r1, r24
    6bb8:	4c f5       	brge	.+82     	; 0x6c0c <HCLCD_WriteChar4Bit+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6bba:	69 8d       	ldd	r22, Y+25	; 0x19
    6bbc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6bbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6bc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6bc2:	20 e0       	ldi	r18, 0x00	; 0
    6bc4:	30 e0       	ldi	r19, 0x00	; 0
    6bc6:	40 e2       	ldi	r20, 0x20	; 32
    6bc8:	51 e4       	ldi	r21, 0x41	; 65
    6bca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6bce:	dc 01       	movw	r26, r24
    6bd0:	cb 01       	movw	r24, r22
    6bd2:	bc 01       	movw	r22, r24
    6bd4:	cd 01       	movw	r24, r26
    6bd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6bda:	dc 01       	movw	r26, r24
    6bdc:	cb 01       	movw	r24, r22
    6bde:	9c 8b       	std	Y+20, r25	; 0x14
    6be0:	8b 8b       	std	Y+19, r24	; 0x13
    6be2:	0f c0       	rjmp	.+30     	; 0x6c02 <HCLCD_WriteChar4Bit+0xf8>
    6be4:	80 e9       	ldi	r24, 0x90	; 144
    6be6:	91 e0       	ldi	r25, 0x01	; 1
    6be8:	9a 8b       	std	Y+18, r25	; 0x12
    6bea:	89 8b       	std	Y+17, r24	; 0x11
    6bec:	89 89       	ldd	r24, Y+17	; 0x11
    6bee:	9a 89       	ldd	r25, Y+18	; 0x12
    6bf0:	01 97       	sbiw	r24, 0x01	; 1
    6bf2:	f1 f7       	brne	.-4      	; 0x6bf0 <HCLCD_WriteChar4Bit+0xe6>
    6bf4:	9a 8b       	std	Y+18, r25	; 0x12
    6bf6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6bf8:	8b 89       	ldd	r24, Y+19	; 0x13
    6bfa:	9c 89       	ldd	r25, Y+20	; 0x14
    6bfc:	01 97       	sbiw	r24, 0x01	; 1
    6bfe:	9c 8b       	std	Y+20, r25	; 0x14
    6c00:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6c02:	8b 89       	ldd	r24, Y+19	; 0x13
    6c04:	9c 89       	ldd	r25, Y+20	; 0x14
    6c06:	00 97       	sbiw	r24, 0x00	; 0
    6c08:	69 f7       	brne	.-38     	; 0x6be4 <HCLCD_WriteChar4Bit+0xda>
    6c0a:	14 c0       	rjmp	.+40     	; 0x6c34 <HCLCD_WriteChar4Bit+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6c0c:	6d 89       	ldd	r22, Y+21	; 0x15
    6c0e:	7e 89       	ldd	r23, Y+22	; 0x16
    6c10:	8f 89       	ldd	r24, Y+23	; 0x17
    6c12:	98 8d       	ldd	r25, Y+24	; 0x18
    6c14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6c18:	dc 01       	movw	r26, r24
    6c1a:	cb 01       	movw	r24, r22
    6c1c:	9c 8b       	std	Y+20, r25	; 0x14
    6c1e:	8b 8b       	std	Y+19, r24	; 0x13
    6c20:	8b 89       	ldd	r24, Y+19	; 0x13
    6c22:	9c 89       	ldd	r25, Y+20	; 0x14
    6c24:	98 8b       	std	Y+16, r25	; 0x10
    6c26:	8f 87       	std	Y+15, r24	; 0x0f
    6c28:	8f 85       	ldd	r24, Y+15	; 0x0f
    6c2a:	98 89       	ldd	r25, Y+16	; 0x10
    6c2c:	01 97       	sbiw	r24, 0x01	; 1
    6c2e:	f1 f7       	brne	.-4      	; 0x6c2c <HCLCD_WriteChar4Bit+0x122>
    6c30:	98 8b       	std	Y+16, r25	; 0x10
    6c32:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Set_PIN_VALUE(CONTROL_PORT,E,PIN_LOW);
    6c34:	81 e0       	ldi	r24, 0x01	; 1
    6c36:	62 e0       	ldi	r22, 0x02	; 2
    6c38:	40 e0       	ldi	r20, 0x00	; 0
    6c3a:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
	//set LOW nibble value of DATA
	MDIO_SetNibbleValue(HCLCD_PIN_START,DATA_PORT,Copy_u8Data);
    6c3e:	84 e0       	ldi	r24, 0x04	; 4
    6c40:	61 e0       	ldi	r22, 0x01	; 1
    6c42:	4d 8d       	ldd	r20, Y+29	; 0x1d
    6c44:	0e 94 a9 1b 	call	0x3752	; 0x3752 <MDIO_SetNibbleValue>
	//SEND THE FALLING EDGE ENABLE
		MDIO_Set_PIN_VALUE(CONTROL_PORT,E,PIN_HIGH);
    6c48:	81 e0       	ldi	r24, 0x01	; 1
    6c4a:	62 e0       	ldi	r22, 0x02	; 2
    6c4c:	41 e0       	ldi	r20, 0x01	; 1
    6c4e:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
    6c52:	80 e0       	ldi	r24, 0x00	; 0
    6c54:	90 e0       	ldi	r25, 0x00	; 0
    6c56:	a0 e0       	ldi	r26, 0x00	; 0
    6c58:	b0 e4       	ldi	r27, 0x40	; 64
    6c5a:	8b 87       	std	Y+11, r24	; 0x0b
    6c5c:	9c 87       	std	Y+12, r25	; 0x0c
    6c5e:	ad 87       	std	Y+13, r26	; 0x0d
    6c60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6c62:	6b 85       	ldd	r22, Y+11	; 0x0b
    6c64:	7c 85       	ldd	r23, Y+12	; 0x0c
    6c66:	8d 85       	ldd	r24, Y+13	; 0x0d
    6c68:	9e 85       	ldd	r25, Y+14	; 0x0e
    6c6a:	20 e0       	ldi	r18, 0x00	; 0
    6c6c:	30 e0       	ldi	r19, 0x00	; 0
    6c6e:	4a e7       	ldi	r20, 0x7A	; 122
    6c70:	55 e4       	ldi	r21, 0x45	; 69
    6c72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6c76:	dc 01       	movw	r26, r24
    6c78:	cb 01       	movw	r24, r22
    6c7a:	8f 83       	std	Y+7, r24	; 0x07
    6c7c:	98 87       	std	Y+8, r25	; 0x08
    6c7e:	a9 87       	std	Y+9, r26	; 0x09
    6c80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6c82:	6f 81       	ldd	r22, Y+7	; 0x07
    6c84:	78 85       	ldd	r23, Y+8	; 0x08
    6c86:	89 85       	ldd	r24, Y+9	; 0x09
    6c88:	9a 85       	ldd	r25, Y+10	; 0x0a
    6c8a:	20 e0       	ldi	r18, 0x00	; 0
    6c8c:	30 e0       	ldi	r19, 0x00	; 0
    6c8e:	40 e8       	ldi	r20, 0x80	; 128
    6c90:	5f e3       	ldi	r21, 0x3F	; 63
    6c92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6c96:	88 23       	and	r24, r24
    6c98:	2c f4       	brge	.+10     	; 0x6ca4 <HCLCD_WriteChar4Bit+0x19a>
		__ticks = 1;
    6c9a:	81 e0       	ldi	r24, 0x01	; 1
    6c9c:	90 e0       	ldi	r25, 0x00	; 0
    6c9e:	9e 83       	std	Y+6, r25	; 0x06
    6ca0:	8d 83       	std	Y+5, r24	; 0x05
    6ca2:	3f c0       	rjmp	.+126    	; 0x6d22 <HCLCD_WriteChar4Bit+0x218>
	else if (__tmp > 65535)
    6ca4:	6f 81       	ldd	r22, Y+7	; 0x07
    6ca6:	78 85       	ldd	r23, Y+8	; 0x08
    6ca8:	89 85       	ldd	r24, Y+9	; 0x09
    6caa:	9a 85       	ldd	r25, Y+10	; 0x0a
    6cac:	20 e0       	ldi	r18, 0x00	; 0
    6cae:	3f ef       	ldi	r19, 0xFF	; 255
    6cb0:	4f e7       	ldi	r20, 0x7F	; 127
    6cb2:	57 e4       	ldi	r21, 0x47	; 71
    6cb4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6cb8:	18 16       	cp	r1, r24
    6cba:	4c f5       	brge	.+82     	; 0x6d0e <HCLCD_WriteChar4Bit+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6cbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    6cbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    6cc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    6cc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    6cc4:	20 e0       	ldi	r18, 0x00	; 0
    6cc6:	30 e0       	ldi	r19, 0x00	; 0
    6cc8:	40 e2       	ldi	r20, 0x20	; 32
    6cca:	51 e4       	ldi	r21, 0x41	; 65
    6ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6cd0:	dc 01       	movw	r26, r24
    6cd2:	cb 01       	movw	r24, r22
    6cd4:	bc 01       	movw	r22, r24
    6cd6:	cd 01       	movw	r24, r26
    6cd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6cdc:	dc 01       	movw	r26, r24
    6cde:	cb 01       	movw	r24, r22
    6ce0:	9e 83       	std	Y+6, r25	; 0x06
    6ce2:	8d 83       	std	Y+5, r24	; 0x05
    6ce4:	0f c0       	rjmp	.+30     	; 0x6d04 <HCLCD_WriteChar4Bit+0x1fa>
    6ce6:	80 e9       	ldi	r24, 0x90	; 144
    6ce8:	91 e0       	ldi	r25, 0x01	; 1
    6cea:	9c 83       	std	Y+4, r25	; 0x04
    6cec:	8b 83       	std	Y+3, r24	; 0x03
    6cee:	8b 81       	ldd	r24, Y+3	; 0x03
    6cf0:	9c 81       	ldd	r25, Y+4	; 0x04
    6cf2:	01 97       	sbiw	r24, 0x01	; 1
    6cf4:	f1 f7       	brne	.-4      	; 0x6cf2 <HCLCD_WriteChar4Bit+0x1e8>
    6cf6:	9c 83       	std	Y+4, r25	; 0x04
    6cf8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6cfa:	8d 81       	ldd	r24, Y+5	; 0x05
    6cfc:	9e 81       	ldd	r25, Y+6	; 0x06
    6cfe:	01 97       	sbiw	r24, 0x01	; 1
    6d00:	9e 83       	std	Y+6, r25	; 0x06
    6d02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6d04:	8d 81       	ldd	r24, Y+5	; 0x05
    6d06:	9e 81       	ldd	r25, Y+6	; 0x06
    6d08:	00 97       	sbiw	r24, 0x00	; 0
    6d0a:	69 f7       	brne	.-38     	; 0x6ce6 <HCLCD_WriteChar4Bit+0x1dc>
    6d0c:	14 c0       	rjmp	.+40     	; 0x6d36 <HCLCD_WriteChar4Bit+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6d0e:	6f 81       	ldd	r22, Y+7	; 0x07
    6d10:	78 85       	ldd	r23, Y+8	; 0x08
    6d12:	89 85       	ldd	r24, Y+9	; 0x09
    6d14:	9a 85       	ldd	r25, Y+10	; 0x0a
    6d16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6d1a:	dc 01       	movw	r26, r24
    6d1c:	cb 01       	movw	r24, r22
    6d1e:	9e 83       	std	Y+6, r25	; 0x06
    6d20:	8d 83       	std	Y+5, r24	; 0x05
    6d22:	8d 81       	ldd	r24, Y+5	; 0x05
    6d24:	9e 81       	ldd	r25, Y+6	; 0x06
    6d26:	9a 83       	std	Y+2, r25	; 0x02
    6d28:	89 83       	std	Y+1, r24	; 0x01
    6d2a:	89 81       	ldd	r24, Y+1	; 0x01
    6d2c:	9a 81       	ldd	r25, Y+2	; 0x02
    6d2e:	01 97       	sbiw	r24, 0x01	; 1
    6d30:	f1 f7       	brne	.-4      	; 0x6d2e <HCLCD_WriteChar4Bit+0x224>
    6d32:	9a 83       	std	Y+2, r25	; 0x02
    6d34:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		MDIO_Set_PIN_VALUE(CONTROL_PORT,E,PIN_LOW);
    6d36:	81 e0       	ldi	r24, 0x01	; 1
    6d38:	62 e0       	ldi	r22, 0x02	; 2
    6d3a:	40 e0       	ldi	r20, 0x00	; 0
    6d3c:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>

}
    6d40:	6d 96       	adiw	r28, 0x1d	; 29
    6d42:	0f b6       	in	r0, 0x3f	; 63
    6d44:	f8 94       	cli
    6d46:	de bf       	out	0x3e, r29	; 62
    6d48:	0f be       	out	0x3f, r0	; 63
    6d4a:	cd bf       	out	0x3d, r28	; 61
    6d4c:	cf 91       	pop	r28
    6d4e:	df 91       	pop	r29
    6d50:	08 95       	ret

00006d52 <HCLCD_WriteString>:
void HCLCD_WriteString(char *u8Copy_u8String){
    6d52:	df 93       	push	r29
    6d54:	cf 93       	push	r28
    6d56:	00 d0       	rcall	.+0      	; 0x6d58 <HCLCD_WriteString+0x6>
    6d58:	00 d0       	rcall	.+0      	; 0x6d5a <HCLCD_WriteString+0x8>
    6d5a:	cd b7       	in	r28, 0x3d	; 61
    6d5c:	de b7       	in	r29, 0x3e	; 62
    6d5e:	9c 83       	std	Y+4, r25	; 0x04
    6d60:	8b 83       	std	Y+3, r24	; 0x03
	u8 Loc_u8Counter=0;
    6d62:	1a 82       	std	Y+2, r1	; 0x02
	u8 Copy_u8Data_SizeofString =0;
    6d64:	19 82       	std	Y+1, r1	; 0x01
	for (Loc_u8Counter = 0; u8Copy_u8String[Loc_u8Counter] != '\0'; Loc_u8Counter++){
    6d66:	1a 82       	std	Y+2, r1	; 0x02
    6d68:	06 c0       	rjmp	.+12     	; 0x6d76 <HCLCD_WriteString+0x24>
		Copy_u8Data_SizeofString =Loc_u8Counter+1;
    6d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    6d6c:	8f 5f       	subi	r24, 0xFF	; 255
    6d6e:	89 83       	std	Y+1, r24	; 0x01

}
void HCLCD_WriteString(char *u8Copy_u8String){
	u8 Loc_u8Counter=0;
	u8 Copy_u8Data_SizeofString =0;
	for (Loc_u8Counter = 0; u8Copy_u8String[Loc_u8Counter] != '\0'; Loc_u8Counter++){
    6d70:	8a 81       	ldd	r24, Y+2	; 0x02
    6d72:	8f 5f       	subi	r24, 0xFF	; 255
    6d74:	8a 83       	std	Y+2, r24	; 0x02
    6d76:	8a 81       	ldd	r24, Y+2	; 0x02
    6d78:	28 2f       	mov	r18, r24
    6d7a:	30 e0       	ldi	r19, 0x00	; 0
    6d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    6d7e:	9c 81       	ldd	r25, Y+4	; 0x04
    6d80:	fc 01       	movw	r30, r24
    6d82:	e2 0f       	add	r30, r18
    6d84:	f3 1f       	adc	r31, r19
    6d86:	80 81       	ld	r24, Z
    6d88:	88 23       	and	r24, r24
    6d8a:	79 f7       	brne	.-34     	; 0x6d6a <HCLCD_WriteString+0x18>
		Copy_u8Data_SizeofString =Loc_u8Counter+1;
	}
	if(Copy_u8Data_SizeofString>32){
    6d8c:	89 81       	ldd	r24, Y+1	; 0x01
    6d8e:	81 32       	cpi	r24, 0x21	; 33
    6d90:	28 f0       	brcs	.+10     	; 0x6d9c <HCLCD_WriteString+0x4a>
		HCLCD_WriteString("string supported is 32chars!");
    6d92:	80 e6       	ldi	r24, 0x60	; 96
    6d94:	90 e0       	ldi	r25, 0x00	; 0
    6d96:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <HCLCD_WriteString>
    6d9a:	32 c0       	rjmp	.+100    	; 0x6e00 <HCLCD_WriteString+0xae>

	}
	else{
	Loc_u8Counter =0;
    6d9c:	1a 82       	std	Y+2, r1	; 0x02
    6d9e:	2d c0       	rjmp	.+90     	; 0x6dfa <HCLCD_WriteString+0xa8>
	while(Copy_u8Data_SizeofString>0){
		if(Loc_u8Counter<HCLCD_LINE_LENGTH){
    6da0:	8a 81       	ldd	r24, Y+2	; 0x02
    6da2:	80 31       	cpi	r24, 0x10	; 16
    6da4:	90 f4       	brcc	.+36     	; 0x6dca <HCLCD_WriteString+0x78>
			 HCLCD_WriteChar4Bit(u8Copy_u8String[Loc_u8Counter]);
    6da6:	8a 81       	ldd	r24, Y+2	; 0x02
    6da8:	28 2f       	mov	r18, r24
    6daa:	30 e0       	ldi	r19, 0x00	; 0
    6dac:	8b 81       	ldd	r24, Y+3	; 0x03
    6dae:	9c 81       	ldd	r25, Y+4	; 0x04
    6db0:	fc 01       	movw	r30, r24
    6db2:	e2 0f       	add	r30, r18
    6db4:	f3 1f       	adc	r31, r19
    6db6:	80 81       	ld	r24, Z
    6db8:	0e 94 85 35 	call	0x6b0a	; 0x6b0a <HCLCD_WriteChar4Bit>
		     Loc_u8Counter++;
    6dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    6dbe:	8f 5f       	subi	r24, 0xFF	; 255
    6dc0:	8a 83       	std	Y+2, r24	; 0x02
			 Copy_u8Data_SizeofString--;
    6dc2:	89 81       	ldd	r24, Y+1	; 0x01
    6dc4:	81 50       	subi	r24, 0x01	; 1
    6dc6:	89 83       	std	Y+1, r24	; 0x01
    6dc8:	18 c0       	rjmp	.+48     	; 0x6dfa <HCLCD_WriteString+0xa8>
		}
		else{
			 HCLCD_SetCursorPosition(HCLCD_LINE_1, Loc_u8Counter-HCLCD_LINE_LENGTH);
    6dca:	8a 81       	ldd	r24, Y+2	; 0x02
    6dcc:	98 2f       	mov	r25, r24
    6dce:	90 51       	subi	r25, 0x10	; 16
    6dd0:	81 e0       	ldi	r24, 0x01	; 1
    6dd2:	69 2f       	mov	r22, r25
    6dd4:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
			 HCLCD_WriteChar4Bit(u8Copy_u8String[Loc_u8Counter]);
    6dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    6dda:	28 2f       	mov	r18, r24
    6ddc:	30 e0       	ldi	r19, 0x00	; 0
    6dde:	8b 81       	ldd	r24, Y+3	; 0x03
    6de0:	9c 81       	ldd	r25, Y+4	; 0x04
    6de2:	fc 01       	movw	r30, r24
    6de4:	e2 0f       	add	r30, r18
    6de6:	f3 1f       	adc	r31, r19
    6de8:	80 81       	ld	r24, Z
    6dea:	0e 94 85 35 	call	0x6b0a	; 0x6b0a <HCLCD_WriteChar4Bit>
			 Loc_u8Counter++;
    6dee:	8a 81       	ldd	r24, Y+2	; 0x02
    6df0:	8f 5f       	subi	r24, 0xFF	; 255
    6df2:	8a 83       	std	Y+2, r24	; 0x02
			 Copy_u8Data_SizeofString--;
    6df4:	89 81       	ldd	r24, Y+1	; 0x01
    6df6:	81 50       	subi	r24, 0x01	; 1
    6df8:	89 83       	std	Y+1, r24	; 0x01
		HCLCD_WriteString("string supported is 32chars!");

	}
	else{
	Loc_u8Counter =0;
	while(Copy_u8Data_SizeofString>0){
    6dfa:	89 81       	ldd	r24, Y+1	; 0x01
    6dfc:	88 23       	and	r24, r24
    6dfe:	81 f6       	brne	.-96     	; 0x6da0 <HCLCD_WriteString+0x4e>
			 Copy_u8Data_SizeofString--;
		}
	}
	}

}
    6e00:	0f 90       	pop	r0
    6e02:	0f 90       	pop	r0
    6e04:	0f 90       	pop	r0
    6e06:	0f 90       	pop	r0
    6e08:	cf 91       	pop	r28
    6e0a:	df 91       	pop	r29
    6e0c:	08 95       	ret

00006e0e <HCLCD_SetCursorPosition>:
void HCLCD_SetCursorPosition(u8 Copy_u8LineNumber,u8 Copy_u8PositionNumber)
{
    6e0e:	df 93       	push	r29
    6e10:	cf 93       	push	r28
    6e12:	00 d0       	rcall	.+0      	; 0x6e14 <HCLCD_SetCursorPosition+0x6>
    6e14:	cd b7       	in	r28, 0x3d	; 61
    6e16:	de b7       	in	r29, 0x3e	; 62
    6e18:	89 83       	std	Y+1, r24	; 0x01
    6e1a:	6a 83       	std	Y+2, r22	; 0x02
if((Copy_u8LineNumber==HCLCD_LINE_0)||(Copy_u8LineNumber==HCLCD_LINE_1))
    6e1c:	89 81       	ldd	r24, Y+1	; 0x01
    6e1e:	88 23       	and	r24, r24
    6e20:	19 f0       	breq	.+6      	; 0x6e28 <HCLCD_SetCursorPosition+0x1a>
    6e22:	89 81       	ldd	r24, Y+1	; 0x01
    6e24:	81 30       	cpi	r24, 0x01	; 1
    6e26:	79 f4       	brne	.+30     	; 0x6e46 <HCLCD_SetCursorPosition+0x38>
{
	if(Copy_u8PositionNumber<16)
    6e28:	8a 81       	ldd	r24, Y+2	; 0x02
    6e2a:	80 31       	cpi	r24, 0x10	; 16
    6e2c:	60 f4       	brcc	.+24     	; 0x6e46 <HCLCD_SetCursorPosition+0x38>
	{
		if(Copy_u8LineNumber==HCLCD_LINE_0)
    6e2e:	89 81       	ldd	r24, Y+1	; 0x01
    6e30:	88 23       	and	r24, r24
    6e32:	29 f4       	brne	.+10     	; 0x6e3e <HCLCD_SetCursorPosition+0x30>
		{
			HCLCD_WriteCommand4Bit(Copy_u8PositionNumber+HCLCD_LINE0_OFFSET);
    6e34:	8a 81       	ldd	r24, Y+2	; 0x02
    6e36:	80 58       	subi	r24, 0x80	; 128
    6e38:	0e 94 61 34 	call	0x68c2	; 0x68c2 <HCLCD_WriteCommand4Bit>
    6e3c:	04 c0       	rjmp	.+8      	; 0x6e46 <HCLCD_SetCursorPosition+0x38>
		}
		else
		{
			HCLCD_WriteCommand4Bit(Copy_u8PositionNumber+HCLCD_LINE1_OFFSET);
    6e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    6e40:	80 54       	subi	r24, 0x40	; 64
    6e42:	0e 94 61 34 	call	0x68c2	; 0x68c2 <HCLCD_WriteCommand4Bit>
}
else
{
	//Wrong Line Chosen
}
}
    6e46:	0f 90       	pop	r0
    6e48:	0f 90       	pop	r0
    6e4a:	cf 91       	pop	r28
    6e4c:	df 91       	pop	r29
    6e4e:	08 95       	ret

00006e50 <HCLCD_WriteNumber>:
void HCLCD_WriteNumber(u32 Copy_u32Number)
{
    6e50:	0f 93       	push	r16
    6e52:	1f 93       	push	r17
    6e54:	df 93       	push	r29
    6e56:	cf 93       	push	r28
    6e58:	cd b7       	in	r28, 0x3d	; 61
    6e5a:	de b7       	in	r29, 0x3e	; 62
    6e5c:	60 97       	sbiw	r28, 0x10	; 16
    6e5e:	0f b6       	in	r0, 0x3f	; 63
    6e60:	f8 94       	cli
    6e62:	de bf       	out	0x3e, r29	; 62
    6e64:	0f be       	out	0x3f, r0	; 63
    6e66:	cd bf       	out	0x3d, r28	; 61
    6e68:	6d 87       	std	Y+13, r22	; 0x0d
    6e6a:	7e 87       	std	Y+14, r23	; 0x0e
    6e6c:	8f 87       	std	Y+15, r24	; 0x0f
    6e6e:	98 8b       	std	Y+16, r25	; 0x10
	which is 10 digits
	 */
	u8 Loc_u8Arr_Digits[10];

	/*Define a Local Counter to traverse the array*/
	u8 Loc_Counter=0;
    6e70:	1a 82       	std	Y+2, r1	; 0x02

	/*Check on the upcoming number*/
	if(Copy_u32Number>0)
    6e72:	8d 85       	ldd	r24, Y+13	; 0x0d
    6e74:	9e 85       	ldd	r25, Y+14	; 0x0e
    6e76:	af 85       	ldd	r26, Y+15	; 0x0f
    6e78:	b8 89       	ldd	r27, Y+16	; 0x10
    6e7a:	00 97       	sbiw	r24, 0x00	; 0
    6e7c:	a1 05       	cpc	r26, r1
    6e7e:	b1 05       	cpc	r27, r1
    6e80:	09 f4       	brne	.+2      	; 0x6e84 <HCLCD_WriteNumber+0x34>
    6e82:	4f c0       	rjmp	.+158    	; 0x6f22 <HCLCD_WriteNumber+0xd2>
    6e84:	2d c0       	rjmp	.+90     	; 0x6ee0 <HCLCD_WriteNumber+0x90>
		/*Parsing the number into the array*/
		while(Copy_u32Number!=0) //Exit Condition means number is done parsing
		{
			//Extract the Least Significant Digit and Put it in the
			//Array
			Loc_u8Arr_Digits[Loc_Counter]=Copy_u32Number%10 ;
    6e86:	8a 81       	ldd	r24, Y+2	; 0x02
    6e88:	08 2f       	mov	r16, r24
    6e8a:	10 e0       	ldi	r17, 0x00	; 0
    6e8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    6e8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6e90:	af 85       	ldd	r26, Y+15	; 0x0f
    6e92:	b8 89       	ldd	r27, Y+16	; 0x10
    6e94:	2a e0       	ldi	r18, 0x0A	; 10
    6e96:	30 e0       	ldi	r19, 0x00	; 0
    6e98:	40 e0       	ldi	r20, 0x00	; 0
    6e9a:	50 e0       	ldi	r21, 0x00	; 0
    6e9c:	bc 01       	movw	r22, r24
    6e9e:	cd 01       	movw	r24, r26
    6ea0:	0e 94 ea 54 	call	0xa9d4	; 0xa9d4 <__udivmodsi4>
    6ea4:	dc 01       	movw	r26, r24
    6ea6:	cb 01       	movw	r24, r22
    6ea8:	28 2f       	mov	r18, r24
    6eaa:	ce 01       	movw	r24, r28
    6eac:	03 96       	adiw	r24, 0x03	; 3
    6eae:	fc 01       	movw	r30, r24
    6eb0:	e0 0f       	add	r30, r16
    6eb2:	f1 1f       	adc	r31, r17
    6eb4:	20 83       	st	Z, r18

			//Removing the Extracted digit from the number
			Copy_u32Number=Copy_u32Number/10 ;
    6eb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    6eb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    6eba:	af 85       	ldd	r26, Y+15	; 0x0f
    6ebc:	b8 89       	ldd	r27, Y+16	; 0x10
    6ebe:	2a e0       	ldi	r18, 0x0A	; 10
    6ec0:	30 e0       	ldi	r19, 0x00	; 0
    6ec2:	40 e0       	ldi	r20, 0x00	; 0
    6ec4:	50 e0       	ldi	r21, 0x00	; 0
    6ec6:	bc 01       	movw	r22, r24
    6ec8:	cd 01       	movw	r24, r26
    6eca:	0e 94 ea 54 	call	0xa9d4	; 0xa9d4 <__udivmodsi4>
    6ece:	da 01       	movw	r26, r20
    6ed0:	c9 01       	movw	r24, r18
    6ed2:	8d 87       	std	Y+13, r24	; 0x0d
    6ed4:	9e 87       	std	Y+14, r25	; 0x0e
    6ed6:	af 87       	std	Y+15, r26	; 0x0f
    6ed8:	b8 8b       	std	Y+16, r27	; 0x10

			//Increasing the counter so the digits are saved in next array element
			Loc_Counter++;
    6eda:	8a 81       	ldd	r24, Y+2	; 0x02
    6edc:	8f 5f       	subi	r24, 0xFF	; 255
    6ede:	8a 83       	std	Y+2, r24	; 0x02

	/*Check on the upcoming number*/
	if(Copy_u32Number>0)
	{
		/*Parsing the number into the array*/
		while(Copy_u32Number!=0) //Exit Condition means number is done parsing
    6ee0:	8d 85       	ldd	r24, Y+13	; 0x0d
    6ee2:	9e 85       	ldd	r25, Y+14	; 0x0e
    6ee4:	af 85       	ldd	r26, Y+15	; 0x0f
    6ee6:	b8 89       	ldd	r27, Y+16	; 0x10
    6ee8:	00 97       	sbiw	r24, 0x00	; 0
    6eea:	a1 05       	cpc	r26, r1
    6eec:	b1 05       	cpc	r27, r1
    6eee:	59 f6       	brne	.-106    	; 0x6e86 <HCLCD_WriteNumber+0x36>
		//in the array but backwards

		//Take Care Loc_forCounter is signed
		//because we are decrementing it
		s8 Loc_forCounter;
		for(Loc_forCounter=Loc_Counter-1;Loc_forCounter>=0;Loc_forCounter--)
    6ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    6ef2:	81 50       	subi	r24, 0x01	; 1
    6ef4:	89 83       	std	Y+1, r24	; 0x01
    6ef6:	11 c0       	rjmp	.+34     	; 0x6f1a <HCLCD_WriteNumber+0xca>
		{
			//Write the digits to the screen in their right order
			//Notice the addition of the number to the ASCII Code
			//of the number 0 because our Function takes ASCII of character
			//to Print on the LCD
			HCLCD_WriteChar4Bit(Loc_u8Arr_Digits[Loc_forCounter]+'0');
    6ef8:	89 81       	ldd	r24, Y+1	; 0x01
    6efa:	28 2f       	mov	r18, r24
    6efc:	33 27       	eor	r19, r19
    6efe:	27 fd       	sbrc	r18, 7
    6f00:	30 95       	com	r19
    6f02:	ce 01       	movw	r24, r28
    6f04:	03 96       	adiw	r24, 0x03	; 3
    6f06:	fc 01       	movw	r30, r24
    6f08:	e2 0f       	add	r30, r18
    6f0a:	f3 1f       	adc	r31, r19
    6f0c:	80 81       	ld	r24, Z
    6f0e:	80 5d       	subi	r24, 0xD0	; 208
    6f10:	0e 94 85 35 	call	0x6b0a	; 0x6b0a <HCLCD_WriteChar4Bit>
		//in the array but backwards

		//Take Care Loc_forCounter is signed
		//because we are decrementing it
		s8 Loc_forCounter;
		for(Loc_forCounter=Loc_Counter-1;Loc_forCounter>=0;Loc_forCounter--)
    6f14:	89 81       	ldd	r24, Y+1	; 0x01
    6f16:	81 50       	subi	r24, 0x01	; 1
    6f18:	89 83       	std	Y+1, r24	; 0x01
    6f1a:	89 81       	ldd	r24, Y+1	; 0x01
    6f1c:	88 23       	and	r24, r24
    6f1e:	64 f7       	brge	.-40     	; 0x6ef8 <HCLCD_WriteNumber+0xa8>
    6f20:	03 c0       	rjmp	.+6      	; 0x6f28 <HCLCD_WriteNumber+0xd8>

	}
	else
	{
		/*if the number is zero so we have to send ASCII Code of Zero*/
		HCLCD_WriteChar4Bit('0');
    6f22:	80 e3       	ldi	r24, 0x30	; 48
    6f24:	0e 94 85 35 	call	0x6b0a	; 0x6b0a <HCLCD_WriteChar4Bit>
	}

}
    6f28:	60 96       	adiw	r28, 0x10	; 16
    6f2a:	0f b6       	in	r0, 0x3f	; 63
    6f2c:	f8 94       	cli
    6f2e:	de bf       	out	0x3e, r29	; 62
    6f30:	0f be       	out	0x3f, r0	; 63
    6f32:	cd bf       	out	0x3d, r28	; 61
    6f34:	cf 91       	pop	r28
    6f36:	df 91       	pop	r29
    6f38:	1f 91       	pop	r17
    6f3a:	0f 91       	pop	r16
    6f3c:	08 95       	ret

00006f3e <HBUZZERInit>:
 *  Created on: Dec 8, 2022
 *      Author: Ismail
 */
#include"HBUZZER_Interface.h"
#include"HBUZZER_Private.h"
void HBUZZERInit(){
    6f3e:	df 93       	push	r29
    6f40:	cf 93       	push	r28
    6f42:	cd b7       	in	r28, 0x3d	; 61
    6f44:	de b7       	in	r29, 0x3e	; 62
MDIO_Set_PIN_DIR(MDIO_PORTD,HBUZZERPIN,PIN_OUTPUT);
    6f46:	83 e0       	ldi	r24, 0x03	; 3
    6f48:	63 e0       	ldi	r22, 0x03	; 3
    6f4a:	41 e0       	ldi	r20, 0x01	; 1
    6f4c:	0e 94 20 18 	call	0x3040	; 0x3040 <MDIO_Set_PIN_DIR>
}
    6f50:	cf 91       	pop	r28
    6f52:	df 91       	pop	r29
    6f54:	08 95       	ret

00006f56 <HBUZZERON>:
void HBUZZERON(){
    6f56:	df 93       	push	r29
    6f58:	cf 93       	push	r28
    6f5a:	cd b7       	in	r28, 0x3d	; 61
    6f5c:	de b7       	in	r29, 0x3e	; 62
MDIO_Set_PIN_VALUE(MDIO_PORTD,HBUZZERPIN,PIN_HIGH);
    6f5e:	83 e0       	ldi	r24, 0x03	; 3
    6f60:	63 e0       	ldi	r22, 0x03	; 3
    6f62:	41 e0       	ldi	r20, 0x01	; 1
    6f64:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
}
    6f68:	cf 91       	pop	r28
    6f6a:	df 91       	pop	r29
    6f6c:	08 95       	ret

00006f6e <HBUZZEROFF>:
void HBUZZEROFF(){
    6f6e:	df 93       	push	r29
    6f70:	cf 93       	push	r28
    6f72:	cd b7       	in	r28, 0x3d	; 61
    6f74:	de b7       	in	r29, 0x3e	; 62
	MDIO_Set_PIN_VALUE(MDIO_PORTD,HBUZZERPIN,PIN_LOW);
    6f76:	83 e0       	ldi	r24, 0x03	; 3
    6f78:	63 e0       	ldi	r22, 0x03	; 3
    6f7a:	40 e0       	ldi	r20, 0x00	; 0
    6f7c:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <MDIO_Set_PIN_VALUE>
}
    6f80:	cf 91       	pop	r28
    6f82:	df 91       	pop	r29
    6f84:	08 95       	ret

00006f86 <HBUZZERALARM>:
void HBUZZERALARM(){
    6f86:	df 93       	push	r29
    6f88:	cf 93       	push	r28
    6f8a:	cd b7       	in	r28, 0x3d	; 61
    6f8c:	de b7       	in	r29, 0x3e	; 62
    6f8e:	2e 97       	sbiw	r28, 0x0e	; 14
    6f90:	0f b6       	in	r0, 0x3f	; 63
    6f92:	f8 94       	cli
    6f94:	de bf       	out	0x3e, r29	; 62
    6f96:	0f be       	out	0x3f, r0	; 63
    6f98:	cd bf       	out	0x3d, r28	; 61
	HBUZZERON();
    6f9a:	0e 94 ab 37 	call	0x6f56	; 0x6f56 <HBUZZERON>
    6f9e:	80 e0       	ldi	r24, 0x00	; 0
    6fa0:	90 e0       	ldi	r25, 0x00	; 0
    6fa2:	aa ef       	ldi	r26, 0xFA	; 250
    6fa4:	b4 e4       	ldi	r27, 0x44	; 68
    6fa6:	8b 87       	std	Y+11, r24	; 0x0b
    6fa8:	9c 87       	std	Y+12, r25	; 0x0c
    6faa:	ad 87       	std	Y+13, r26	; 0x0d
    6fac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6fae:	6b 85       	ldd	r22, Y+11	; 0x0b
    6fb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    6fb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    6fb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    6fb6:	20 e0       	ldi	r18, 0x00	; 0
    6fb8:	30 e0       	ldi	r19, 0x00	; 0
    6fba:	4a e7       	ldi	r20, 0x7A	; 122
    6fbc:	55 e4       	ldi	r21, 0x45	; 69
    6fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6fc2:	dc 01       	movw	r26, r24
    6fc4:	cb 01       	movw	r24, r22
    6fc6:	8f 83       	std	Y+7, r24	; 0x07
    6fc8:	98 87       	std	Y+8, r25	; 0x08
    6fca:	a9 87       	std	Y+9, r26	; 0x09
    6fcc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6fce:	6f 81       	ldd	r22, Y+7	; 0x07
    6fd0:	78 85       	ldd	r23, Y+8	; 0x08
    6fd2:	89 85       	ldd	r24, Y+9	; 0x09
    6fd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    6fd6:	20 e0       	ldi	r18, 0x00	; 0
    6fd8:	30 e0       	ldi	r19, 0x00	; 0
    6fda:	40 e8       	ldi	r20, 0x80	; 128
    6fdc:	5f e3       	ldi	r21, 0x3F	; 63
    6fde:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6fe2:	88 23       	and	r24, r24
    6fe4:	2c f4       	brge	.+10     	; 0x6ff0 <HBUZZERALARM+0x6a>
		__ticks = 1;
    6fe6:	81 e0       	ldi	r24, 0x01	; 1
    6fe8:	90 e0       	ldi	r25, 0x00	; 0
    6fea:	9e 83       	std	Y+6, r25	; 0x06
    6fec:	8d 83       	std	Y+5, r24	; 0x05
    6fee:	3f c0       	rjmp	.+126    	; 0x706e <HBUZZERALARM+0xe8>
	else if (__tmp > 65535)
    6ff0:	6f 81       	ldd	r22, Y+7	; 0x07
    6ff2:	78 85       	ldd	r23, Y+8	; 0x08
    6ff4:	89 85       	ldd	r24, Y+9	; 0x09
    6ff6:	9a 85       	ldd	r25, Y+10	; 0x0a
    6ff8:	20 e0       	ldi	r18, 0x00	; 0
    6ffa:	3f ef       	ldi	r19, 0xFF	; 255
    6ffc:	4f e7       	ldi	r20, 0x7F	; 127
    6ffe:	57 e4       	ldi	r21, 0x47	; 71
    7000:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7004:	18 16       	cp	r1, r24
    7006:	4c f5       	brge	.+82     	; 0x705a <HBUZZERALARM+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7008:	6b 85       	ldd	r22, Y+11	; 0x0b
    700a:	7c 85       	ldd	r23, Y+12	; 0x0c
    700c:	8d 85       	ldd	r24, Y+13	; 0x0d
    700e:	9e 85       	ldd	r25, Y+14	; 0x0e
    7010:	20 e0       	ldi	r18, 0x00	; 0
    7012:	30 e0       	ldi	r19, 0x00	; 0
    7014:	40 e2       	ldi	r20, 0x20	; 32
    7016:	51 e4       	ldi	r21, 0x41	; 65
    7018:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    701c:	dc 01       	movw	r26, r24
    701e:	cb 01       	movw	r24, r22
    7020:	bc 01       	movw	r22, r24
    7022:	cd 01       	movw	r24, r26
    7024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7028:	dc 01       	movw	r26, r24
    702a:	cb 01       	movw	r24, r22
    702c:	9e 83       	std	Y+6, r25	; 0x06
    702e:	8d 83       	std	Y+5, r24	; 0x05
    7030:	0f c0       	rjmp	.+30     	; 0x7050 <HBUZZERALARM+0xca>
    7032:	80 e9       	ldi	r24, 0x90	; 144
    7034:	91 e0       	ldi	r25, 0x01	; 1
    7036:	9c 83       	std	Y+4, r25	; 0x04
    7038:	8b 83       	std	Y+3, r24	; 0x03
    703a:	8b 81       	ldd	r24, Y+3	; 0x03
    703c:	9c 81       	ldd	r25, Y+4	; 0x04
    703e:	01 97       	sbiw	r24, 0x01	; 1
    7040:	f1 f7       	brne	.-4      	; 0x703e <HBUZZERALARM+0xb8>
    7042:	9c 83       	std	Y+4, r25	; 0x04
    7044:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7046:	8d 81       	ldd	r24, Y+5	; 0x05
    7048:	9e 81       	ldd	r25, Y+6	; 0x06
    704a:	01 97       	sbiw	r24, 0x01	; 1
    704c:	9e 83       	std	Y+6, r25	; 0x06
    704e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7050:	8d 81       	ldd	r24, Y+5	; 0x05
    7052:	9e 81       	ldd	r25, Y+6	; 0x06
    7054:	00 97       	sbiw	r24, 0x00	; 0
    7056:	69 f7       	brne	.-38     	; 0x7032 <HBUZZERALARM+0xac>
    7058:	14 c0       	rjmp	.+40     	; 0x7082 <HBUZZERALARM+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    705a:	6f 81       	ldd	r22, Y+7	; 0x07
    705c:	78 85       	ldd	r23, Y+8	; 0x08
    705e:	89 85       	ldd	r24, Y+9	; 0x09
    7060:	9a 85       	ldd	r25, Y+10	; 0x0a
    7062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7066:	dc 01       	movw	r26, r24
    7068:	cb 01       	movw	r24, r22
    706a:	9e 83       	std	Y+6, r25	; 0x06
    706c:	8d 83       	std	Y+5, r24	; 0x05
    706e:	8d 81       	ldd	r24, Y+5	; 0x05
    7070:	9e 81       	ldd	r25, Y+6	; 0x06
    7072:	9a 83       	std	Y+2, r25	; 0x02
    7074:	89 83       	std	Y+1, r24	; 0x01
    7076:	89 81       	ldd	r24, Y+1	; 0x01
    7078:	9a 81       	ldd	r25, Y+2	; 0x02
    707a:	01 97       	sbiw	r24, 0x01	; 1
    707c:	f1 f7       	brne	.-4      	; 0x707a <HBUZZERALARM+0xf4>
    707e:	9a 83       	std	Y+2, r25	; 0x02
    7080:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	HBUZZEROFF();
    7082:	0e 94 b7 37 	call	0x6f6e	; 0x6f6e <HBUZZEROFF>

}
    7086:	2e 96       	adiw	r28, 0x0e	; 14
    7088:	0f b6       	in	r0, 0x3f	; 63
    708a:	f8 94       	cli
    708c:	de bf       	out	0x3e, r29	; 62
    708e:	0f be       	out	0x3f, r0	; 63
    7090:	cd bf       	out	0x3d, r28	; 61
    7092:	cf 91       	pop	r28
    7094:	df 91       	pop	r29
    7096:	08 95       	ret

00007098 <HBUZZERToggle>:
void HBUZZERToggle(){
    7098:	df 93       	push	r29
    709a:	cf 93       	push	r28
    709c:	cd b7       	in	r28, 0x3d	; 61
    709e:	de b7       	in	r29, 0x3e	; 62
MDIO_Toggle_PIN(MDIO_PORTD,HBUZZERPIN);
    70a0:	83 e0       	ldi	r24, 0x03	; 3
    70a2:	63 e0       	ldi	r22, 0x03	; 3
    70a4:	0e 94 28 1b 	call	0x3650	; 0x3650 <MDIO_Toggle_PIN>
}
    70a8:	cf 91       	pop	r28
    70aa:	df 91       	pop	r29
    70ac:	08 95       	ret

000070ae <InputID>:


#include "Application.h"

void InputID (u8* ID, u8 Mode)
{
    70ae:	df 93       	push	r29
    70b0:	cf 93       	push	r28
    70b2:	cd b7       	in	r28, 0x3d	; 61
    70b4:	de b7       	in	r29, 0x3e	; 62
    70b6:	a4 97       	sbiw	r28, 0x24	; 36
    70b8:	0f b6       	in	r0, 0x3f	; 63
    70ba:	f8 94       	cli
    70bc:	de bf       	out	0x3e, r29	; 62
    70be:	0f be       	out	0x3f, r0	; 63
    70c0:	cd bf       	out	0x3d, r28	; 61
    70c2:	99 a3       	std	Y+33, r25	; 0x21
    70c4:	88 a3       	std	Y+32, r24	; 0x20
    70c6:	6a a3       	std	Y+34, r22	; 0x22
  u8  PRESSEDBUTTONKeys = 0, KeyPRESSEDBUTTON = 0 , TTLData = 0;
    70c8:	1f 8e       	std	Y+31, r1	; 0x1f
    70ca:	1e 8e       	std	Y+30, r1	; 0x1e
    70cc:	1d 8e       	std	Y+29, r1	; 0x1d
  switch (Mode)
    70ce:	8a a1       	ldd	r24, Y+34	; 0x22
    70d0:	28 2f       	mov	r18, r24
    70d2:	30 e0       	ldi	r19, 0x00	; 0
    70d4:	3c a3       	std	Y+36, r19	; 0x24
    70d6:	2b a3       	std	Y+35, r18	; 0x23
    70d8:	8b a1       	ldd	r24, Y+35	; 0x23
    70da:	9c a1       	ldd	r25, Y+36	; 0x24
    70dc:	88 30       	cpi	r24, 0x08	; 8
    70de:	91 05       	cpc	r25, r1
    70e0:	39 f0       	breq	.+14     	; 0x70f0 <InputID+0x42>
    70e2:	2b a1       	ldd	r18, Y+35	; 0x23
    70e4:	3c a1       	ldd	r19, Y+36	; 0x24
    70e6:	29 30       	cpi	r18, 0x09	; 9
    70e8:	31 05       	cpc	r19, r1
    70ea:	09 f4       	brne	.+2      	; 0x70ee <InputID+0x40>
    70ec:	a5 c0       	rjmp	.+330    	; 0x7238 <InputID+0x18a>
    70ee:	3c c1       	rjmp	.+632    	; 0x7368 <InputID+0x2ba>
  {
    case ADMINMODE:
      HCLCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
    70f0:	81 e0       	ldi	r24, 0x01	; 1
    70f2:	0e 94 61 34 	call	0x68c2	; 0x68c2 <HCLCD_WriteCommand4Bit>
      HCLCD_SetCursorPosition(HCLCD_LINE_0,0);
    70f6:	80 e0       	ldi	r24, 0x00	; 0
    70f8:	60 e0       	ldi	r22, 0x00	; 0
    70fa:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
      HCLCD_WriteString("Enter User ID");
    70fe:	8d e7       	ldi	r24, 0x7D	; 125
    7100:	90 e0       	ldi	r25, 0x00	; 0
    7102:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <HCLCD_WriteString>
      HCLCD_SetCursorPosition(HCLCD_LINE_1, 0);
    7106:	81 e0       	ldi	r24, 0x01	; 1
    7108:	60 e0       	ldi	r22, 0x00	; 0
    710a:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
    710e:	1e c0       	rjmp	.+60     	; 0x714c <InputID+0x9e>
      while(PRESSEDBUTTONKeys < IDLENGTH)
      {
    	  TTLData=  HHC05_RecieveData();
    7110:	0e 94 3d 30 	call	0x607a	; 0x607a <HHC05_RecieveData>
    7114:	8d 8f       	std	Y+29, r24	; 0x1d
        if (TTLData)
    7116:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7118:	88 23       	and	r24, r24
    711a:	c1 f0       	breq	.+48     	; 0x714c <InputID+0x9e>
        {
          ID[PRESSEDBUTTONKeys] = TTLData;
    711c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    711e:	28 2f       	mov	r18, r24
    7120:	30 e0       	ldi	r19, 0x00	; 0
    7122:	88 a1       	ldd	r24, Y+32	; 0x20
    7124:	99 a1       	ldd	r25, Y+33	; 0x21
    7126:	fc 01       	movw	r30, r24
    7128:	e2 0f       	add	r30, r18
    712a:	f3 1f       	adc	r31, r19
    712c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    712e:	80 83       	st	Z, r24
          HCLCD_WriteChar4Bit(ID[PRESSEDBUTTONKeys]);
    7130:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7132:	28 2f       	mov	r18, r24
    7134:	30 e0       	ldi	r19, 0x00	; 0
    7136:	88 a1       	ldd	r24, Y+32	; 0x20
    7138:	99 a1       	ldd	r25, Y+33	; 0x21
    713a:	fc 01       	movw	r30, r24
    713c:	e2 0f       	add	r30, r18
    713e:	f3 1f       	adc	r31, r19
    7140:	80 81       	ld	r24, Z
    7142:	0e 94 85 35 	call	0x6b0a	; 0x6b0a <HCLCD_WriteChar4Bit>
          PRESSEDBUTTONKeys++;
    7146:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7148:	8f 5f       	subi	r24, 0xFF	; 255
    714a:	8f 8f       	std	Y+31, r24	; 0x1f
    case ADMINMODE:
      HCLCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
      HCLCD_SetCursorPosition(HCLCD_LINE_0,0);
      HCLCD_WriteString("Enter User ID");
      HCLCD_SetCursorPosition(HCLCD_LINE_1, 0);
      while(PRESSEDBUTTONKeys < IDLENGTH)
    714c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    714e:	83 30       	cpi	r24, 0x03	; 3
    7150:	f8 f2       	brcs	.-66     	; 0x7110 <InputID+0x62>
    7152:	80 e0       	ldi	r24, 0x00	; 0
    7154:	90 e0       	ldi	r25, 0x00	; 0
    7156:	a8 ec       	ldi	r26, 0xC8	; 200
    7158:	b2 e4       	ldi	r27, 0x42	; 66
    715a:	89 8f       	std	Y+25, r24	; 0x19
    715c:	9a 8f       	std	Y+26, r25	; 0x1a
    715e:	ab 8f       	std	Y+27, r26	; 0x1b
    7160:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7162:	69 8d       	ldd	r22, Y+25	; 0x19
    7164:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7166:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7168:	9c 8d       	ldd	r25, Y+28	; 0x1c
    716a:	20 e0       	ldi	r18, 0x00	; 0
    716c:	30 e0       	ldi	r19, 0x00	; 0
    716e:	4a e7       	ldi	r20, 0x7A	; 122
    7170:	55 e4       	ldi	r21, 0x45	; 69
    7172:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7176:	dc 01       	movw	r26, r24
    7178:	cb 01       	movw	r24, r22
    717a:	8d 8b       	std	Y+21, r24	; 0x15
    717c:	9e 8b       	std	Y+22, r25	; 0x16
    717e:	af 8b       	std	Y+23, r26	; 0x17
    7180:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    7182:	6d 89       	ldd	r22, Y+21	; 0x15
    7184:	7e 89       	ldd	r23, Y+22	; 0x16
    7186:	8f 89       	ldd	r24, Y+23	; 0x17
    7188:	98 8d       	ldd	r25, Y+24	; 0x18
    718a:	20 e0       	ldi	r18, 0x00	; 0
    718c:	30 e0       	ldi	r19, 0x00	; 0
    718e:	40 e8       	ldi	r20, 0x80	; 128
    7190:	5f e3       	ldi	r21, 0x3F	; 63
    7192:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7196:	88 23       	and	r24, r24
    7198:	2c f4       	brge	.+10     	; 0x71a4 <InputID+0xf6>
		__ticks = 1;
    719a:	81 e0       	ldi	r24, 0x01	; 1
    719c:	90 e0       	ldi	r25, 0x00	; 0
    719e:	9c 8b       	std	Y+20, r25	; 0x14
    71a0:	8b 8b       	std	Y+19, r24	; 0x13
    71a2:	3f c0       	rjmp	.+126    	; 0x7222 <InputID+0x174>
	else if (__tmp > 65535)
    71a4:	6d 89       	ldd	r22, Y+21	; 0x15
    71a6:	7e 89       	ldd	r23, Y+22	; 0x16
    71a8:	8f 89       	ldd	r24, Y+23	; 0x17
    71aa:	98 8d       	ldd	r25, Y+24	; 0x18
    71ac:	20 e0       	ldi	r18, 0x00	; 0
    71ae:	3f ef       	ldi	r19, 0xFF	; 255
    71b0:	4f e7       	ldi	r20, 0x7F	; 127
    71b2:	57 e4       	ldi	r21, 0x47	; 71
    71b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    71b8:	18 16       	cp	r1, r24
    71ba:	4c f5       	brge	.+82     	; 0x720e <InputID+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    71bc:	69 8d       	ldd	r22, Y+25	; 0x19
    71be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    71c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    71c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    71c4:	20 e0       	ldi	r18, 0x00	; 0
    71c6:	30 e0       	ldi	r19, 0x00	; 0
    71c8:	40 e2       	ldi	r20, 0x20	; 32
    71ca:	51 e4       	ldi	r21, 0x41	; 65
    71cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    71d0:	dc 01       	movw	r26, r24
    71d2:	cb 01       	movw	r24, r22
    71d4:	bc 01       	movw	r22, r24
    71d6:	cd 01       	movw	r24, r26
    71d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    71dc:	dc 01       	movw	r26, r24
    71de:	cb 01       	movw	r24, r22
    71e0:	9c 8b       	std	Y+20, r25	; 0x14
    71e2:	8b 8b       	std	Y+19, r24	; 0x13
    71e4:	0f c0       	rjmp	.+30     	; 0x7204 <InputID+0x156>
    71e6:	80 e9       	ldi	r24, 0x90	; 144
    71e8:	91 e0       	ldi	r25, 0x01	; 1
    71ea:	9a 8b       	std	Y+18, r25	; 0x12
    71ec:	89 8b       	std	Y+17, r24	; 0x11
    71ee:	89 89       	ldd	r24, Y+17	; 0x11
    71f0:	9a 89       	ldd	r25, Y+18	; 0x12
    71f2:	01 97       	sbiw	r24, 0x01	; 1
    71f4:	f1 f7       	brne	.-4      	; 0x71f2 <InputID+0x144>
    71f6:	9a 8b       	std	Y+18, r25	; 0x12
    71f8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    71fa:	8b 89       	ldd	r24, Y+19	; 0x13
    71fc:	9c 89       	ldd	r25, Y+20	; 0x14
    71fe:	01 97       	sbiw	r24, 0x01	; 1
    7200:	9c 8b       	std	Y+20, r25	; 0x14
    7202:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7204:	8b 89       	ldd	r24, Y+19	; 0x13
    7206:	9c 89       	ldd	r25, Y+20	; 0x14
    7208:	00 97       	sbiw	r24, 0x00	; 0
    720a:	69 f7       	brne	.-38     	; 0x71e6 <InputID+0x138>
    720c:	ad c0       	rjmp	.+346    	; 0x7368 <InputID+0x2ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    720e:	6d 89       	ldd	r22, Y+21	; 0x15
    7210:	7e 89       	ldd	r23, Y+22	; 0x16
    7212:	8f 89       	ldd	r24, Y+23	; 0x17
    7214:	98 8d       	ldd	r25, Y+24	; 0x18
    7216:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    721a:	dc 01       	movw	r26, r24
    721c:	cb 01       	movw	r24, r22
    721e:	9c 8b       	std	Y+20, r25	; 0x14
    7220:	8b 8b       	std	Y+19, r24	; 0x13
    7222:	8b 89       	ldd	r24, Y+19	; 0x13
    7224:	9c 89       	ldd	r25, Y+20	; 0x14
    7226:	98 8b       	std	Y+16, r25	; 0x10
    7228:	8f 87       	std	Y+15, r24	; 0x0f
    722a:	8f 85       	ldd	r24, Y+15	; 0x0f
    722c:	98 89       	ldd	r25, Y+16	; 0x10
    722e:	01 97       	sbiw	r24, 0x01	; 1
    7230:	f1 f7       	brne	.-4      	; 0x722e <InputID+0x180>
    7232:	98 8b       	std	Y+16, r25	; 0x10
    7234:	8f 87       	std	Y+15, r24	; 0x0f
    7236:	98 c0       	rjmp	.+304    	; 0x7368 <InputID+0x2ba>
      }
      _delay_ms(100);
      break;

    case USERMODE:
      HCLCD_SetCursorPosition(HCLCD_LINE_1, 0);
    7238:	81 e0       	ldi	r24, 0x01	; 1
    723a:	60 e0       	ldi	r22, 0x00	; 0
    723c:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
    7240:	1e c0       	rjmp	.+60     	; 0x727e <InputID+0x1d0>
      while (PRESSEDBUTTONKeys < IDLENGTH)
      {
        KeyPRESSEDBUTTON = HKPD_GetPressedButton();
    7242:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <HKPD_GetPressedButton>
    7246:	8e 8f       	std	Y+30, r24	; 0x1e
        if (KeyPRESSEDBUTTON)
    7248:	8e 8d       	ldd	r24, Y+30	; 0x1e
    724a:	88 23       	and	r24, r24
    724c:	c1 f0       	breq	.+48     	; 0x727e <InputID+0x1d0>
        {
          ID[PRESSEDBUTTONKeys] = KeyPRESSEDBUTTON;
    724e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7250:	28 2f       	mov	r18, r24
    7252:	30 e0       	ldi	r19, 0x00	; 0
    7254:	88 a1       	ldd	r24, Y+32	; 0x20
    7256:	99 a1       	ldd	r25, Y+33	; 0x21
    7258:	fc 01       	movw	r30, r24
    725a:	e2 0f       	add	r30, r18
    725c:	f3 1f       	adc	r31, r19
    725e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7260:	80 83       	st	Z, r24

          HCLCD_WriteChar4Bit(ID[PRESSEDBUTTONKeys]);
    7262:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7264:	28 2f       	mov	r18, r24
    7266:	30 e0       	ldi	r19, 0x00	; 0
    7268:	88 a1       	ldd	r24, Y+32	; 0x20
    726a:	99 a1       	ldd	r25, Y+33	; 0x21
    726c:	fc 01       	movw	r30, r24
    726e:	e2 0f       	add	r30, r18
    7270:	f3 1f       	adc	r31, r19
    7272:	80 81       	ld	r24, Z
    7274:	0e 94 85 35 	call	0x6b0a	; 0x6b0a <HCLCD_WriteChar4Bit>
          PRESSEDBUTTONKeys++;
    7278:	8f 8d       	ldd	r24, Y+31	; 0x1f
    727a:	8f 5f       	subi	r24, 0xFF	; 255
    727c:	8f 8f       	std	Y+31, r24	; 0x1f
      _delay_ms(100);
      break;

    case USERMODE:
      HCLCD_SetCursorPosition(HCLCD_LINE_1, 0);
      while (PRESSEDBUTTONKeys < IDLENGTH)
    727e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7280:	83 30       	cpi	r24, 0x03	; 3
    7282:	f8 f2       	brcs	.-66     	; 0x7242 <InputID+0x194>
    7284:	80 e0       	ldi	r24, 0x00	; 0
    7286:	90 e0       	ldi	r25, 0x00	; 0
    7288:	a8 e4       	ldi	r26, 0x48	; 72
    728a:	b3 e4       	ldi	r27, 0x43	; 67
    728c:	8b 87       	std	Y+11, r24	; 0x0b
    728e:	9c 87       	std	Y+12, r25	; 0x0c
    7290:	ad 87       	std	Y+13, r26	; 0x0d
    7292:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7294:	6b 85       	ldd	r22, Y+11	; 0x0b
    7296:	7c 85       	ldd	r23, Y+12	; 0x0c
    7298:	8d 85       	ldd	r24, Y+13	; 0x0d
    729a:	9e 85       	ldd	r25, Y+14	; 0x0e
    729c:	20 e0       	ldi	r18, 0x00	; 0
    729e:	30 e0       	ldi	r19, 0x00	; 0
    72a0:	4a e7       	ldi	r20, 0x7A	; 122
    72a2:	55 e4       	ldi	r21, 0x45	; 69
    72a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    72a8:	dc 01       	movw	r26, r24
    72aa:	cb 01       	movw	r24, r22
    72ac:	8f 83       	std	Y+7, r24	; 0x07
    72ae:	98 87       	std	Y+8, r25	; 0x08
    72b0:	a9 87       	std	Y+9, r26	; 0x09
    72b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    72b4:	6f 81       	ldd	r22, Y+7	; 0x07
    72b6:	78 85       	ldd	r23, Y+8	; 0x08
    72b8:	89 85       	ldd	r24, Y+9	; 0x09
    72ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    72bc:	20 e0       	ldi	r18, 0x00	; 0
    72be:	30 e0       	ldi	r19, 0x00	; 0
    72c0:	40 e8       	ldi	r20, 0x80	; 128
    72c2:	5f e3       	ldi	r21, 0x3F	; 63
    72c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    72c8:	88 23       	and	r24, r24
    72ca:	2c f4       	brge	.+10     	; 0x72d6 <InputID+0x228>
		__ticks = 1;
    72cc:	81 e0       	ldi	r24, 0x01	; 1
    72ce:	90 e0       	ldi	r25, 0x00	; 0
    72d0:	9e 83       	std	Y+6, r25	; 0x06
    72d2:	8d 83       	std	Y+5, r24	; 0x05
    72d4:	3f c0       	rjmp	.+126    	; 0x7354 <InputID+0x2a6>
	else if (__tmp > 65535)
    72d6:	6f 81       	ldd	r22, Y+7	; 0x07
    72d8:	78 85       	ldd	r23, Y+8	; 0x08
    72da:	89 85       	ldd	r24, Y+9	; 0x09
    72dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    72de:	20 e0       	ldi	r18, 0x00	; 0
    72e0:	3f ef       	ldi	r19, 0xFF	; 255
    72e2:	4f e7       	ldi	r20, 0x7F	; 127
    72e4:	57 e4       	ldi	r21, 0x47	; 71
    72e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    72ea:	18 16       	cp	r1, r24
    72ec:	4c f5       	brge	.+82     	; 0x7340 <InputID+0x292>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    72ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    72f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    72f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    72f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    72f6:	20 e0       	ldi	r18, 0x00	; 0
    72f8:	30 e0       	ldi	r19, 0x00	; 0
    72fa:	40 e2       	ldi	r20, 0x20	; 32
    72fc:	51 e4       	ldi	r21, 0x41	; 65
    72fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7302:	dc 01       	movw	r26, r24
    7304:	cb 01       	movw	r24, r22
    7306:	bc 01       	movw	r22, r24
    7308:	cd 01       	movw	r24, r26
    730a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    730e:	dc 01       	movw	r26, r24
    7310:	cb 01       	movw	r24, r22
    7312:	9e 83       	std	Y+6, r25	; 0x06
    7314:	8d 83       	std	Y+5, r24	; 0x05
    7316:	0f c0       	rjmp	.+30     	; 0x7336 <InputID+0x288>
    7318:	80 e9       	ldi	r24, 0x90	; 144
    731a:	91 e0       	ldi	r25, 0x01	; 1
    731c:	9c 83       	std	Y+4, r25	; 0x04
    731e:	8b 83       	std	Y+3, r24	; 0x03
    7320:	8b 81       	ldd	r24, Y+3	; 0x03
    7322:	9c 81       	ldd	r25, Y+4	; 0x04
    7324:	01 97       	sbiw	r24, 0x01	; 1
    7326:	f1 f7       	brne	.-4      	; 0x7324 <InputID+0x276>
    7328:	9c 83       	std	Y+4, r25	; 0x04
    732a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    732c:	8d 81       	ldd	r24, Y+5	; 0x05
    732e:	9e 81       	ldd	r25, Y+6	; 0x06
    7330:	01 97       	sbiw	r24, 0x01	; 1
    7332:	9e 83       	std	Y+6, r25	; 0x06
    7334:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7336:	8d 81       	ldd	r24, Y+5	; 0x05
    7338:	9e 81       	ldd	r25, Y+6	; 0x06
    733a:	00 97       	sbiw	r24, 0x00	; 0
    733c:	69 f7       	brne	.-38     	; 0x7318 <InputID+0x26a>
    733e:	14 c0       	rjmp	.+40     	; 0x7368 <InputID+0x2ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7340:	6f 81       	ldd	r22, Y+7	; 0x07
    7342:	78 85       	ldd	r23, Y+8	; 0x08
    7344:	89 85       	ldd	r24, Y+9	; 0x09
    7346:	9a 85       	ldd	r25, Y+10	; 0x0a
    7348:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    734c:	dc 01       	movw	r26, r24
    734e:	cb 01       	movw	r24, r22
    7350:	9e 83       	std	Y+6, r25	; 0x06
    7352:	8d 83       	std	Y+5, r24	; 0x05
    7354:	8d 81       	ldd	r24, Y+5	; 0x05
    7356:	9e 81       	ldd	r25, Y+6	; 0x06
    7358:	9a 83       	std	Y+2, r25	; 0x02
    735a:	89 83       	std	Y+1, r24	; 0x01
    735c:	89 81       	ldd	r24, Y+1	; 0x01
    735e:	9a 81       	ldd	r25, Y+2	; 0x02
    7360:	01 97       	sbiw	r24, 0x01	; 1
    7362:	f1 f7       	brne	.-4      	; 0x7360 <InputID+0x2b2>
    7364:	9a 83       	std	Y+2, r25	; 0x02
    7366:	89 83       	std	Y+1, r24	; 0x01
      _delay_ms(200);
      break;

    default:      break;
  }
}
    7368:	a4 96       	adiw	r28, 0x24	; 36
    736a:	0f b6       	in	r0, 0x3f	; 63
    736c:	f8 94       	cli
    736e:	de bf       	out	0x3e, r29	; 62
    7370:	0f be       	out	0x3f, r0	; 63
    7372:	cd bf       	out	0x3d, r28	; 61
    7374:	cf 91       	pop	r28
    7376:	df 91       	pop	r29
    7378:	08 95       	ret

0000737a <InputPassword>:
void InputPassword (u8* Password, u8 Mode)
{
    737a:	df 93       	push	r29
    737c:	cf 93       	push	r28
    737e:	cd b7       	in	r28, 0x3d	; 61
    7380:	de b7       	in	r29, 0x3e	; 62
    7382:	a4 97       	sbiw	r28, 0x24	; 36
    7384:	0f b6       	in	r0, 0x3f	; 63
    7386:	f8 94       	cli
    7388:	de bf       	out	0x3e, r29	; 62
    738a:	0f be       	out	0x3f, r0	; 63
    738c:	cd bf       	out	0x3d, r28	; 61
    738e:	99 a3       	std	Y+33, r25	; 0x21
    7390:	88 a3       	std	Y+32, r24	; 0x20
    7392:	6a a3       	std	Y+34, r22	; 0x22
  u8 TTLData = 0, DigitsEntered = 0, KeyPRESSEDBUTTON = 0;
    7394:	1f 8e       	std	Y+31, r1	; 0x1f
    7396:	1e 8e       	std	Y+30, r1	; 0x1e
    7398:	1d 8e       	std	Y+29, r1	; 0x1d
  switch (Mode)
    739a:	8a a1       	ldd	r24, Y+34	; 0x22
    739c:	28 2f       	mov	r18, r24
    739e:	30 e0       	ldi	r19, 0x00	; 0
    73a0:	3c a3       	std	Y+36, r19	; 0x24
    73a2:	2b a3       	std	Y+35, r18	; 0x23
    73a4:	8b a1       	ldd	r24, Y+35	; 0x23
    73a6:	9c a1       	ldd	r25, Y+36	; 0x24
    73a8:	88 30       	cpi	r24, 0x08	; 8
    73aa:	91 05       	cpc	r25, r1
    73ac:	39 f0       	breq	.+14     	; 0x73bc <InputPassword+0x42>
    73ae:	2b a1       	ldd	r18, Y+35	; 0x23
    73b0:	3c a1       	ldd	r19, Y+36	; 0x24
    73b2:	29 30       	cpi	r18, 0x09	; 9
    73b4:	31 05       	cpc	r19, r1
    73b6:	09 f4       	brne	.+2      	; 0x73ba <InputPassword+0x40>
    73b8:	9d c0       	rjmp	.+314    	; 0x74f4 <InputPassword+0x17a>
    73ba:	2c c1       	rjmp	.+600    	; 0x7614 <InputPassword+0x29a>
  {
    case ADMINMODE:
    	   HCLCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
    73bc:	81 e0       	ldi	r24, 0x01	; 1
    73be:	0e 94 61 34 	call	0x68c2	; 0x68c2 <HCLCD_WriteCommand4Bit>
    	   HCLCD_SetCursorPosition(HCLCD_LINE_0,0);
    73c2:	80 e0       	ldi	r24, 0x00	; 0
    73c4:	60 e0       	ldi	r22, 0x00	; 0
    73c6:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
    	   HCLCD_WriteString("Enter Password");
    73ca:	8b e8       	ldi	r24, 0x8B	; 139
    73cc:	90 e0       	ldi	r25, 0x00	; 0
    73ce:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <HCLCD_WriteString>
    	   HCLCD_SetCursorPosition(HCLCD_LINE_1, 0);
    73d2:	81 e0       	ldi	r24, 0x01	; 1
    73d4:	60 e0       	ldi	r22, 0x00	; 0
    73d6:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
    73da:	16 c0       	rjmp	.+44     	; 0x7408 <InputPassword+0x8e>
      while (DigitsEntered < PASSWORDLENGTH)
      {
    	  TTLData= HHC05_RecieveData();
    73dc:	0e 94 3d 30 	call	0x607a	; 0x607a <HHC05_RecieveData>
    73e0:	8f 8f       	std	Y+31, r24	; 0x1f
        if (TTLData)
    73e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    73e4:	88 23       	and	r24, r24
    73e6:	81 f0       	breq	.+32     	; 0x7408 <InputPassword+0x8e>
        {
          Password[DigitsEntered] = TTLData;
    73e8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    73ea:	28 2f       	mov	r18, r24
    73ec:	30 e0       	ldi	r19, 0x00	; 0
    73ee:	88 a1       	ldd	r24, Y+32	; 0x20
    73f0:	99 a1       	ldd	r25, Y+33	; 0x21
    73f2:	fc 01       	movw	r30, r24
    73f4:	e2 0f       	add	r30, r18
    73f6:	f3 1f       	adc	r31, r19
    73f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    73fa:	80 83       	st	Z, r24
          HCLCD_WriteChar4Bit('*');
    73fc:	8a e2       	ldi	r24, 0x2A	; 42
    73fe:	0e 94 85 35 	call	0x6b0a	; 0x6b0a <HCLCD_WriteChar4Bit>
          DigitsEntered++;
    7402:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7404:	8f 5f       	subi	r24, 0xFF	; 255
    7406:	8e 8f       	std	Y+30, r24	; 0x1e
    case ADMINMODE:
    	   HCLCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
    	   HCLCD_SetCursorPosition(HCLCD_LINE_0,0);
    	   HCLCD_WriteString("Enter Password");
    	   HCLCD_SetCursorPosition(HCLCD_LINE_1, 0);
      while (DigitsEntered < PASSWORDLENGTH)
    7408:	8e 8d       	ldd	r24, Y+30	; 0x1e
    740a:	84 30       	cpi	r24, 0x04	; 4
    740c:	38 f3       	brcs	.-50     	; 0x73dc <InputPassword+0x62>
    740e:	80 e0       	ldi	r24, 0x00	; 0
    7410:	90 e0       	ldi	r25, 0x00	; 0
    7412:	a8 e4       	ldi	r26, 0x48	; 72
    7414:	b3 e4       	ldi	r27, 0x43	; 67
    7416:	89 8f       	std	Y+25, r24	; 0x19
    7418:	9a 8f       	std	Y+26, r25	; 0x1a
    741a:	ab 8f       	std	Y+27, r26	; 0x1b
    741c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    741e:	69 8d       	ldd	r22, Y+25	; 0x19
    7420:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7422:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7424:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7426:	20 e0       	ldi	r18, 0x00	; 0
    7428:	30 e0       	ldi	r19, 0x00	; 0
    742a:	4a e7       	ldi	r20, 0x7A	; 122
    742c:	55 e4       	ldi	r21, 0x45	; 69
    742e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7432:	dc 01       	movw	r26, r24
    7434:	cb 01       	movw	r24, r22
    7436:	8d 8b       	std	Y+21, r24	; 0x15
    7438:	9e 8b       	std	Y+22, r25	; 0x16
    743a:	af 8b       	std	Y+23, r26	; 0x17
    743c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    743e:	6d 89       	ldd	r22, Y+21	; 0x15
    7440:	7e 89       	ldd	r23, Y+22	; 0x16
    7442:	8f 89       	ldd	r24, Y+23	; 0x17
    7444:	98 8d       	ldd	r25, Y+24	; 0x18
    7446:	20 e0       	ldi	r18, 0x00	; 0
    7448:	30 e0       	ldi	r19, 0x00	; 0
    744a:	40 e8       	ldi	r20, 0x80	; 128
    744c:	5f e3       	ldi	r21, 0x3F	; 63
    744e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7452:	88 23       	and	r24, r24
    7454:	2c f4       	brge	.+10     	; 0x7460 <InputPassword+0xe6>
		__ticks = 1;
    7456:	81 e0       	ldi	r24, 0x01	; 1
    7458:	90 e0       	ldi	r25, 0x00	; 0
    745a:	9c 8b       	std	Y+20, r25	; 0x14
    745c:	8b 8b       	std	Y+19, r24	; 0x13
    745e:	3f c0       	rjmp	.+126    	; 0x74de <InputPassword+0x164>
	else if (__tmp > 65535)
    7460:	6d 89       	ldd	r22, Y+21	; 0x15
    7462:	7e 89       	ldd	r23, Y+22	; 0x16
    7464:	8f 89       	ldd	r24, Y+23	; 0x17
    7466:	98 8d       	ldd	r25, Y+24	; 0x18
    7468:	20 e0       	ldi	r18, 0x00	; 0
    746a:	3f ef       	ldi	r19, 0xFF	; 255
    746c:	4f e7       	ldi	r20, 0x7F	; 127
    746e:	57 e4       	ldi	r21, 0x47	; 71
    7470:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7474:	18 16       	cp	r1, r24
    7476:	4c f5       	brge	.+82     	; 0x74ca <InputPassword+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7478:	69 8d       	ldd	r22, Y+25	; 0x19
    747a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    747c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    747e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7480:	20 e0       	ldi	r18, 0x00	; 0
    7482:	30 e0       	ldi	r19, 0x00	; 0
    7484:	40 e2       	ldi	r20, 0x20	; 32
    7486:	51 e4       	ldi	r21, 0x41	; 65
    7488:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    748c:	dc 01       	movw	r26, r24
    748e:	cb 01       	movw	r24, r22
    7490:	bc 01       	movw	r22, r24
    7492:	cd 01       	movw	r24, r26
    7494:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7498:	dc 01       	movw	r26, r24
    749a:	cb 01       	movw	r24, r22
    749c:	9c 8b       	std	Y+20, r25	; 0x14
    749e:	8b 8b       	std	Y+19, r24	; 0x13
    74a0:	0f c0       	rjmp	.+30     	; 0x74c0 <InputPassword+0x146>
    74a2:	80 e9       	ldi	r24, 0x90	; 144
    74a4:	91 e0       	ldi	r25, 0x01	; 1
    74a6:	9a 8b       	std	Y+18, r25	; 0x12
    74a8:	89 8b       	std	Y+17, r24	; 0x11
    74aa:	89 89       	ldd	r24, Y+17	; 0x11
    74ac:	9a 89       	ldd	r25, Y+18	; 0x12
    74ae:	01 97       	sbiw	r24, 0x01	; 1
    74b0:	f1 f7       	brne	.-4      	; 0x74ae <InputPassword+0x134>
    74b2:	9a 8b       	std	Y+18, r25	; 0x12
    74b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    74b6:	8b 89       	ldd	r24, Y+19	; 0x13
    74b8:	9c 89       	ldd	r25, Y+20	; 0x14
    74ba:	01 97       	sbiw	r24, 0x01	; 1
    74bc:	9c 8b       	std	Y+20, r25	; 0x14
    74be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    74c0:	8b 89       	ldd	r24, Y+19	; 0x13
    74c2:	9c 89       	ldd	r25, Y+20	; 0x14
    74c4:	00 97       	sbiw	r24, 0x00	; 0
    74c6:	69 f7       	brne	.-38     	; 0x74a2 <InputPassword+0x128>
    74c8:	a5 c0       	rjmp	.+330    	; 0x7614 <InputPassword+0x29a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    74ca:	6d 89       	ldd	r22, Y+21	; 0x15
    74cc:	7e 89       	ldd	r23, Y+22	; 0x16
    74ce:	8f 89       	ldd	r24, Y+23	; 0x17
    74d0:	98 8d       	ldd	r25, Y+24	; 0x18
    74d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    74d6:	dc 01       	movw	r26, r24
    74d8:	cb 01       	movw	r24, r22
    74da:	9c 8b       	std	Y+20, r25	; 0x14
    74dc:	8b 8b       	std	Y+19, r24	; 0x13
    74de:	8b 89       	ldd	r24, Y+19	; 0x13
    74e0:	9c 89       	ldd	r25, Y+20	; 0x14
    74e2:	98 8b       	std	Y+16, r25	; 0x10
    74e4:	8f 87       	std	Y+15, r24	; 0x0f
    74e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    74e8:	98 89       	ldd	r25, Y+16	; 0x10
    74ea:	01 97       	sbiw	r24, 0x01	; 1
    74ec:	f1 f7       	brne	.-4      	; 0x74ea <InputPassword+0x170>
    74ee:	98 8b       	std	Y+16, r25	; 0x10
    74f0:	8f 87       	std	Y+15, r24	; 0x0f
    74f2:	90 c0       	rjmp	.+288    	; 0x7614 <InputPassword+0x29a>
      }
      _delay_ms(200);
      break;

    case USERMODE:
    	HCLCD_SetCursorPosition(HCLCD_LINE_1, 0);
    74f4:	81 e0       	ldi	r24, 0x01	; 1
    74f6:	60 e0       	ldi	r22, 0x00	; 0
    74f8:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
    74fc:	16 c0       	rjmp	.+44     	; 0x752a <InputPassword+0x1b0>
      while (DigitsEntered < PASSWORDLENGTH)
      {
        KeyPRESSEDBUTTON = HKPD_GetPressedButton();
    74fe:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <HKPD_GetPressedButton>
    7502:	8d 8f       	std	Y+29, r24	; 0x1d
        if (KeyPRESSEDBUTTON)
    7504:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7506:	88 23       	and	r24, r24
    7508:	81 f0       	breq	.+32     	; 0x752a <InputPassword+0x1b0>
        {
          Password[DigitsEntered] = KeyPRESSEDBUTTON;
    750a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    750c:	28 2f       	mov	r18, r24
    750e:	30 e0       	ldi	r19, 0x00	; 0
    7510:	88 a1       	ldd	r24, Y+32	; 0x20
    7512:	99 a1       	ldd	r25, Y+33	; 0x21
    7514:	fc 01       	movw	r30, r24
    7516:	e2 0f       	add	r30, r18
    7518:	f3 1f       	adc	r31, r19
    751a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    751c:	80 83       	st	Z, r24
          HCLCD_WriteChar4Bit('*');
    751e:	8a e2       	ldi	r24, 0x2A	; 42
    7520:	0e 94 85 35 	call	0x6b0a	; 0x6b0a <HCLCD_WriteChar4Bit>
          DigitsEntered++;
    7524:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7526:	8f 5f       	subi	r24, 0xFF	; 255
    7528:	8e 8f       	std	Y+30, r24	; 0x1e
      _delay_ms(200);
      break;

    case USERMODE:
    	HCLCD_SetCursorPosition(HCLCD_LINE_1, 0);
      while (DigitsEntered < PASSWORDLENGTH)
    752a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    752c:	84 30       	cpi	r24, 0x04	; 4
    752e:	38 f3       	brcs	.-50     	; 0x74fe <InputPassword+0x184>
    7530:	80 e0       	ldi	r24, 0x00	; 0
    7532:	90 e0       	ldi	r25, 0x00	; 0
    7534:	a8 e4       	ldi	r26, 0x48	; 72
    7536:	b3 e4       	ldi	r27, 0x43	; 67
    7538:	8b 87       	std	Y+11, r24	; 0x0b
    753a:	9c 87       	std	Y+12, r25	; 0x0c
    753c:	ad 87       	std	Y+13, r26	; 0x0d
    753e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7540:	6b 85       	ldd	r22, Y+11	; 0x0b
    7542:	7c 85       	ldd	r23, Y+12	; 0x0c
    7544:	8d 85       	ldd	r24, Y+13	; 0x0d
    7546:	9e 85       	ldd	r25, Y+14	; 0x0e
    7548:	20 e0       	ldi	r18, 0x00	; 0
    754a:	30 e0       	ldi	r19, 0x00	; 0
    754c:	4a e7       	ldi	r20, 0x7A	; 122
    754e:	55 e4       	ldi	r21, 0x45	; 69
    7550:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7554:	dc 01       	movw	r26, r24
    7556:	cb 01       	movw	r24, r22
    7558:	8f 83       	std	Y+7, r24	; 0x07
    755a:	98 87       	std	Y+8, r25	; 0x08
    755c:	a9 87       	std	Y+9, r26	; 0x09
    755e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    7560:	6f 81       	ldd	r22, Y+7	; 0x07
    7562:	78 85       	ldd	r23, Y+8	; 0x08
    7564:	89 85       	ldd	r24, Y+9	; 0x09
    7566:	9a 85       	ldd	r25, Y+10	; 0x0a
    7568:	20 e0       	ldi	r18, 0x00	; 0
    756a:	30 e0       	ldi	r19, 0x00	; 0
    756c:	40 e8       	ldi	r20, 0x80	; 128
    756e:	5f e3       	ldi	r21, 0x3F	; 63
    7570:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7574:	88 23       	and	r24, r24
    7576:	2c f4       	brge	.+10     	; 0x7582 <InputPassword+0x208>
		__ticks = 1;
    7578:	81 e0       	ldi	r24, 0x01	; 1
    757a:	90 e0       	ldi	r25, 0x00	; 0
    757c:	9e 83       	std	Y+6, r25	; 0x06
    757e:	8d 83       	std	Y+5, r24	; 0x05
    7580:	3f c0       	rjmp	.+126    	; 0x7600 <InputPassword+0x286>
	else if (__tmp > 65535)
    7582:	6f 81       	ldd	r22, Y+7	; 0x07
    7584:	78 85       	ldd	r23, Y+8	; 0x08
    7586:	89 85       	ldd	r24, Y+9	; 0x09
    7588:	9a 85       	ldd	r25, Y+10	; 0x0a
    758a:	20 e0       	ldi	r18, 0x00	; 0
    758c:	3f ef       	ldi	r19, 0xFF	; 255
    758e:	4f e7       	ldi	r20, 0x7F	; 127
    7590:	57 e4       	ldi	r21, 0x47	; 71
    7592:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7596:	18 16       	cp	r1, r24
    7598:	4c f5       	brge	.+82     	; 0x75ec <InputPassword+0x272>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    759a:	6b 85       	ldd	r22, Y+11	; 0x0b
    759c:	7c 85       	ldd	r23, Y+12	; 0x0c
    759e:	8d 85       	ldd	r24, Y+13	; 0x0d
    75a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    75a2:	20 e0       	ldi	r18, 0x00	; 0
    75a4:	30 e0       	ldi	r19, 0x00	; 0
    75a6:	40 e2       	ldi	r20, 0x20	; 32
    75a8:	51 e4       	ldi	r21, 0x41	; 65
    75aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    75ae:	dc 01       	movw	r26, r24
    75b0:	cb 01       	movw	r24, r22
    75b2:	bc 01       	movw	r22, r24
    75b4:	cd 01       	movw	r24, r26
    75b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    75ba:	dc 01       	movw	r26, r24
    75bc:	cb 01       	movw	r24, r22
    75be:	9e 83       	std	Y+6, r25	; 0x06
    75c0:	8d 83       	std	Y+5, r24	; 0x05
    75c2:	0f c0       	rjmp	.+30     	; 0x75e2 <InputPassword+0x268>
    75c4:	80 e9       	ldi	r24, 0x90	; 144
    75c6:	91 e0       	ldi	r25, 0x01	; 1
    75c8:	9c 83       	std	Y+4, r25	; 0x04
    75ca:	8b 83       	std	Y+3, r24	; 0x03
    75cc:	8b 81       	ldd	r24, Y+3	; 0x03
    75ce:	9c 81       	ldd	r25, Y+4	; 0x04
    75d0:	01 97       	sbiw	r24, 0x01	; 1
    75d2:	f1 f7       	brne	.-4      	; 0x75d0 <InputPassword+0x256>
    75d4:	9c 83       	std	Y+4, r25	; 0x04
    75d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    75d8:	8d 81       	ldd	r24, Y+5	; 0x05
    75da:	9e 81       	ldd	r25, Y+6	; 0x06
    75dc:	01 97       	sbiw	r24, 0x01	; 1
    75de:	9e 83       	std	Y+6, r25	; 0x06
    75e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    75e2:	8d 81       	ldd	r24, Y+5	; 0x05
    75e4:	9e 81       	ldd	r25, Y+6	; 0x06
    75e6:	00 97       	sbiw	r24, 0x00	; 0
    75e8:	69 f7       	brne	.-38     	; 0x75c4 <InputPassword+0x24a>
    75ea:	14 c0       	rjmp	.+40     	; 0x7614 <InputPassword+0x29a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    75ec:	6f 81       	ldd	r22, Y+7	; 0x07
    75ee:	78 85       	ldd	r23, Y+8	; 0x08
    75f0:	89 85       	ldd	r24, Y+9	; 0x09
    75f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    75f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    75f8:	dc 01       	movw	r26, r24
    75fa:	cb 01       	movw	r24, r22
    75fc:	9e 83       	std	Y+6, r25	; 0x06
    75fe:	8d 83       	std	Y+5, r24	; 0x05
    7600:	8d 81       	ldd	r24, Y+5	; 0x05
    7602:	9e 81       	ldd	r25, Y+6	; 0x06
    7604:	9a 83       	std	Y+2, r25	; 0x02
    7606:	89 83       	std	Y+1, r24	; 0x01
    7608:	89 81       	ldd	r24, Y+1	; 0x01
    760a:	9a 81       	ldd	r25, Y+2	; 0x02
    760c:	01 97       	sbiw	r24, 0x01	; 1
    760e:	f1 f7       	brne	.-4      	; 0x760c <InputPassword+0x292>
    7610:	9a 83       	std	Y+2, r25	; 0x02
    7612:	89 83       	std	Y+1, r24	; 0x01
        }
      }
      _delay_ms(200);
  }

}
    7614:	a4 96       	adiw	r28, 0x24	; 36
    7616:	0f b6       	in	r0, 0x3f	; 63
    7618:	f8 94       	cli
    761a:	de bf       	out	0x3e, r29	; 62
    761c:	0f be       	out	0x3f, r0	; 63
    761e:	cd bf       	out	0x3d, r28	; 61
    7620:	cf 91       	pop	r28
    7622:	df 91       	pop	r29
    7624:	08 95       	ret

00007626 <AdminLogin>:
u8 AdminLogin (u8* ID, u8* Password)
{
    7626:	0f 93       	push	r16
    7628:	1f 93       	push	r17
    762a:	df 93       	push	r29
    762c:	cf 93       	push	r28
    762e:	cd b7       	in	r28, 0x3d	; 61
    7630:	de b7       	in	r29, 0x3e	; 62
    7632:	ce 55       	subi	r28, 0x5E	; 94
    7634:	d0 40       	sbci	r29, 0x00	; 0
    7636:	0f b6       	in	r0, 0x3f	; 63
    7638:	f8 94       	cli
    763a:	de bf       	out	0x3e, r29	; 62
    763c:	0f be       	out	0x3f, r0	; 63
    763e:	cd bf       	out	0x3d, r28	; 61
    7640:	fe 01       	movw	r30, r28
    7642:	e5 5a       	subi	r30, 0xA5	; 165
    7644:	ff 4f       	sbci	r31, 0xFF	; 255
    7646:	91 83       	std	Z+1, r25	; 0x01
    7648:	80 83       	st	Z, r24
    764a:	fe 01       	movw	r30, r28
    764c:	e3 5a       	subi	r30, 0xA3	; 163
    764e:	ff 4f       	sbci	r31, 0xFF	; 255
    7650:	71 83       	std	Z+1, r23	; 0x01
    7652:	60 83       	st	Z, r22
   HCLCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
    7654:	81 e0       	ldi	r24, 0x01	; 1
    7656:	0e 94 61 34 	call	0x68c2	; 0x68c2 <HCLCD_WriteCommand4Bit>
   HCLCD_SetCursorPosition(HCLCD_LINE_0,0);
    765a:	80 e0       	ldi	r24, 0x00	; 0
    765c:	60 e0       	ldi	r22, 0x00	; 0
    765e:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
  u8 ByteAddress = 0, ValidUsername = 0, ValidPassword = 0, LocalCounter = 0, EEPROMData = 0, WrongEntry = 0;
    7662:	fe 01       	movw	r30, r28
    7664:	e6 5a       	subi	r30, 0xA6	; 166
    7666:	ff 4f       	sbci	r31, 0xFF	; 255
    7668:	10 82       	st	Z, r1
    766a:	fe 01       	movw	r30, r28
    766c:	e7 5a       	subi	r30, 0xA7	; 167
    766e:	ff 4f       	sbci	r31, 0xFF	; 255
    7670:	10 82       	st	Z, r1
    7672:	fe 01       	movw	r30, r28
    7674:	e8 5a       	subi	r30, 0xA8	; 168
    7676:	ff 4f       	sbci	r31, 0xFF	; 255
    7678:	10 82       	st	Z, r1
    767a:	fe 01       	movw	r30, r28
    767c:	e9 5a       	subi	r30, 0xA9	; 169
    767e:	ff 4f       	sbci	r31, 0xFF	; 255
    7680:	10 82       	st	Z, r1
    7682:	fe 01       	movw	r30, r28
    7684:	ea 5a       	subi	r30, 0xAA	; 170
    7686:	ff 4f       	sbci	r31, 0xFF	; 255
    7688:	10 82       	st	Z, r1
    768a:	fe 01       	movw	r30, r28
    768c:	eb 5a       	subi	r30, 0xAB	; 171
    768e:	ff 4f       	sbci	r31, 0xFF	; 255
    7690:	10 82       	st	Z, r1
    7692:	3b c0       	rjmp	.+118    	; 0x770a <AdminLogin+0xe4>
  for (; LocalCounter < IDLENGTH; LocalCounter++)
  {
    ByteAddress = 101 + LocalCounter;
    7694:	de 01       	movw	r26, r28
    7696:	a6 5a       	subi	r26, 0xA6	; 166
    7698:	bf 4f       	sbci	r27, 0xFF	; 255
    769a:	fe 01       	movw	r30, r28
    769c:	e9 5a       	subi	r30, 0xA9	; 169
    769e:	ff 4f       	sbci	r31, 0xFF	; 255
    76a0:	80 81       	ld	r24, Z
    76a2:	8b 59       	subi	r24, 0x9B	; 155
    76a4:	8c 93       	st	X, r24
    EEPROMData = HEEPROM_ReadByte(HCLCD_LINE_0,ByteAddress);
    76a6:	fe 01       	movw	r30, r28
    76a8:	e6 5a       	subi	r30, 0xA6	; 166
    76aa:	ff 4f       	sbci	r31, 0xFF	; 255
    76ac:	80 e0       	ldi	r24, 0x00	; 0
    76ae:	60 81       	ld	r22, Z
    76b0:	0e 94 4b 30 	call	0x6096	; 0x6096 <HEEPROM_ReadByte>
    76b4:	fe 01       	movw	r30, r28
    76b6:	ea 5a       	subi	r30, 0xAA	; 170
    76b8:	ff 4f       	sbci	r31, 0xFF	; 255
    76ba:	80 83       	st	Z, r24
    if (ID[LocalCounter] == EEPROMData)
    76bc:	fe 01       	movw	r30, r28
    76be:	e9 5a       	subi	r30, 0xA9	; 169
    76c0:	ff 4f       	sbci	r31, 0xFF	; 255
    76c2:	80 81       	ld	r24, Z
    76c4:	28 2f       	mov	r18, r24
    76c6:	30 e0       	ldi	r19, 0x00	; 0
    76c8:	fe 01       	movw	r30, r28
    76ca:	e5 5a       	subi	r30, 0xA5	; 165
    76cc:	ff 4f       	sbci	r31, 0xFF	; 255
    76ce:	80 81       	ld	r24, Z
    76d0:	91 81       	ldd	r25, Z+1	; 0x01
    76d2:	fc 01       	movw	r30, r24
    76d4:	e2 0f       	add	r30, r18
    76d6:	f3 1f       	adc	r31, r19
    76d8:	90 81       	ld	r25, Z
    76da:	fe 01       	movw	r30, r28
    76dc:	ea 5a       	subi	r30, 0xAA	; 170
    76de:	ff 4f       	sbci	r31, 0xFF	; 255
    76e0:	80 81       	ld	r24, Z
    76e2:	98 17       	cp	r25, r24
    76e4:	49 f4       	brne	.+18     	; 0x76f8 <AdminLogin+0xd2>
    {
      ValidUsername++;
    76e6:	de 01       	movw	r26, r28
    76e8:	a7 5a       	subi	r26, 0xA7	; 167
    76ea:	bf 4f       	sbci	r27, 0xFF	; 255
    76ec:	fe 01       	movw	r30, r28
    76ee:	e7 5a       	subi	r30, 0xA7	; 167
    76f0:	ff 4f       	sbci	r31, 0xFF	; 255
    76f2:	80 81       	ld	r24, Z
    76f4:	8f 5f       	subi	r24, 0xFF	; 255
    76f6:	8c 93       	st	X, r24
u8 AdminLogin (u8* ID, u8* Password)
{
   HCLCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
   HCLCD_SetCursorPosition(HCLCD_LINE_0,0);
  u8 ByteAddress = 0, ValidUsername = 0, ValidPassword = 0, LocalCounter = 0, EEPROMData = 0, WrongEntry = 0;
  for (; LocalCounter < IDLENGTH; LocalCounter++)
    76f8:	de 01       	movw	r26, r28
    76fa:	a9 5a       	subi	r26, 0xA9	; 169
    76fc:	bf 4f       	sbci	r27, 0xFF	; 255
    76fe:	fe 01       	movw	r30, r28
    7700:	e9 5a       	subi	r30, 0xA9	; 169
    7702:	ff 4f       	sbci	r31, 0xFF	; 255
    7704:	80 81       	ld	r24, Z
    7706:	8f 5f       	subi	r24, 0xFF	; 255
    7708:	8c 93       	st	X, r24
    770a:	fe 01       	movw	r30, r28
    770c:	e9 5a       	subi	r30, 0xA9	; 169
    770e:	ff 4f       	sbci	r31, 0xFF	; 255
    7710:	80 81       	ld	r24, Z
    7712:	83 30       	cpi	r24, 0x03	; 3
    7714:	08 f4       	brcc	.+2      	; 0x7718 <AdminLogin+0xf2>
    7716:	be cf       	rjmp	.-132    	; 0x7694 <AdminLogin+0x6e>
    {
      /*Do Nothing*/
    }
  }

  for (LocalCounter = 0; LocalCounter < PASSWORDLENGTH; LocalCounter++)
    7718:	fe 01       	movw	r30, r28
    771a:	e9 5a       	subi	r30, 0xA9	; 169
    771c:	ff 4f       	sbci	r31, 0xFF	; 255
    771e:	10 82       	st	Z, r1
    7720:	3b c0       	rjmp	.+118    	; 0x7798 <AdminLogin+0x172>
  {
    ByteAddress = 101 + LocalCounter + IDLENGTH;
    7722:	de 01       	movw	r26, r28
    7724:	a6 5a       	subi	r26, 0xA6	; 166
    7726:	bf 4f       	sbci	r27, 0xFF	; 255
    7728:	fe 01       	movw	r30, r28
    772a:	e9 5a       	subi	r30, 0xA9	; 169
    772c:	ff 4f       	sbci	r31, 0xFF	; 255
    772e:	80 81       	ld	r24, Z
    7730:	88 59       	subi	r24, 0x98	; 152
    7732:	8c 93       	st	X, r24
    EEPROMData = HEEPROM_ReadByte(HCLCD_LINE_0,ByteAddress);
    7734:	fe 01       	movw	r30, r28
    7736:	e6 5a       	subi	r30, 0xA6	; 166
    7738:	ff 4f       	sbci	r31, 0xFF	; 255
    773a:	80 e0       	ldi	r24, 0x00	; 0
    773c:	60 81       	ld	r22, Z
    773e:	0e 94 4b 30 	call	0x6096	; 0x6096 <HEEPROM_ReadByte>
    7742:	fe 01       	movw	r30, r28
    7744:	ea 5a       	subi	r30, 0xAA	; 170
    7746:	ff 4f       	sbci	r31, 0xFF	; 255
    7748:	80 83       	st	Z, r24
    if (Password[LocalCounter]==EEPROMData)
    774a:	fe 01       	movw	r30, r28
    774c:	e9 5a       	subi	r30, 0xA9	; 169
    774e:	ff 4f       	sbci	r31, 0xFF	; 255
    7750:	80 81       	ld	r24, Z
    7752:	28 2f       	mov	r18, r24
    7754:	30 e0       	ldi	r19, 0x00	; 0
    7756:	fe 01       	movw	r30, r28
    7758:	e3 5a       	subi	r30, 0xA3	; 163
    775a:	ff 4f       	sbci	r31, 0xFF	; 255
    775c:	80 81       	ld	r24, Z
    775e:	91 81       	ldd	r25, Z+1	; 0x01
    7760:	fc 01       	movw	r30, r24
    7762:	e2 0f       	add	r30, r18
    7764:	f3 1f       	adc	r31, r19
    7766:	90 81       	ld	r25, Z
    7768:	fe 01       	movw	r30, r28
    776a:	ea 5a       	subi	r30, 0xAA	; 170
    776c:	ff 4f       	sbci	r31, 0xFF	; 255
    776e:	80 81       	ld	r24, Z
    7770:	98 17       	cp	r25, r24
    7772:	49 f4       	brne	.+18     	; 0x7786 <AdminLogin+0x160>
    {
      ValidPassword++;
    7774:	de 01       	movw	r26, r28
    7776:	a8 5a       	subi	r26, 0xA8	; 168
    7778:	bf 4f       	sbci	r27, 0xFF	; 255
    777a:	fe 01       	movw	r30, r28
    777c:	e8 5a       	subi	r30, 0xA8	; 168
    777e:	ff 4f       	sbci	r31, 0xFF	; 255
    7780:	80 81       	ld	r24, Z
    7782:	8f 5f       	subi	r24, 0xFF	; 255
    7784:	8c 93       	st	X, r24
    {
      /*Do Nothing*/
    }
  }

  for (LocalCounter = 0; LocalCounter < PASSWORDLENGTH; LocalCounter++)
    7786:	de 01       	movw	r26, r28
    7788:	a9 5a       	subi	r26, 0xA9	; 169
    778a:	bf 4f       	sbci	r27, 0xFF	; 255
    778c:	fe 01       	movw	r30, r28
    778e:	e9 5a       	subi	r30, 0xA9	; 169
    7790:	ff 4f       	sbci	r31, 0xFF	; 255
    7792:	80 81       	ld	r24, Z
    7794:	8f 5f       	subi	r24, 0xFF	; 255
    7796:	8c 93       	st	X, r24
    7798:	fe 01       	movw	r30, r28
    779a:	e9 5a       	subi	r30, 0xA9	; 169
    779c:	ff 4f       	sbci	r31, 0xFF	; 255
    779e:	80 81       	ld	r24, Z
    77a0:	84 30       	cpi	r24, 0x04	; 4
    77a2:	08 f4       	brcc	.+2      	; 0x77a6 <AdminLogin+0x180>
    77a4:	be cf       	rjmp	.-132    	; 0x7722 <AdminLogin+0xfc>
    {
     /*Do Nothing*/
    }

  }
  if ((ValidUsername == IDLENGTH) && (ValidPassword == PASSWORDLENGTH))
    77a6:	fe 01       	movw	r30, r28
    77a8:	e7 5a       	subi	r30, 0xA7	; 167
    77aa:	ff 4f       	sbci	r31, 0xFF	; 255
    77ac:	80 81       	ld	r24, Z
    77ae:	83 30       	cpi	r24, 0x03	; 3
    77b0:	09 f0       	breq	.+2      	; 0x77b4 <AdminLogin+0x18e>
    77b2:	c4 c0       	rjmp	.+392    	; 0x793c <AdminLogin+0x316>
    77b4:	fe 01       	movw	r30, r28
    77b6:	e8 5a       	subi	r30, 0xA8	; 168
    77b8:	ff 4f       	sbci	r31, 0xFF	; 255
    77ba:	80 81       	ld	r24, Z
    77bc:	84 30       	cpi	r24, 0x04	; 4
    77be:	09 f0       	breq	.+2      	; 0x77c2 <AdminLogin+0x19c>
    77c0:	bd c0       	rjmp	.+378    	; 0x793c <AdminLogin+0x316>
  {
    HCLCD_WriteString("Login Successful");
    77c2:	8a e9       	ldi	r24, 0x9A	; 154
    77c4:	90 e0       	ldi	r25, 0x00	; 0
    77c6:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <HCLCD_WriteString>
    HHC05_SendString("Login Successful");
    77ca:	8a e9       	ldi	r24, 0x9A	; 154
    77cc:	90 e0       	ldi	r25, 0x00	; 0
    77ce:	0e 94 29 30 	call	0x6052	; 0x6052 <HHC05_SendString>
    77d2:	fe 01       	movw	r30, r28
    77d4:	ef 5a       	subi	r30, 0xAF	; 175
    77d6:	ff 4f       	sbci	r31, 0xFF	; 255
    77d8:	80 e0       	ldi	r24, 0x00	; 0
    77da:	90 e0       	ldi	r25, 0x00	; 0
    77dc:	aa ef       	ldi	r26, 0xFA	; 250
    77de:	b3 e4       	ldi	r27, 0x43	; 67
    77e0:	80 83       	st	Z, r24
    77e2:	91 83       	std	Z+1, r25	; 0x01
    77e4:	a2 83       	std	Z+2, r26	; 0x02
    77e6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    77e8:	8e 01       	movw	r16, r28
    77ea:	03 5b       	subi	r16, 0xB3	; 179
    77ec:	1f 4f       	sbci	r17, 0xFF	; 255
    77ee:	fe 01       	movw	r30, r28
    77f0:	ef 5a       	subi	r30, 0xAF	; 175
    77f2:	ff 4f       	sbci	r31, 0xFF	; 255
    77f4:	60 81       	ld	r22, Z
    77f6:	71 81       	ldd	r23, Z+1	; 0x01
    77f8:	82 81       	ldd	r24, Z+2	; 0x02
    77fa:	93 81       	ldd	r25, Z+3	; 0x03
    77fc:	20 e0       	ldi	r18, 0x00	; 0
    77fe:	30 e0       	ldi	r19, 0x00	; 0
    7800:	4a e7       	ldi	r20, 0x7A	; 122
    7802:	55 e4       	ldi	r21, 0x45	; 69
    7804:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7808:	dc 01       	movw	r26, r24
    780a:	cb 01       	movw	r24, r22
    780c:	f8 01       	movw	r30, r16
    780e:	80 83       	st	Z, r24
    7810:	91 83       	std	Z+1, r25	; 0x01
    7812:	a2 83       	std	Z+2, r26	; 0x02
    7814:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7816:	fe 01       	movw	r30, r28
    7818:	e3 5b       	subi	r30, 0xB3	; 179
    781a:	ff 4f       	sbci	r31, 0xFF	; 255
    781c:	60 81       	ld	r22, Z
    781e:	71 81       	ldd	r23, Z+1	; 0x01
    7820:	82 81       	ldd	r24, Z+2	; 0x02
    7822:	93 81       	ldd	r25, Z+3	; 0x03
    7824:	20 e0       	ldi	r18, 0x00	; 0
    7826:	30 e0       	ldi	r19, 0x00	; 0
    7828:	40 e8       	ldi	r20, 0x80	; 128
    782a:	5f e3       	ldi	r21, 0x3F	; 63
    782c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7830:	88 23       	and	r24, r24
    7832:	44 f4       	brge	.+16     	; 0x7844 <AdminLogin+0x21e>
		__ticks = 1;
    7834:	fe 01       	movw	r30, r28
    7836:	e5 5b       	subi	r30, 0xB5	; 181
    7838:	ff 4f       	sbci	r31, 0xFF	; 255
    783a:	81 e0       	ldi	r24, 0x01	; 1
    783c:	90 e0       	ldi	r25, 0x00	; 0
    783e:	91 83       	std	Z+1, r25	; 0x01
    7840:	80 83       	st	Z, r24
    7842:	64 c0       	rjmp	.+200    	; 0x790c <AdminLogin+0x2e6>
	else if (__tmp > 65535)
    7844:	fe 01       	movw	r30, r28
    7846:	e3 5b       	subi	r30, 0xB3	; 179
    7848:	ff 4f       	sbci	r31, 0xFF	; 255
    784a:	60 81       	ld	r22, Z
    784c:	71 81       	ldd	r23, Z+1	; 0x01
    784e:	82 81       	ldd	r24, Z+2	; 0x02
    7850:	93 81       	ldd	r25, Z+3	; 0x03
    7852:	20 e0       	ldi	r18, 0x00	; 0
    7854:	3f ef       	ldi	r19, 0xFF	; 255
    7856:	4f e7       	ldi	r20, 0x7F	; 127
    7858:	57 e4       	ldi	r21, 0x47	; 71
    785a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    785e:	18 16       	cp	r1, r24
    7860:	0c f0       	brlt	.+2      	; 0x7864 <AdminLogin+0x23e>
    7862:	43 c0       	rjmp	.+134    	; 0x78ea <AdminLogin+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7864:	fe 01       	movw	r30, r28
    7866:	ef 5a       	subi	r30, 0xAF	; 175
    7868:	ff 4f       	sbci	r31, 0xFF	; 255
    786a:	60 81       	ld	r22, Z
    786c:	71 81       	ldd	r23, Z+1	; 0x01
    786e:	82 81       	ldd	r24, Z+2	; 0x02
    7870:	93 81       	ldd	r25, Z+3	; 0x03
    7872:	20 e0       	ldi	r18, 0x00	; 0
    7874:	30 e0       	ldi	r19, 0x00	; 0
    7876:	40 e2       	ldi	r20, 0x20	; 32
    7878:	51 e4       	ldi	r21, 0x41	; 65
    787a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    787e:	dc 01       	movw	r26, r24
    7880:	cb 01       	movw	r24, r22
    7882:	8e 01       	movw	r16, r28
    7884:	05 5b       	subi	r16, 0xB5	; 181
    7886:	1f 4f       	sbci	r17, 0xFF	; 255
    7888:	bc 01       	movw	r22, r24
    788a:	cd 01       	movw	r24, r26
    788c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7890:	dc 01       	movw	r26, r24
    7892:	cb 01       	movw	r24, r22
    7894:	f8 01       	movw	r30, r16
    7896:	91 83       	std	Z+1, r25	; 0x01
    7898:	80 83       	st	Z, r24
    789a:	1f c0       	rjmp	.+62     	; 0x78da <AdminLogin+0x2b4>
    789c:	fe 01       	movw	r30, r28
    789e:	e7 5b       	subi	r30, 0xB7	; 183
    78a0:	ff 4f       	sbci	r31, 0xFF	; 255
    78a2:	80 e9       	ldi	r24, 0x90	; 144
    78a4:	91 e0       	ldi	r25, 0x01	; 1
    78a6:	91 83       	std	Z+1, r25	; 0x01
    78a8:	80 83       	st	Z, r24
    78aa:	fe 01       	movw	r30, r28
    78ac:	e7 5b       	subi	r30, 0xB7	; 183
    78ae:	ff 4f       	sbci	r31, 0xFF	; 255
    78b0:	80 81       	ld	r24, Z
    78b2:	91 81       	ldd	r25, Z+1	; 0x01
    78b4:	01 97       	sbiw	r24, 0x01	; 1
    78b6:	f1 f7       	brne	.-4      	; 0x78b4 <AdminLogin+0x28e>
    78b8:	fe 01       	movw	r30, r28
    78ba:	e7 5b       	subi	r30, 0xB7	; 183
    78bc:	ff 4f       	sbci	r31, 0xFF	; 255
    78be:	91 83       	std	Z+1, r25	; 0x01
    78c0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    78c2:	de 01       	movw	r26, r28
    78c4:	a5 5b       	subi	r26, 0xB5	; 181
    78c6:	bf 4f       	sbci	r27, 0xFF	; 255
    78c8:	fe 01       	movw	r30, r28
    78ca:	e5 5b       	subi	r30, 0xB5	; 181
    78cc:	ff 4f       	sbci	r31, 0xFF	; 255
    78ce:	80 81       	ld	r24, Z
    78d0:	91 81       	ldd	r25, Z+1	; 0x01
    78d2:	01 97       	sbiw	r24, 0x01	; 1
    78d4:	11 96       	adiw	r26, 0x01	; 1
    78d6:	9c 93       	st	X, r25
    78d8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    78da:	fe 01       	movw	r30, r28
    78dc:	e5 5b       	subi	r30, 0xB5	; 181
    78de:	ff 4f       	sbci	r31, 0xFF	; 255
    78e0:	80 81       	ld	r24, Z
    78e2:	91 81       	ldd	r25, Z+1	; 0x01
    78e4:	00 97       	sbiw	r24, 0x00	; 0
    78e6:	d1 f6       	brne	.-76     	; 0x789c <AdminLogin+0x276>
    78e8:	f9 c1       	rjmp	.+1010   	; 0x7cdc <AdminLogin+0x6b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    78ea:	8e 01       	movw	r16, r28
    78ec:	05 5b       	subi	r16, 0xB5	; 181
    78ee:	1f 4f       	sbci	r17, 0xFF	; 255
    78f0:	fe 01       	movw	r30, r28
    78f2:	e3 5b       	subi	r30, 0xB3	; 179
    78f4:	ff 4f       	sbci	r31, 0xFF	; 255
    78f6:	60 81       	ld	r22, Z
    78f8:	71 81       	ldd	r23, Z+1	; 0x01
    78fa:	82 81       	ldd	r24, Z+2	; 0x02
    78fc:	93 81       	ldd	r25, Z+3	; 0x03
    78fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7902:	dc 01       	movw	r26, r24
    7904:	cb 01       	movw	r24, r22
    7906:	f8 01       	movw	r30, r16
    7908:	91 83       	std	Z+1, r25	; 0x01
    790a:	80 83       	st	Z, r24
    790c:	de 01       	movw	r26, r28
    790e:	a9 5b       	subi	r26, 0xB9	; 185
    7910:	bf 4f       	sbci	r27, 0xFF	; 255
    7912:	fe 01       	movw	r30, r28
    7914:	e5 5b       	subi	r30, 0xB5	; 181
    7916:	ff 4f       	sbci	r31, 0xFF	; 255
    7918:	80 81       	ld	r24, Z
    791a:	91 81       	ldd	r25, Z+1	; 0x01
    791c:	11 96       	adiw	r26, 0x01	; 1
    791e:	9c 93       	st	X, r25
    7920:	8e 93       	st	-X, r24
    7922:	fe 01       	movw	r30, r28
    7924:	e9 5b       	subi	r30, 0xB9	; 185
    7926:	ff 4f       	sbci	r31, 0xFF	; 255
    7928:	80 81       	ld	r24, Z
    792a:	91 81       	ldd	r25, Z+1	; 0x01
    792c:	01 97       	sbiw	r24, 0x01	; 1
    792e:	f1 f7       	brne	.-4      	; 0x792c <AdminLogin+0x306>
    7930:	fe 01       	movw	r30, r28
    7932:	e9 5b       	subi	r30, 0xB9	; 185
    7934:	ff 4f       	sbci	r31, 0xFF	; 255
    7936:	91 83       	std	Z+1, r25	; 0x01
    7938:	80 83       	st	Z, r24
    793a:	d0 c1       	rjmp	.+928    	; 0x7cdc <AdminLogin+0x6b6>
    _delay_ms(500);
  }
  else if((ValidPassword == PASSWORDLENGTH) && (ValidUsername != IDLENGTH))
    793c:	fe 01       	movw	r30, r28
    793e:	e8 5a       	subi	r30, 0xA8	; 168
    7940:	ff 4f       	sbci	r31, 0xFF	; 255
    7942:	80 81       	ld	r24, Z
    7944:	84 30       	cpi	r24, 0x04	; 4
    7946:	09 f0       	breq	.+2      	; 0x794a <AdminLogin+0x324>
    7948:	9e c0       	rjmp	.+316    	; 0x7a86 <AdminLogin+0x460>
    794a:	fe 01       	movw	r30, r28
    794c:	e7 5a       	subi	r30, 0xA7	; 167
    794e:	ff 4f       	sbci	r31, 0xFF	; 255
    7950:	80 81       	ld	r24, Z
    7952:	83 30       	cpi	r24, 0x03	; 3
    7954:	09 f4       	brne	.+2      	; 0x7958 <AdminLogin+0x332>
    7956:	97 c0       	rjmp	.+302    	; 0x7a86 <AdminLogin+0x460>
  {
	  HCLCD_WriteString("Invalid User Name!");
    7958:	8b ea       	ldi	r24, 0xAB	; 171
    795a:	90 e0       	ldi	r25, 0x00	; 0
    795c:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <HCLCD_WriteString>
	  HHC05_SendString("Invalid User Name!");
    7960:	8b ea       	ldi	r24, 0xAB	; 171
    7962:	90 e0       	ldi	r25, 0x00	; 0
    7964:	0e 94 29 30 	call	0x6052	; 0x6052 <HHC05_SendString>
    7968:	fe 01       	movw	r30, r28
    796a:	ed 5b       	subi	r30, 0xBD	; 189
    796c:	ff 4f       	sbci	r31, 0xFF	; 255
    796e:	80 e0       	ldi	r24, 0x00	; 0
    7970:	90 e0       	ldi	r25, 0x00	; 0
    7972:	aa ef       	ldi	r26, 0xFA	; 250
    7974:	b3 e4       	ldi	r27, 0x43	; 67
    7976:	80 83       	st	Z, r24
    7978:	91 83       	std	Z+1, r25	; 0x01
    797a:	a2 83       	std	Z+2, r26	; 0x02
    797c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    797e:	8e 01       	movw	r16, r28
    7980:	01 5c       	subi	r16, 0xC1	; 193
    7982:	1f 4f       	sbci	r17, 0xFF	; 255
    7984:	fe 01       	movw	r30, r28
    7986:	ed 5b       	subi	r30, 0xBD	; 189
    7988:	ff 4f       	sbci	r31, 0xFF	; 255
    798a:	60 81       	ld	r22, Z
    798c:	71 81       	ldd	r23, Z+1	; 0x01
    798e:	82 81       	ldd	r24, Z+2	; 0x02
    7990:	93 81       	ldd	r25, Z+3	; 0x03
    7992:	20 e0       	ldi	r18, 0x00	; 0
    7994:	30 e0       	ldi	r19, 0x00	; 0
    7996:	4a e7       	ldi	r20, 0x7A	; 122
    7998:	55 e4       	ldi	r21, 0x45	; 69
    799a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    799e:	dc 01       	movw	r26, r24
    79a0:	cb 01       	movw	r24, r22
    79a2:	f8 01       	movw	r30, r16
    79a4:	80 83       	st	Z, r24
    79a6:	91 83       	std	Z+1, r25	; 0x01
    79a8:	a2 83       	std	Z+2, r26	; 0x02
    79aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    79ac:	fe 01       	movw	r30, r28
    79ae:	ff 96       	adiw	r30, 0x3f	; 63
    79b0:	60 81       	ld	r22, Z
    79b2:	71 81       	ldd	r23, Z+1	; 0x01
    79b4:	82 81       	ldd	r24, Z+2	; 0x02
    79b6:	93 81       	ldd	r25, Z+3	; 0x03
    79b8:	20 e0       	ldi	r18, 0x00	; 0
    79ba:	30 e0       	ldi	r19, 0x00	; 0
    79bc:	40 e8       	ldi	r20, 0x80	; 128
    79be:	5f e3       	ldi	r21, 0x3F	; 63
    79c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    79c4:	88 23       	and	r24, r24
    79c6:	2c f4       	brge	.+10     	; 0x79d2 <AdminLogin+0x3ac>
		__ticks = 1;
    79c8:	81 e0       	ldi	r24, 0x01	; 1
    79ca:	90 e0       	ldi	r25, 0x00	; 0
    79cc:	9e af       	std	Y+62, r25	; 0x3e
    79ce:	8d af       	std	Y+61, r24	; 0x3d
    79d0:	46 c0       	rjmp	.+140    	; 0x7a5e <AdminLogin+0x438>
	else if (__tmp > 65535)
    79d2:	fe 01       	movw	r30, r28
    79d4:	ff 96       	adiw	r30, 0x3f	; 63
    79d6:	60 81       	ld	r22, Z
    79d8:	71 81       	ldd	r23, Z+1	; 0x01
    79da:	82 81       	ldd	r24, Z+2	; 0x02
    79dc:	93 81       	ldd	r25, Z+3	; 0x03
    79de:	20 e0       	ldi	r18, 0x00	; 0
    79e0:	3f ef       	ldi	r19, 0xFF	; 255
    79e2:	4f e7       	ldi	r20, 0x7F	; 127
    79e4:	57 e4       	ldi	r21, 0x47	; 71
    79e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    79ea:	18 16       	cp	r1, r24
    79ec:	64 f5       	brge	.+88     	; 0x7a46 <AdminLogin+0x420>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    79ee:	fe 01       	movw	r30, r28
    79f0:	ed 5b       	subi	r30, 0xBD	; 189
    79f2:	ff 4f       	sbci	r31, 0xFF	; 255
    79f4:	60 81       	ld	r22, Z
    79f6:	71 81       	ldd	r23, Z+1	; 0x01
    79f8:	82 81       	ldd	r24, Z+2	; 0x02
    79fa:	93 81       	ldd	r25, Z+3	; 0x03
    79fc:	20 e0       	ldi	r18, 0x00	; 0
    79fe:	30 e0       	ldi	r19, 0x00	; 0
    7a00:	40 e2       	ldi	r20, 0x20	; 32
    7a02:	51 e4       	ldi	r21, 0x41	; 65
    7a04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7a08:	dc 01       	movw	r26, r24
    7a0a:	cb 01       	movw	r24, r22
    7a0c:	bc 01       	movw	r22, r24
    7a0e:	cd 01       	movw	r24, r26
    7a10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7a14:	dc 01       	movw	r26, r24
    7a16:	cb 01       	movw	r24, r22
    7a18:	9e af       	std	Y+62, r25	; 0x3e
    7a1a:	8d af       	std	Y+61, r24	; 0x3d
    7a1c:	0f c0       	rjmp	.+30     	; 0x7a3c <AdminLogin+0x416>
    7a1e:	80 e9       	ldi	r24, 0x90	; 144
    7a20:	91 e0       	ldi	r25, 0x01	; 1
    7a22:	9c af       	std	Y+60, r25	; 0x3c
    7a24:	8b af       	std	Y+59, r24	; 0x3b
    7a26:	8b ad       	ldd	r24, Y+59	; 0x3b
    7a28:	9c ad       	ldd	r25, Y+60	; 0x3c
    7a2a:	01 97       	sbiw	r24, 0x01	; 1
    7a2c:	f1 f7       	brne	.-4      	; 0x7a2a <AdminLogin+0x404>
    7a2e:	9c af       	std	Y+60, r25	; 0x3c
    7a30:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7a32:	8d ad       	ldd	r24, Y+61	; 0x3d
    7a34:	9e ad       	ldd	r25, Y+62	; 0x3e
    7a36:	01 97       	sbiw	r24, 0x01	; 1
    7a38:	9e af       	std	Y+62, r25	; 0x3e
    7a3a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7a3c:	8d ad       	ldd	r24, Y+61	; 0x3d
    7a3e:	9e ad       	ldd	r25, Y+62	; 0x3e
    7a40:	00 97       	sbiw	r24, 0x00	; 0
    7a42:	69 f7       	brne	.-38     	; 0x7a1e <AdminLogin+0x3f8>
    7a44:	16 c0       	rjmp	.+44     	; 0x7a72 <AdminLogin+0x44c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7a46:	fe 01       	movw	r30, r28
    7a48:	ff 96       	adiw	r30, 0x3f	; 63
    7a4a:	60 81       	ld	r22, Z
    7a4c:	71 81       	ldd	r23, Z+1	; 0x01
    7a4e:	82 81       	ldd	r24, Z+2	; 0x02
    7a50:	93 81       	ldd	r25, Z+3	; 0x03
    7a52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7a56:	dc 01       	movw	r26, r24
    7a58:	cb 01       	movw	r24, r22
    7a5a:	9e af       	std	Y+62, r25	; 0x3e
    7a5c:	8d af       	std	Y+61, r24	; 0x3d
    7a5e:	8d ad       	ldd	r24, Y+61	; 0x3d
    7a60:	9e ad       	ldd	r25, Y+62	; 0x3e
    7a62:	9a af       	std	Y+58, r25	; 0x3a
    7a64:	89 af       	std	Y+57, r24	; 0x39
    7a66:	89 ad       	ldd	r24, Y+57	; 0x39
    7a68:	9a ad       	ldd	r25, Y+58	; 0x3a
    7a6a:	01 97       	sbiw	r24, 0x01	; 1
    7a6c:	f1 f7       	brne	.-4      	; 0x7a6a <AdminLogin+0x444>
    7a6e:	9a af       	std	Y+58, r25	; 0x3a
    7a70:	89 af       	std	Y+57, r24	; 0x39
      _delay_ms(500);
      WrongEntry++;
    7a72:	de 01       	movw	r26, r28
    7a74:	ab 5a       	subi	r26, 0xAB	; 171
    7a76:	bf 4f       	sbci	r27, 0xFF	; 255
    7a78:	fe 01       	movw	r30, r28
    7a7a:	eb 5a       	subi	r30, 0xAB	; 171
    7a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    7a7e:	80 81       	ld	r24, Z
    7a80:	8f 5f       	subi	r24, 0xFF	; 255
    7a82:	8c 93       	st	X, r24
    7a84:	2b c1       	rjmp	.+598    	; 0x7cdc <AdminLogin+0x6b6>
  }
  else if ((ValidUsername == IDLENGTH) && (ValidPassword != PASSWORDLENGTH))
    7a86:	fe 01       	movw	r30, r28
    7a88:	e7 5a       	subi	r30, 0xA7	; 167
    7a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    7a8c:	80 81       	ld	r24, Z
    7a8e:	83 30       	cpi	r24, 0x03	; 3
    7a90:	09 f0       	breq	.+2      	; 0x7a94 <AdminLogin+0x46e>
    7a92:	8b c0       	rjmp	.+278    	; 0x7baa <AdminLogin+0x584>
    7a94:	fe 01       	movw	r30, r28
    7a96:	e8 5a       	subi	r30, 0xA8	; 168
    7a98:	ff 4f       	sbci	r31, 0xFF	; 255
    7a9a:	80 81       	ld	r24, Z
    7a9c:	84 30       	cpi	r24, 0x04	; 4
    7a9e:	09 f4       	brne	.+2      	; 0x7aa2 <AdminLogin+0x47c>
    7aa0:	84 c0       	rjmp	.+264    	; 0x7baa <AdminLogin+0x584>
  {
	  HCLCD_WriteString("Invalid Password!");
    7aa2:	8e eb       	ldi	r24, 0xBE	; 190
    7aa4:	90 e0       	ldi	r25, 0x00	; 0
    7aa6:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <HCLCD_WriteString>
	  HHC05_SendString("Invalid Password!");
    7aaa:	8e eb       	ldi	r24, 0xBE	; 190
    7aac:	90 e0       	ldi	r25, 0x00	; 0
    7aae:	0e 94 29 30 	call	0x6052	; 0x6052 <HHC05_SendString>
    7ab2:	80 e0       	ldi	r24, 0x00	; 0
    7ab4:	90 e0       	ldi	r25, 0x00	; 0
    7ab6:	aa ef       	ldi	r26, 0xFA	; 250
    7ab8:	b3 e4       	ldi	r27, 0x43	; 67
    7aba:	8d ab       	std	Y+53, r24	; 0x35
    7abc:	9e ab       	std	Y+54, r25	; 0x36
    7abe:	af ab       	std	Y+55, r26	; 0x37
    7ac0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7ac2:	6d a9       	ldd	r22, Y+53	; 0x35
    7ac4:	7e a9       	ldd	r23, Y+54	; 0x36
    7ac6:	8f a9       	ldd	r24, Y+55	; 0x37
    7ac8:	98 ad       	ldd	r25, Y+56	; 0x38
    7aca:	20 e0       	ldi	r18, 0x00	; 0
    7acc:	30 e0       	ldi	r19, 0x00	; 0
    7ace:	4a e7       	ldi	r20, 0x7A	; 122
    7ad0:	55 e4       	ldi	r21, 0x45	; 69
    7ad2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7ad6:	dc 01       	movw	r26, r24
    7ad8:	cb 01       	movw	r24, r22
    7ada:	89 ab       	std	Y+49, r24	; 0x31
    7adc:	9a ab       	std	Y+50, r25	; 0x32
    7ade:	ab ab       	std	Y+51, r26	; 0x33
    7ae0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    7ae2:	69 a9       	ldd	r22, Y+49	; 0x31
    7ae4:	7a a9       	ldd	r23, Y+50	; 0x32
    7ae6:	8b a9       	ldd	r24, Y+51	; 0x33
    7ae8:	9c a9       	ldd	r25, Y+52	; 0x34
    7aea:	20 e0       	ldi	r18, 0x00	; 0
    7aec:	30 e0       	ldi	r19, 0x00	; 0
    7aee:	40 e8       	ldi	r20, 0x80	; 128
    7af0:	5f e3       	ldi	r21, 0x3F	; 63
    7af2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7af6:	88 23       	and	r24, r24
    7af8:	2c f4       	brge	.+10     	; 0x7b04 <AdminLogin+0x4de>
		__ticks = 1;
    7afa:	81 e0       	ldi	r24, 0x01	; 1
    7afc:	90 e0       	ldi	r25, 0x00	; 0
    7afe:	98 ab       	std	Y+48, r25	; 0x30
    7b00:	8f a7       	std	Y+47, r24	; 0x2f
    7b02:	3f c0       	rjmp	.+126    	; 0x7b82 <AdminLogin+0x55c>
	else if (__tmp > 65535)
    7b04:	69 a9       	ldd	r22, Y+49	; 0x31
    7b06:	7a a9       	ldd	r23, Y+50	; 0x32
    7b08:	8b a9       	ldd	r24, Y+51	; 0x33
    7b0a:	9c a9       	ldd	r25, Y+52	; 0x34
    7b0c:	20 e0       	ldi	r18, 0x00	; 0
    7b0e:	3f ef       	ldi	r19, 0xFF	; 255
    7b10:	4f e7       	ldi	r20, 0x7F	; 127
    7b12:	57 e4       	ldi	r21, 0x47	; 71
    7b14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7b18:	18 16       	cp	r1, r24
    7b1a:	4c f5       	brge	.+82     	; 0x7b6e <AdminLogin+0x548>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7b1c:	6d a9       	ldd	r22, Y+53	; 0x35
    7b1e:	7e a9       	ldd	r23, Y+54	; 0x36
    7b20:	8f a9       	ldd	r24, Y+55	; 0x37
    7b22:	98 ad       	ldd	r25, Y+56	; 0x38
    7b24:	20 e0       	ldi	r18, 0x00	; 0
    7b26:	30 e0       	ldi	r19, 0x00	; 0
    7b28:	40 e2       	ldi	r20, 0x20	; 32
    7b2a:	51 e4       	ldi	r21, 0x41	; 65
    7b2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7b30:	dc 01       	movw	r26, r24
    7b32:	cb 01       	movw	r24, r22
    7b34:	bc 01       	movw	r22, r24
    7b36:	cd 01       	movw	r24, r26
    7b38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7b3c:	dc 01       	movw	r26, r24
    7b3e:	cb 01       	movw	r24, r22
    7b40:	98 ab       	std	Y+48, r25	; 0x30
    7b42:	8f a7       	std	Y+47, r24	; 0x2f
    7b44:	0f c0       	rjmp	.+30     	; 0x7b64 <AdminLogin+0x53e>
    7b46:	80 e9       	ldi	r24, 0x90	; 144
    7b48:	91 e0       	ldi	r25, 0x01	; 1
    7b4a:	9e a7       	std	Y+46, r25	; 0x2e
    7b4c:	8d a7       	std	Y+45, r24	; 0x2d
    7b4e:	8d a5       	ldd	r24, Y+45	; 0x2d
    7b50:	9e a5       	ldd	r25, Y+46	; 0x2e
    7b52:	01 97       	sbiw	r24, 0x01	; 1
    7b54:	f1 f7       	brne	.-4      	; 0x7b52 <AdminLogin+0x52c>
    7b56:	9e a7       	std	Y+46, r25	; 0x2e
    7b58:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7b5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    7b5c:	98 a9       	ldd	r25, Y+48	; 0x30
    7b5e:	01 97       	sbiw	r24, 0x01	; 1
    7b60:	98 ab       	std	Y+48, r25	; 0x30
    7b62:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7b64:	8f a5       	ldd	r24, Y+47	; 0x2f
    7b66:	98 a9       	ldd	r25, Y+48	; 0x30
    7b68:	00 97       	sbiw	r24, 0x00	; 0
    7b6a:	69 f7       	brne	.-38     	; 0x7b46 <AdminLogin+0x520>
    7b6c:	14 c0       	rjmp	.+40     	; 0x7b96 <AdminLogin+0x570>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7b6e:	69 a9       	ldd	r22, Y+49	; 0x31
    7b70:	7a a9       	ldd	r23, Y+50	; 0x32
    7b72:	8b a9       	ldd	r24, Y+51	; 0x33
    7b74:	9c a9       	ldd	r25, Y+52	; 0x34
    7b76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7b7a:	dc 01       	movw	r26, r24
    7b7c:	cb 01       	movw	r24, r22
    7b7e:	98 ab       	std	Y+48, r25	; 0x30
    7b80:	8f a7       	std	Y+47, r24	; 0x2f
    7b82:	8f a5       	ldd	r24, Y+47	; 0x2f
    7b84:	98 a9       	ldd	r25, Y+48	; 0x30
    7b86:	9c a7       	std	Y+44, r25	; 0x2c
    7b88:	8b a7       	std	Y+43, r24	; 0x2b
    7b8a:	8b a5       	ldd	r24, Y+43	; 0x2b
    7b8c:	9c a5       	ldd	r25, Y+44	; 0x2c
    7b8e:	01 97       	sbiw	r24, 0x01	; 1
    7b90:	f1 f7       	brne	.-4      	; 0x7b8e <AdminLogin+0x568>
    7b92:	9c a7       	std	Y+44, r25	; 0x2c
    7b94:	8b a7       	std	Y+43, r24	; 0x2b
     _delay_ms(500);
     WrongEntry++;
    7b96:	de 01       	movw	r26, r28
    7b98:	ab 5a       	subi	r26, 0xAB	; 171
    7b9a:	bf 4f       	sbci	r27, 0xFF	; 255
    7b9c:	fe 01       	movw	r30, r28
    7b9e:	eb 5a       	subi	r30, 0xAB	; 171
    7ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    7ba2:	80 81       	ld	r24, Z
    7ba4:	8f 5f       	subi	r24, 0xFF	; 255
    7ba6:	8c 93       	st	X, r24
    7ba8:	99 c0       	rjmp	.+306    	; 0x7cdc <AdminLogin+0x6b6>
  }
  else if ((ValidUsername != IDLENGTH) && (ValidPassword != PASSWORDLENGTH))
    7baa:	fe 01       	movw	r30, r28
    7bac:	e7 5a       	subi	r30, 0xA7	; 167
    7bae:	ff 4f       	sbci	r31, 0xFF	; 255
    7bb0:	80 81       	ld	r24, Z
    7bb2:	83 30       	cpi	r24, 0x03	; 3
    7bb4:	09 f4       	brne	.+2      	; 0x7bb8 <AdminLogin+0x592>
    7bb6:	92 c0       	rjmp	.+292    	; 0x7cdc <AdminLogin+0x6b6>
    7bb8:	fe 01       	movw	r30, r28
    7bba:	e8 5a       	subi	r30, 0xA8	; 168
    7bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    7bbe:	80 81       	ld	r24, Z
    7bc0:	84 30       	cpi	r24, 0x04	; 4
    7bc2:	09 f4       	brne	.+2      	; 0x7bc6 <AdminLogin+0x5a0>
    7bc4:	8b c0       	rjmp	.+278    	; 0x7cdc <AdminLogin+0x6b6>
  {
	 HCLCD_WriteString("Wrong User Name!");
    7bc6:	80 ed       	ldi	r24, 0xD0	; 208
    7bc8:	90 e0       	ldi	r25, 0x00	; 0
    7bca:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <HCLCD_WriteString>
    HCLCD_SetCursorPosition(HCLCD_LINE_1, 0);
    7bce:	81 e0       	ldi	r24, 0x01	; 1
    7bd0:	60 e0       	ldi	r22, 0x00	; 0
    7bd2:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
    HHC05_SendString("Wrong Password!");
    7bd6:	81 ee       	ldi	r24, 0xE1	; 225
    7bd8:	90 e0       	ldi	r25, 0x00	; 0
    7bda:	0e 94 29 30 	call	0x6052	; 0x6052 <HHC05_SendString>
    7bde:	80 e0       	ldi	r24, 0x00	; 0
    7be0:	90 e0       	ldi	r25, 0x00	; 0
    7be2:	aa ef       	ldi	r26, 0xFA	; 250
    7be4:	b3 e4       	ldi	r27, 0x43	; 67
    7be6:	8f a3       	std	Y+39, r24	; 0x27
    7be8:	98 a7       	std	Y+40, r25	; 0x28
    7bea:	a9 a7       	std	Y+41, r26	; 0x29
    7bec:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7bee:	6f a1       	ldd	r22, Y+39	; 0x27
    7bf0:	78 a5       	ldd	r23, Y+40	; 0x28
    7bf2:	89 a5       	ldd	r24, Y+41	; 0x29
    7bf4:	9a a5       	ldd	r25, Y+42	; 0x2a
    7bf6:	20 e0       	ldi	r18, 0x00	; 0
    7bf8:	30 e0       	ldi	r19, 0x00	; 0
    7bfa:	4a e7       	ldi	r20, 0x7A	; 122
    7bfc:	55 e4       	ldi	r21, 0x45	; 69
    7bfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7c02:	dc 01       	movw	r26, r24
    7c04:	cb 01       	movw	r24, r22
    7c06:	8b a3       	std	Y+35, r24	; 0x23
    7c08:	9c a3       	std	Y+36, r25	; 0x24
    7c0a:	ad a3       	std	Y+37, r26	; 0x25
    7c0c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    7c0e:	6b a1       	ldd	r22, Y+35	; 0x23
    7c10:	7c a1       	ldd	r23, Y+36	; 0x24
    7c12:	8d a1       	ldd	r24, Y+37	; 0x25
    7c14:	9e a1       	ldd	r25, Y+38	; 0x26
    7c16:	20 e0       	ldi	r18, 0x00	; 0
    7c18:	30 e0       	ldi	r19, 0x00	; 0
    7c1a:	40 e8       	ldi	r20, 0x80	; 128
    7c1c:	5f e3       	ldi	r21, 0x3F	; 63
    7c1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7c22:	88 23       	and	r24, r24
    7c24:	2c f4       	brge	.+10     	; 0x7c30 <AdminLogin+0x60a>
		__ticks = 1;
    7c26:	81 e0       	ldi	r24, 0x01	; 1
    7c28:	90 e0       	ldi	r25, 0x00	; 0
    7c2a:	9a a3       	std	Y+34, r25	; 0x22
    7c2c:	89 a3       	std	Y+33, r24	; 0x21
    7c2e:	3f c0       	rjmp	.+126    	; 0x7cae <AdminLogin+0x688>
	else if (__tmp > 65535)
    7c30:	6b a1       	ldd	r22, Y+35	; 0x23
    7c32:	7c a1       	ldd	r23, Y+36	; 0x24
    7c34:	8d a1       	ldd	r24, Y+37	; 0x25
    7c36:	9e a1       	ldd	r25, Y+38	; 0x26
    7c38:	20 e0       	ldi	r18, 0x00	; 0
    7c3a:	3f ef       	ldi	r19, 0xFF	; 255
    7c3c:	4f e7       	ldi	r20, 0x7F	; 127
    7c3e:	57 e4       	ldi	r21, 0x47	; 71
    7c40:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7c44:	18 16       	cp	r1, r24
    7c46:	4c f5       	brge	.+82     	; 0x7c9a <AdminLogin+0x674>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7c48:	6f a1       	ldd	r22, Y+39	; 0x27
    7c4a:	78 a5       	ldd	r23, Y+40	; 0x28
    7c4c:	89 a5       	ldd	r24, Y+41	; 0x29
    7c4e:	9a a5       	ldd	r25, Y+42	; 0x2a
    7c50:	20 e0       	ldi	r18, 0x00	; 0
    7c52:	30 e0       	ldi	r19, 0x00	; 0
    7c54:	40 e2       	ldi	r20, 0x20	; 32
    7c56:	51 e4       	ldi	r21, 0x41	; 65
    7c58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7c5c:	dc 01       	movw	r26, r24
    7c5e:	cb 01       	movw	r24, r22
    7c60:	bc 01       	movw	r22, r24
    7c62:	cd 01       	movw	r24, r26
    7c64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7c68:	dc 01       	movw	r26, r24
    7c6a:	cb 01       	movw	r24, r22
    7c6c:	9a a3       	std	Y+34, r25	; 0x22
    7c6e:	89 a3       	std	Y+33, r24	; 0x21
    7c70:	0f c0       	rjmp	.+30     	; 0x7c90 <AdminLogin+0x66a>
    7c72:	80 e9       	ldi	r24, 0x90	; 144
    7c74:	91 e0       	ldi	r25, 0x01	; 1
    7c76:	98 a3       	std	Y+32, r25	; 0x20
    7c78:	8f 8f       	std	Y+31, r24	; 0x1f
    7c7a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7c7c:	98 a1       	ldd	r25, Y+32	; 0x20
    7c7e:	01 97       	sbiw	r24, 0x01	; 1
    7c80:	f1 f7       	brne	.-4      	; 0x7c7e <AdminLogin+0x658>
    7c82:	98 a3       	std	Y+32, r25	; 0x20
    7c84:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7c86:	89 a1       	ldd	r24, Y+33	; 0x21
    7c88:	9a a1       	ldd	r25, Y+34	; 0x22
    7c8a:	01 97       	sbiw	r24, 0x01	; 1
    7c8c:	9a a3       	std	Y+34, r25	; 0x22
    7c8e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7c90:	89 a1       	ldd	r24, Y+33	; 0x21
    7c92:	9a a1       	ldd	r25, Y+34	; 0x22
    7c94:	00 97       	sbiw	r24, 0x00	; 0
    7c96:	69 f7       	brne	.-38     	; 0x7c72 <AdminLogin+0x64c>
    7c98:	14 c0       	rjmp	.+40     	; 0x7cc2 <AdminLogin+0x69c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7c9a:	6b a1       	ldd	r22, Y+35	; 0x23
    7c9c:	7c a1       	ldd	r23, Y+36	; 0x24
    7c9e:	8d a1       	ldd	r24, Y+37	; 0x25
    7ca0:	9e a1       	ldd	r25, Y+38	; 0x26
    7ca2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7ca6:	dc 01       	movw	r26, r24
    7ca8:	cb 01       	movw	r24, r22
    7caa:	9a a3       	std	Y+34, r25	; 0x22
    7cac:	89 a3       	std	Y+33, r24	; 0x21
    7cae:	89 a1       	ldd	r24, Y+33	; 0x21
    7cb0:	9a a1       	ldd	r25, Y+34	; 0x22
    7cb2:	9e 8f       	std	Y+30, r25	; 0x1e
    7cb4:	8d 8f       	std	Y+29, r24	; 0x1d
    7cb6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7cb8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7cba:	01 97       	sbiw	r24, 0x01	; 1
    7cbc:	f1 f7       	brne	.-4      	; 0x7cba <AdminLogin+0x694>
    7cbe:	9e 8f       	std	Y+30, r25	; 0x1e
    7cc0:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(500);
    HHC05_SendString("Wrong User Name & Password!");
    7cc2:	81 ef       	ldi	r24, 0xF1	; 241
    7cc4:	90 e0       	ldi	r25, 0x00	; 0
    7cc6:	0e 94 29 30 	call	0x6052	; 0x6052 <HHC05_SendString>
    WrongEntry++;
    7cca:	de 01       	movw	r26, r28
    7ccc:	ab 5a       	subi	r26, 0xAB	; 171
    7cce:	bf 4f       	sbci	r27, 0xFF	; 255
    7cd0:	fe 01       	movw	r30, r28
    7cd2:	eb 5a       	subi	r30, 0xAB	; 171
    7cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    7cd6:	80 81       	ld	r24, Z
    7cd8:	8f 5f       	subi	r24, 0xFF	; 255
    7cda:	8c 93       	st	X, r24
    7cdc:	80 e0       	ldi	r24, 0x00	; 0
    7cde:	90 e0       	ldi	r25, 0x00	; 0
    7ce0:	a6 e9       	ldi	r26, 0x96	; 150
    7ce2:	b3 e4       	ldi	r27, 0x43	; 67
    7ce4:	89 8f       	std	Y+25, r24	; 0x19
    7ce6:	9a 8f       	std	Y+26, r25	; 0x1a
    7ce8:	ab 8f       	std	Y+27, r26	; 0x1b
    7cea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7cec:	69 8d       	ldd	r22, Y+25	; 0x19
    7cee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7cf0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7cf2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7cf4:	20 e0       	ldi	r18, 0x00	; 0
    7cf6:	30 e0       	ldi	r19, 0x00	; 0
    7cf8:	4a e7       	ldi	r20, 0x7A	; 122
    7cfa:	55 e4       	ldi	r21, 0x45	; 69
    7cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7d00:	dc 01       	movw	r26, r24
    7d02:	cb 01       	movw	r24, r22
    7d04:	8d 8b       	std	Y+21, r24	; 0x15
    7d06:	9e 8b       	std	Y+22, r25	; 0x16
    7d08:	af 8b       	std	Y+23, r26	; 0x17
    7d0a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    7d0c:	6d 89       	ldd	r22, Y+21	; 0x15
    7d0e:	7e 89       	ldd	r23, Y+22	; 0x16
    7d10:	8f 89       	ldd	r24, Y+23	; 0x17
    7d12:	98 8d       	ldd	r25, Y+24	; 0x18
    7d14:	20 e0       	ldi	r18, 0x00	; 0
    7d16:	30 e0       	ldi	r19, 0x00	; 0
    7d18:	40 e8       	ldi	r20, 0x80	; 128
    7d1a:	5f e3       	ldi	r21, 0x3F	; 63
    7d1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7d20:	88 23       	and	r24, r24
    7d22:	2c f4       	brge	.+10     	; 0x7d2e <AdminLogin+0x708>
		__ticks = 1;
    7d24:	81 e0       	ldi	r24, 0x01	; 1
    7d26:	90 e0       	ldi	r25, 0x00	; 0
    7d28:	9c 8b       	std	Y+20, r25	; 0x14
    7d2a:	8b 8b       	std	Y+19, r24	; 0x13
    7d2c:	3f c0       	rjmp	.+126    	; 0x7dac <AdminLogin+0x786>
	else if (__tmp > 65535)
    7d2e:	6d 89       	ldd	r22, Y+21	; 0x15
    7d30:	7e 89       	ldd	r23, Y+22	; 0x16
    7d32:	8f 89       	ldd	r24, Y+23	; 0x17
    7d34:	98 8d       	ldd	r25, Y+24	; 0x18
    7d36:	20 e0       	ldi	r18, 0x00	; 0
    7d38:	3f ef       	ldi	r19, 0xFF	; 255
    7d3a:	4f e7       	ldi	r20, 0x7F	; 127
    7d3c:	57 e4       	ldi	r21, 0x47	; 71
    7d3e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7d42:	18 16       	cp	r1, r24
    7d44:	4c f5       	brge	.+82     	; 0x7d98 <AdminLogin+0x772>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7d46:	69 8d       	ldd	r22, Y+25	; 0x19
    7d48:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7d4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7d4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7d4e:	20 e0       	ldi	r18, 0x00	; 0
    7d50:	30 e0       	ldi	r19, 0x00	; 0
    7d52:	40 e2       	ldi	r20, 0x20	; 32
    7d54:	51 e4       	ldi	r21, 0x41	; 65
    7d56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7d5a:	dc 01       	movw	r26, r24
    7d5c:	cb 01       	movw	r24, r22
    7d5e:	bc 01       	movw	r22, r24
    7d60:	cd 01       	movw	r24, r26
    7d62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7d66:	dc 01       	movw	r26, r24
    7d68:	cb 01       	movw	r24, r22
    7d6a:	9c 8b       	std	Y+20, r25	; 0x14
    7d6c:	8b 8b       	std	Y+19, r24	; 0x13
    7d6e:	0f c0       	rjmp	.+30     	; 0x7d8e <AdminLogin+0x768>
    7d70:	80 e9       	ldi	r24, 0x90	; 144
    7d72:	91 e0       	ldi	r25, 0x01	; 1
    7d74:	9a 8b       	std	Y+18, r25	; 0x12
    7d76:	89 8b       	std	Y+17, r24	; 0x11
    7d78:	89 89       	ldd	r24, Y+17	; 0x11
    7d7a:	9a 89       	ldd	r25, Y+18	; 0x12
    7d7c:	01 97       	sbiw	r24, 0x01	; 1
    7d7e:	f1 f7       	brne	.-4      	; 0x7d7c <AdminLogin+0x756>
    7d80:	9a 8b       	std	Y+18, r25	; 0x12
    7d82:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7d84:	8b 89       	ldd	r24, Y+19	; 0x13
    7d86:	9c 89       	ldd	r25, Y+20	; 0x14
    7d88:	01 97       	sbiw	r24, 0x01	; 1
    7d8a:	9c 8b       	std	Y+20, r25	; 0x14
    7d8c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7d8e:	8b 89       	ldd	r24, Y+19	; 0x13
    7d90:	9c 89       	ldd	r25, Y+20	; 0x14
    7d92:	00 97       	sbiw	r24, 0x00	; 0
    7d94:	69 f7       	brne	.-38     	; 0x7d70 <AdminLogin+0x74a>
    7d96:	14 c0       	rjmp	.+40     	; 0x7dc0 <AdminLogin+0x79a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7d98:	6d 89       	ldd	r22, Y+21	; 0x15
    7d9a:	7e 89       	ldd	r23, Y+22	; 0x16
    7d9c:	8f 89       	ldd	r24, Y+23	; 0x17
    7d9e:	98 8d       	ldd	r25, Y+24	; 0x18
    7da0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7da4:	dc 01       	movw	r26, r24
    7da6:	cb 01       	movw	r24, r22
    7da8:	9c 8b       	std	Y+20, r25	; 0x14
    7daa:	8b 8b       	std	Y+19, r24	; 0x13
    7dac:	8b 89       	ldd	r24, Y+19	; 0x13
    7dae:	9c 89       	ldd	r25, Y+20	; 0x14
    7db0:	98 8b       	std	Y+16, r25	; 0x10
    7db2:	8f 87       	std	Y+15, r24	; 0x0f
    7db4:	8f 85       	ldd	r24, Y+15	; 0x0f
    7db6:	98 89       	ldd	r25, Y+16	; 0x10
    7db8:	01 97       	sbiw	r24, 0x01	; 1
    7dba:	f1 f7       	brne	.-4      	; 0x7db8 <AdminLogin+0x792>
    7dbc:	98 8b       	std	Y+16, r25	; 0x10
    7dbe:	8f 87       	std	Y+15, r24	; 0x0f
  else
  {
    /*Do Nothing*/
  }
  _delay_ms(300);
  HCLCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
    7dc0:	81 e0       	ldi	r24, 0x01	; 1
    7dc2:	0e 94 61 34 	call	0x68c2	; 0x68c2 <HCLCD_WriteCommand4Bit>
  HCLCD_SetCursorPosition(HCLCD_LINE_0,0);
    7dc6:	80 e0       	ldi	r24, 0x00	; 0
    7dc8:	60 e0       	ldi	r22, 0x00	; 0
    7dca:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
    7dce:	80 e0       	ldi	r24, 0x00	; 0
    7dd0:	90 e0       	ldi	r25, 0x00	; 0
    7dd2:	a6 e9       	ldi	r26, 0x96	; 150
    7dd4:	b3 e4       	ldi	r27, 0x43	; 67
    7dd6:	8b 87       	std	Y+11, r24	; 0x0b
    7dd8:	9c 87       	std	Y+12, r25	; 0x0c
    7dda:	ad 87       	std	Y+13, r26	; 0x0d
    7ddc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7dde:	6b 85       	ldd	r22, Y+11	; 0x0b
    7de0:	7c 85       	ldd	r23, Y+12	; 0x0c
    7de2:	8d 85       	ldd	r24, Y+13	; 0x0d
    7de4:	9e 85       	ldd	r25, Y+14	; 0x0e
    7de6:	20 e0       	ldi	r18, 0x00	; 0
    7de8:	30 e0       	ldi	r19, 0x00	; 0
    7dea:	4a e7       	ldi	r20, 0x7A	; 122
    7dec:	55 e4       	ldi	r21, 0x45	; 69
    7dee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7df2:	dc 01       	movw	r26, r24
    7df4:	cb 01       	movw	r24, r22
    7df6:	8f 83       	std	Y+7, r24	; 0x07
    7df8:	98 87       	std	Y+8, r25	; 0x08
    7dfa:	a9 87       	std	Y+9, r26	; 0x09
    7dfc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    7dfe:	6f 81       	ldd	r22, Y+7	; 0x07
    7e00:	78 85       	ldd	r23, Y+8	; 0x08
    7e02:	89 85       	ldd	r24, Y+9	; 0x09
    7e04:	9a 85       	ldd	r25, Y+10	; 0x0a
    7e06:	20 e0       	ldi	r18, 0x00	; 0
    7e08:	30 e0       	ldi	r19, 0x00	; 0
    7e0a:	40 e8       	ldi	r20, 0x80	; 128
    7e0c:	5f e3       	ldi	r21, 0x3F	; 63
    7e0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7e12:	88 23       	and	r24, r24
    7e14:	2c f4       	brge	.+10     	; 0x7e20 <AdminLogin+0x7fa>
		__ticks = 1;
    7e16:	81 e0       	ldi	r24, 0x01	; 1
    7e18:	90 e0       	ldi	r25, 0x00	; 0
    7e1a:	9e 83       	std	Y+6, r25	; 0x06
    7e1c:	8d 83       	std	Y+5, r24	; 0x05
    7e1e:	3f c0       	rjmp	.+126    	; 0x7e9e <AdminLogin+0x878>
	else if (__tmp > 65535)
    7e20:	6f 81       	ldd	r22, Y+7	; 0x07
    7e22:	78 85       	ldd	r23, Y+8	; 0x08
    7e24:	89 85       	ldd	r24, Y+9	; 0x09
    7e26:	9a 85       	ldd	r25, Y+10	; 0x0a
    7e28:	20 e0       	ldi	r18, 0x00	; 0
    7e2a:	3f ef       	ldi	r19, 0xFF	; 255
    7e2c:	4f e7       	ldi	r20, 0x7F	; 127
    7e2e:	57 e4       	ldi	r21, 0x47	; 71
    7e30:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7e34:	18 16       	cp	r1, r24
    7e36:	4c f5       	brge	.+82     	; 0x7e8a <AdminLogin+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7e38:	6b 85       	ldd	r22, Y+11	; 0x0b
    7e3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    7e3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    7e3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    7e40:	20 e0       	ldi	r18, 0x00	; 0
    7e42:	30 e0       	ldi	r19, 0x00	; 0
    7e44:	40 e2       	ldi	r20, 0x20	; 32
    7e46:	51 e4       	ldi	r21, 0x41	; 65
    7e48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7e4c:	dc 01       	movw	r26, r24
    7e4e:	cb 01       	movw	r24, r22
    7e50:	bc 01       	movw	r22, r24
    7e52:	cd 01       	movw	r24, r26
    7e54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7e58:	dc 01       	movw	r26, r24
    7e5a:	cb 01       	movw	r24, r22
    7e5c:	9e 83       	std	Y+6, r25	; 0x06
    7e5e:	8d 83       	std	Y+5, r24	; 0x05
    7e60:	0f c0       	rjmp	.+30     	; 0x7e80 <AdminLogin+0x85a>
    7e62:	80 e9       	ldi	r24, 0x90	; 144
    7e64:	91 e0       	ldi	r25, 0x01	; 1
    7e66:	9c 83       	std	Y+4, r25	; 0x04
    7e68:	8b 83       	std	Y+3, r24	; 0x03
    7e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    7e6c:	9c 81       	ldd	r25, Y+4	; 0x04
    7e6e:	01 97       	sbiw	r24, 0x01	; 1
    7e70:	f1 f7       	brne	.-4      	; 0x7e6e <AdminLogin+0x848>
    7e72:	9c 83       	std	Y+4, r25	; 0x04
    7e74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7e76:	8d 81       	ldd	r24, Y+5	; 0x05
    7e78:	9e 81       	ldd	r25, Y+6	; 0x06
    7e7a:	01 97       	sbiw	r24, 0x01	; 1
    7e7c:	9e 83       	std	Y+6, r25	; 0x06
    7e7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7e80:	8d 81       	ldd	r24, Y+5	; 0x05
    7e82:	9e 81       	ldd	r25, Y+6	; 0x06
    7e84:	00 97       	sbiw	r24, 0x00	; 0
    7e86:	69 f7       	brne	.-38     	; 0x7e62 <AdminLogin+0x83c>
    7e88:	14 c0       	rjmp	.+40     	; 0x7eb2 <AdminLogin+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7e8a:	6f 81       	ldd	r22, Y+7	; 0x07
    7e8c:	78 85       	ldd	r23, Y+8	; 0x08
    7e8e:	89 85       	ldd	r24, Y+9	; 0x09
    7e90:	9a 85       	ldd	r25, Y+10	; 0x0a
    7e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7e96:	dc 01       	movw	r26, r24
    7e98:	cb 01       	movw	r24, r22
    7e9a:	9e 83       	std	Y+6, r25	; 0x06
    7e9c:	8d 83       	std	Y+5, r24	; 0x05
    7e9e:	8d 81       	ldd	r24, Y+5	; 0x05
    7ea0:	9e 81       	ldd	r25, Y+6	; 0x06
    7ea2:	9a 83       	std	Y+2, r25	; 0x02
    7ea4:	89 83       	std	Y+1, r24	; 0x01
    7ea6:	89 81       	ldd	r24, Y+1	; 0x01
    7ea8:	9a 81       	ldd	r25, Y+2	; 0x02
    7eaa:	01 97       	sbiw	r24, 0x01	; 1
    7eac:	f1 f7       	brne	.-4      	; 0x7eaa <AdminLogin+0x884>
    7eae:	9a 83       	std	Y+2, r25	; 0x02
    7eb0:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(300);
  return WrongEntry;
    7eb2:	fe 01       	movw	r30, r28
    7eb4:	eb 5a       	subi	r30, 0xAB	; 171
    7eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    7eb8:	80 81       	ld	r24, Z
}
    7eba:	c2 5a       	subi	r28, 0xA2	; 162
    7ebc:	df 4f       	sbci	r29, 0xFF	; 255
    7ebe:	0f b6       	in	r0, 0x3f	; 63
    7ec0:	f8 94       	cli
    7ec2:	de bf       	out	0x3e, r29	; 62
    7ec4:	0f be       	out	0x3f, r0	; 63
    7ec6:	cd bf       	out	0x3d, r28	; 61
    7ec8:	cf 91       	pop	r28
    7eca:	df 91       	pop	r29
    7ecc:	1f 91       	pop	r17
    7ece:	0f 91       	pop	r16
    7ed0:	08 95       	ret

00007ed2 <UserLogin>:
u8 UserLogin (u8* ID, u8* Password)
{
    7ed2:	df 93       	push	r29
    7ed4:	cf 93       	push	r28
    7ed6:	cd b7       	in	r28, 0x3d	; 61
    7ed8:	de b7       	in	r29, 0x3e	; 62
    7eda:	a9 97       	sbiw	r28, 0x29	; 41
    7edc:	0f b6       	in	r0, 0x3f	; 63
    7ede:	f8 94       	cli
    7ee0:	de bf       	out	0x3e, r29	; 62
    7ee2:	0f be       	out	0x3f, r0	; 63
    7ee4:	cd bf       	out	0x3d, r28	; 61
    7ee6:	9f a3       	std	Y+39, r25	; 0x27
    7ee8:	8e a3       	std	Y+38, r24	; 0x26
    7eea:	79 a7       	std	Y+41, r23	; 0x29
    7eec:	68 a7       	std	Y+40, r22	; 0x28
  u8 NumberOfUsers = HEEPROM_ReadByte(0, 100);
    7eee:	80 e0       	ldi	r24, 0x00	; 0
    7ef0:	64 e6       	ldi	r22, 0x64	; 100
    7ef2:	0e 94 4b 30 	call	0x6096	; 0x6096 <HEEPROM_ReadByte>
    7ef6:	8d a3       	std	Y+37, r24	; 0x25
  u8 UserLocation = 0, ValidUsername = 0, ValidPassword = 0, LocalCounter = 0, EEPROMData = 0, WrongEntry = 0, EEPROMDataLocation = 0;
    7ef8:	1c a2       	std	Y+36, r1	; 0x24
    7efa:	1b a2       	std	Y+35, r1	; 0x23
    7efc:	1a a2       	std	Y+34, r1	; 0x22
    7efe:	19 a2       	std	Y+33, r1	; 0x21
    7f00:	18 a2       	std	Y+32, r1	; 0x20
    7f02:	1f 8e       	std	Y+31, r1	; 0x1f
    7f04:	1e 8e       	std	Y+30, r1	; 0x1e
  if (NumberOfUsers > 0)
    7f06:	8d a1       	ldd	r24, Y+37	; 0x25
    7f08:	88 23       	and	r24, r24
    7f0a:	09 f4       	brne	.+2      	; 0x7f0e <UserLogin+0x3c>
    7f0c:	fd c0       	rjmp	.+506    	; 0x8108 <UserLogin+0x236>
    7f0e:	5b c0       	rjmp	.+182    	; 0x7fc6 <UserLogin+0xf4>
  {
    for (; LocalCounter < NumberOfUsers; LocalCounter++)
    {
      ValidPassword = 0;
    7f10:	1a a2       	std	Y+34, r1	; 0x22
      ValidUsername = 0;
    7f12:	1b a2       	std	Y+35, r1	; 0x23
      UserLocation = LocalCounter * 7;
    7f14:	89 a1       	ldd	r24, Y+33	; 0x21
    7f16:	28 2f       	mov	r18, r24
    7f18:	30 e0       	ldi	r19, 0x00	; 0
    7f1a:	c9 01       	movw	r24, r18
    7f1c:	88 0f       	add	r24, r24
    7f1e:	99 1f       	adc	r25, r25
    7f20:	88 0f       	add	r24, r24
    7f22:	99 1f       	adc	r25, r25
    7f24:	88 0f       	add	r24, r24
    7f26:	99 1f       	adc	r25, r25
    7f28:	82 1b       	sub	r24, r18
    7f2a:	93 0b       	sbc	r25, r19
    7f2c:	8c a3       	std	Y+36, r24	; 0x24
      u8 LocalCounter = 0;
    7f2e:	1d 8e       	std	Y+29, r1	; 0x1d
    7f30:	1b c0       	rjmp	.+54     	; 0x7f68 <UserLogin+0x96>

      for (; LocalCounter < IDLENGTH; LocalCounter++)
      {
        EEPROMDataLocation = UserLocation + LocalCounter;
    7f32:	9c a1       	ldd	r25, Y+36	; 0x24
    7f34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7f36:	89 0f       	add	r24, r25
    7f38:	8e 8f       	std	Y+30, r24	; 0x1e
        EEPROMData = HEEPROM_ReadByte(0, (EEPROMDataLocation));
    7f3a:	80 e0       	ldi	r24, 0x00	; 0
    7f3c:	6e 8d       	ldd	r22, Y+30	; 0x1e
    7f3e:	0e 94 4b 30 	call	0x6096	; 0x6096 <HEEPROM_ReadByte>
    7f42:	88 a3       	std	Y+32, r24	; 0x20
        if (ID[LocalCounter] == EEPROMData)
    7f44:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7f46:	28 2f       	mov	r18, r24
    7f48:	30 e0       	ldi	r19, 0x00	; 0
    7f4a:	8e a1       	ldd	r24, Y+38	; 0x26
    7f4c:	9f a1       	ldd	r25, Y+39	; 0x27
    7f4e:	fc 01       	movw	r30, r24
    7f50:	e2 0f       	add	r30, r18
    7f52:	f3 1f       	adc	r31, r19
    7f54:	90 81       	ld	r25, Z
    7f56:	88 a1       	ldd	r24, Y+32	; 0x20
    7f58:	98 17       	cp	r25, r24
    7f5a:	19 f4       	brne	.+6      	; 0x7f62 <UserLogin+0x90>
        {
          ValidUsername++;
    7f5c:	8b a1       	ldd	r24, Y+35	; 0x23
    7f5e:	8f 5f       	subi	r24, 0xFF	; 255
    7f60:	8b a3       	std	Y+35, r24	; 0x23
      ValidPassword = 0;
      ValidUsername = 0;
      UserLocation = LocalCounter * 7;
      u8 LocalCounter = 0;

      for (; LocalCounter < IDLENGTH; LocalCounter++)
    7f62:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7f64:	8f 5f       	subi	r24, 0xFF	; 255
    7f66:	8d 8f       	std	Y+29, r24	; 0x1d
    7f68:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7f6a:	83 30       	cpi	r24, 0x03	; 3
    7f6c:	10 f3       	brcs	.-60     	; 0x7f32 <UserLogin+0x60>
          ValidUsername++;
        }

      }

      for (LocalCounter = 0; LocalCounter < PASSWORDLENGTH; LocalCounter++)
    7f6e:	1d 8e       	std	Y+29, r1	; 0x1d
    7f70:	1c c0       	rjmp	.+56     	; 0x7faa <UserLogin+0xd8>
      {
        EEPROMDataLocation = UserLocation + LocalCounter + IDLENGTH;
    7f72:	9c a1       	ldd	r25, Y+36	; 0x24
    7f74:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7f76:	89 0f       	add	r24, r25
    7f78:	8d 5f       	subi	r24, 0xFD	; 253
    7f7a:	8e 8f       	std	Y+30, r24	; 0x1e
        EEPROMData = HEEPROM_ReadByte(0,(EEPROMDataLocation));
    7f7c:	80 e0       	ldi	r24, 0x00	; 0
    7f7e:	6e 8d       	ldd	r22, Y+30	; 0x1e
    7f80:	0e 94 4b 30 	call	0x6096	; 0x6096 <HEEPROM_ReadByte>
    7f84:	88 a3       	std	Y+32, r24	; 0x20
        if (Password[LocalCounter] == EEPROMData)
    7f86:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7f88:	28 2f       	mov	r18, r24
    7f8a:	30 e0       	ldi	r19, 0x00	; 0
    7f8c:	88 a5       	ldd	r24, Y+40	; 0x28
    7f8e:	99 a5       	ldd	r25, Y+41	; 0x29
    7f90:	fc 01       	movw	r30, r24
    7f92:	e2 0f       	add	r30, r18
    7f94:	f3 1f       	adc	r31, r19
    7f96:	90 81       	ld	r25, Z
    7f98:	88 a1       	ldd	r24, Y+32	; 0x20
    7f9a:	98 17       	cp	r25, r24
    7f9c:	19 f4       	brne	.+6      	; 0x7fa4 <UserLogin+0xd2>
        {
          ValidPassword++;
    7f9e:	8a a1       	ldd	r24, Y+34	; 0x22
    7fa0:	8f 5f       	subi	r24, 0xFF	; 255
    7fa2:	8a a3       	std	Y+34, r24	; 0x22
          ValidUsername++;
        }

      }

      for (LocalCounter = 0; LocalCounter < PASSWORDLENGTH; LocalCounter++)
    7fa4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7fa6:	8f 5f       	subi	r24, 0xFF	; 255
    7fa8:	8d 8f       	std	Y+29, r24	; 0x1d
    7faa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7fac:	84 30       	cpi	r24, 0x04	; 4
    7fae:	08 f3       	brcs	.-62     	; 0x7f72 <UserLogin+0xa0>
          ValidPassword++;
        }

      }

      if (ValidUsername == IDLENGTH && ValidPassword == PASSWORDLENGTH)
    7fb0:	8b a1       	ldd	r24, Y+35	; 0x23
    7fb2:	83 30       	cpi	r24, 0x03	; 3
    7fb4:	19 f4       	brne	.+6      	; 0x7fbc <UserLogin+0xea>
    7fb6:	8a a1       	ldd	r24, Y+34	; 0x22
    7fb8:	84 30       	cpi	r24, 0x04	; 4
    7fba:	51 f0       	breq	.+20     	; 0x7fd0 <UserLogin+0xfe>
      {
        break;
      }
      else
      {
        ValidUsername = 0;
    7fbc:	1b a2       	std	Y+35, r1	; 0x23
        ValidPassword = 0;
    7fbe:	1a a2       	std	Y+34, r1	; 0x22
{
  u8 NumberOfUsers = HEEPROM_ReadByte(0, 100);
  u8 UserLocation = 0, ValidUsername = 0, ValidPassword = 0, LocalCounter = 0, EEPROMData = 0, WrongEntry = 0, EEPROMDataLocation = 0;
  if (NumberOfUsers > 0)
  {
    for (; LocalCounter < NumberOfUsers; LocalCounter++)
    7fc0:	89 a1       	ldd	r24, Y+33	; 0x21
    7fc2:	8f 5f       	subi	r24, 0xFF	; 255
    7fc4:	89 a3       	std	Y+33, r24	; 0x21
    7fc6:	99 a1       	ldd	r25, Y+33	; 0x21
    7fc8:	8d a1       	ldd	r24, Y+37	; 0x25
    7fca:	98 17       	cp	r25, r24
    7fcc:	08 f4       	brcc	.+2      	; 0x7fd0 <UserLogin+0xfe>
    7fce:	a0 cf       	rjmp	.-192    	; 0x7f10 <UserLogin+0x3e>
      {
        ValidUsername = 0;
        ValidPassword = 0;
      }
    }
    if (ValidUsername == IDLENGTH && ValidPassword == PASSWORDLENGTH)
    7fd0:	8b a1       	ldd	r24, Y+35	; 0x23
    7fd2:	83 30       	cpi	r24, 0x03	; 3
    7fd4:	61 f4       	brne	.+24     	; 0x7fee <UserLogin+0x11c>
    7fd6:	8a a1       	ldd	r24, Y+34	; 0x22
    7fd8:	84 30       	cpi	r24, 0x04	; 4
    7fda:	49 f4       	brne	.+18     	; 0x7fee <UserLogin+0x11c>
    {

      HCLCD_WriteString("Login Successful!");
    7fdc:	8d e0       	ldi	r24, 0x0D	; 13
    7fde:	91 e0       	ldi	r25, 0x01	; 1
    7fe0:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <HCLCD_WriteString>
      HHC05_SendString("Login Successful!");
    7fe4:	8d e0       	ldi	r24, 0x0D	; 13
    7fe6:	91 e0       	ldi	r25, 0x01	; 1
    7fe8:	0e 94 29 30 	call	0x6052	; 0x6052 <HHC05_SendString>
    7fec:	18 c1       	rjmp	.+560    	; 0x821e <UserLogin+0x34c>
    }
    else
    {
      HCLCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
    7fee:	81 e0       	ldi	r24, 0x01	; 1
    7ff0:	0e 94 61 34 	call	0x68c2	; 0x68c2 <HCLCD_WriteCommand4Bit>
      HCLCD_SetCursorPosition(HCLCD_LINE_0,0);
    7ff4:	80 e0       	ldi	r24, 0x00	; 0
    7ff6:	60 e0       	ldi	r22, 0x00	; 0
    7ff8:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
      HCLCD_WriteString("Invalid User Name");
    7ffc:	8f e1       	ldi	r24, 0x1F	; 31
    7ffe:	91 e0       	ldi	r25, 0x01	; 1
    8000:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <HCLCD_WriteString>
      HCLCD_SetCursorPosition(HCLCD_LINE_1,0);
    8004:	81 e0       	ldi	r24, 0x01	; 1
    8006:	60 e0       	ldi	r22, 0x00	; 0
    8008:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
      HCLCD_WriteString("Or Password");
    800c:	81 e3       	ldi	r24, 0x31	; 49
    800e:	91 e0       	ldi	r25, 0x01	; 1
    8010:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <HCLCD_WriteString>
      HHC05_SendString("Invalid User Name Or Password!");
    8014:	8d e3       	ldi	r24, 0x3D	; 61
    8016:	91 e0       	ldi	r25, 0x01	; 1
    8018:	0e 94 29 30 	call	0x6052	; 0x6052 <HHC05_SendString>
    801c:	80 e0       	ldi	r24, 0x00	; 0
    801e:	90 e0       	ldi	r25, 0x00	; 0
    8020:	aa e7       	ldi	r26, 0x7A	; 122
    8022:	b4 e4       	ldi	r27, 0x44	; 68
    8024:	89 8f       	std	Y+25, r24	; 0x19
    8026:	9a 8f       	std	Y+26, r25	; 0x1a
    8028:	ab 8f       	std	Y+27, r26	; 0x1b
    802a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    802c:	69 8d       	ldd	r22, Y+25	; 0x19
    802e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    8030:	8b 8d       	ldd	r24, Y+27	; 0x1b
    8032:	9c 8d       	ldd	r25, Y+28	; 0x1c
    8034:	20 e0       	ldi	r18, 0x00	; 0
    8036:	30 e0       	ldi	r19, 0x00	; 0
    8038:	4a e7       	ldi	r20, 0x7A	; 122
    803a:	55 e4       	ldi	r21, 0x45	; 69
    803c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    8040:	dc 01       	movw	r26, r24
    8042:	cb 01       	movw	r24, r22
    8044:	8d 8b       	std	Y+21, r24	; 0x15
    8046:	9e 8b       	std	Y+22, r25	; 0x16
    8048:	af 8b       	std	Y+23, r26	; 0x17
    804a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    804c:	6d 89       	ldd	r22, Y+21	; 0x15
    804e:	7e 89       	ldd	r23, Y+22	; 0x16
    8050:	8f 89       	ldd	r24, Y+23	; 0x17
    8052:	98 8d       	ldd	r25, Y+24	; 0x18
    8054:	20 e0       	ldi	r18, 0x00	; 0
    8056:	30 e0       	ldi	r19, 0x00	; 0
    8058:	40 e8       	ldi	r20, 0x80	; 128
    805a:	5f e3       	ldi	r21, 0x3F	; 63
    805c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    8060:	88 23       	and	r24, r24
    8062:	2c f4       	brge	.+10     	; 0x806e <UserLogin+0x19c>
		__ticks = 1;
    8064:	81 e0       	ldi	r24, 0x01	; 1
    8066:	90 e0       	ldi	r25, 0x00	; 0
    8068:	9c 8b       	std	Y+20, r25	; 0x14
    806a:	8b 8b       	std	Y+19, r24	; 0x13
    806c:	3f c0       	rjmp	.+126    	; 0x80ec <UserLogin+0x21a>
	else if (__tmp > 65535)
    806e:	6d 89       	ldd	r22, Y+21	; 0x15
    8070:	7e 89       	ldd	r23, Y+22	; 0x16
    8072:	8f 89       	ldd	r24, Y+23	; 0x17
    8074:	98 8d       	ldd	r25, Y+24	; 0x18
    8076:	20 e0       	ldi	r18, 0x00	; 0
    8078:	3f ef       	ldi	r19, 0xFF	; 255
    807a:	4f e7       	ldi	r20, 0x7F	; 127
    807c:	57 e4       	ldi	r21, 0x47	; 71
    807e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    8082:	18 16       	cp	r1, r24
    8084:	4c f5       	brge	.+82     	; 0x80d8 <UserLogin+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8086:	69 8d       	ldd	r22, Y+25	; 0x19
    8088:	7a 8d       	ldd	r23, Y+26	; 0x1a
    808a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    808c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    808e:	20 e0       	ldi	r18, 0x00	; 0
    8090:	30 e0       	ldi	r19, 0x00	; 0
    8092:	40 e2       	ldi	r20, 0x20	; 32
    8094:	51 e4       	ldi	r21, 0x41	; 65
    8096:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    809a:	dc 01       	movw	r26, r24
    809c:	cb 01       	movw	r24, r22
    809e:	bc 01       	movw	r22, r24
    80a0:	cd 01       	movw	r24, r26
    80a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    80a6:	dc 01       	movw	r26, r24
    80a8:	cb 01       	movw	r24, r22
    80aa:	9c 8b       	std	Y+20, r25	; 0x14
    80ac:	8b 8b       	std	Y+19, r24	; 0x13
    80ae:	0f c0       	rjmp	.+30     	; 0x80ce <UserLogin+0x1fc>
    80b0:	80 e9       	ldi	r24, 0x90	; 144
    80b2:	91 e0       	ldi	r25, 0x01	; 1
    80b4:	9a 8b       	std	Y+18, r25	; 0x12
    80b6:	89 8b       	std	Y+17, r24	; 0x11
    80b8:	89 89       	ldd	r24, Y+17	; 0x11
    80ba:	9a 89       	ldd	r25, Y+18	; 0x12
    80bc:	01 97       	sbiw	r24, 0x01	; 1
    80be:	f1 f7       	brne	.-4      	; 0x80bc <UserLogin+0x1ea>
    80c0:	9a 8b       	std	Y+18, r25	; 0x12
    80c2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    80c4:	8b 89       	ldd	r24, Y+19	; 0x13
    80c6:	9c 89       	ldd	r25, Y+20	; 0x14
    80c8:	01 97       	sbiw	r24, 0x01	; 1
    80ca:	9c 8b       	std	Y+20, r25	; 0x14
    80cc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    80ce:	8b 89       	ldd	r24, Y+19	; 0x13
    80d0:	9c 89       	ldd	r25, Y+20	; 0x14
    80d2:	00 97       	sbiw	r24, 0x00	; 0
    80d4:	69 f7       	brne	.-38     	; 0x80b0 <UserLogin+0x1de>
    80d6:	14 c0       	rjmp	.+40     	; 0x8100 <UserLogin+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    80d8:	6d 89       	ldd	r22, Y+21	; 0x15
    80da:	7e 89       	ldd	r23, Y+22	; 0x16
    80dc:	8f 89       	ldd	r24, Y+23	; 0x17
    80de:	98 8d       	ldd	r25, Y+24	; 0x18
    80e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    80e4:	dc 01       	movw	r26, r24
    80e6:	cb 01       	movw	r24, r22
    80e8:	9c 8b       	std	Y+20, r25	; 0x14
    80ea:	8b 8b       	std	Y+19, r24	; 0x13
    80ec:	8b 89       	ldd	r24, Y+19	; 0x13
    80ee:	9c 89       	ldd	r25, Y+20	; 0x14
    80f0:	98 8b       	std	Y+16, r25	; 0x10
    80f2:	8f 87       	std	Y+15, r24	; 0x0f
    80f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    80f6:	98 89       	ldd	r25, Y+16	; 0x10
    80f8:	01 97       	sbiw	r24, 0x01	; 1
    80fa:	f1 f7       	brne	.-4      	; 0x80f8 <UserLogin+0x226>
    80fc:	98 8b       	std	Y+16, r25	; 0x10
    80fe:	8f 87       	std	Y+15, r24	; 0x0f
      _delay_ms(1000);
      WrongEntry++;
    8100:	8f 8d       	ldd	r24, Y+31	; 0x1f
    8102:	8f 5f       	subi	r24, 0xFF	; 255
    8104:	8f 8f       	std	Y+31, r24	; 0x1f
    8106:	8b c0       	rjmp	.+278    	; 0x821e <UserLogin+0x34c>

    }
  }
  else
  {
	HCLCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
    8108:	81 e0       	ldi	r24, 0x01	; 1
    810a:	0e 94 61 34 	call	0x68c2	; 0x68c2 <HCLCD_WriteCommand4Bit>
	HCLCD_SetCursorPosition(HCLCD_LINE_0,0);
    810e:	80 e0       	ldi	r24, 0x00	; 0
    8110:	60 e0       	ldi	r22, 0x00	; 0
    8112:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
	HCLCD_WriteString("There is no users");
    8116:	8c e5       	ldi	r24, 0x5C	; 92
    8118:	91 e0       	ldi	r25, 0x01	; 1
    811a:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <HCLCD_WriteString>
    HCLCD_SetCursorPosition(HCLCD_LINE_1,0);
    811e:	81 e0       	ldi	r24, 0x01	; 1
    8120:	60 e0       	ldi	r22, 0x00	; 0
    8122:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
    HCLCD_WriteString("added yet");
    8126:	8e e6       	ldi	r24, 0x6E	; 110
    8128:	91 e0       	ldi	r25, 0x01	; 1
    812a:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <HCLCD_WriteString>
    HHC05_SendString("There is no users added yet");
    812e:	88 e7       	ldi	r24, 0x78	; 120
    8130:	91 e0       	ldi	r25, 0x01	; 1
    8132:	0e 94 29 30 	call	0x6052	; 0x6052 <HHC05_SendString>
    8136:	80 e0       	ldi	r24, 0x00	; 0
    8138:	90 e0       	ldi	r25, 0x00	; 0
    813a:	aa e7       	ldi	r26, 0x7A	; 122
    813c:	b4 e4       	ldi	r27, 0x44	; 68
    813e:	8b 87       	std	Y+11, r24	; 0x0b
    8140:	9c 87       	std	Y+12, r25	; 0x0c
    8142:	ad 87       	std	Y+13, r26	; 0x0d
    8144:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    8146:	6b 85       	ldd	r22, Y+11	; 0x0b
    8148:	7c 85       	ldd	r23, Y+12	; 0x0c
    814a:	8d 85       	ldd	r24, Y+13	; 0x0d
    814c:	9e 85       	ldd	r25, Y+14	; 0x0e
    814e:	20 e0       	ldi	r18, 0x00	; 0
    8150:	30 e0       	ldi	r19, 0x00	; 0
    8152:	4a e7       	ldi	r20, 0x7A	; 122
    8154:	55 e4       	ldi	r21, 0x45	; 69
    8156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    815a:	dc 01       	movw	r26, r24
    815c:	cb 01       	movw	r24, r22
    815e:	8f 83       	std	Y+7, r24	; 0x07
    8160:	98 87       	std	Y+8, r25	; 0x08
    8162:	a9 87       	std	Y+9, r26	; 0x09
    8164:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    8166:	6f 81       	ldd	r22, Y+7	; 0x07
    8168:	78 85       	ldd	r23, Y+8	; 0x08
    816a:	89 85       	ldd	r24, Y+9	; 0x09
    816c:	9a 85       	ldd	r25, Y+10	; 0x0a
    816e:	20 e0       	ldi	r18, 0x00	; 0
    8170:	30 e0       	ldi	r19, 0x00	; 0
    8172:	40 e8       	ldi	r20, 0x80	; 128
    8174:	5f e3       	ldi	r21, 0x3F	; 63
    8176:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    817a:	88 23       	and	r24, r24
    817c:	2c f4       	brge	.+10     	; 0x8188 <UserLogin+0x2b6>
		__ticks = 1;
    817e:	81 e0       	ldi	r24, 0x01	; 1
    8180:	90 e0       	ldi	r25, 0x00	; 0
    8182:	9e 83       	std	Y+6, r25	; 0x06
    8184:	8d 83       	std	Y+5, r24	; 0x05
    8186:	3f c0       	rjmp	.+126    	; 0x8206 <UserLogin+0x334>
	else if (__tmp > 65535)
    8188:	6f 81       	ldd	r22, Y+7	; 0x07
    818a:	78 85       	ldd	r23, Y+8	; 0x08
    818c:	89 85       	ldd	r24, Y+9	; 0x09
    818e:	9a 85       	ldd	r25, Y+10	; 0x0a
    8190:	20 e0       	ldi	r18, 0x00	; 0
    8192:	3f ef       	ldi	r19, 0xFF	; 255
    8194:	4f e7       	ldi	r20, 0x7F	; 127
    8196:	57 e4       	ldi	r21, 0x47	; 71
    8198:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    819c:	18 16       	cp	r1, r24
    819e:	4c f5       	brge	.+82     	; 0x81f2 <UserLogin+0x320>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    81a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    81a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    81a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    81a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    81a8:	20 e0       	ldi	r18, 0x00	; 0
    81aa:	30 e0       	ldi	r19, 0x00	; 0
    81ac:	40 e2       	ldi	r20, 0x20	; 32
    81ae:	51 e4       	ldi	r21, 0x41	; 65
    81b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    81b4:	dc 01       	movw	r26, r24
    81b6:	cb 01       	movw	r24, r22
    81b8:	bc 01       	movw	r22, r24
    81ba:	cd 01       	movw	r24, r26
    81bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    81c0:	dc 01       	movw	r26, r24
    81c2:	cb 01       	movw	r24, r22
    81c4:	9e 83       	std	Y+6, r25	; 0x06
    81c6:	8d 83       	std	Y+5, r24	; 0x05
    81c8:	0f c0       	rjmp	.+30     	; 0x81e8 <UserLogin+0x316>
    81ca:	80 e9       	ldi	r24, 0x90	; 144
    81cc:	91 e0       	ldi	r25, 0x01	; 1
    81ce:	9c 83       	std	Y+4, r25	; 0x04
    81d0:	8b 83       	std	Y+3, r24	; 0x03
    81d2:	8b 81       	ldd	r24, Y+3	; 0x03
    81d4:	9c 81       	ldd	r25, Y+4	; 0x04
    81d6:	01 97       	sbiw	r24, 0x01	; 1
    81d8:	f1 f7       	brne	.-4      	; 0x81d6 <UserLogin+0x304>
    81da:	9c 83       	std	Y+4, r25	; 0x04
    81dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    81de:	8d 81       	ldd	r24, Y+5	; 0x05
    81e0:	9e 81       	ldd	r25, Y+6	; 0x06
    81e2:	01 97       	sbiw	r24, 0x01	; 1
    81e4:	9e 83       	std	Y+6, r25	; 0x06
    81e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    81e8:	8d 81       	ldd	r24, Y+5	; 0x05
    81ea:	9e 81       	ldd	r25, Y+6	; 0x06
    81ec:	00 97       	sbiw	r24, 0x00	; 0
    81ee:	69 f7       	brne	.-38     	; 0x81ca <UserLogin+0x2f8>
    81f0:	14 c0       	rjmp	.+40     	; 0x821a <UserLogin+0x348>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    81f2:	6f 81       	ldd	r22, Y+7	; 0x07
    81f4:	78 85       	ldd	r23, Y+8	; 0x08
    81f6:	89 85       	ldd	r24, Y+9	; 0x09
    81f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    81fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    81fe:	dc 01       	movw	r26, r24
    8200:	cb 01       	movw	r24, r22
    8202:	9e 83       	std	Y+6, r25	; 0x06
    8204:	8d 83       	std	Y+5, r24	; 0x05
    8206:	8d 81       	ldd	r24, Y+5	; 0x05
    8208:	9e 81       	ldd	r25, Y+6	; 0x06
    820a:	9a 83       	std	Y+2, r25	; 0x02
    820c:	89 83       	std	Y+1, r24	; 0x01
    820e:	89 81       	ldd	r24, Y+1	; 0x01
    8210:	9a 81       	ldd	r25, Y+2	; 0x02
    8212:	01 97       	sbiw	r24, 0x01	; 1
    8214:	f1 f7       	brne	.-4      	; 0x8212 <UserLogin+0x340>
    8216:	9a 83       	std	Y+2, r25	; 0x02
    8218:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1000);
    WrongEntry = 2;
    821a:	82 e0       	ldi	r24, 0x02	; 2
    821c:	8f 8f       	std	Y+31, r24	; 0x1f
  }
  return WrongEntry;
    821e:	8f 8d       	ldd	r24, Y+31	; 0x1f
}
    8220:	a9 96       	adiw	r28, 0x29	; 41
    8222:	0f b6       	in	r0, 0x3f	; 63
    8224:	f8 94       	cli
    8226:	de bf       	out	0x3e, r29	; 62
    8228:	0f be       	out	0x3f, r0	; 63
    822a:	cd bf       	out	0x3d, r28	; 61
    822c:	cf 91       	pop	r28
    822e:	df 91       	pop	r29
    8230:	08 95       	ret

00008232 <AddUser>:
void AddUser (u8* ID, u8* Password)
{
    8232:	0f 93       	push	r16
    8234:	1f 93       	push	r17
    8236:	df 93       	push	r29
    8238:	cf 93       	push	r28
    823a:	cd b7       	in	r28, 0x3d	; 61
    823c:	de b7       	in	r29, 0x3e	; 62
    823e:	c6 55       	subi	r28, 0x56	; 86
    8240:	d0 40       	sbci	r29, 0x00	; 0
    8242:	0f b6       	in	r0, 0x3f	; 63
    8244:	f8 94       	cli
    8246:	de bf       	out	0x3e, r29	; 62
    8248:	0f be       	out	0x3f, r0	; 63
    824a:	cd bf       	out	0x3d, r28	; 61
    824c:	fe 01       	movw	r30, r28
    824e:	ed 5a       	subi	r30, 0xAD	; 173
    8250:	ff 4f       	sbci	r31, 0xFF	; 255
    8252:	91 83       	std	Z+1, r25	; 0x01
    8254:	80 83       	st	Z, r24
    8256:	fe 01       	movw	r30, r28
    8258:	eb 5a       	subi	r30, 0xAB	; 171
    825a:	ff 4f       	sbci	r31, 0xFF	; 255
    825c:	71 83       	std	Z+1, r23	; 0x01
    825e:	60 83       	st	Z, r22

  u8 NumberOfUsers = HEEPROM_ReadByte(0, 100);
    8260:	80 e0       	ldi	r24, 0x00	; 0
    8262:	64 e6       	ldi	r22, 0x64	; 100
    8264:	0e 94 4b 30 	call	0x6096	; 0x6096 <HEEPROM_ReadByte>
    8268:	fe 01       	movw	r30, r28
    826a:	ee 5a       	subi	r30, 0xAE	; 174
    826c:	ff 4f       	sbci	r31, 0xFF	; 255
    826e:	80 83       	st	Z, r24
  if (NumberOfUsers < 10)
    8270:	fe 01       	movw	r30, r28
    8272:	ee 5a       	subi	r30, 0xAE	; 174
    8274:	ff 4f       	sbci	r31, 0xFF	; 255
    8276:	80 81       	ld	r24, Z
    8278:	8a 30       	cpi	r24, 0x0A	; 10
    827a:	08 f0       	brcs	.+2      	; 0x827e <AddUser+0x4c>
    827c:	12 c4       	rjmp	.+2084   	; 0x8aa2 <AddUser+0x870>
  {
    u8 LocalCounter = 0, UserLocation  = 0;
    827e:	fe 01       	movw	r30, r28
    8280:	ef 5a       	subi	r30, 0xAF	; 175
    8282:	ff 4f       	sbci	r31, 0xFF	; 255
    8284:	10 82       	st	Z, r1
    8286:	fe 01       	movw	r30, r28
    8288:	e0 5b       	subi	r30, 0xB0	; 176
    828a:	ff 4f       	sbci	r31, 0xFF	; 255
    828c:	10 82       	st	Z, r1

    if (NumberOfUsers > 0)
    828e:	fe 01       	movw	r30, r28
    8290:	ee 5a       	subi	r30, 0xAE	; 174
    8292:	ff 4f       	sbci	r31, 0xFF	; 255
    8294:	80 81       	ld	r24, Z
    8296:	88 23       	and	r24, r24
    8298:	09 f4       	brne	.+2      	; 0x829c <AddUser+0x6a>
    829a:	4a c2       	rjmp	.+1172   	; 0x8730 <AddUser+0x4fe>
    {
      u8 WrongEntry = 0;
    829c:	fe 01       	movw	r30, r28
    829e:	e1 5b       	subi	r30, 0xB1	; 177
    82a0:	ff 4f       	sbci	r31, 0xFF	; 255
    82a2:	10 82       	st	Z, r1
    82a4:	19 c1       	rjmp	.+562    	; 0x84d8 <AddUser+0x2a6>

      for (; LocalCounter < NumberOfUsers; LocalCounter++)
      {

        UserLocation = (LocalCounter * 7);
    82a6:	fe 01       	movw	r30, r28
    82a8:	ef 5a       	subi	r30, 0xAF	; 175
    82aa:	ff 4f       	sbci	r31, 0xFF	; 255
    82ac:	80 81       	ld	r24, Z
    82ae:	28 2f       	mov	r18, r24
    82b0:	30 e0       	ldi	r19, 0x00	; 0
    82b2:	c9 01       	movw	r24, r18
    82b4:	88 0f       	add	r24, r24
    82b6:	99 1f       	adc	r25, r25
    82b8:	88 0f       	add	r24, r24
    82ba:	99 1f       	adc	r25, r25
    82bc:	88 0f       	add	r24, r24
    82be:	99 1f       	adc	r25, r25
    82c0:	82 1b       	sub	r24, r18
    82c2:	93 0b       	sbc	r25, r19
    82c4:	fe 01       	movw	r30, r28
    82c6:	e0 5b       	subi	r30, 0xB0	; 176
    82c8:	ff 4f       	sbci	r31, 0xFF	; 255
    82ca:	80 83       	st	Z, r24
        u8 LocalCounter = 0, EEPROMData = 0, EEPROMDataLocation = 0, ValidEntries = 3;
    82cc:	fe 01       	movw	r30, r28
    82ce:	e2 5b       	subi	r30, 0xB2	; 178
    82d0:	ff 4f       	sbci	r31, 0xFF	; 255
    82d2:	10 82       	st	Z, r1
    82d4:	fe 01       	movw	r30, r28
    82d6:	e3 5b       	subi	r30, 0xB3	; 179
    82d8:	ff 4f       	sbci	r31, 0xFF	; 255
    82da:	10 82       	st	Z, r1
    82dc:	fe 01       	movw	r30, r28
    82de:	e4 5b       	subi	r30, 0xB4	; 180
    82e0:	ff 4f       	sbci	r31, 0xFF	; 255
    82e2:	10 82       	st	Z, r1
    82e4:	fe 01       	movw	r30, r28
    82e6:	e5 5b       	subi	r30, 0xB5	; 181
    82e8:	ff 4f       	sbci	r31, 0xFF	; 255
    82ea:	83 e0       	ldi	r24, 0x03	; 3
    82ec:	80 83       	st	Z, r24
    82ee:	40 c0       	rjmp	.+128    	; 0x8370 <AddUser+0x13e>
        for (; LocalCounter < IDLENGTH; LocalCounter++)
        {
          EEPROMDataLocation = UserLocation + LocalCounter;
    82f0:	9e 01       	movw	r18, r28
    82f2:	24 5b       	subi	r18, 0xB4	; 180
    82f4:	3f 4f       	sbci	r19, 0xFF	; 255
    82f6:	fe 01       	movw	r30, r28
    82f8:	e0 5b       	subi	r30, 0xB0	; 176
    82fa:	ff 4f       	sbci	r31, 0xFF	; 255
    82fc:	de 01       	movw	r26, r28
    82fe:	a2 5b       	subi	r26, 0xB2	; 178
    8300:	bf 4f       	sbci	r27, 0xFF	; 255
    8302:	90 81       	ld	r25, Z
    8304:	8c 91       	ld	r24, X
    8306:	89 0f       	add	r24, r25
    8308:	f9 01       	movw	r30, r18
    830a:	80 83       	st	Z, r24
          EEPROMData = HEEPROM_ReadByte(0,EEPROMDataLocation);
    830c:	fe 01       	movw	r30, r28
    830e:	e4 5b       	subi	r30, 0xB4	; 180
    8310:	ff 4f       	sbci	r31, 0xFF	; 255
    8312:	80 e0       	ldi	r24, 0x00	; 0
    8314:	60 81       	ld	r22, Z
    8316:	0e 94 4b 30 	call	0x6096	; 0x6096 <HEEPROM_ReadByte>
    831a:	fe 01       	movw	r30, r28
    831c:	e3 5b       	subi	r30, 0xB3	; 179
    831e:	ff 4f       	sbci	r31, 0xFF	; 255
    8320:	80 83       	st	Z, r24
          if (ID[LocalCounter] == EEPROMData )
    8322:	fe 01       	movw	r30, r28
    8324:	e2 5b       	subi	r30, 0xB2	; 178
    8326:	ff 4f       	sbci	r31, 0xFF	; 255
    8328:	80 81       	ld	r24, Z
    832a:	28 2f       	mov	r18, r24
    832c:	30 e0       	ldi	r19, 0x00	; 0
    832e:	fe 01       	movw	r30, r28
    8330:	ed 5a       	subi	r30, 0xAD	; 173
    8332:	ff 4f       	sbci	r31, 0xFF	; 255
    8334:	80 81       	ld	r24, Z
    8336:	91 81       	ldd	r25, Z+1	; 0x01
    8338:	fc 01       	movw	r30, r24
    833a:	e2 0f       	add	r30, r18
    833c:	f3 1f       	adc	r31, r19
    833e:	90 81       	ld	r25, Z
    8340:	fe 01       	movw	r30, r28
    8342:	e3 5b       	subi	r30, 0xB3	; 179
    8344:	ff 4f       	sbci	r31, 0xFF	; 255
    8346:	80 81       	ld	r24, Z
    8348:	98 17       	cp	r25, r24
    834a:	49 f4       	brne	.+18     	; 0x835e <AddUser+0x12c>
          {
            ValidEntries--;
    834c:	de 01       	movw	r26, r28
    834e:	a5 5b       	subi	r26, 0xB5	; 181
    8350:	bf 4f       	sbci	r27, 0xFF	; 255
    8352:	fe 01       	movw	r30, r28
    8354:	e5 5b       	subi	r30, 0xB5	; 181
    8356:	ff 4f       	sbci	r31, 0xFF	; 255
    8358:	80 81       	ld	r24, Z
    835a:	81 50       	subi	r24, 0x01	; 1
    835c:	8c 93       	st	X, r24
      for (; LocalCounter < NumberOfUsers; LocalCounter++)
      {

        UserLocation = (LocalCounter * 7);
        u8 LocalCounter = 0, EEPROMData = 0, EEPROMDataLocation = 0, ValidEntries = 3;
        for (; LocalCounter < IDLENGTH; LocalCounter++)
    835e:	de 01       	movw	r26, r28
    8360:	a2 5b       	subi	r26, 0xB2	; 178
    8362:	bf 4f       	sbci	r27, 0xFF	; 255
    8364:	fe 01       	movw	r30, r28
    8366:	e2 5b       	subi	r30, 0xB2	; 178
    8368:	ff 4f       	sbci	r31, 0xFF	; 255
    836a:	80 81       	ld	r24, Z
    836c:	8f 5f       	subi	r24, 0xFF	; 255
    836e:	8c 93       	st	X, r24
    8370:	fe 01       	movw	r30, r28
    8372:	e2 5b       	subi	r30, 0xB2	; 178
    8374:	ff 4f       	sbci	r31, 0xFF	; 255
    8376:	80 81       	ld	r24, Z
    8378:	83 30       	cpi	r24, 0x03	; 3
    837a:	08 f4       	brcc	.+2      	; 0x837e <AddUser+0x14c>
    837c:	b9 cf       	rjmp	.-142    	; 0x82f0 <AddUser+0xbe>
            ValidEntries--;
          }

        }

        if (ValidEntries == 0)
    837e:	fe 01       	movw	r30, r28
    8380:	e5 5b       	subi	r30, 0xB5	; 181
    8382:	ff 4f       	sbci	r31, 0xFF	; 255
    8384:	80 81       	ld	r24, Z
    8386:	88 23       	and	r24, r24
    8388:	09 f0       	breq	.+2      	; 0x838c <AddUser+0x15a>
    838a:	9d c0       	rjmp	.+314    	; 0x84c6 <AddUser+0x294>
        {
          WrongEntry ++;
    838c:	de 01       	movw	r26, r28
    838e:	a1 5b       	subi	r26, 0xB1	; 177
    8390:	bf 4f       	sbci	r27, 0xFF	; 255
    8392:	fe 01       	movw	r30, r28
    8394:	e1 5b       	subi	r30, 0xB1	; 177
    8396:	ff 4f       	sbci	r31, 0xFF	; 255
    8398:	80 81       	ld	r24, Z
    839a:	8f 5f       	subi	r24, 0xFF	; 255
    839c:	8c 93       	st	X, r24
          HCLCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
    839e:	81 e0       	ldi	r24, 0x01	; 1
    83a0:	0e 94 61 34 	call	0x68c2	; 0x68c2 <HCLCD_WriteCommand4Bit>
          HCLCD_SetCursorPosition(HCLCD_LINE_0,0);
    83a4:	80 e0       	ldi	r24, 0x00	; 0
    83a6:	60 e0       	ldi	r22, 0x00	; 0
    83a8:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
          HCLCD_WriteString("Invalid UserName");
    83ac:	84 e9       	ldi	r24, 0x94	; 148
    83ae:	91 e0       	ldi	r25, 0x01	; 1
    83b0:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <HCLCD_WriteString>
          HCLCD_WriteString("Invalid UserName");
    83b4:	84 e9       	ldi	r24, 0x94	; 148
    83b6:	91 e0       	ldi	r25, 0x01	; 1
    83b8:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <HCLCD_WriteString>
    83bc:	fe 01       	movw	r30, r28
    83be:	ed 5b       	subi	r30, 0xBD	; 189
    83c0:	ff 4f       	sbci	r31, 0xFF	; 255
    83c2:	80 e0       	ldi	r24, 0x00	; 0
    83c4:	90 e0       	ldi	r25, 0x00	; 0
    83c6:	aa ef       	ldi	r26, 0xFA	; 250
    83c8:	b3 e4       	ldi	r27, 0x43	; 67
    83ca:	80 83       	st	Z, r24
    83cc:	91 83       	std	Z+1, r25	; 0x01
    83ce:	a2 83       	std	Z+2, r26	; 0x02
    83d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    83d2:	8e 01       	movw	r16, r28
    83d4:	01 5c       	subi	r16, 0xC1	; 193
    83d6:	1f 4f       	sbci	r17, 0xFF	; 255
    83d8:	fe 01       	movw	r30, r28
    83da:	ed 5b       	subi	r30, 0xBD	; 189
    83dc:	ff 4f       	sbci	r31, 0xFF	; 255
    83de:	60 81       	ld	r22, Z
    83e0:	71 81       	ldd	r23, Z+1	; 0x01
    83e2:	82 81       	ldd	r24, Z+2	; 0x02
    83e4:	93 81       	ldd	r25, Z+3	; 0x03
    83e6:	20 e0       	ldi	r18, 0x00	; 0
    83e8:	30 e0       	ldi	r19, 0x00	; 0
    83ea:	4a e7       	ldi	r20, 0x7A	; 122
    83ec:	55 e4       	ldi	r21, 0x45	; 69
    83ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    83f2:	dc 01       	movw	r26, r24
    83f4:	cb 01       	movw	r24, r22
    83f6:	f8 01       	movw	r30, r16
    83f8:	80 83       	st	Z, r24
    83fa:	91 83       	std	Z+1, r25	; 0x01
    83fc:	a2 83       	std	Z+2, r26	; 0x02
    83fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8400:	fe 01       	movw	r30, r28
    8402:	ff 96       	adiw	r30, 0x3f	; 63
    8404:	60 81       	ld	r22, Z
    8406:	71 81       	ldd	r23, Z+1	; 0x01
    8408:	82 81       	ldd	r24, Z+2	; 0x02
    840a:	93 81       	ldd	r25, Z+3	; 0x03
    840c:	20 e0       	ldi	r18, 0x00	; 0
    840e:	30 e0       	ldi	r19, 0x00	; 0
    8410:	40 e8       	ldi	r20, 0x80	; 128
    8412:	5f e3       	ldi	r21, 0x3F	; 63
    8414:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    8418:	88 23       	and	r24, r24
    841a:	2c f4       	brge	.+10     	; 0x8426 <AddUser+0x1f4>
		__ticks = 1;
    841c:	81 e0       	ldi	r24, 0x01	; 1
    841e:	90 e0       	ldi	r25, 0x00	; 0
    8420:	9e af       	std	Y+62, r25	; 0x3e
    8422:	8d af       	std	Y+61, r24	; 0x3d
    8424:	46 c0       	rjmp	.+140    	; 0x84b2 <AddUser+0x280>
	else if (__tmp > 65535)
    8426:	fe 01       	movw	r30, r28
    8428:	ff 96       	adiw	r30, 0x3f	; 63
    842a:	60 81       	ld	r22, Z
    842c:	71 81       	ldd	r23, Z+1	; 0x01
    842e:	82 81       	ldd	r24, Z+2	; 0x02
    8430:	93 81       	ldd	r25, Z+3	; 0x03
    8432:	20 e0       	ldi	r18, 0x00	; 0
    8434:	3f ef       	ldi	r19, 0xFF	; 255
    8436:	4f e7       	ldi	r20, 0x7F	; 127
    8438:	57 e4       	ldi	r21, 0x47	; 71
    843a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    843e:	18 16       	cp	r1, r24
    8440:	64 f5       	brge	.+88     	; 0x849a <AddUser+0x268>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8442:	fe 01       	movw	r30, r28
    8444:	ed 5b       	subi	r30, 0xBD	; 189
    8446:	ff 4f       	sbci	r31, 0xFF	; 255
    8448:	60 81       	ld	r22, Z
    844a:	71 81       	ldd	r23, Z+1	; 0x01
    844c:	82 81       	ldd	r24, Z+2	; 0x02
    844e:	93 81       	ldd	r25, Z+3	; 0x03
    8450:	20 e0       	ldi	r18, 0x00	; 0
    8452:	30 e0       	ldi	r19, 0x00	; 0
    8454:	40 e2       	ldi	r20, 0x20	; 32
    8456:	51 e4       	ldi	r21, 0x41	; 65
    8458:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    845c:	dc 01       	movw	r26, r24
    845e:	cb 01       	movw	r24, r22
    8460:	bc 01       	movw	r22, r24
    8462:	cd 01       	movw	r24, r26
    8464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    8468:	dc 01       	movw	r26, r24
    846a:	cb 01       	movw	r24, r22
    846c:	9e af       	std	Y+62, r25	; 0x3e
    846e:	8d af       	std	Y+61, r24	; 0x3d
    8470:	0f c0       	rjmp	.+30     	; 0x8490 <AddUser+0x25e>
    8472:	80 e9       	ldi	r24, 0x90	; 144
    8474:	91 e0       	ldi	r25, 0x01	; 1
    8476:	9c af       	std	Y+60, r25	; 0x3c
    8478:	8b af       	std	Y+59, r24	; 0x3b
    847a:	8b ad       	ldd	r24, Y+59	; 0x3b
    847c:	9c ad       	ldd	r25, Y+60	; 0x3c
    847e:	01 97       	sbiw	r24, 0x01	; 1
    8480:	f1 f7       	brne	.-4      	; 0x847e <AddUser+0x24c>
    8482:	9c af       	std	Y+60, r25	; 0x3c
    8484:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8486:	8d ad       	ldd	r24, Y+61	; 0x3d
    8488:	9e ad       	ldd	r25, Y+62	; 0x3e
    848a:	01 97       	sbiw	r24, 0x01	; 1
    848c:	9e af       	std	Y+62, r25	; 0x3e
    848e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8490:	8d ad       	ldd	r24, Y+61	; 0x3d
    8492:	9e ad       	ldd	r25, Y+62	; 0x3e
    8494:	00 97       	sbiw	r24, 0x00	; 0
    8496:	69 f7       	brne	.-38     	; 0x8472 <AddUser+0x240>
    8498:	16 c0       	rjmp	.+44     	; 0x84c6 <AddUser+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    849a:	fe 01       	movw	r30, r28
    849c:	ff 96       	adiw	r30, 0x3f	; 63
    849e:	60 81       	ld	r22, Z
    84a0:	71 81       	ldd	r23, Z+1	; 0x01
    84a2:	82 81       	ldd	r24, Z+2	; 0x02
    84a4:	93 81       	ldd	r25, Z+3	; 0x03
    84a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    84aa:	dc 01       	movw	r26, r24
    84ac:	cb 01       	movw	r24, r22
    84ae:	9e af       	std	Y+62, r25	; 0x3e
    84b0:	8d af       	std	Y+61, r24	; 0x3d
    84b2:	8d ad       	ldd	r24, Y+61	; 0x3d
    84b4:	9e ad       	ldd	r25, Y+62	; 0x3e
    84b6:	9a af       	std	Y+58, r25	; 0x3a
    84b8:	89 af       	std	Y+57, r24	; 0x39
    84ba:	89 ad       	ldd	r24, Y+57	; 0x39
    84bc:	9a ad       	ldd	r25, Y+58	; 0x3a
    84be:	01 97       	sbiw	r24, 0x01	; 1
    84c0:	f1 f7       	brne	.-4      	; 0x84be <AddUser+0x28c>
    84c2:	9a af       	std	Y+58, r25	; 0x3a
    84c4:	89 af       	std	Y+57, r24	; 0x39

    if (NumberOfUsers > 0)
    {
      u8 WrongEntry = 0;

      for (; LocalCounter < NumberOfUsers; LocalCounter++)
    84c6:	de 01       	movw	r26, r28
    84c8:	af 5a       	subi	r26, 0xAF	; 175
    84ca:	bf 4f       	sbci	r27, 0xFF	; 255
    84cc:	fe 01       	movw	r30, r28
    84ce:	ef 5a       	subi	r30, 0xAF	; 175
    84d0:	ff 4f       	sbci	r31, 0xFF	; 255
    84d2:	80 81       	ld	r24, Z
    84d4:	8f 5f       	subi	r24, 0xFF	; 255
    84d6:	8c 93       	st	X, r24
    84d8:	fe 01       	movw	r30, r28
    84da:	ef 5a       	subi	r30, 0xAF	; 175
    84dc:	ff 4f       	sbci	r31, 0xFF	; 255
    84de:	de 01       	movw	r26, r28
    84e0:	ae 5a       	subi	r26, 0xAE	; 174
    84e2:	bf 4f       	sbci	r27, 0xFF	; 255
    84e4:	90 81       	ld	r25, Z
    84e6:	8c 91       	ld	r24, X
    84e8:	98 17       	cp	r25, r24
    84ea:	08 f4       	brcc	.+2      	; 0x84ee <AddUser+0x2bc>
    84ec:	dc ce       	rjmp	.-584    	; 0x82a6 <AddUser+0x74>
          HCLCD_WriteString("Invalid UserName");
          _delay_ms(500);
        }
      }

      if (WrongEntry == 0)
    84ee:	fe 01       	movw	r30, r28
    84f0:	e1 5b       	subi	r30, 0xB1	; 177
    84f2:	ff 4f       	sbci	r31, 0xFF	; 255
    84f4:	80 81       	ld	r24, Z
    84f6:	88 23       	and	r24, r24
    84f8:	09 f0       	breq	.+2      	; 0x84fc <AddUser+0x2ca>
    84fa:	5c c3       	rjmp	.+1720   	; 0x8bb4 <AddUser+0x982>
      {

        HCLCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
    84fc:	81 e0       	ldi	r24, 0x01	; 1
    84fe:	0e 94 61 34 	call	0x68c2	; 0x68c2 <HCLCD_WriteCommand4Bit>
        HCLCD_SetCursorPosition(HCLCD_LINE_0,0);
    8502:	80 e0       	ldi	r24, 0x00	; 0
    8504:	60 e0       	ldi	r22, 0x00	; 0
    8506:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
        HCLCD_WriteString("Valid Entry");
    850a:	85 ea       	ldi	r24, 0xA5	; 165
    850c:	91 e0       	ldi	r25, 0x01	; 1
    850e:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <HCLCD_WriteString>
        HHC05_SendString("Valid Entry");
    8512:	85 ea       	ldi	r24, 0xA5	; 165
    8514:	91 e0       	ldi	r25, 0x01	; 1
    8516:	0e 94 29 30 	call	0x6052	; 0x6052 <HHC05_SendString>
    851a:	80 e0       	ldi	r24, 0x00	; 0
    851c:	90 e0       	ldi	r25, 0x00	; 0
    851e:	aa ef       	ldi	r26, 0xFA	; 250
    8520:	b3 e4       	ldi	r27, 0x43	; 67
    8522:	8d ab       	std	Y+53, r24	; 0x35
    8524:	9e ab       	std	Y+54, r25	; 0x36
    8526:	af ab       	std	Y+55, r26	; 0x37
    8528:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    852a:	6d a9       	ldd	r22, Y+53	; 0x35
    852c:	7e a9       	ldd	r23, Y+54	; 0x36
    852e:	8f a9       	ldd	r24, Y+55	; 0x37
    8530:	98 ad       	ldd	r25, Y+56	; 0x38
    8532:	20 e0       	ldi	r18, 0x00	; 0
    8534:	30 e0       	ldi	r19, 0x00	; 0
    8536:	4a e7       	ldi	r20, 0x7A	; 122
    8538:	55 e4       	ldi	r21, 0x45	; 69
    853a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    853e:	dc 01       	movw	r26, r24
    8540:	cb 01       	movw	r24, r22
    8542:	89 ab       	std	Y+49, r24	; 0x31
    8544:	9a ab       	std	Y+50, r25	; 0x32
    8546:	ab ab       	std	Y+51, r26	; 0x33
    8548:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    854a:	69 a9       	ldd	r22, Y+49	; 0x31
    854c:	7a a9       	ldd	r23, Y+50	; 0x32
    854e:	8b a9       	ldd	r24, Y+51	; 0x33
    8550:	9c a9       	ldd	r25, Y+52	; 0x34
    8552:	20 e0       	ldi	r18, 0x00	; 0
    8554:	30 e0       	ldi	r19, 0x00	; 0
    8556:	40 e8       	ldi	r20, 0x80	; 128
    8558:	5f e3       	ldi	r21, 0x3F	; 63
    855a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    855e:	88 23       	and	r24, r24
    8560:	2c f4       	brge	.+10     	; 0x856c <AddUser+0x33a>
		__ticks = 1;
    8562:	81 e0       	ldi	r24, 0x01	; 1
    8564:	90 e0       	ldi	r25, 0x00	; 0
    8566:	98 ab       	std	Y+48, r25	; 0x30
    8568:	8f a7       	std	Y+47, r24	; 0x2f
    856a:	3f c0       	rjmp	.+126    	; 0x85ea <AddUser+0x3b8>
	else if (__tmp > 65535)
    856c:	69 a9       	ldd	r22, Y+49	; 0x31
    856e:	7a a9       	ldd	r23, Y+50	; 0x32
    8570:	8b a9       	ldd	r24, Y+51	; 0x33
    8572:	9c a9       	ldd	r25, Y+52	; 0x34
    8574:	20 e0       	ldi	r18, 0x00	; 0
    8576:	3f ef       	ldi	r19, 0xFF	; 255
    8578:	4f e7       	ldi	r20, 0x7F	; 127
    857a:	57 e4       	ldi	r21, 0x47	; 71
    857c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    8580:	18 16       	cp	r1, r24
    8582:	4c f5       	brge	.+82     	; 0x85d6 <AddUser+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8584:	6d a9       	ldd	r22, Y+53	; 0x35
    8586:	7e a9       	ldd	r23, Y+54	; 0x36
    8588:	8f a9       	ldd	r24, Y+55	; 0x37
    858a:	98 ad       	ldd	r25, Y+56	; 0x38
    858c:	20 e0       	ldi	r18, 0x00	; 0
    858e:	30 e0       	ldi	r19, 0x00	; 0
    8590:	40 e2       	ldi	r20, 0x20	; 32
    8592:	51 e4       	ldi	r21, 0x41	; 65
    8594:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    8598:	dc 01       	movw	r26, r24
    859a:	cb 01       	movw	r24, r22
    859c:	bc 01       	movw	r22, r24
    859e:	cd 01       	movw	r24, r26
    85a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    85a4:	dc 01       	movw	r26, r24
    85a6:	cb 01       	movw	r24, r22
    85a8:	98 ab       	std	Y+48, r25	; 0x30
    85aa:	8f a7       	std	Y+47, r24	; 0x2f
    85ac:	0f c0       	rjmp	.+30     	; 0x85cc <AddUser+0x39a>
    85ae:	80 e9       	ldi	r24, 0x90	; 144
    85b0:	91 e0       	ldi	r25, 0x01	; 1
    85b2:	9e a7       	std	Y+46, r25	; 0x2e
    85b4:	8d a7       	std	Y+45, r24	; 0x2d
    85b6:	8d a5       	ldd	r24, Y+45	; 0x2d
    85b8:	9e a5       	ldd	r25, Y+46	; 0x2e
    85ba:	01 97       	sbiw	r24, 0x01	; 1
    85bc:	f1 f7       	brne	.-4      	; 0x85ba <AddUser+0x388>
    85be:	9e a7       	std	Y+46, r25	; 0x2e
    85c0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    85c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    85c4:	98 a9       	ldd	r25, Y+48	; 0x30
    85c6:	01 97       	sbiw	r24, 0x01	; 1
    85c8:	98 ab       	std	Y+48, r25	; 0x30
    85ca:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    85cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    85ce:	98 a9       	ldd	r25, Y+48	; 0x30
    85d0:	00 97       	sbiw	r24, 0x00	; 0
    85d2:	69 f7       	brne	.-38     	; 0x85ae <AddUser+0x37c>
    85d4:	14 c0       	rjmp	.+40     	; 0x85fe <AddUser+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    85d6:	69 a9       	ldd	r22, Y+49	; 0x31
    85d8:	7a a9       	ldd	r23, Y+50	; 0x32
    85da:	8b a9       	ldd	r24, Y+51	; 0x33
    85dc:	9c a9       	ldd	r25, Y+52	; 0x34
    85de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    85e2:	dc 01       	movw	r26, r24
    85e4:	cb 01       	movw	r24, r22
    85e6:	98 ab       	std	Y+48, r25	; 0x30
    85e8:	8f a7       	std	Y+47, r24	; 0x2f
    85ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    85ec:	98 a9       	ldd	r25, Y+48	; 0x30
    85ee:	9c a7       	std	Y+44, r25	; 0x2c
    85f0:	8b a7       	std	Y+43, r24	; 0x2b
    85f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    85f4:	9c a5       	ldd	r25, Y+44	; 0x2c
    85f6:	01 97       	sbiw	r24, 0x01	; 1
    85f8:	f1 f7       	brne	.-4      	; 0x85f6 <AddUser+0x3c4>
    85fa:	9c a7       	std	Y+44, r25	; 0x2c
    85fc:	8b a7       	std	Y+43, r24	; 0x2b
        _delay_ms(500);
        u8 LocalCounter = 0, EEPROMDataLocation = 0;
    85fe:	fe 01       	movw	r30, r28
    8600:	e6 5b       	subi	r30, 0xB6	; 182
    8602:	ff 4f       	sbci	r31, 0xFF	; 255
    8604:	10 82       	st	Z, r1
    8606:	fe 01       	movw	r30, r28
    8608:	e7 5b       	subi	r30, 0xB7	; 183
    860a:	ff 4f       	sbci	r31, 0xFF	; 255
    860c:	10 82       	st	Z, r1
        UserLocation = NumberOfUsers * 7;
    860e:	fe 01       	movw	r30, r28
    8610:	ee 5a       	subi	r30, 0xAE	; 174
    8612:	ff 4f       	sbci	r31, 0xFF	; 255
    8614:	80 81       	ld	r24, Z
    8616:	28 2f       	mov	r18, r24
    8618:	30 e0       	ldi	r19, 0x00	; 0
    861a:	c9 01       	movw	r24, r18
    861c:	88 0f       	add	r24, r24
    861e:	99 1f       	adc	r25, r25
    8620:	88 0f       	add	r24, r24
    8622:	99 1f       	adc	r25, r25
    8624:	88 0f       	add	r24, r24
    8626:	99 1f       	adc	r25, r25
    8628:	82 1b       	sub	r24, r18
    862a:	93 0b       	sbc	r25, r19
    862c:	fe 01       	movw	r30, r28
    862e:	e0 5b       	subi	r30, 0xB0	; 176
    8630:	ff 4f       	sbci	r31, 0xFF	; 255
    8632:	80 83       	st	Z, r24
    8634:	2d c0       	rjmp	.+90     	; 0x8690 <AddUser+0x45e>
        for (; LocalCounter < IDLENGTH; LocalCounter++)
        {
          EEPROMDataLocation = UserLocation + LocalCounter;
    8636:	9e 01       	movw	r18, r28
    8638:	27 5b       	subi	r18, 0xB7	; 183
    863a:	3f 4f       	sbci	r19, 0xFF	; 255
    863c:	fe 01       	movw	r30, r28
    863e:	e0 5b       	subi	r30, 0xB0	; 176
    8640:	ff 4f       	sbci	r31, 0xFF	; 255
    8642:	de 01       	movw	r26, r28
    8644:	a6 5b       	subi	r26, 0xB6	; 182
    8646:	bf 4f       	sbci	r27, 0xFF	; 255
    8648:	90 81       	ld	r25, Z
    864a:	8c 91       	ld	r24, X
    864c:	89 0f       	add	r24, r25
    864e:	f9 01       	movw	r30, r18
    8650:	80 83       	st	Z, r24
          HEEPROM_WriteByte(ID[LocalCounter], 0, EEPROMDataLocation);
    8652:	fe 01       	movw	r30, r28
    8654:	e6 5b       	subi	r30, 0xB6	; 182
    8656:	ff 4f       	sbci	r31, 0xFF	; 255
    8658:	80 81       	ld	r24, Z
    865a:	28 2f       	mov	r18, r24
    865c:	30 e0       	ldi	r19, 0x00	; 0
    865e:	fe 01       	movw	r30, r28
    8660:	ed 5a       	subi	r30, 0xAD	; 173
    8662:	ff 4f       	sbci	r31, 0xFF	; 255
    8664:	80 81       	ld	r24, Z
    8666:	91 81       	ldd	r25, Z+1	; 0x01
    8668:	fc 01       	movw	r30, r24
    866a:	e2 0f       	add	r30, r18
    866c:	f3 1f       	adc	r31, r19
    866e:	80 81       	ld	r24, Z
    8670:	fe 01       	movw	r30, r28
    8672:	e7 5b       	subi	r30, 0xB7	; 183
    8674:	ff 4f       	sbci	r31, 0xFF	; 255
    8676:	60 e0       	ldi	r22, 0x00	; 0
    8678:	40 81       	ld	r20, Z
    867a:	0e 94 70 30 	call	0x60e0	; 0x60e0 <HEEPROM_WriteByte>
        HCLCD_WriteString("Valid Entry");
        HHC05_SendString("Valid Entry");
        _delay_ms(500);
        u8 LocalCounter = 0, EEPROMDataLocation = 0;
        UserLocation = NumberOfUsers * 7;
        for (; LocalCounter < IDLENGTH; LocalCounter++)
    867e:	de 01       	movw	r26, r28
    8680:	a6 5b       	subi	r26, 0xB6	; 182
    8682:	bf 4f       	sbci	r27, 0xFF	; 255
    8684:	fe 01       	movw	r30, r28
    8686:	e6 5b       	subi	r30, 0xB6	; 182
    8688:	ff 4f       	sbci	r31, 0xFF	; 255
    868a:	80 81       	ld	r24, Z
    868c:	8f 5f       	subi	r24, 0xFF	; 255
    868e:	8c 93       	st	X, r24
    8690:	fe 01       	movw	r30, r28
    8692:	e6 5b       	subi	r30, 0xB6	; 182
    8694:	ff 4f       	sbci	r31, 0xFF	; 255
    8696:	80 81       	ld	r24, Z
    8698:	83 30       	cpi	r24, 0x03	; 3
    869a:	68 f2       	brcs	.-102    	; 0x8636 <AddUser+0x404>
        {
          EEPROMDataLocation = UserLocation + LocalCounter;
          HEEPROM_WriteByte(ID[LocalCounter], 0, EEPROMDataLocation);
        }

        for (LocalCounter = 0; LocalCounter < PASSWORDLENGTH; LocalCounter++)
    869c:	fe 01       	movw	r30, r28
    869e:	e6 5b       	subi	r30, 0xB6	; 182
    86a0:	ff 4f       	sbci	r31, 0xFF	; 255
    86a2:	10 82       	st	Z, r1
    86a4:	2d c0       	rjmp	.+90     	; 0x8700 <AddUser+0x4ce>
        {
          EEPROMDataLocation = UserLocation + LocalCounter + IDLENGTH;
    86a6:	fe 01       	movw	r30, r28
    86a8:	e0 5b       	subi	r30, 0xB0	; 176
    86aa:	ff 4f       	sbci	r31, 0xFF	; 255
    86ac:	de 01       	movw	r26, r28
    86ae:	a6 5b       	subi	r26, 0xB6	; 182
    86b0:	bf 4f       	sbci	r27, 0xFF	; 255
    86b2:	90 81       	ld	r25, Z
    86b4:	8c 91       	ld	r24, X
    86b6:	89 0f       	add	r24, r25
    86b8:	fe 01       	movw	r30, r28
    86ba:	e7 5b       	subi	r30, 0xB7	; 183
    86bc:	ff 4f       	sbci	r31, 0xFF	; 255
    86be:	8d 5f       	subi	r24, 0xFD	; 253
    86c0:	80 83       	st	Z, r24
          HEEPROM_WriteByte(Password[LocalCounter], 0, EEPROMDataLocation);
    86c2:	fe 01       	movw	r30, r28
    86c4:	e6 5b       	subi	r30, 0xB6	; 182
    86c6:	ff 4f       	sbci	r31, 0xFF	; 255
    86c8:	80 81       	ld	r24, Z
    86ca:	28 2f       	mov	r18, r24
    86cc:	30 e0       	ldi	r19, 0x00	; 0
    86ce:	fe 01       	movw	r30, r28
    86d0:	eb 5a       	subi	r30, 0xAB	; 171
    86d2:	ff 4f       	sbci	r31, 0xFF	; 255
    86d4:	80 81       	ld	r24, Z
    86d6:	91 81       	ldd	r25, Z+1	; 0x01
    86d8:	fc 01       	movw	r30, r24
    86da:	e2 0f       	add	r30, r18
    86dc:	f3 1f       	adc	r31, r19
    86de:	80 81       	ld	r24, Z
    86e0:	fe 01       	movw	r30, r28
    86e2:	e7 5b       	subi	r30, 0xB7	; 183
    86e4:	ff 4f       	sbci	r31, 0xFF	; 255
    86e6:	60 e0       	ldi	r22, 0x00	; 0
    86e8:	40 81       	ld	r20, Z
    86ea:	0e 94 70 30 	call	0x60e0	; 0x60e0 <HEEPROM_WriteByte>
        {
          EEPROMDataLocation = UserLocation + LocalCounter;
          HEEPROM_WriteByte(ID[LocalCounter], 0, EEPROMDataLocation);
        }

        for (LocalCounter = 0; LocalCounter < PASSWORDLENGTH; LocalCounter++)
    86ee:	de 01       	movw	r26, r28
    86f0:	a6 5b       	subi	r26, 0xB6	; 182
    86f2:	bf 4f       	sbci	r27, 0xFF	; 255
    86f4:	fe 01       	movw	r30, r28
    86f6:	e6 5b       	subi	r30, 0xB6	; 182
    86f8:	ff 4f       	sbci	r31, 0xFF	; 255
    86fa:	80 81       	ld	r24, Z
    86fc:	8f 5f       	subi	r24, 0xFF	; 255
    86fe:	8c 93       	st	X, r24
    8700:	fe 01       	movw	r30, r28
    8702:	e6 5b       	subi	r30, 0xB6	; 182
    8704:	ff 4f       	sbci	r31, 0xFF	; 255
    8706:	80 81       	ld	r24, Z
    8708:	84 30       	cpi	r24, 0x04	; 4
    870a:	68 f2       	brcs	.-102    	; 0x86a6 <AddUser+0x474>
        {
          EEPROMDataLocation = UserLocation + LocalCounter + IDLENGTH;
          HEEPROM_WriteByte(Password[LocalCounter], 0, EEPROMDataLocation);
        }
        NumberOfUsers++;
    870c:	de 01       	movw	r26, r28
    870e:	ae 5a       	subi	r26, 0xAE	; 174
    8710:	bf 4f       	sbci	r27, 0xFF	; 255
    8712:	fe 01       	movw	r30, r28
    8714:	ee 5a       	subi	r30, 0xAE	; 174
    8716:	ff 4f       	sbci	r31, 0xFF	; 255
    8718:	80 81       	ld	r24, Z
    871a:	8f 5f       	subi	r24, 0xFF	; 255
    871c:	8c 93       	st	X, r24
        HEEPROM_WriteByte(NumberOfUsers, 0, 100);
    871e:	fe 01       	movw	r30, r28
    8720:	ee 5a       	subi	r30, 0xAE	; 174
    8722:	ff 4f       	sbci	r31, 0xFF	; 255
    8724:	80 81       	ld	r24, Z
    8726:	60 e0       	ldi	r22, 0x00	; 0
    8728:	44 e6       	ldi	r20, 0x64	; 100
    872a:	0e 94 70 30 	call	0x60e0	; 0x60e0 <HEEPROM_WriteByte>
    872e:	42 c2       	rjmp	.+1156   	; 0x8bb4 <AddUser+0x982>

      }
    }
    else
    {
       HCLCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
    8730:	81 e0       	ldi	r24, 0x01	; 1
    8732:	0e 94 61 34 	call	0x68c2	; 0x68c2 <HCLCD_WriteCommand4Bit>
       HCLCD_SetCursorPosition(HCLCD_LINE_0,0);
    8736:	80 e0       	ldi	r24, 0x00	; 0
    8738:	60 e0       	ldi	r22, 0x00	; 0
    873a:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
      HCLCD_WriteString("Valid Entry");
    873e:	85 ea       	ldi	r24, 0xA5	; 165
    8740:	91 e0       	ldi	r25, 0x01	; 1
    8742:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <HCLCD_WriteString>
    8746:	80 e0       	ldi	r24, 0x00	; 0
    8748:	90 e0       	ldi	r25, 0x00	; 0
    874a:	aa ef       	ldi	r26, 0xFA	; 250
    874c:	b3 e4       	ldi	r27, 0x43	; 67
    874e:	8f a3       	std	Y+39, r24	; 0x27
    8750:	98 a7       	std	Y+40, r25	; 0x28
    8752:	a9 a7       	std	Y+41, r26	; 0x29
    8754:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    8756:	6f a1       	ldd	r22, Y+39	; 0x27
    8758:	78 a5       	ldd	r23, Y+40	; 0x28
    875a:	89 a5       	ldd	r24, Y+41	; 0x29
    875c:	9a a5       	ldd	r25, Y+42	; 0x2a
    875e:	20 e0       	ldi	r18, 0x00	; 0
    8760:	30 e0       	ldi	r19, 0x00	; 0
    8762:	4a e7       	ldi	r20, 0x7A	; 122
    8764:	55 e4       	ldi	r21, 0x45	; 69
    8766:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    876a:	dc 01       	movw	r26, r24
    876c:	cb 01       	movw	r24, r22
    876e:	8b a3       	std	Y+35, r24	; 0x23
    8770:	9c a3       	std	Y+36, r25	; 0x24
    8772:	ad a3       	std	Y+37, r26	; 0x25
    8774:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    8776:	6b a1       	ldd	r22, Y+35	; 0x23
    8778:	7c a1       	ldd	r23, Y+36	; 0x24
    877a:	8d a1       	ldd	r24, Y+37	; 0x25
    877c:	9e a1       	ldd	r25, Y+38	; 0x26
    877e:	20 e0       	ldi	r18, 0x00	; 0
    8780:	30 e0       	ldi	r19, 0x00	; 0
    8782:	40 e8       	ldi	r20, 0x80	; 128
    8784:	5f e3       	ldi	r21, 0x3F	; 63
    8786:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    878a:	88 23       	and	r24, r24
    878c:	2c f4       	brge	.+10     	; 0x8798 <AddUser+0x566>
		__ticks = 1;
    878e:	81 e0       	ldi	r24, 0x01	; 1
    8790:	90 e0       	ldi	r25, 0x00	; 0
    8792:	9a a3       	std	Y+34, r25	; 0x22
    8794:	89 a3       	std	Y+33, r24	; 0x21
    8796:	3f c0       	rjmp	.+126    	; 0x8816 <AddUser+0x5e4>
	else if (__tmp > 65535)
    8798:	6b a1       	ldd	r22, Y+35	; 0x23
    879a:	7c a1       	ldd	r23, Y+36	; 0x24
    879c:	8d a1       	ldd	r24, Y+37	; 0x25
    879e:	9e a1       	ldd	r25, Y+38	; 0x26
    87a0:	20 e0       	ldi	r18, 0x00	; 0
    87a2:	3f ef       	ldi	r19, 0xFF	; 255
    87a4:	4f e7       	ldi	r20, 0x7F	; 127
    87a6:	57 e4       	ldi	r21, 0x47	; 71
    87a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    87ac:	18 16       	cp	r1, r24
    87ae:	4c f5       	brge	.+82     	; 0x8802 <AddUser+0x5d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    87b0:	6f a1       	ldd	r22, Y+39	; 0x27
    87b2:	78 a5       	ldd	r23, Y+40	; 0x28
    87b4:	89 a5       	ldd	r24, Y+41	; 0x29
    87b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    87b8:	20 e0       	ldi	r18, 0x00	; 0
    87ba:	30 e0       	ldi	r19, 0x00	; 0
    87bc:	40 e2       	ldi	r20, 0x20	; 32
    87be:	51 e4       	ldi	r21, 0x41	; 65
    87c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    87c4:	dc 01       	movw	r26, r24
    87c6:	cb 01       	movw	r24, r22
    87c8:	bc 01       	movw	r22, r24
    87ca:	cd 01       	movw	r24, r26
    87cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    87d0:	dc 01       	movw	r26, r24
    87d2:	cb 01       	movw	r24, r22
    87d4:	9a a3       	std	Y+34, r25	; 0x22
    87d6:	89 a3       	std	Y+33, r24	; 0x21
    87d8:	0f c0       	rjmp	.+30     	; 0x87f8 <AddUser+0x5c6>
    87da:	80 e9       	ldi	r24, 0x90	; 144
    87dc:	91 e0       	ldi	r25, 0x01	; 1
    87de:	98 a3       	std	Y+32, r25	; 0x20
    87e0:	8f 8f       	std	Y+31, r24	; 0x1f
    87e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    87e4:	98 a1       	ldd	r25, Y+32	; 0x20
    87e6:	01 97       	sbiw	r24, 0x01	; 1
    87e8:	f1 f7       	brne	.-4      	; 0x87e6 <AddUser+0x5b4>
    87ea:	98 a3       	std	Y+32, r25	; 0x20
    87ec:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    87ee:	89 a1       	ldd	r24, Y+33	; 0x21
    87f0:	9a a1       	ldd	r25, Y+34	; 0x22
    87f2:	01 97       	sbiw	r24, 0x01	; 1
    87f4:	9a a3       	std	Y+34, r25	; 0x22
    87f6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    87f8:	89 a1       	ldd	r24, Y+33	; 0x21
    87fa:	9a a1       	ldd	r25, Y+34	; 0x22
    87fc:	00 97       	sbiw	r24, 0x00	; 0
    87fe:	69 f7       	brne	.-38     	; 0x87da <AddUser+0x5a8>
    8800:	14 c0       	rjmp	.+40     	; 0x882a <AddUser+0x5f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8802:	6b a1       	ldd	r22, Y+35	; 0x23
    8804:	7c a1       	ldd	r23, Y+36	; 0x24
    8806:	8d a1       	ldd	r24, Y+37	; 0x25
    8808:	9e a1       	ldd	r25, Y+38	; 0x26
    880a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    880e:	dc 01       	movw	r26, r24
    8810:	cb 01       	movw	r24, r22
    8812:	9a a3       	std	Y+34, r25	; 0x22
    8814:	89 a3       	std	Y+33, r24	; 0x21
    8816:	89 a1       	ldd	r24, Y+33	; 0x21
    8818:	9a a1       	ldd	r25, Y+34	; 0x22
    881a:	9e 8f       	std	Y+30, r25	; 0x1e
    881c:	8d 8f       	std	Y+29, r24	; 0x1d
    881e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    8820:	9e 8d       	ldd	r25, Y+30	; 0x1e
    8822:	01 97       	sbiw	r24, 0x01	; 1
    8824:	f1 f7       	brne	.-4      	; 0x8822 <AddUser+0x5f0>
    8826:	9e 8f       	std	Y+30, r25	; 0x1e
    8828:	8d 8f       	std	Y+29, r24	; 0x1d
      _delay_ms(500);
      HHC05_SendString("Valid Entry");
    882a:	85 ea       	ldi	r24, 0xA5	; 165
    882c:	91 e0       	ldi	r25, 0x01	; 1
    882e:	0e 94 29 30 	call	0x6052	; 0x6052 <HHC05_SendString>
      u8 LocalCounter = 0, EEPROMDataLocation = 0;
    8832:	fe 01       	movw	r30, r28
    8834:	e8 5b       	subi	r30, 0xB8	; 184
    8836:	ff 4f       	sbci	r31, 0xFF	; 255
    8838:	10 82       	st	Z, r1
    883a:	fe 01       	movw	r30, r28
    883c:	e9 5b       	subi	r30, 0xB9	; 185
    883e:	ff 4f       	sbci	r31, 0xFF	; 255
    8840:	10 82       	st	Z, r1
      UserLocation = NumberOfUsers * 7;
    8842:	fe 01       	movw	r30, r28
    8844:	ee 5a       	subi	r30, 0xAE	; 174
    8846:	ff 4f       	sbci	r31, 0xFF	; 255
    8848:	80 81       	ld	r24, Z
    884a:	28 2f       	mov	r18, r24
    884c:	30 e0       	ldi	r19, 0x00	; 0
    884e:	c9 01       	movw	r24, r18
    8850:	88 0f       	add	r24, r24
    8852:	99 1f       	adc	r25, r25
    8854:	88 0f       	add	r24, r24
    8856:	99 1f       	adc	r25, r25
    8858:	88 0f       	add	r24, r24
    885a:	99 1f       	adc	r25, r25
    885c:	82 1b       	sub	r24, r18
    885e:	93 0b       	sbc	r25, r19
    8860:	fe 01       	movw	r30, r28
    8862:	e0 5b       	subi	r30, 0xB0	; 176
    8864:	ff 4f       	sbci	r31, 0xFF	; 255
    8866:	80 83       	st	Z, r24
    8868:	2d c0       	rjmp	.+90     	; 0x88c4 <AddUser+0x692>
      for (; LocalCounter <IDLENGTH; LocalCounter++)
      {
        EEPROMDataLocation = UserLocation + LocalCounter;
    886a:	9e 01       	movw	r18, r28
    886c:	29 5b       	subi	r18, 0xB9	; 185
    886e:	3f 4f       	sbci	r19, 0xFF	; 255
    8870:	fe 01       	movw	r30, r28
    8872:	e0 5b       	subi	r30, 0xB0	; 176
    8874:	ff 4f       	sbci	r31, 0xFF	; 255
    8876:	de 01       	movw	r26, r28
    8878:	a8 5b       	subi	r26, 0xB8	; 184
    887a:	bf 4f       	sbci	r27, 0xFF	; 255
    887c:	90 81       	ld	r25, Z
    887e:	8c 91       	ld	r24, X
    8880:	89 0f       	add	r24, r25
    8882:	f9 01       	movw	r30, r18
    8884:	80 83       	st	Z, r24
        HEEPROM_WriteByte(ID[LocalCounter], 0, EEPROMDataLocation);
    8886:	fe 01       	movw	r30, r28
    8888:	e8 5b       	subi	r30, 0xB8	; 184
    888a:	ff 4f       	sbci	r31, 0xFF	; 255
    888c:	80 81       	ld	r24, Z
    888e:	28 2f       	mov	r18, r24
    8890:	30 e0       	ldi	r19, 0x00	; 0
    8892:	fe 01       	movw	r30, r28
    8894:	ed 5a       	subi	r30, 0xAD	; 173
    8896:	ff 4f       	sbci	r31, 0xFF	; 255
    8898:	80 81       	ld	r24, Z
    889a:	91 81       	ldd	r25, Z+1	; 0x01
    889c:	fc 01       	movw	r30, r24
    889e:	e2 0f       	add	r30, r18
    88a0:	f3 1f       	adc	r31, r19
    88a2:	80 81       	ld	r24, Z
    88a4:	fe 01       	movw	r30, r28
    88a6:	e9 5b       	subi	r30, 0xB9	; 185
    88a8:	ff 4f       	sbci	r31, 0xFF	; 255
    88aa:	60 e0       	ldi	r22, 0x00	; 0
    88ac:	40 81       	ld	r20, Z
    88ae:	0e 94 70 30 	call	0x60e0	; 0x60e0 <HEEPROM_WriteByte>
      HCLCD_WriteString("Valid Entry");
      _delay_ms(500);
      HHC05_SendString("Valid Entry");
      u8 LocalCounter = 0, EEPROMDataLocation = 0;
      UserLocation = NumberOfUsers * 7;
      for (; LocalCounter <IDLENGTH; LocalCounter++)
    88b2:	de 01       	movw	r26, r28
    88b4:	a8 5b       	subi	r26, 0xB8	; 184
    88b6:	bf 4f       	sbci	r27, 0xFF	; 255
    88b8:	fe 01       	movw	r30, r28
    88ba:	e8 5b       	subi	r30, 0xB8	; 184
    88bc:	ff 4f       	sbci	r31, 0xFF	; 255
    88be:	80 81       	ld	r24, Z
    88c0:	8f 5f       	subi	r24, 0xFF	; 255
    88c2:	8c 93       	st	X, r24
    88c4:	fe 01       	movw	r30, r28
    88c6:	e8 5b       	subi	r30, 0xB8	; 184
    88c8:	ff 4f       	sbci	r31, 0xFF	; 255
    88ca:	80 81       	ld	r24, Z
    88cc:	83 30       	cpi	r24, 0x03	; 3
    88ce:	68 f2       	brcs	.-102    	; 0x886a <AddUser+0x638>
      {
        EEPROMDataLocation = UserLocation + LocalCounter;
        HEEPROM_WriteByte(ID[LocalCounter], 0, EEPROMDataLocation);
      }

      for (LocalCounter = 0; LocalCounter < PASSWORDLENGTH; LocalCounter++)
    88d0:	fe 01       	movw	r30, r28
    88d2:	e8 5b       	subi	r30, 0xB8	; 184
    88d4:	ff 4f       	sbci	r31, 0xFF	; 255
    88d6:	10 82       	st	Z, r1
    88d8:	2d c0       	rjmp	.+90     	; 0x8934 <AddUser+0x702>
      {
        EEPROMDataLocation = UserLocation + LocalCounter + IDLENGTH;
    88da:	fe 01       	movw	r30, r28
    88dc:	e0 5b       	subi	r30, 0xB0	; 176
    88de:	ff 4f       	sbci	r31, 0xFF	; 255
    88e0:	de 01       	movw	r26, r28
    88e2:	a8 5b       	subi	r26, 0xB8	; 184
    88e4:	bf 4f       	sbci	r27, 0xFF	; 255
    88e6:	90 81       	ld	r25, Z
    88e8:	8c 91       	ld	r24, X
    88ea:	89 0f       	add	r24, r25
    88ec:	fe 01       	movw	r30, r28
    88ee:	e9 5b       	subi	r30, 0xB9	; 185
    88f0:	ff 4f       	sbci	r31, 0xFF	; 255
    88f2:	8d 5f       	subi	r24, 0xFD	; 253
    88f4:	80 83       	st	Z, r24
        HEEPROM_WriteByte(Password[LocalCounter], 0, EEPROMDataLocation);
    88f6:	fe 01       	movw	r30, r28
    88f8:	e8 5b       	subi	r30, 0xB8	; 184
    88fa:	ff 4f       	sbci	r31, 0xFF	; 255
    88fc:	80 81       	ld	r24, Z
    88fe:	28 2f       	mov	r18, r24
    8900:	30 e0       	ldi	r19, 0x00	; 0
    8902:	fe 01       	movw	r30, r28
    8904:	eb 5a       	subi	r30, 0xAB	; 171
    8906:	ff 4f       	sbci	r31, 0xFF	; 255
    8908:	80 81       	ld	r24, Z
    890a:	91 81       	ldd	r25, Z+1	; 0x01
    890c:	fc 01       	movw	r30, r24
    890e:	e2 0f       	add	r30, r18
    8910:	f3 1f       	adc	r31, r19
    8912:	80 81       	ld	r24, Z
    8914:	fe 01       	movw	r30, r28
    8916:	e9 5b       	subi	r30, 0xB9	; 185
    8918:	ff 4f       	sbci	r31, 0xFF	; 255
    891a:	60 e0       	ldi	r22, 0x00	; 0
    891c:	40 81       	ld	r20, Z
    891e:	0e 94 70 30 	call	0x60e0	; 0x60e0 <HEEPROM_WriteByte>
      {
        EEPROMDataLocation = UserLocation + LocalCounter;
        HEEPROM_WriteByte(ID[LocalCounter], 0, EEPROMDataLocation);
      }

      for (LocalCounter = 0; LocalCounter < PASSWORDLENGTH; LocalCounter++)
    8922:	de 01       	movw	r26, r28
    8924:	a8 5b       	subi	r26, 0xB8	; 184
    8926:	bf 4f       	sbci	r27, 0xFF	; 255
    8928:	fe 01       	movw	r30, r28
    892a:	e8 5b       	subi	r30, 0xB8	; 184
    892c:	ff 4f       	sbci	r31, 0xFF	; 255
    892e:	80 81       	ld	r24, Z
    8930:	8f 5f       	subi	r24, 0xFF	; 255
    8932:	8c 93       	st	X, r24
    8934:	fe 01       	movw	r30, r28
    8936:	e8 5b       	subi	r30, 0xB8	; 184
    8938:	ff 4f       	sbci	r31, 0xFF	; 255
    893a:	80 81       	ld	r24, Z
    893c:	84 30       	cpi	r24, 0x04	; 4
    893e:	68 f2       	brcs	.-102    	; 0x88da <AddUser+0x6a8>
      {
        EEPROMDataLocation = UserLocation + LocalCounter + IDLENGTH;
        HEEPROM_WriteByte(Password[LocalCounter], 0, EEPROMDataLocation);
      }
      NumberOfUsers++;
    8940:	de 01       	movw	r26, r28
    8942:	ae 5a       	subi	r26, 0xAE	; 174
    8944:	bf 4f       	sbci	r27, 0xFF	; 255
    8946:	fe 01       	movw	r30, r28
    8948:	ee 5a       	subi	r30, 0xAE	; 174
    894a:	ff 4f       	sbci	r31, 0xFF	; 255
    894c:	80 81       	ld	r24, Z
    894e:	8f 5f       	subi	r24, 0xFF	; 255
    8950:	8c 93       	st	X, r24
      HEEPROM_WriteByte(NumberOfUsers, 0, 100);
    8952:	fe 01       	movw	r30, r28
    8954:	ee 5a       	subi	r30, 0xAE	; 174
    8956:	ff 4f       	sbci	r31, 0xFF	; 255
    8958:	80 81       	ld	r24, Z
    895a:	60 e0       	ldi	r22, 0x00	; 0
    895c:	44 e6       	ldi	r20, 0x64	; 100
    895e:	0e 94 70 30 	call	0x60e0	; 0x60e0 <HEEPROM_WriteByte>
      HCLCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
    8962:	81 e0       	ldi	r24, 0x01	; 1
    8964:	0e 94 61 34 	call	0x68c2	; 0x68c2 <HCLCD_WriteCommand4Bit>
      HCLCD_SetCursorPosition(HCLCD_LINE_0,0);
    8968:	80 e0       	ldi	r24, 0x00	; 0
    896a:	60 e0       	ldi	r22, 0x00	; 0
    896c:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
      HCLCD_WriteString("User Added");
    8970:	81 eb       	ldi	r24, 0xB1	; 177
    8972:	91 e0       	ldi	r25, 0x01	; 1
    8974:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <HCLCD_WriteString>
      HHC05_SendString("User Added");
    8978:	81 eb       	ldi	r24, 0xB1	; 177
    897a:	91 e0       	ldi	r25, 0x01	; 1
    897c:	0e 94 29 30 	call	0x6052	; 0x6052 <HHC05_SendString>
      HCLCD_SetCursorPosition(HCLCD_LINE_1,0);
    8980:	81 e0       	ldi	r24, 0x01	; 1
    8982:	60 e0       	ldi	r22, 0x00	; 0
    8984:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
      HCLCD_WriteString("No of Users ");
    8988:	8c eb       	ldi	r24, 0xBC	; 188
    898a:	91 e0       	ldi	r25, 0x01	; 1
    898c:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <HCLCD_WriteString>
      HHC05_SendString("No of Users ");
    8990:	8c eb       	ldi	r24, 0xBC	; 188
    8992:	91 e0       	ldi	r25, 0x01	; 1
    8994:	0e 94 29 30 	call	0x6052	; 0x6052 <HHC05_SendString>
      HCLCD_WriteNumber(HEEPROM_ReadByte(0, 100));
    8998:	80 e0       	ldi	r24, 0x00	; 0
    899a:	64 e6       	ldi	r22, 0x64	; 100
    899c:	0e 94 4b 30 	call	0x6096	; 0x6096 <HEEPROM_ReadByte>
    89a0:	88 2f       	mov	r24, r24
    89a2:	90 e0       	ldi	r25, 0x00	; 0
    89a4:	a0 e0       	ldi	r26, 0x00	; 0
    89a6:	b0 e0       	ldi	r27, 0x00	; 0
    89a8:	bc 01       	movw	r22, r24
    89aa:	cd 01       	movw	r24, r26
    89ac:	0e 94 28 37 	call	0x6e50	; 0x6e50 <HCLCD_WriteNumber>
      HHC05_SendChar(HEEPROM_ReadByte(0, 100));
    89b0:	80 e0       	ldi	r24, 0x00	; 0
    89b2:	64 e6       	ldi	r22, 0x64	; 100
    89b4:	0e 94 4b 30 	call	0x6096	; 0x6096 <HEEPROM_ReadByte>
    89b8:	0e 94 1a 30 	call	0x6034	; 0x6034 <HHC05_SendChar>
    89bc:	80 e0       	ldi	r24, 0x00	; 0
    89be:	90 e0       	ldi	r25, 0x00	; 0
    89c0:	aa ef       	ldi	r26, 0xFA	; 250
    89c2:	b3 e4       	ldi	r27, 0x43	; 67
    89c4:	89 8f       	std	Y+25, r24	; 0x19
    89c6:	9a 8f       	std	Y+26, r25	; 0x1a
    89c8:	ab 8f       	std	Y+27, r26	; 0x1b
    89ca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    89cc:	69 8d       	ldd	r22, Y+25	; 0x19
    89ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    89d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    89d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    89d4:	20 e0       	ldi	r18, 0x00	; 0
    89d6:	30 e0       	ldi	r19, 0x00	; 0
    89d8:	4a e7       	ldi	r20, 0x7A	; 122
    89da:	55 e4       	ldi	r21, 0x45	; 69
    89dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    89e0:	dc 01       	movw	r26, r24
    89e2:	cb 01       	movw	r24, r22
    89e4:	8d 8b       	std	Y+21, r24	; 0x15
    89e6:	9e 8b       	std	Y+22, r25	; 0x16
    89e8:	af 8b       	std	Y+23, r26	; 0x17
    89ea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    89ec:	6d 89       	ldd	r22, Y+21	; 0x15
    89ee:	7e 89       	ldd	r23, Y+22	; 0x16
    89f0:	8f 89       	ldd	r24, Y+23	; 0x17
    89f2:	98 8d       	ldd	r25, Y+24	; 0x18
    89f4:	20 e0       	ldi	r18, 0x00	; 0
    89f6:	30 e0       	ldi	r19, 0x00	; 0
    89f8:	40 e8       	ldi	r20, 0x80	; 128
    89fa:	5f e3       	ldi	r21, 0x3F	; 63
    89fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    8a00:	88 23       	and	r24, r24
    8a02:	2c f4       	brge	.+10     	; 0x8a0e <AddUser+0x7dc>
		__ticks = 1;
    8a04:	81 e0       	ldi	r24, 0x01	; 1
    8a06:	90 e0       	ldi	r25, 0x00	; 0
    8a08:	9c 8b       	std	Y+20, r25	; 0x14
    8a0a:	8b 8b       	std	Y+19, r24	; 0x13
    8a0c:	3f c0       	rjmp	.+126    	; 0x8a8c <AddUser+0x85a>
	else if (__tmp > 65535)
    8a0e:	6d 89       	ldd	r22, Y+21	; 0x15
    8a10:	7e 89       	ldd	r23, Y+22	; 0x16
    8a12:	8f 89       	ldd	r24, Y+23	; 0x17
    8a14:	98 8d       	ldd	r25, Y+24	; 0x18
    8a16:	20 e0       	ldi	r18, 0x00	; 0
    8a18:	3f ef       	ldi	r19, 0xFF	; 255
    8a1a:	4f e7       	ldi	r20, 0x7F	; 127
    8a1c:	57 e4       	ldi	r21, 0x47	; 71
    8a1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    8a22:	18 16       	cp	r1, r24
    8a24:	4c f5       	brge	.+82     	; 0x8a78 <AddUser+0x846>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8a26:	69 8d       	ldd	r22, Y+25	; 0x19
    8a28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    8a2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    8a2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    8a2e:	20 e0       	ldi	r18, 0x00	; 0
    8a30:	30 e0       	ldi	r19, 0x00	; 0
    8a32:	40 e2       	ldi	r20, 0x20	; 32
    8a34:	51 e4       	ldi	r21, 0x41	; 65
    8a36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    8a3a:	dc 01       	movw	r26, r24
    8a3c:	cb 01       	movw	r24, r22
    8a3e:	bc 01       	movw	r22, r24
    8a40:	cd 01       	movw	r24, r26
    8a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    8a46:	dc 01       	movw	r26, r24
    8a48:	cb 01       	movw	r24, r22
    8a4a:	9c 8b       	std	Y+20, r25	; 0x14
    8a4c:	8b 8b       	std	Y+19, r24	; 0x13
    8a4e:	0f c0       	rjmp	.+30     	; 0x8a6e <AddUser+0x83c>
    8a50:	80 e9       	ldi	r24, 0x90	; 144
    8a52:	91 e0       	ldi	r25, 0x01	; 1
    8a54:	9a 8b       	std	Y+18, r25	; 0x12
    8a56:	89 8b       	std	Y+17, r24	; 0x11
    8a58:	89 89       	ldd	r24, Y+17	; 0x11
    8a5a:	9a 89       	ldd	r25, Y+18	; 0x12
    8a5c:	01 97       	sbiw	r24, 0x01	; 1
    8a5e:	f1 f7       	brne	.-4      	; 0x8a5c <AddUser+0x82a>
    8a60:	9a 8b       	std	Y+18, r25	; 0x12
    8a62:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8a64:	8b 89       	ldd	r24, Y+19	; 0x13
    8a66:	9c 89       	ldd	r25, Y+20	; 0x14
    8a68:	01 97       	sbiw	r24, 0x01	; 1
    8a6a:	9c 8b       	std	Y+20, r25	; 0x14
    8a6c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8a6e:	8b 89       	ldd	r24, Y+19	; 0x13
    8a70:	9c 89       	ldd	r25, Y+20	; 0x14
    8a72:	00 97       	sbiw	r24, 0x00	; 0
    8a74:	69 f7       	brne	.-38     	; 0x8a50 <AddUser+0x81e>
    8a76:	9e c0       	rjmp	.+316    	; 0x8bb4 <AddUser+0x982>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8a78:	6d 89       	ldd	r22, Y+21	; 0x15
    8a7a:	7e 89       	ldd	r23, Y+22	; 0x16
    8a7c:	8f 89       	ldd	r24, Y+23	; 0x17
    8a7e:	98 8d       	ldd	r25, Y+24	; 0x18
    8a80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    8a84:	dc 01       	movw	r26, r24
    8a86:	cb 01       	movw	r24, r22
    8a88:	9c 8b       	std	Y+20, r25	; 0x14
    8a8a:	8b 8b       	std	Y+19, r24	; 0x13
    8a8c:	8b 89       	ldd	r24, Y+19	; 0x13
    8a8e:	9c 89       	ldd	r25, Y+20	; 0x14
    8a90:	98 8b       	std	Y+16, r25	; 0x10
    8a92:	8f 87       	std	Y+15, r24	; 0x0f
    8a94:	8f 85       	ldd	r24, Y+15	; 0x0f
    8a96:	98 89       	ldd	r25, Y+16	; 0x10
    8a98:	01 97       	sbiw	r24, 0x01	; 1
    8a9a:	f1 f7       	brne	.-4      	; 0x8a98 <AddUser+0x866>
    8a9c:	98 8b       	std	Y+16, r25	; 0x10
    8a9e:	8f 87       	std	Y+15, r24	; 0x0f
    8aa0:	89 c0       	rjmp	.+274    	; 0x8bb4 <AddUser+0x982>
      _delay_ms(500);
    }
  }
  else
  {
    HCLCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
    8aa2:	81 e0       	ldi	r24, 0x01	; 1
    8aa4:	0e 94 61 34 	call	0x68c2	; 0x68c2 <HCLCD_WriteCommand4Bit>
    HCLCD_SetCursorPosition(HCLCD_LINE_0,0);
    8aa8:	80 e0       	ldi	r24, 0x00	; 0
    8aaa:	60 e0       	ldi	r22, 0x00	; 0
    8aac:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
    HCLCD_WriteString("Max Users");
    8ab0:	89 ec       	ldi	r24, 0xC9	; 201
    8ab2:	91 e0       	ldi	r25, 0x01	; 1
    8ab4:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <HCLCD_WriteString>
    HCLCD_SetCursorPosition(HCLCD_LINE_1,0);
    8ab8:	81 e0       	ldi	r24, 0x01	; 1
    8aba:	60 e0       	ldi	r22, 0x00	; 0
    8abc:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
    HCLCD_WriteString("Number Reached!");
    8ac0:	83 ed       	ldi	r24, 0xD3	; 211
    8ac2:	91 e0       	ldi	r25, 0x01	; 1
    8ac4:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <HCLCD_WriteString>
    HHC05_SendString("Max users Number Reached!");
    8ac8:	83 ee       	ldi	r24, 0xE3	; 227
    8aca:	91 e0       	ldi	r25, 0x01	; 1
    8acc:	0e 94 29 30 	call	0x6052	; 0x6052 <HHC05_SendString>
    8ad0:	80 e0       	ldi	r24, 0x00	; 0
    8ad2:	90 e0       	ldi	r25, 0x00	; 0
    8ad4:	aa ef       	ldi	r26, 0xFA	; 250
    8ad6:	b3 e4       	ldi	r27, 0x43	; 67
    8ad8:	8b 87       	std	Y+11, r24	; 0x0b
    8ada:	9c 87       	std	Y+12, r25	; 0x0c
    8adc:	ad 87       	std	Y+13, r26	; 0x0d
    8ade:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    8ae0:	6b 85       	ldd	r22, Y+11	; 0x0b
    8ae2:	7c 85       	ldd	r23, Y+12	; 0x0c
    8ae4:	8d 85       	ldd	r24, Y+13	; 0x0d
    8ae6:	9e 85       	ldd	r25, Y+14	; 0x0e
    8ae8:	20 e0       	ldi	r18, 0x00	; 0
    8aea:	30 e0       	ldi	r19, 0x00	; 0
    8aec:	4a e7       	ldi	r20, 0x7A	; 122
    8aee:	55 e4       	ldi	r21, 0x45	; 69
    8af0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    8af4:	dc 01       	movw	r26, r24
    8af6:	cb 01       	movw	r24, r22
    8af8:	8f 83       	std	Y+7, r24	; 0x07
    8afa:	98 87       	std	Y+8, r25	; 0x08
    8afc:	a9 87       	std	Y+9, r26	; 0x09
    8afe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    8b00:	6f 81       	ldd	r22, Y+7	; 0x07
    8b02:	78 85       	ldd	r23, Y+8	; 0x08
    8b04:	89 85       	ldd	r24, Y+9	; 0x09
    8b06:	9a 85       	ldd	r25, Y+10	; 0x0a
    8b08:	20 e0       	ldi	r18, 0x00	; 0
    8b0a:	30 e0       	ldi	r19, 0x00	; 0
    8b0c:	40 e8       	ldi	r20, 0x80	; 128
    8b0e:	5f e3       	ldi	r21, 0x3F	; 63
    8b10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    8b14:	88 23       	and	r24, r24
    8b16:	2c f4       	brge	.+10     	; 0x8b22 <AddUser+0x8f0>
		__ticks = 1;
    8b18:	81 e0       	ldi	r24, 0x01	; 1
    8b1a:	90 e0       	ldi	r25, 0x00	; 0
    8b1c:	9e 83       	std	Y+6, r25	; 0x06
    8b1e:	8d 83       	std	Y+5, r24	; 0x05
    8b20:	3f c0       	rjmp	.+126    	; 0x8ba0 <AddUser+0x96e>
	else if (__tmp > 65535)
    8b22:	6f 81       	ldd	r22, Y+7	; 0x07
    8b24:	78 85       	ldd	r23, Y+8	; 0x08
    8b26:	89 85       	ldd	r24, Y+9	; 0x09
    8b28:	9a 85       	ldd	r25, Y+10	; 0x0a
    8b2a:	20 e0       	ldi	r18, 0x00	; 0
    8b2c:	3f ef       	ldi	r19, 0xFF	; 255
    8b2e:	4f e7       	ldi	r20, 0x7F	; 127
    8b30:	57 e4       	ldi	r21, 0x47	; 71
    8b32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    8b36:	18 16       	cp	r1, r24
    8b38:	4c f5       	brge	.+82     	; 0x8b8c <AddUser+0x95a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8b3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    8b3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    8b3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    8b40:	9e 85       	ldd	r25, Y+14	; 0x0e
    8b42:	20 e0       	ldi	r18, 0x00	; 0
    8b44:	30 e0       	ldi	r19, 0x00	; 0
    8b46:	40 e2       	ldi	r20, 0x20	; 32
    8b48:	51 e4       	ldi	r21, 0x41	; 65
    8b4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    8b4e:	dc 01       	movw	r26, r24
    8b50:	cb 01       	movw	r24, r22
    8b52:	bc 01       	movw	r22, r24
    8b54:	cd 01       	movw	r24, r26
    8b56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    8b5a:	dc 01       	movw	r26, r24
    8b5c:	cb 01       	movw	r24, r22
    8b5e:	9e 83       	std	Y+6, r25	; 0x06
    8b60:	8d 83       	std	Y+5, r24	; 0x05
    8b62:	0f c0       	rjmp	.+30     	; 0x8b82 <AddUser+0x950>
    8b64:	80 e9       	ldi	r24, 0x90	; 144
    8b66:	91 e0       	ldi	r25, 0x01	; 1
    8b68:	9c 83       	std	Y+4, r25	; 0x04
    8b6a:	8b 83       	std	Y+3, r24	; 0x03
    8b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    8b6e:	9c 81       	ldd	r25, Y+4	; 0x04
    8b70:	01 97       	sbiw	r24, 0x01	; 1
    8b72:	f1 f7       	brne	.-4      	; 0x8b70 <AddUser+0x93e>
    8b74:	9c 83       	std	Y+4, r25	; 0x04
    8b76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8b78:	8d 81       	ldd	r24, Y+5	; 0x05
    8b7a:	9e 81       	ldd	r25, Y+6	; 0x06
    8b7c:	01 97       	sbiw	r24, 0x01	; 1
    8b7e:	9e 83       	std	Y+6, r25	; 0x06
    8b80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8b82:	8d 81       	ldd	r24, Y+5	; 0x05
    8b84:	9e 81       	ldd	r25, Y+6	; 0x06
    8b86:	00 97       	sbiw	r24, 0x00	; 0
    8b88:	69 f7       	brne	.-38     	; 0x8b64 <AddUser+0x932>
    8b8a:	14 c0       	rjmp	.+40     	; 0x8bb4 <AddUser+0x982>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8b8c:	6f 81       	ldd	r22, Y+7	; 0x07
    8b8e:	78 85       	ldd	r23, Y+8	; 0x08
    8b90:	89 85       	ldd	r24, Y+9	; 0x09
    8b92:	9a 85       	ldd	r25, Y+10	; 0x0a
    8b94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    8b98:	dc 01       	movw	r26, r24
    8b9a:	cb 01       	movw	r24, r22
    8b9c:	9e 83       	std	Y+6, r25	; 0x06
    8b9e:	8d 83       	std	Y+5, r24	; 0x05
    8ba0:	8d 81       	ldd	r24, Y+5	; 0x05
    8ba2:	9e 81       	ldd	r25, Y+6	; 0x06
    8ba4:	9a 83       	std	Y+2, r25	; 0x02
    8ba6:	89 83       	std	Y+1, r24	; 0x01
    8ba8:	89 81       	ldd	r24, Y+1	; 0x01
    8baa:	9a 81       	ldd	r25, Y+2	; 0x02
    8bac:	01 97       	sbiw	r24, 0x01	; 1
    8bae:	f1 f7       	brne	.-4      	; 0x8bac <AddUser+0x97a>
    8bb0:	9a 83       	std	Y+2, r25	; 0x02
    8bb2:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(500);
  }
}
    8bb4:	ca 5a       	subi	r28, 0xAA	; 170
    8bb6:	df 4f       	sbci	r29, 0xFF	; 255
    8bb8:	0f b6       	in	r0, 0x3f	; 63
    8bba:	f8 94       	cli
    8bbc:	de bf       	out	0x3e, r29	; 62
    8bbe:	0f be       	out	0x3f, r0	; 63
    8bc0:	cd bf       	out	0x3d, r28	; 61
    8bc2:	cf 91       	pop	r28
    8bc4:	df 91       	pop	r29
    8bc6:	1f 91       	pop	r17
    8bc8:	0f 91       	pop	r16
    8bca:	08 95       	ret

00008bcc <DeleteUser>:
void DeleteUser (u8 NumberOfUsers, u8* ID)
{
    8bcc:	df 93       	push	r29
    8bce:	cf 93       	push	r28
    8bd0:	cd b7       	in	r28, 0x3d	; 61
    8bd2:	de b7       	in	r29, 0x3e	; 62
    8bd4:	a8 97       	sbiw	r28, 0x28	; 40
    8bd6:	0f b6       	in	r0, 0x3f	; 63
    8bd8:	f8 94       	cli
    8bda:	de bf       	out	0x3e, r29	; 62
    8bdc:	0f be       	out	0x3f, r0	; 63
    8bde:	cd bf       	out	0x3d, r28	; 61
    8be0:	8e a3       	std	Y+38, r24	; 0x26
    8be2:	78 a7       	std	Y+40, r23	; 0x28
    8be4:	6f a3       	std	Y+39, r22	; 0x27
    8be6:	80 e0       	ldi	r24, 0x00	; 0
    8be8:	90 e0       	ldi	r25, 0x00	; 0
    8bea:	a8 ec       	ldi	r26, 0xC8	; 200
    8bec:	b2 e4       	ldi	r27, 0x42	; 66
    8bee:	89 8f       	std	Y+25, r24	; 0x19
    8bf0:	9a 8f       	std	Y+26, r25	; 0x1a
    8bf2:	ab 8f       	std	Y+27, r26	; 0x1b
    8bf4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    8bf6:	69 8d       	ldd	r22, Y+25	; 0x19
    8bf8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    8bfa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    8bfc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    8bfe:	20 e0       	ldi	r18, 0x00	; 0
    8c00:	30 e0       	ldi	r19, 0x00	; 0
    8c02:	4a e7       	ldi	r20, 0x7A	; 122
    8c04:	55 e4       	ldi	r21, 0x45	; 69
    8c06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    8c0a:	dc 01       	movw	r26, r24
    8c0c:	cb 01       	movw	r24, r22
    8c0e:	8d 8b       	std	Y+21, r24	; 0x15
    8c10:	9e 8b       	std	Y+22, r25	; 0x16
    8c12:	af 8b       	std	Y+23, r26	; 0x17
    8c14:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    8c16:	6d 89       	ldd	r22, Y+21	; 0x15
    8c18:	7e 89       	ldd	r23, Y+22	; 0x16
    8c1a:	8f 89       	ldd	r24, Y+23	; 0x17
    8c1c:	98 8d       	ldd	r25, Y+24	; 0x18
    8c1e:	20 e0       	ldi	r18, 0x00	; 0
    8c20:	30 e0       	ldi	r19, 0x00	; 0
    8c22:	40 e8       	ldi	r20, 0x80	; 128
    8c24:	5f e3       	ldi	r21, 0x3F	; 63
    8c26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    8c2a:	88 23       	and	r24, r24
    8c2c:	2c f4       	brge	.+10     	; 0x8c38 <DeleteUser+0x6c>
		__ticks = 1;
    8c2e:	81 e0       	ldi	r24, 0x01	; 1
    8c30:	90 e0       	ldi	r25, 0x00	; 0
    8c32:	9c 8b       	std	Y+20, r25	; 0x14
    8c34:	8b 8b       	std	Y+19, r24	; 0x13
    8c36:	3f c0       	rjmp	.+126    	; 0x8cb6 <DeleteUser+0xea>
	else if (__tmp > 65535)
    8c38:	6d 89       	ldd	r22, Y+21	; 0x15
    8c3a:	7e 89       	ldd	r23, Y+22	; 0x16
    8c3c:	8f 89       	ldd	r24, Y+23	; 0x17
    8c3e:	98 8d       	ldd	r25, Y+24	; 0x18
    8c40:	20 e0       	ldi	r18, 0x00	; 0
    8c42:	3f ef       	ldi	r19, 0xFF	; 255
    8c44:	4f e7       	ldi	r20, 0x7F	; 127
    8c46:	57 e4       	ldi	r21, 0x47	; 71
    8c48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    8c4c:	18 16       	cp	r1, r24
    8c4e:	4c f5       	brge	.+82     	; 0x8ca2 <DeleteUser+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8c50:	69 8d       	ldd	r22, Y+25	; 0x19
    8c52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    8c54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    8c56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    8c58:	20 e0       	ldi	r18, 0x00	; 0
    8c5a:	30 e0       	ldi	r19, 0x00	; 0
    8c5c:	40 e2       	ldi	r20, 0x20	; 32
    8c5e:	51 e4       	ldi	r21, 0x41	; 65
    8c60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    8c64:	dc 01       	movw	r26, r24
    8c66:	cb 01       	movw	r24, r22
    8c68:	bc 01       	movw	r22, r24
    8c6a:	cd 01       	movw	r24, r26
    8c6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    8c70:	dc 01       	movw	r26, r24
    8c72:	cb 01       	movw	r24, r22
    8c74:	9c 8b       	std	Y+20, r25	; 0x14
    8c76:	8b 8b       	std	Y+19, r24	; 0x13
    8c78:	0f c0       	rjmp	.+30     	; 0x8c98 <DeleteUser+0xcc>
    8c7a:	80 e9       	ldi	r24, 0x90	; 144
    8c7c:	91 e0       	ldi	r25, 0x01	; 1
    8c7e:	9a 8b       	std	Y+18, r25	; 0x12
    8c80:	89 8b       	std	Y+17, r24	; 0x11
    8c82:	89 89       	ldd	r24, Y+17	; 0x11
    8c84:	9a 89       	ldd	r25, Y+18	; 0x12
    8c86:	01 97       	sbiw	r24, 0x01	; 1
    8c88:	f1 f7       	brne	.-4      	; 0x8c86 <DeleteUser+0xba>
    8c8a:	9a 8b       	std	Y+18, r25	; 0x12
    8c8c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8c8e:	8b 89       	ldd	r24, Y+19	; 0x13
    8c90:	9c 89       	ldd	r25, Y+20	; 0x14
    8c92:	01 97       	sbiw	r24, 0x01	; 1
    8c94:	9c 8b       	std	Y+20, r25	; 0x14
    8c96:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8c98:	8b 89       	ldd	r24, Y+19	; 0x13
    8c9a:	9c 89       	ldd	r25, Y+20	; 0x14
    8c9c:	00 97       	sbiw	r24, 0x00	; 0
    8c9e:	69 f7       	brne	.-38     	; 0x8c7a <DeleteUser+0xae>
    8ca0:	14 c0       	rjmp	.+40     	; 0x8cca <DeleteUser+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8ca2:	6d 89       	ldd	r22, Y+21	; 0x15
    8ca4:	7e 89       	ldd	r23, Y+22	; 0x16
    8ca6:	8f 89       	ldd	r24, Y+23	; 0x17
    8ca8:	98 8d       	ldd	r25, Y+24	; 0x18
    8caa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    8cae:	dc 01       	movw	r26, r24
    8cb0:	cb 01       	movw	r24, r22
    8cb2:	9c 8b       	std	Y+20, r25	; 0x14
    8cb4:	8b 8b       	std	Y+19, r24	; 0x13
    8cb6:	8b 89       	ldd	r24, Y+19	; 0x13
    8cb8:	9c 89       	ldd	r25, Y+20	; 0x14
    8cba:	98 8b       	std	Y+16, r25	; 0x10
    8cbc:	8f 87       	std	Y+15, r24	; 0x0f
    8cbe:	8f 85       	ldd	r24, Y+15	; 0x0f
    8cc0:	98 89       	ldd	r25, Y+16	; 0x10
    8cc2:	01 97       	sbiw	r24, 0x01	; 1
    8cc4:	f1 f7       	brne	.-4      	; 0x8cc2 <DeleteUser+0xf6>
    8cc6:	98 8b       	std	Y+16, r25	; 0x10
    8cc8:	8f 87       	std	Y+15, r24	; 0x0f
  _delay_ms(100);
  HCLCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
    8cca:	81 e0       	ldi	r24, 0x01	; 1
    8ccc:	0e 94 61 34 	call	0x68c2	; 0x68c2 <HCLCD_WriteCommand4Bit>
  HCLCD_SetCursorPosition(HCLCD_LINE_0,0);
    8cd0:	80 e0       	ldi	r24, 0x00	; 0
    8cd2:	60 e0       	ldi	r22, 0x00	; 0
    8cd4:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
  if (NumberOfUsers > 0)
    8cd8:	8e a1       	ldd	r24, Y+38	; 0x26
    8cda:	88 23       	and	r24, r24
    8cdc:	09 f4       	brne	.+2      	; 0x8ce0 <DeleteUser+0x114>
    8cde:	ff c0       	rjmp	.+510    	; 0x8ede <DeleteUser+0x312>
  {
    u8 LocalCounter = 0, UserLocation  = 0, Accurate = 0;
    8ce0:	1d a2       	std	Y+37, r1	; 0x25
    8ce2:	1c a2       	std	Y+36, r1	; 0x24
    8ce4:	1b a2       	std	Y+35, r1	; 0x23
    8ce6:	eb c0       	rjmp	.+470    	; 0x8ebe <DeleteUser+0x2f2>

    for (; LocalCounter < NumberOfUsers; LocalCounter++)
    {
      UserLocation = (LocalCounter * 7);
    8ce8:	8d a1       	ldd	r24, Y+37	; 0x25
    8cea:	28 2f       	mov	r18, r24
    8cec:	30 e0       	ldi	r19, 0x00	; 0
    8cee:	c9 01       	movw	r24, r18
    8cf0:	88 0f       	add	r24, r24
    8cf2:	99 1f       	adc	r25, r25
    8cf4:	88 0f       	add	r24, r24
    8cf6:	99 1f       	adc	r25, r25
    8cf8:	88 0f       	add	r24, r24
    8cfa:	99 1f       	adc	r25, r25
    8cfc:	82 1b       	sub	r24, r18
    8cfe:	93 0b       	sbc	r25, r19
    8d00:	8c a3       	std	Y+36, r24	; 0x24
      u8 LocalCounter = 0, EEPROMData = 0, EEPROMDataLocation = 0, ValidEntries = 0;
    8d02:	1a a2       	std	Y+34, r1	; 0x22
    8d04:	19 a2       	std	Y+33, r1	; 0x21
    8d06:	18 a2       	std	Y+32, r1	; 0x20
    8d08:	1f 8e       	std	Y+31, r1	; 0x1f
    8d0a:	1b c0       	rjmp	.+54     	; 0x8d42 <DeleteUser+0x176>

      for (; LocalCounter < 3; LocalCounter++)
      {
        EEPROMDataLocation = UserLocation + LocalCounter;
    8d0c:	9c a1       	ldd	r25, Y+36	; 0x24
    8d0e:	8a a1       	ldd	r24, Y+34	; 0x22
    8d10:	89 0f       	add	r24, r25
    8d12:	88 a3       	std	Y+32, r24	; 0x20
        EEPROMData = HEEPROM_ReadByte(0,EEPROMDataLocation);
    8d14:	80 e0       	ldi	r24, 0x00	; 0
    8d16:	68 a1       	ldd	r22, Y+32	; 0x20
    8d18:	0e 94 4b 30 	call	0x6096	; 0x6096 <HEEPROM_ReadByte>
    8d1c:	89 a3       	std	Y+33, r24	; 0x21
        if (ID[LocalCounter] == EEPROMData )
    8d1e:	8a a1       	ldd	r24, Y+34	; 0x22
    8d20:	28 2f       	mov	r18, r24
    8d22:	30 e0       	ldi	r19, 0x00	; 0
    8d24:	8f a1       	ldd	r24, Y+39	; 0x27
    8d26:	98 a5       	ldd	r25, Y+40	; 0x28
    8d28:	fc 01       	movw	r30, r24
    8d2a:	e2 0f       	add	r30, r18
    8d2c:	f3 1f       	adc	r31, r19
    8d2e:	90 81       	ld	r25, Z
    8d30:	89 a1       	ldd	r24, Y+33	; 0x21
    8d32:	98 17       	cp	r25, r24
    8d34:	19 f4       	brne	.+6      	; 0x8d3c <DeleteUser+0x170>
        {
          ValidEntries++;
    8d36:	8f 8d       	ldd	r24, Y+31	; 0x1f
    8d38:	8f 5f       	subi	r24, 0xFF	; 255
    8d3a:	8f 8f       	std	Y+31, r24	; 0x1f
    for (; LocalCounter < NumberOfUsers; LocalCounter++)
    {
      UserLocation = (LocalCounter * 7);
      u8 LocalCounter = 0, EEPROMData = 0, EEPROMDataLocation = 0, ValidEntries = 0;

      for (; LocalCounter < 3; LocalCounter++)
    8d3c:	8a a1       	ldd	r24, Y+34	; 0x22
    8d3e:	8f 5f       	subi	r24, 0xFF	; 255
    8d40:	8a a3       	std	Y+34, r24	; 0x22
    8d42:	8a a1       	ldd	r24, Y+34	; 0x22
    8d44:	83 30       	cpi	r24, 0x03	; 3
    8d46:	10 f3       	brcs	.-60     	; 0x8d0c <DeleteUser+0x140>
          ValidEntries++;
        }

      }

      if (ValidEntries == 3)
    8d48:	8f 8d       	ldd	r24, Y+31	; 0x1f
    8d4a:	83 30       	cpi	r24, 0x03	; 3
    8d4c:	09 f0       	breq	.+2      	; 0x8d50 <DeleteUser+0x184>
    8d4e:	7d c0       	rjmp	.+250    	; 0x8e4a <DeleteUser+0x27e>
      {
        HCLCD_WriteString("Valid UserName");
    8d50:	8d ef       	ldi	r24, 0xFD	; 253
    8d52:	91 e0       	ldi	r25, 0x01	; 1
    8d54:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <HCLCD_WriteString>
        HHC05_SendString("Valid UserName");
    8d58:	8d ef       	ldi	r24, 0xFD	; 253
    8d5a:	91 e0       	ldi	r25, 0x01	; 1
    8d5c:	0e 94 29 30 	call	0x6052	; 0x6052 <HHC05_SendString>
    8d60:	80 e0       	ldi	r24, 0x00	; 0
    8d62:	90 e0       	ldi	r25, 0x00	; 0
    8d64:	a8 e4       	ldi	r26, 0x48	; 72
    8d66:	b3 e4       	ldi	r27, 0x43	; 67
    8d68:	8b 87       	std	Y+11, r24	; 0x0b
    8d6a:	9c 87       	std	Y+12, r25	; 0x0c
    8d6c:	ad 87       	std	Y+13, r26	; 0x0d
    8d6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    8d70:	6b 85       	ldd	r22, Y+11	; 0x0b
    8d72:	7c 85       	ldd	r23, Y+12	; 0x0c
    8d74:	8d 85       	ldd	r24, Y+13	; 0x0d
    8d76:	9e 85       	ldd	r25, Y+14	; 0x0e
    8d78:	20 e0       	ldi	r18, 0x00	; 0
    8d7a:	30 e0       	ldi	r19, 0x00	; 0
    8d7c:	4a e7       	ldi	r20, 0x7A	; 122
    8d7e:	55 e4       	ldi	r21, 0x45	; 69
    8d80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    8d84:	dc 01       	movw	r26, r24
    8d86:	cb 01       	movw	r24, r22
    8d88:	8f 83       	std	Y+7, r24	; 0x07
    8d8a:	98 87       	std	Y+8, r25	; 0x08
    8d8c:	a9 87       	std	Y+9, r26	; 0x09
    8d8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    8d90:	6f 81       	ldd	r22, Y+7	; 0x07
    8d92:	78 85       	ldd	r23, Y+8	; 0x08
    8d94:	89 85       	ldd	r24, Y+9	; 0x09
    8d96:	9a 85       	ldd	r25, Y+10	; 0x0a
    8d98:	20 e0       	ldi	r18, 0x00	; 0
    8d9a:	30 e0       	ldi	r19, 0x00	; 0
    8d9c:	40 e8       	ldi	r20, 0x80	; 128
    8d9e:	5f e3       	ldi	r21, 0x3F	; 63
    8da0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    8da4:	88 23       	and	r24, r24
    8da6:	2c f4       	brge	.+10     	; 0x8db2 <DeleteUser+0x1e6>
		__ticks = 1;
    8da8:	81 e0       	ldi	r24, 0x01	; 1
    8daa:	90 e0       	ldi	r25, 0x00	; 0
    8dac:	9e 83       	std	Y+6, r25	; 0x06
    8dae:	8d 83       	std	Y+5, r24	; 0x05
    8db0:	3f c0       	rjmp	.+126    	; 0x8e30 <DeleteUser+0x264>
	else if (__tmp > 65535)
    8db2:	6f 81       	ldd	r22, Y+7	; 0x07
    8db4:	78 85       	ldd	r23, Y+8	; 0x08
    8db6:	89 85       	ldd	r24, Y+9	; 0x09
    8db8:	9a 85       	ldd	r25, Y+10	; 0x0a
    8dba:	20 e0       	ldi	r18, 0x00	; 0
    8dbc:	3f ef       	ldi	r19, 0xFF	; 255
    8dbe:	4f e7       	ldi	r20, 0x7F	; 127
    8dc0:	57 e4       	ldi	r21, 0x47	; 71
    8dc2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    8dc6:	18 16       	cp	r1, r24
    8dc8:	4c f5       	brge	.+82     	; 0x8e1c <DeleteUser+0x250>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8dca:	6b 85       	ldd	r22, Y+11	; 0x0b
    8dcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    8dce:	8d 85       	ldd	r24, Y+13	; 0x0d
    8dd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    8dd2:	20 e0       	ldi	r18, 0x00	; 0
    8dd4:	30 e0       	ldi	r19, 0x00	; 0
    8dd6:	40 e2       	ldi	r20, 0x20	; 32
    8dd8:	51 e4       	ldi	r21, 0x41	; 65
    8dda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    8dde:	dc 01       	movw	r26, r24
    8de0:	cb 01       	movw	r24, r22
    8de2:	bc 01       	movw	r22, r24
    8de4:	cd 01       	movw	r24, r26
    8de6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    8dea:	dc 01       	movw	r26, r24
    8dec:	cb 01       	movw	r24, r22
    8dee:	9e 83       	std	Y+6, r25	; 0x06
    8df0:	8d 83       	std	Y+5, r24	; 0x05
    8df2:	0f c0       	rjmp	.+30     	; 0x8e12 <DeleteUser+0x246>
    8df4:	80 e9       	ldi	r24, 0x90	; 144
    8df6:	91 e0       	ldi	r25, 0x01	; 1
    8df8:	9c 83       	std	Y+4, r25	; 0x04
    8dfa:	8b 83       	std	Y+3, r24	; 0x03
    8dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    8dfe:	9c 81       	ldd	r25, Y+4	; 0x04
    8e00:	01 97       	sbiw	r24, 0x01	; 1
    8e02:	f1 f7       	brne	.-4      	; 0x8e00 <DeleteUser+0x234>
    8e04:	9c 83       	std	Y+4, r25	; 0x04
    8e06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8e08:	8d 81       	ldd	r24, Y+5	; 0x05
    8e0a:	9e 81       	ldd	r25, Y+6	; 0x06
    8e0c:	01 97       	sbiw	r24, 0x01	; 1
    8e0e:	9e 83       	std	Y+6, r25	; 0x06
    8e10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8e12:	8d 81       	ldd	r24, Y+5	; 0x05
    8e14:	9e 81       	ldd	r25, Y+6	; 0x06
    8e16:	00 97       	sbiw	r24, 0x00	; 0
    8e18:	69 f7       	brne	.-38     	; 0x8df4 <DeleteUser+0x228>
    8e1a:	14 c0       	rjmp	.+40     	; 0x8e44 <DeleteUser+0x278>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8e1c:	6f 81       	ldd	r22, Y+7	; 0x07
    8e1e:	78 85       	ldd	r23, Y+8	; 0x08
    8e20:	89 85       	ldd	r24, Y+9	; 0x09
    8e22:	9a 85       	ldd	r25, Y+10	; 0x0a
    8e24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    8e28:	dc 01       	movw	r26, r24
    8e2a:	cb 01       	movw	r24, r22
    8e2c:	9e 83       	std	Y+6, r25	; 0x06
    8e2e:	8d 83       	std	Y+5, r24	; 0x05
    8e30:	8d 81       	ldd	r24, Y+5	; 0x05
    8e32:	9e 81       	ldd	r25, Y+6	; 0x06
    8e34:	9a 83       	std	Y+2, r25	; 0x02
    8e36:	89 83       	std	Y+1, r24	; 0x01
    8e38:	89 81       	ldd	r24, Y+1	; 0x01
    8e3a:	9a 81       	ldd	r25, Y+2	; 0x02
    8e3c:	01 97       	sbiw	r24, 0x01	; 1
    8e3e:	f1 f7       	brne	.-4      	; 0x8e3c <DeleteUser+0x270>
    8e40:	9a 83       	std	Y+2, r25	; 0x02
    8e42:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(200);
        Accurate ++;
    8e44:	8b a1       	ldd	r24, Y+35	; 0x23
    8e46:	8f 5f       	subi	r24, 0xFF	; 255
    8e48:	8b a3       	std	Y+35, r24	; 0x23

      }
      if (Accurate == 1)
    8e4a:	8b a1       	ldd	r24, Y+35	; 0x23
    8e4c:	81 30       	cpi	r24, 0x01	; 1
    8e4e:	a1 f5       	brne	.+104    	; 0x8eb8 <DeleteUser+0x2ec>
      {
        u8 LocalCounter = 0, EEPROMDataLocation = 0;
    8e50:	1e 8e       	std	Y+30, r1	; 0x1e
    8e52:	1d 8e       	std	Y+29, r1	; 0x1d
    8e54:	14 c0       	rjmp	.+40     	; 0x8e7e <DeleteUser+0x2b2>
        for (; LocalCounter < IDLENGTH; LocalCounter++)
        {
          EEPROMDataLocation = UserLocation + LocalCounter;
    8e56:	9c a1       	ldd	r25, Y+36	; 0x24
    8e58:	8e 8d       	ldd	r24, Y+30	; 0x1e
    8e5a:	89 0f       	add	r24, r25
    8e5c:	8d 8f       	std	Y+29, r24	; 0x1d
          EEPROMData = HEEPROM_ReadByte(0, (EEPROMDataLocation + 7));
    8e5e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    8e60:	98 2f       	mov	r25, r24
    8e62:	99 5f       	subi	r25, 0xF9	; 249
    8e64:	80 e0       	ldi	r24, 0x00	; 0
    8e66:	69 2f       	mov	r22, r25
    8e68:	0e 94 4b 30 	call	0x6096	; 0x6096 <HEEPROM_ReadByte>
    8e6c:	89 a3       	std	Y+33, r24	; 0x21
          HEEPROM_WriteByte(EEPROMData, 0, EEPROMDataLocation);
    8e6e:	89 a1       	ldd	r24, Y+33	; 0x21
    8e70:	60 e0       	ldi	r22, 0x00	; 0
    8e72:	4d 8d       	ldd	r20, Y+29	; 0x1d
    8e74:	0e 94 70 30 	call	0x60e0	; 0x60e0 <HEEPROM_WriteByte>

      }
      if (Accurate == 1)
      {
        u8 LocalCounter = 0, EEPROMDataLocation = 0;
        for (; LocalCounter < IDLENGTH; LocalCounter++)
    8e78:	8e 8d       	ldd	r24, Y+30	; 0x1e
    8e7a:	8f 5f       	subi	r24, 0xFF	; 255
    8e7c:	8e 8f       	std	Y+30, r24	; 0x1e
    8e7e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    8e80:	83 30       	cpi	r24, 0x03	; 3
    8e82:	48 f3       	brcs	.-46     	; 0x8e56 <DeleteUser+0x28a>
        {
          EEPROMDataLocation = UserLocation + LocalCounter;
          EEPROMData = HEEPROM_ReadByte(0, (EEPROMDataLocation + 7));
          HEEPROM_WriteByte(EEPROMData, 0, EEPROMDataLocation);
        }
        LocalCounter = 0;
    8e84:	1e 8e       	std	Y+30, r1	; 0x1e
    8e86:	15 c0       	rjmp	.+42     	; 0x8eb2 <DeleteUser+0x2e6>
        for (; LocalCounter < PASSWORDLENGTH; LocalCounter++)
        {
          EEPROMDataLocation = UserLocation + LocalCounter + IDLENGTH;
    8e88:	9c a1       	ldd	r25, Y+36	; 0x24
    8e8a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    8e8c:	89 0f       	add	r24, r25
    8e8e:	8d 5f       	subi	r24, 0xFD	; 253
    8e90:	8d 8f       	std	Y+29, r24	; 0x1d
          EEPROMData = HEEPROM_ReadByte(0, (EEPROMDataLocation + 7));
    8e92:	8d 8d       	ldd	r24, Y+29	; 0x1d
    8e94:	98 2f       	mov	r25, r24
    8e96:	99 5f       	subi	r25, 0xF9	; 249
    8e98:	80 e0       	ldi	r24, 0x00	; 0
    8e9a:	69 2f       	mov	r22, r25
    8e9c:	0e 94 4b 30 	call	0x6096	; 0x6096 <HEEPROM_ReadByte>
    8ea0:	89 a3       	std	Y+33, r24	; 0x21
          HEEPROM_WriteByte(EEPROMData, 0, EEPROMDataLocation);
    8ea2:	89 a1       	ldd	r24, Y+33	; 0x21
    8ea4:	60 e0       	ldi	r22, 0x00	; 0
    8ea6:	4d 8d       	ldd	r20, Y+29	; 0x1d
    8ea8:	0e 94 70 30 	call	0x60e0	; 0x60e0 <HEEPROM_WriteByte>
          EEPROMDataLocation = UserLocation + LocalCounter;
          EEPROMData = HEEPROM_ReadByte(0, (EEPROMDataLocation + 7));
          HEEPROM_WriteByte(EEPROMData, 0, EEPROMDataLocation);
        }
        LocalCounter = 0;
        for (; LocalCounter < PASSWORDLENGTH; LocalCounter++)
    8eac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    8eae:	8f 5f       	subi	r24, 0xFF	; 255
    8eb0:	8e 8f       	std	Y+30, r24	; 0x1e
    8eb2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    8eb4:	84 30       	cpi	r24, 0x04	; 4
    8eb6:	40 f3       	brcs	.-48     	; 0x8e88 <DeleteUser+0x2bc>
  HCLCD_SetCursorPosition(HCLCD_LINE_0,0);
  if (NumberOfUsers > 0)
  {
    u8 LocalCounter = 0, UserLocation  = 0, Accurate = 0;

    for (; LocalCounter < NumberOfUsers; LocalCounter++)
    8eb8:	8d a1       	ldd	r24, Y+37	; 0x25
    8eba:	8f 5f       	subi	r24, 0xFF	; 255
    8ebc:	8d a3       	std	Y+37, r24	; 0x25
    8ebe:	9d a1       	ldd	r25, Y+37	; 0x25
    8ec0:	8e a1       	ldd	r24, Y+38	; 0x26
    8ec2:	98 17       	cp	r25, r24
    8ec4:	08 f4       	brcc	.+2      	; 0x8ec8 <DeleteUser+0x2fc>
    8ec6:	10 cf       	rjmp	.-480    	; 0x8ce8 <DeleteUser+0x11c>
          HEEPROM_WriteByte(EEPROMData, 0, EEPROMDataLocation);

        }
      }
    }
    if (Accurate == 1)
    8ec8:	8b a1       	ldd	r24, Y+35	; 0x23
    8eca:	81 30       	cpi	r24, 0x01	; 1
    8ecc:	41 f4       	brne	.+16     	; 0x8ede <DeleteUser+0x312>
    {
      NumberOfUsers--;
    8ece:	8e a1       	ldd	r24, Y+38	; 0x26
    8ed0:	81 50       	subi	r24, 0x01	; 1
    8ed2:	8e a3       	std	Y+38, r24	; 0x26
      HEEPROM_WriteByte(NumberOfUsers, 0, 100);
    8ed4:	8e a1       	ldd	r24, Y+38	; 0x26
    8ed6:	60 e0       	ldi	r22, 0x00	; 0
    8ed8:	44 e6       	ldi	r20, 0x64	; 100
    8eda:	0e 94 70 30 	call	0x60e0	; 0x60e0 <HEEPROM_WriteByte>
  {
    /*Do Nothing*/

  }

}
    8ede:	a8 96       	adiw	r28, 0x28	; 40
    8ee0:	0f b6       	in	r0, 0x3f	; 63
    8ee2:	f8 94       	cli
    8ee4:	de bf       	out	0x3e, r29	; 62
    8ee6:	0f be       	out	0x3f, r0	; 63
    8ee8:	cd bf       	out	0x3d, r28	; 61
    8eea:	cf 91       	pop	r28
    8eec:	df 91       	pop	r29
    8eee:	08 95       	ret

00008ef0 <CheckEEPROM>:
void CheckEEPROM(void){
    8ef0:	df 93       	push	r29
    8ef2:	cf 93       	push	r28
    8ef4:	00 d0       	rcall	.+0      	; 0x8ef6 <CheckEEPROM+0x6>
    8ef6:	00 d0       	rcall	.+0      	; 0x8ef8 <CheckEEPROM+0x8>
    8ef8:	00 d0       	rcall	.+0      	; 0x8efa <CheckEEPROM+0xa>
    8efa:	cd b7       	in	r28, 0x3d	; 61
    8efc:	de b7       	in	r29, 0x3e	; 62
	  for (u16 LocalCounter = 0; LocalCounter <= 16; LocalCounter++)
    8efe:	1e 82       	std	Y+6, r1	; 0x06
    8f00:	1d 82       	std	Y+5, r1	; 0x05
    8f02:	0c c0       	rjmp	.+24     	; 0x8f1c <CheckEEPROM+0x2c>
	  {
	    HCLCD_WriteChar4Bit(HEEPROM_ReadByte(0,LocalCounter));
    8f04:	9d 81       	ldd	r25, Y+5	; 0x05
    8f06:	80 e0       	ldi	r24, 0x00	; 0
    8f08:	69 2f       	mov	r22, r25
    8f0a:	0e 94 4b 30 	call	0x6096	; 0x6096 <HEEPROM_ReadByte>
    8f0e:	0e 94 85 35 	call	0x6b0a	; 0x6b0a <HCLCD_WriteChar4Bit>

  }

}
void CheckEEPROM(void){
	  for (u16 LocalCounter = 0; LocalCounter <= 16; LocalCounter++)
    8f12:	8d 81       	ldd	r24, Y+5	; 0x05
    8f14:	9e 81       	ldd	r25, Y+6	; 0x06
    8f16:	01 96       	adiw	r24, 0x01	; 1
    8f18:	9e 83       	std	Y+6, r25	; 0x06
    8f1a:	8d 83       	std	Y+5, r24	; 0x05
    8f1c:	8d 81       	ldd	r24, Y+5	; 0x05
    8f1e:	9e 81       	ldd	r25, Y+6	; 0x06
    8f20:	81 31       	cpi	r24, 0x11	; 17
    8f22:	91 05       	cpc	r25, r1
    8f24:	78 f3       	brcs	.-34     	; 0x8f04 <CheckEEPROM+0x14>
	  {
	    HCLCD_WriteChar4Bit(HEEPROM_ReadByte(0,LocalCounter));
	  }
	  HCLCD_SetCursorPosition(HCLCD_LINE_1,0);
    8f26:	81 e0       	ldi	r24, 0x01	; 1
    8f28:	60 e0       	ldi	r22, 0x00	; 0
    8f2a:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
	  for (u32 LocalCounter = 17; LocalCounter < 33; LocalCounter++)
    8f2e:	81 e1       	ldi	r24, 0x11	; 17
    8f30:	90 e0       	ldi	r25, 0x00	; 0
    8f32:	a0 e0       	ldi	r26, 0x00	; 0
    8f34:	b0 e0       	ldi	r27, 0x00	; 0
    8f36:	89 83       	std	Y+1, r24	; 0x01
    8f38:	9a 83       	std	Y+2, r25	; 0x02
    8f3a:	ab 83       	std	Y+3, r26	; 0x03
    8f3c:	bc 83       	std	Y+4, r27	; 0x04
    8f3e:	12 c0       	rjmp	.+36     	; 0x8f64 <CheckEEPROM+0x74>
	  {
		  HCLCD_WriteChar4Bit(HEEPROM_ReadByte(0, LocalCounter));
    8f40:	99 81       	ldd	r25, Y+1	; 0x01
    8f42:	80 e0       	ldi	r24, 0x00	; 0
    8f44:	69 2f       	mov	r22, r25
    8f46:	0e 94 4b 30 	call	0x6096	; 0x6096 <HEEPROM_ReadByte>
    8f4a:	0e 94 85 35 	call	0x6b0a	; 0x6b0a <HCLCD_WriteChar4Bit>
	  for (u16 LocalCounter = 0; LocalCounter <= 16; LocalCounter++)
	  {
	    HCLCD_WriteChar4Bit(HEEPROM_ReadByte(0,LocalCounter));
	  }
	  HCLCD_SetCursorPosition(HCLCD_LINE_1,0);
	  for (u32 LocalCounter = 17; LocalCounter < 33; LocalCounter++)
    8f4e:	89 81       	ldd	r24, Y+1	; 0x01
    8f50:	9a 81       	ldd	r25, Y+2	; 0x02
    8f52:	ab 81       	ldd	r26, Y+3	; 0x03
    8f54:	bc 81       	ldd	r27, Y+4	; 0x04
    8f56:	01 96       	adiw	r24, 0x01	; 1
    8f58:	a1 1d       	adc	r26, r1
    8f5a:	b1 1d       	adc	r27, r1
    8f5c:	89 83       	std	Y+1, r24	; 0x01
    8f5e:	9a 83       	std	Y+2, r25	; 0x02
    8f60:	ab 83       	std	Y+3, r26	; 0x03
    8f62:	bc 83       	std	Y+4, r27	; 0x04
    8f64:	89 81       	ldd	r24, Y+1	; 0x01
    8f66:	9a 81       	ldd	r25, Y+2	; 0x02
    8f68:	ab 81       	ldd	r26, Y+3	; 0x03
    8f6a:	bc 81       	ldd	r27, Y+4	; 0x04
    8f6c:	81 32       	cpi	r24, 0x21	; 33
    8f6e:	91 05       	cpc	r25, r1
    8f70:	a1 05       	cpc	r26, r1
    8f72:	b1 05       	cpc	r27, r1
    8f74:	28 f3       	brcs	.-54     	; 0x8f40 <CheckEEPROM+0x50>
	  {
		  HCLCD_WriteChar4Bit(HEEPROM_ReadByte(0, LocalCounter));
	  }

}
    8f76:	26 96       	adiw	r28, 0x06	; 6
    8f78:	0f b6       	in	r0, 0x3f	; 63
    8f7a:	f8 94       	cli
    8f7c:	de bf       	out	0x3e, r29	; 62
    8f7e:	0f be       	out	0x3f, r0	; 63
    8f80:	cd bf       	out	0x3d, r28	; 61
    8f82:	cf 91       	pop	r28
    8f84:	df 91       	pop	r29
    8f86:	08 95       	ret

00008f88 <DeleteAll>:
void DeleteAll (void)
{
    8f88:	df 93       	push	r29
    8f8a:	cf 93       	push	r28
    8f8c:	00 d0       	rcall	.+0      	; 0x8f8e <DeleteAll+0x6>
    8f8e:	cd b7       	in	r28, 0x3d	; 61
    8f90:	de b7       	in	r29, 0x3e	; 62
  for (u16 LocalCounter = 0; LocalCounter <= 0xFF; LocalCounter++)
    8f92:	1a 82       	std	Y+2, r1	; 0x02
    8f94:	19 82       	std	Y+1, r1	; 0x01
    8f96:	0b c0       	rjmp	.+22     	; 0x8fae <DeleteAll+0x26>
  {
    HEEPROM_WriteByte(0xFF,0, LocalCounter);
    8f98:	99 81       	ldd	r25, Y+1	; 0x01
    8f9a:	8f ef       	ldi	r24, 0xFF	; 255
    8f9c:	60 e0       	ldi	r22, 0x00	; 0
    8f9e:	49 2f       	mov	r20, r25
    8fa0:	0e 94 70 30 	call	0x60e0	; 0x60e0 <HEEPROM_WriteByte>
	  }

}
void DeleteAll (void)
{
  for (u16 LocalCounter = 0; LocalCounter <= 0xFF; LocalCounter++)
    8fa4:	89 81       	ldd	r24, Y+1	; 0x01
    8fa6:	9a 81       	ldd	r25, Y+2	; 0x02
    8fa8:	01 96       	adiw	r24, 0x01	; 1
    8faa:	9a 83       	std	Y+2, r25	; 0x02
    8fac:	89 83       	std	Y+1, r24	; 0x01
    8fae:	89 81       	ldd	r24, Y+1	; 0x01
    8fb0:	9a 81       	ldd	r25, Y+2	; 0x02
    8fb2:	8f 3f       	cpi	r24, 0xFF	; 255
    8fb4:	91 05       	cpc	r25, r1
    8fb6:	81 f3       	breq	.-32     	; 0x8f98 <DeleteAll+0x10>
    8fb8:	78 f3       	brcs	.-34     	; 0x8f98 <DeleteAll+0x10>
  {
    HEEPROM_WriteByte(0xFF,0, LocalCounter);
  }
  HEEPROM_WriteByte(0, 0, 100);
    8fba:	80 e0       	ldi	r24, 0x00	; 0
    8fbc:	60 e0       	ldi	r22, 0x00	; 0
    8fbe:	44 e6       	ldi	r20, 0x64	; 100
    8fc0:	0e 94 70 30 	call	0x60e0	; 0x60e0 <HEEPROM_WriteByte>
}
    8fc4:	0f 90       	pop	r0
    8fc6:	0f 90       	pop	r0
    8fc8:	cf 91       	pop	r28
    8fca:	df 91       	pop	r29
    8fcc:	08 95       	ret

00008fce <ACSwitch>:
void ACSwitch (u8* ACState)
{
    8fce:	df 93       	push	r29
    8fd0:	cf 93       	push	r28
    8fd2:	00 d0       	rcall	.+0      	; 0x8fd4 <ACSwitch+0x6>
    8fd4:	00 d0       	rcall	.+0      	; 0x8fd6 <ACSwitch+0x8>
    8fd6:	cd b7       	in	r28, 0x3d	; 61
    8fd8:	de b7       	in	r29, 0x3e	; 62
    8fda:	9c 83       	std	Y+4, r25	; 0x04
    8fdc:	8b 83       	std	Y+3, r24	; 0x03
	if (*ACState == 0)
    8fde:	eb 81       	ldd	r30, Y+3	; 0x03
    8fe0:	fc 81       	ldd	r31, Y+4	; 0x04
    8fe2:	80 81       	ld	r24, Z
    8fe4:	88 23       	and	r24, r24
    8fe6:	19 f5       	brne	.+70     	; 0x902e <ACSwitch+0x60>
	{
	 u16 Temperature = 0;
    8fe8:	1a 82       	std	Y+2, r1	; 0x02
    8fea:	19 82       	std	Y+1, r1	; 0x01
	 while(1){
	 HLM35Read(&Temperature);
    8fec:	ce 01       	movw	r24, r28
    8fee:	01 96       	adiw	r24, 0x01	; 1
    8ff0:	0e 94 a8 20 	call	0x4150	; 0x4150 <HLM35Read>

	 if (Temperature > MAXTEMPERATURE)
    8ff4:	89 81       	ldd	r24, Y+1	; 0x01
    8ff6:	9a 81       	ldd	r25, Y+2	; 0x02
    8ff8:	8b 31       	cpi	r24, 0x1B	; 27
    8ffa:	91 05       	cpc	r25, r1
    8ffc:	60 f0       	brcs	.+24     	; 0x9016 <ACSwitch+0x48>
	 {
		 HDCMotorSetDirection(CW);
    8ffe:	80 e0       	ldi	r24, 0x00	; 0
    9000:	0e 94 5f 31 	call	0x62be	; 0x62be <HDCMotorSetDirection>
		 HDCMotorSpeed(100);
    9004:	60 e0       	ldi	r22, 0x00	; 0
    9006:	70 e0       	ldi	r23, 0x00	; 0
    9008:	88 ec       	ldi	r24, 0xC8	; 200
    900a:	92 e4       	ldi	r25, 0x42	; 66
    900c:	0e 94 90 31 	call	0x6320	; 0x6320 <HDCMotorSpeed>
		 HDCMotorStart();
    9010:	0e 94 ab 31 	call	0x6356	; 0x6356 <HDCMotorStart>
    9014:	07 c0       	rjmp	.+14     	; 0x9024 <ACSwitch+0x56>
	 }
	 else if (Temperature < MINTEMPERATURE)
    9016:	89 81       	ldd	r24, Y+1	; 0x01
    9018:	9a 81       	ldd	r25, Y+2	; 0x02
    901a:	85 31       	cpi	r24, 0x15	; 21
    901c:	91 05       	cpc	r25, r1
    901e:	10 f4       	brcc	.+4      	; 0x9024 <ACSwitch+0x56>
	 {
		 HDCMotorStop();
    9020:	0e 94 b4 31 	call	0x6368	; 0x6368 <HDCMotorStop>
	 }

	 *ACState = 1;
    9024:	eb 81       	ldd	r30, Y+3	; 0x03
    9026:	fc 81       	ldd	r31, Y+4	; 0x04
    9028:	81 e0       	ldi	r24, 0x01	; 1
    902a:	80 83       	st	Z, r24
    902c:	df cf       	rjmp	.-66     	; 0x8fec <ACSwitch+0x1e>
	 }

 }
 else
 {
	 HDCMotorStop();
    902e:	0e 94 b4 31 	call	0x6368	; 0x6368 <HDCMotorStop>
	 HLED_OFF(LED1);
    9032:	81 e0       	ldi	r24, 0x01	; 1
    9034:	0e 94 42 21 	call	0x4284	; 0x4284 <HLED_OFF>
	 HLED_OFF(LED0);
    9038:	80 e0       	ldi	r24, 0x00	; 0
    903a:	0e 94 42 21 	call	0x4284	; 0x4284 <HLED_OFF>
	 *ACState = 0;
    903e:	eb 81       	ldd	r30, Y+3	; 0x03
    9040:	fc 81       	ldd	r31, Y+4	; 0x04
    9042:	10 82       	st	Z, r1
 }

}
    9044:	0f 90       	pop	r0
    9046:	0f 90       	pop	r0
    9048:	0f 90       	pop	r0
    904a:	0f 90       	pop	r0
    904c:	cf 91       	pop	r28
    904e:	df 91       	pop	r29
    9050:	08 95       	ret

00009052 <DoorSwitch>:
void DoorSwitch (u8* DoorOpened)
{
    9052:	df 93       	push	r29
    9054:	cf 93       	push	r28
    9056:	cd b7       	in	r28, 0x3d	; 61
    9058:	de b7       	in	r29, 0x3e	; 62
    905a:	6e 97       	sbiw	r28, 0x1e	; 30
    905c:	0f b6       	in	r0, 0x3f	; 63
    905e:	f8 94       	cli
    9060:	de bf       	out	0x3e, r29	; 62
    9062:	0f be       	out	0x3f, r0	; 63
    9064:	cd bf       	out	0x3d, r28	; 61
    9066:	9e 8f       	std	Y+30, r25	; 0x1e
    9068:	8d 8f       	std	Y+29, r24	; 0x1d
  if (*DoorOpened == 0)
    906a:	ed 8d       	ldd	r30, Y+29	; 0x1d
    906c:	fe 8d       	ldd	r31, Y+30	; 0x1e
    906e:	80 81       	ld	r24, Z
    9070:	88 23       	and	r24, r24
    9072:	09 f0       	breq	.+2      	; 0x9076 <DoorSwitch+0x24>
    9074:	8c c0       	rjmp	.+280    	; 0x918e <DoorSwitch+0x13c>
  {
	HCLCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
    9076:	81 e0       	ldi	r24, 0x01	; 1
    9078:	0e 94 61 34 	call	0x68c2	; 0x68c2 <HCLCD_WriteCommand4Bit>
	HCLCD_SetCursorPosition(HCLCD_LINE_0,0);
    907c:	80 e0       	ldi	r24, 0x00	; 0
    907e:	60 e0       	ldi	r22, 0x00	; 0
    9080:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
    HCLCD_WriteString("Door is Opened!");
    9084:	8c e0       	ldi	r24, 0x0C	; 12
    9086:	92 e0       	ldi	r25, 0x02	; 2
    9088:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <HCLCD_WriteString>
    HHC05_SendString("Door is Opened!");
    908c:	8c e0       	ldi	r24, 0x0C	; 12
    908e:	92 e0       	ldi	r25, 0x02	; 2
    9090:	0e 94 29 30 	call	0x6052	; 0x6052 <HHC05_SendString>
    HServoSetAngel(120);
    9094:	60 e0       	ldi	r22, 0x00	; 0
    9096:	70 e0       	ldi	r23, 0x00	; 0
    9098:	80 ef       	ldi	r24, 0xF0	; 240
    909a:	92 e4       	ldi	r25, 0x42	; 66
    909c:	0e 94 05 20 	call	0x400a	; 0x400a <HServoSetAngel>
    90a0:	80 e0       	ldi	r24, 0x00	; 0
    90a2:	90 e0       	ldi	r25, 0x00	; 0
    90a4:	aa ef       	ldi	r26, 0xFA	; 250
    90a6:	b3 e4       	ldi	r27, 0x43	; 67
    90a8:	89 8f       	std	Y+25, r24	; 0x19
    90aa:	9a 8f       	std	Y+26, r25	; 0x1a
    90ac:	ab 8f       	std	Y+27, r26	; 0x1b
    90ae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    90b0:	69 8d       	ldd	r22, Y+25	; 0x19
    90b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    90b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    90b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    90b8:	20 e0       	ldi	r18, 0x00	; 0
    90ba:	30 e0       	ldi	r19, 0x00	; 0
    90bc:	4a e7       	ldi	r20, 0x7A	; 122
    90be:	55 e4       	ldi	r21, 0x45	; 69
    90c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    90c4:	dc 01       	movw	r26, r24
    90c6:	cb 01       	movw	r24, r22
    90c8:	8d 8b       	std	Y+21, r24	; 0x15
    90ca:	9e 8b       	std	Y+22, r25	; 0x16
    90cc:	af 8b       	std	Y+23, r26	; 0x17
    90ce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    90d0:	6d 89       	ldd	r22, Y+21	; 0x15
    90d2:	7e 89       	ldd	r23, Y+22	; 0x16
    90d4:	8f 89       	ldd	r24, Y+23	; 0x17
    90d6:	98 8d       	ldd	r25, Y+24	; 0x18
    90d8:	20 e0       	ldi	r18, 0x00	; 0
    90da:	30 e0       	ldi	r19, 0x00	; 0
    90dc:	40 e8       	ldi	r20, 0x80	; 128
    90de:	5f e3       	ldi	r21, 0x3F	; 63
    90e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    90e4:	88 23       	and	r24, r24
    90e6:	2c f4       	brge	.+10     	; 0x90f2 <DoorSwitch+0xa0>
		__ticks = 1;
    90e8:	81 e0       	ldi	r24, 0x01	; 1
    90ea:	90 e0       	ldi	r25, 0x00	; 0
    90ec:	9c 8b       	std	Y+20, r25	; 0x14
    90ee:	8b 8b       	std	Y+19, r24	; 0x13
    90f0:	3f c0       	rjmp	.+126    	; 0x9170 <DoorSwitch+0x11e>
	else if (__tmp > 65535)
    90f2:	6d 89       	ldd	r22, Y+21	; 0x15
    90f4:	7e 89       	ldd	r23, Y+22	; 0x16
    90f6:	8f 89       	ldd	r24, Y+23	; 0x17
    90f8:	98 8d       	ldd	r25, Y+24	; 0x18
    90fa:	20 e0       	ldi	r18, 0x00	; 0
    90fc:	3f ef       	ldi	r19, 0xFF	; 255
    90fe:	4f e7       	ldi	r20, 0x7F	; 127
    9100:	57 e4       	ldi	r21, 0x47	; 71
    9102:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    9106:	18 16       	cp	r1, r24
    9108:	4c f5       	brge	.+82     	; 0x915c <DoorSwitch+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    910a:	69 8d       	ldd	r22, Y+25	; 0x19
    910c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    910e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    9110:	9c 8d       	ldd	r25, Y+28	; 0x1c
    9112:	20 e0       	ldi	r18, 0x00	; 0
    9114:	30 e0       	ldi	r19, 0x00	; 0
    9116:	40 e2       	ldi	r20, 0x20	; 32
    9118:	51 e4       	ldi	r21, 0x41	; 65
    911a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    911e:	dc 01       	movw	r26, r24
    9120:	cb 01       	movw	r24, r22
    9122:	bc 01       	movw	r22, r24
    9124:	cd 01       	movw	r24, r26
    9126:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    912a:	dc 01       	movw	r26, r24
    912c:	cb 01       	movw	r24, r22
    912e:	9c 8b       	std	Y+20, r25	; 0x14
    9130:	8b 8b       	std	Y+19, r24	; 0x13
    9132:	0f c0       	rjmp	.+30     	; 0x9152 <DoorSwitch+0x100>
    9134:	80 e9       	ldi	r24, 0x90	; 144
    9136:	91 e0       	ldi	r25, 0x01	; 1
    9138:	9a 8b       	std	Y+18, r25	; 0x12
    913a:	89 8b       	std	Y+17, r24	; 0x11
    913c:	89 89       	ldd	r24, Y+17	; 0x11
    913e:	9a 89       	ldd	r25, Y+18	; 0x12
    9140:	01 97       	sbiw	r24, 0x01	; 1
    9142:	f1 f7       	brne	.-4      	; 0x9140 <DoorSwitch+0xee>
    9144:	9a 8b       	std	Y+18, r25	; 0x12
    9146:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9148:	8b 89       	ldd	r24, Y+19	; 0x13
    914a:	9c 89       	ldd	r25, Y+20	; 0x14
    914c:	01 97       	sbiw	r24, 0x01	; 1
    914e:	9c 8b       	std	Y+20, r25	; 0x14
    9150:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9152:	8b 89       	ldd	r24, Y+19	; 0x13
    9154:	9c 89       	ldd	r25, Y+20	; 0x14
    9156:	00 97       	sbiw	r24, 0x00	; 0
    9158:	69 f7       	brne	.-38     	; 0x9134 <DoorSwitch+0xe2>
    915a:	14 c0       	rjmp	.+40     	; 0x9184 <DoorSwitch+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    915c:	6d 89       	ldd	r22, Y+21	; 0x15
    915e:	7e 89       	ldd	r23, Y+22	; 0x16
    9160:	8f 89       	ldd	r24, Y+23	; 0x17
    9162:	98 8d       	ldd	r25, Y+24	; 0x18
    9164:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    9168:	dc 01       	movw	r26, r24
    916a:	cb 01       	movw	r24, r22
    916c:	9c 8b       	std	Y+20, r25	; 0x14
    916e:	8b 8b       	std	Y+19, r24	; 0x13
    9170:	8b 89       	ldd	r24, Y+19	; 0x13
    9172:	9c 89       	ldd	r25, Y+20	; 0x14
    9174:	98 8b       	std	Y+16, r25	; 0x10
    9176:	8f 87       	std	Y+15, r24	; 0x0f
    9178:	8f 85       	ldd	r24, Y+15	; 0x0f
    917a:	98 89       	ldd	r25, Y+16	; 0x10
    917c:	01 97       	sbiw	r24, 0x01	; 1
    917e:	f1 f7       	brne	.-4      	; 0x917c <DoorSwitch+0x12a>
    9180:	98 8b       	std	Y+16, r25	; 0x10
    9182:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(500);
    *DoorOpened = 1;
    9184:	ed 8d       	ldd	r30, Y+29	; 0x1d
    9186:	fe 8d       	ldd	r31, Y+30	; 0x1e
    9188:	81 e0       	ldi	r24, 0x01	; 1
    918a:	80 83       	st	Z, r24
    918c:	8a c0       	rjmp	.+276    	; 0x92a2 <DoorSwitch+0x250>
  }
  else
  {
	  HCLCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
    918e:	81 e0       	ldi	r24, 0x01	; 1
    9190:	0e 94 61 34 	call	0x68c2	; 0x68c2 <HCLCD_WriteCommand4Bit>
	  HCLCD_SetCursorPosition(HCLCD_LINE_0,0);
    9194:	80 e0       	ldi	r24, 0x00	; 0
    9196:	60 e0       	ldi	r22, 0x00	; 0
    9198:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
	  HCLCD_WriteString("Door is Closed!");
    919c:	8c e1       	ldi	r24, 0x1C	; 28
    919e:	92 e0       	ldi	r25, 0x02	; 2
    91a0:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <HCLCD_WriteString>
      HHC05_SendString("Door is Opened!");
    91a4:	8c e0       	ldi	r24, 0x0C	; 12
    91a6:	92 e0       	ldi	r25, 0x02	; 2
    91a8:	0e 94 29 30 	call	0x6052	; 0x6052 <HHC05_SendString>
      HServoSetAngel(0);
    91ac:	60 e0       	ldi	r22, 0x00	; 0
    91ae:	70 e0       	ldi	r23, 0x00	; 0
    91b0:	80 e0       	ldi	r24, 0x00	; 0
    91b2:	90 e0       	ldi	r25, 0x00	; 0
    91b4:	0e 94 05 20 	call	0x400a	; 0x400a <HServoSetAngel>
    91b8:	80 e0       	ldi	r24, 0x00	; 0
    91ba:	90 e0       	ldi	r25, 0x00	; 0
    91bc:	aa ef       	ldi	r26, 0xFA	; 250
    91be:	b3 e4       	ldi	r27, 0x43	; 67
    91c0:	8b 87       	std	Y+11, r24	; 0x0b
    91c2:	9c 87       	std	Y+12, r25	; 0x0c
    91c4:	ad 87       	std	Y+13, r26	; 0x0d
    91c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    91c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    91ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    91cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    91ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    91d0:	20 e0       	ldi	r18, 0x00	; 0
    91d2:	30 e0       	ldi	r19, 0x00	; 0
    91d4:	4a e7       	ldi	r20, 0x7A	; 122
    91d6:	55 e4       	ldi	r21, 0x45	; 69
    91d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    91dc:	dc 01       	movw	r26, r24
    91de:	cb 01       	movw	r24, r22
    91e0:	8f 83       	std	Y+7, r24	; 0x07
    91e2:	98 87       	std	Y+8, r25	; 0x08
    91e4:	a9 87       	std	Y+9, r26	; 0x09
    91e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    91e8:	6f 81       	ldd	r22, Y+7	; 0x07
    91ea:	78 85       	ldd	r23, Y+8	; 0x08
    91ec:	89 85       	ldd	r24, Y+9	; 0x09
    91ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    91f0:	20 e0       	ldi	r18, 0x00	; 0
    91f2:	30 e0       	ldi	r19, 0x00	; 0
    91f4:	40 e8       	ldi	r20, 0x80	; 128
    91f6:	5f e3       	ldi	r21, 0x3F	; 63
    91f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    91fc:	88 23       	and	r24, r24
    91fe:	2c f4       	brge	.+10     	; 0x920a <DoorSwitch+0x1b8>
		__ticks = 1;
    9200:	81 e0       	ldi	r24, 0x01	; 1
    9202:	90 e0       	ldi	r25, 0x00	; 0
    9204:	9e 83       	std	Y+6, r25	; 0x06
    9206:	8d 83       	std	Y+5, r24	; 0x05
    9208:	3f c0       	rjmp	.+126    	; 0x9288 <DoorSwitch+0x236>
	else if (__tmp > 65535)
    920a:	6f 81       	ldd	r22, Y+7	; 0x07
    920c:	78 85       	ldd	r23, Y+8	; 0x08
    920e:	89 85       	ldd	r24, Y+9	; 0x09
    9210:	9a 85       	ldd	r25, Y+10	; 0x0a
    9212:	20 e0       	ldi	r18, 0x00	; 0
    9214:	3f ef       	ldi	r19, 0xFF	; 255
    9216:	4f e7       	ldi	r20, 0x7F	; 127
    9218:	57 e4       	ldi	r21, 0x47	; 71
    921a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    921e:	18 16       	cp	r1, r24
    9220:	4c f5       	brge	.+82     	; 0x9274 <DoorSwitch+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9222:	6b 85       	ldd	r22, Y+11	; 0x0b
    9224:	7c 85       	ldd	r23, Y+12	; 0x0c
    9226:	8d 85       	ldd	r24, Y+13	; 0x0d
    9228:	9e 85       	ldd	r25, Y+14	; 0x0e
    922a:	20 e0       	ldi	r18, 0x00	; 0
    922c:	30 e0       	ldi	r19, 0x00	; 0
    922e:	40 e2       	ldi	r20, 0x20	; 32
    9230:	51 e4       	ldi	r21, 0x41	; 65
    9232:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    9236:	dc 01       	movw	r26, r24
    9238:	cb 01       	movw	r24, r22
    923a:	bc 01       	movw	r22, r24
    923c:	cd 01       	movw	r24, r26
    923e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    9242:	dc 01       	movw	r26, r24
    9244:	cb 01       	movw	r24, r22
    9246:	9e 83       	std	Y+6, r25	; 0x06
    9248:	8d 83       	std	Y+5, r24	; 0x05
    924a:	0f c0       	rjmp	.+30     	; 0x926a <DoorSwitch+0x218>
    924c:	80 e9       	ldi	r24, 0x90	; 144
    924e:	91 e0       	ldi	r25, 0x01	; 1
    9250:	9c 83       	std	Y+4, r25	; 0x04
    9252:	8b 83       	std	Y+3, r24	; 0x03
    9254:	8b 81       	ldd	r24, Y+3	; 0x03
    9256:	9c 81       	ldd	r25, Y+4	; 0x04
    9258:	01 97       	sbiw	r24, 0x01	; 1
    925a:	f1 f7       	brne	.-4      	; 0x9258 <DoorSwitch+0x206>
    925c:	9c 83       	std	Y+4, r25	; 0x04
    925e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9260:	8d 81       	ldd	r24, Y+5	; 0x05
    9262:	9e 81       	ldd	r25, Y+6	; 0x06
    9264:	01 97       	sbiw	r24, 0x01	; 1
    9266:	9e 83       	std	Y+6, r25	; 0x06
    9268:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    926a:	8d 81       	ldd	r24, Y+5	; 0x05
    926c:	9e 81       	ldd	r25, Y+6	; 0x06
    926e:	00 97       	sbiw	r24, 0x00	; 0
    9270:	69 f7       	brne	.-38     	; 0x924c <DoorSwitch+0x1fa>
    9272:	14 c0       	rjmp	.+40     	; 0x929c <DoorSwitch+0x24a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9274:	6f 81       	ldd	r22, Y+7	; 0x07
    9276:	78 85       	ldd	r23, Y+8	; 0x08
    9278:	89 85       	ldd	r24, Y+9	; 0x09
    927a:	9a 85       	ldd	r25, Y+10	; 0x0a
    927c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    9280:	dc 01       	movw	r26, r24
    9282:	cb 01       	movw	r24, r22
    9284:	9e 83       	std	Y+6, r25	; 0x06
    9286:	8d 83       	std	Y+5, r24	; 0x05
    9288:	8d 81       	ldd	r24, Y+5	; 0x05
    928a:	9e 81       	ldd	r25, Y+6	; 0x06
    928c:	9a 83       	std	Y+2, r25	; 0x02
    928e:	89 83       	std	Y+1, r24	; 0x01
    9290:	89 81       	ldd	r24, Y+1	; 0x01
    9292:	9a 81       	ldd	r25, Y+2	; 0x02
    9294:	01 97       	sbiw	r24, 0x01	; 1
    9296:	f1 f7       	brne	.-4      	; 0x9294 <DoorSwitch+0x242>
    9298:	9a 83       	std	Y+2, r25	; 0x02
    929a:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(500);
    *DoorOpened = 0;
    929c:	ed 8d       	ldd	r30, Y+29	; 0x1d
    929e:	fe 8d       	ldd	r31, Y+30	; 0x1e
    92a0:	10 82       	st	Z, r1
  }

}
    92a2:	6e 96       	adiw	r28, 0x1e	; 30
    92a4:	0f b6       	in	r0, 0x3f	; 63
    92a6:	f8 94       	cli
    92a8:	de bf       	out	0x3e, r29	; 62
    92aa:	0f be       	out	0x3f, r0	; 63
    92ac:	cd bf       	out	0x3d, r28	; 61
    92ae:	cf 91       	pop	r28
    92b0:	df 91       	pop	r29
    92b2:	08 95       	ret

000092b4 <RelaySwitch>:
void RelaySwitch(u8* RelayOpened)
{
    92b4:	df 93       	push	r29
    92b6:	cf 93       	push	r28
    92b8:	00 d0       	rcall	.+0      	; 0x92ba <RelaySwitch+0x6>
    92ba:	cd b7       	in	r28, 0x3d	; 61
    92bc:	de b7       	in	r29, 0x3e	; 62
    92be:	9a 83       	std	Y+2, r25	; 0x02
    92c0:	89 83       	std	Y+1, r24	; 0x01
  if (*RelayOpened == 0)
    92c2:	e9 81       	ldd	r30, Y+1	; 0x01
    92c4:	fa 81       	ldd	r31, Y+2	; 0x02
    92c6:	80 81       	ld	r24, Z
    92c8:	88 23       	and	r24, r24
    92ca:	b1 f4       	brne	.+44     	; 0x92f8 <RelaySwitch+0x44>
  {
	HCLCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
    92cc:	81 e0       	ldi	r24, 0x01	; 1
    92ce:	0e 94 61 34 	call	0x68c2	; 0x68c2 <HCLCD_WriteCommand4Bit>
	HCLCD_SetCursorPosition(HCLCD_LINE_0,0);
    92d2:	80 e0       	ldi	r24, 0x00	; 0
    92d4:	60 e0       	ldi	r22, 0x00	; 0
    92d6:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
	HCLCD_WriteString("Lamps are ON!");
    92da:	8c e2       	ldi	r24, 0x2C	; 44
    92dc:	92 e0       	ldi	r25, 0x02	; 2
    92de:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <HCLCD_WriteString>
	HHC05_SendString("Lamps are ON!");
    92e2:	8c e2       	ldi	r24, 0x2C	; 44
    92e4:	92 e0       	ldi	r25, 0x02	; 2
    92e6:	0e 94 29 30 	call	0x6052	; 0x6052 <HHC05_SendString>
    HRELAYON();
    92ea:	0e 94 65 20 	call	0x40ca	; 0x40ca <HRELAYON>
    *RelayOpened = 1;
    92ee:	e9 81       	ldd	r30, Y+1	; 0x01
    92f0:	fa 81       	ldd	r31, Y+2	; 0x02
    92f2:	81 e0       	ldi	r24, 0x01	; 1
    92f4:	80 83       	st	Z, r24
    92f6:	19 c0       	rjmp	.+50     	; 0x932a <RelaySwitch+0x76>
  }
  else if (*RelayOpened == 1)
    92f8:	e9 81       	ldd	r30, Y+1	; 0x01
    92fa:	fa 81       	ldd	r31, Y+2	; 0x02
    92fc:	80 81       	ld	r24, Z
    92fe:	81 30       	cpi	r24, 0x01	; 1
    9300:	a1 f4       	brne	.+40     	; 0x932a <RelaySwitch+0x76>
  {
	 HCLCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
    9302:	81 e0       	ldi	r24, 0x01	; 1
    9304:	0e 94 61 34 	call	0x68c2	; 0x68c2 <HCLCD_WriteCommand4Bit>
	 HCLCD_SetCursorPosition(HCLCD_LINE_0,0);
    9308:	80 e0       	ldi	r24, 0x00	; 0
    930a:	60 e0       	ldi	r22, 0x00	; 0
    930c:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
	 HCLCD_WriteString("Lamps are OFF!");
    9310:	8a e3       	ldi	r24, 0x3A	; 58
    9312:	92 e0       	ldi	r25, 0x02	; 2
    9314:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <HCLCD_WriteString>
	 HHC05_SendString("Lamps are OFF!");
    9318:	8a e3       	ldi	r24, 0x3A	; 58
    931a:	92 e0       	ldi	r25, 0x02	; 2
    931c:	0e 94 29 30 	call	0x6052	; 0x6052 <HHC05_SendString>
     HRELAYOFF();
    9320:	0e 94 71 20 	call	0x40e2	; 0x40e2 <HRELAYOFF>
    *RelayOpened = 0;
    9324:	e9 81       	ldd	r30, Y+1	; 0x01
    9326:	fa 81       	ldd	r31, Y+2	; 0x02
    9328:	10 82       	st	Z, r1
  }
}
    932a:	0f 90       	pop	r0
    932c:	0f 90       	pop	r0
    932e:	cf 91       	pop	r28
    9330:	df 91       	pop	r29
    9332:	08 95       	ret

00009334 <CloseTheDoor>:
void CloseTheDoor(void)
{
    9334:	df 93       	push	r29
    9336:	cf 93       	push	r28
    9338:	cd b7       	in	r28, 0x3d	; 61
    933a:	de b7       	in	r29, 0x3e	; 62
  HServoSetAngel(0);
    933c:	60 e0       	ldi	r22, 0x00	; 0
    933e:	70 e0       	ldi	r23, 0x00	; 0
    9340:	80 e0       	ldi	r24, 0x00	; 0
    9342:	90 e0       	ldi	r25, 0x00	; 0
    9344:	0e 94 05 20 	call	0x400a	; 0x400a <HServoSetAngel>
  HRELAYOFF();
    9348:	0e 94 71 20 	call	0x40e2	; 0x40e2 <HRELAYOFF>
}
    934c:	cf 91       	pop	r28
    934e:	df 91       	pop	r29
    9350:	08 95       	ret

00009352 <Door>:
void Door(u8 DoorState){
    9352:	df 93       	push	r29
    9354:	cf 93       	push	r28
    9356:	cd b7       	in	r28, 0x3d	; 61
    9358:	de b7       	in	r29, 0x3e	; 62
    935a:	6d 97       	sbiw	r28, 0x1d	; 29
    935c:	0f b6       	in	r0, 0x3f	; 63
    935e:	f8 94       	cli
    9360:	de bf       	out	0x3e, r29	; 62
    9362:	0f be       	out	0x3f, r0	; 63
    9364:	cd bf       	out	0x3d, r28	; 61
    9366:	8d 8f       	std	Y+29, r24	; 0x1d
  if (DoorState == 1)
    9368:	8d 8d       	ldd	r24, Y+29	; 0x1d
    936a:	81 30       	cpi	r24, 0x01	; 1
    936c:	09 f0       	breq	.+2      	; 0x9370 <Door+0x1e>
    936e:	85 c0       	rjmp	.+266    	; 0x947a <Door+0x128>
  {
	HCLCD_SetCursorPosition(HCLCD_LINE_1,0);
    9370:	81 e0       	ldi	r24, 0x01	; 1
    9372:	60 e0       	ldi	r22, 0x00	; 0
    9374:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
	HCLCD_WriteString("Door is Opened!");
    9378:	8c e0       	ldi	r24, 0x0C	; 12
    937a:	92 e0       	ldi	r25, 0x02	; 2
    937c:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <HCLCD_WriteString>
	HHC05_SendString("Door is Opened!");
    9380:	8c e0       	ldi	r24, 0x0C	; 12
    9382:	92 e0       	ldi	r25, 0x02	; 2
    9384:	0e 94 29 30 	call	0x6052	; 0x6052 <HHC05_SendString>
    HServoSetAngel(120);
    9388:	60 e0       	ldi	r22, 0x00	; 0
    938a:	70 e0       	ldi	r23, 0x00	; 0
    938c:	80 ef       	ldi	r24, 0xF0	; 240
    938e:	92 e4       	ldi	r25, 0x42	; 66
    9390:	0e 94 05 20 	call	0x400a	; 0x400a <HServoSetAngel>
    9394:	80 e0       	ldi	r24, 0x00	; 0
    9396:	90 e0       	ldi	r25, 0x00	; 0
    9398:	aa ef       	ldi	r26, 0xFA	; 250
    939a:	b3 e4       	ldi	r27, 0x43	; 67
    939c:	89 8f       	std	Y+25, r24	; 0x19
    939e:	9a 8f       	std	Y+26, r25	; 0x1a
    93a0:	ab 8f       	std	Y+27, r26	; 0x1b
    93a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    93a4:	69 8d       	ldd	r22, Y+25	; 0x19
    93a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    93a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    93aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    93ac:	20 e0       	ldi	r18, 0x00	; 0
    93ae:	30 e0       	ldi	r19, 0x00	; 0
    93b0:	4a e7       	ldi	r20, 0x7A	; 122
    93b2:	55 e4       	ldi	r21, 0x45	; 69
    93b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    93b8:	dc 01       	movw	r26, r24
    93ba:	cb 01       	movw	r24, r22
    93bc:	8d 8b       	std	Y+21, r24	; 0x15
    93be:	9e 8b       	std	Y+22, r25	; 0x16
    93c0:	af 8b       	std	Y+23, r26	; 0x17
    93c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    93c4:	6d 89       	ldd	r22, Y+21	; 0x15
    93c6:	7e 89       	ldd	r23, Y+22	; 0x16
    93c8:	8f 89       	ldd	r24, Y+23	; 0x17
    93ca:	98 8d       	ldd	r25, Y+24	; 0x18
    93cc:	20 e0       	ldi	r18, 0x00	; 0
    93ce:	30 e0       	ldi	r19, 0x00	; 0
    93d0:	40 e8       	ldi	r20, 0x80	; 128
    93d2:	5f e3       	ldi	r21, 0x3F	; 63
    93d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    93d8:	88 23       	and	r24, r24
    93da:	2c f4       	brge	.+10     	; 0x93e6 <Door+0x94>
		__ticks = 1;
    93dc:	81 e0       	ldi	r24, 0x01	; 1
    93de:	90 e0       	ldi	r25, 0x00	; 0
    93e0:	9c 8b       	std	Y+20, r25	; 0x14
    93e2:	8b 8b       	std	Y+19, r24	; 0x13
    93e4:	3f c0       	rjmp	.+126    	; 0x9464 <Door+0x112>
	else if (__tmp > 65535)
    93e6:	6d 89       	ldd	r22, Y+21	; 0x15
    93e8:	7e 89       	ldd	r23, Y+22	; 0x16
    93ea:	8f 89       	ldd	r24, Y+23	; 0x17
    93ec:	98 8d       	ldd	r25, Y+24	; 0x18
    93ee:	20 e0       	ldi	r18, 0x00	; 0
    93f0:	3f ef       	ldi	r19, 0xFF	; 255
    93f2:	4f e7       	ldi	r20, 0x7F	; 127
    93f4:	57 e4       	ldi	r21, 0x47	; 71
    93f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    93fa:	18 16       	cp	r1, r24
    93fc:	4c f5       	brge	.+82     	; 0x9450 <Door+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    93fe:	69 8d       	ldd	r22, Y+25	; 0x19
    9400:	7a 8d       	ldd	r23, Y+26	; 0x1a
    9402:	8b 8d       	ldd	r24, Y+27	; 0x1b
    9404:	9c 8d       	ldd	r25, Y+28	; 0x1c
    9406:	20 e0       	ldi	r18, 0x00	; 0
    9408:	30 e0       	ldi	r19, 0x00	; 0
    940a:	40 e2       	ldi	r20, 0x20	; 32
    940c:	51 e4       	ldi	r21, 0x41	; 65
    940e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    9412:	dc 01       	movw	r26, r24
    9414:	cb 01       	movw	r24, r22
    9416:	bc 01       	movw	r22, r24
    9418:	cd 01       	movw	r24, r26
    941a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    941e:	dc 01       	movw	r26, r24
    9420:	cb 01       	movw	r24, r22
    9422:	9c 8b       	std	Y+20, r25	; 0x14
    9424:	8b 8b       	std	Y+19, r24	; 0x13
    9426:	0f c0       	rjmp	.+30     	; 0x9446 <Door+0xf4>
    9428:	80 e9       	ldi	r24, 0x90	; 144
    942a:	91 e0       	ldi	r25, 0x01	; 1
    942c:	9a 8b       	std	Y+18, r25	; 0x12
    942e:	89 8b       	std	Y+17, r24	; 0x11
    9430:	89 89       	ldd	r24, Y+17	; 0x11
    9432:	9a 89       	ldd	r25, Y+18	; 0x12
    9434:	01 97       	sbiw	r24, 0x01	; 1
    9436:	f1 f7       	brne	.-4      	; 0x9434 <Door+0xe2>
    9438:	9a 8b       	std	Y+18, r25	; 0x12
    943a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    943c:	8b 89       	ldd	r24, Y+19	; 0x13
    943e:	9c 89       	ldd	r25, Y+20	; 0x14
    9440:	01 97       	sbiw	r24, 0x01	; 1
    9442:	9c 8b       	std	Y+20, r25	; 0x14
    9444:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9446:	8b 89       	ldd	r24, Y+19	; 0x13
    9448:	9c 89       	ldd	r25, Y+20	; 0x14
    944a:	00 97       	sbiw	r24, 0x00	; 0
    944c:	69 f7       	brne	.-38     	; 0x9428 <Door+0xd6>
    944e:	99 c0       	rjmp	.+306    	; 0x9582 <Door+0x230>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9450:	6d 89       	ldd	r22, Y+21	; 0x15
    9452:	7e 89       	ldd	r23, Y+22	; 0x16
    9454:	8f 89       	ldd	r24, Y+23	; 0x17
    9456:	98 8d       	ldd	r25, Y+24	; 0x18
    9458:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    945c:	dc 01       	movw	r26, r24
    945e:	cb 01       	movw	r24, r22
    9460:	9c 8b       	std	Y+20, r25	; 0x14
    9462:	8b 8b       	std	Y+19, r24	; 0x13
    9464:	8b 89       	ldd	r24, Y+19	; 0x13
    9466:	9c 89       	ldd	r25, Y+20	; 0x14
    9468:	98 8b       	std	Y+16, r25	; 0x10
    946a:	8f 87       	std	Y+15, r24	; 0x0f
    946c:	8f 85       	ldd	r24, Y+15	; 0x0f
    946e:	98 89       	ldd	r25, Y+16	; 0x10
    9470:	01 97       	sbiw	r24, 0x01	; 1
    9472:	f1 f7       	brne	.-4      	; 0x9470 <Door+0x11e>
    9474:	98 8b       	std	Y+16, r25	; 0x10
    9476:	8f 87       	std	Y+15, r24	; 0x0f
    9478:	84 c0       	rjmp	.+264    	; 0x9582 <Door+0x230>
    _delay_ms(500);
  }
  else
  {
	HCLCD_SetCursorPosition(HCLCD_LINE_1,0);
    947a:	81 e0       	ldi	r24, 0x01	; 1
    947c:	60 e0       	ldi	r22, 0x00	; 0
    947e:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
	 HCLCD_WriteString("Door is Closed!");
    9482:	8c e1       	ldi	r24, 0x1C	; 28
    9484:	92 e0       	ldi	r25, 0x02	; 2
    9486:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <HCLCD_WriteString>
	 HHC05_SendString("Door is Opened!");
    948a:	8c e0       	ldi	r24, 0x0C	; 12
    948c:	92 e0       	ldi	r25, 0x02	; 2
    948e:	0e 94 29 30 	call	0x6052	; 0x6052 <HHC05_SendString>
	 HServoSetAngel(0);
    9492:	60 e0       	ldi	r22, 0x00	; 0
    9494:	70 e0       	ldi	r23, 0x00	; 0
    9496:	80 e0       	ldi	r24, 0x00	; 0
    9498:	90 e0       	ldi	r25, 0x00	; 0
    949a:	0e 94 05 20 	call	0x400a	; 0x400a <HServoSetAngel>
    949e:	80 e0       	ldi	r24, 0x00	; 0
    94a0:	90 e0       	ldi	r25, 0x00	; 0
    94a2:	aa ef       	ldi	r26, 0xFA	; 250
    94a4:	b3 e4       	ldi	r27, 0x43	; 67
    94a6:	8b 87       	std	Y+11, r24	; 0x0b
    94a8:	9c 87       	std	Y+12, r25	; 0x0c
    94aa:	ad 87       	std	Y+13, r26	; 0x0d
    94ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    94ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    94b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    94b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    94b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    94b6:	20 e0       	ldi	r18, 0x00	; 0
    94b8:	30 e0       	ldi	r19, 0x00	; 0
    94ba:	4a e7       	ldi	r20, 0x7A	; 122
    94bc:	55 e4       	ldi	r21, 0x45	; 69
    94be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    94c2:	dc 01       	movw	r26, r24
    94c4:	cb 01       	movw	r24, r22
    94c6:	8f 83       	std	Y+7, r24	; 0x07
    94c8:	98 87       	std	Y+8, r25	; 0x08
    94ca:	a9 87       	std	Y+9, r26	; 0x09
    94cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    94ce:	6f 81       	ldd	r22, Y+7	; 0x07
    94d0:	78 85       	ldd	r23, Y+8	; 0x08
    94d2:	89 85       	ldd	r24, Y+9	; 0x09
    94d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    94d6:	20 e0       	ldi	r18, 0x00	; 0
    94d8:	30 e0       	ldi	r19, 0x00	; 0
    94da:	40 e8       	ldi	r20, 0x80	; 128
    94dc:	5f e3       	ldi	r21, 0x3F	; 63
    94de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    94e2:	88 23       	and	r24, r24
    94e4:	2c f4       	brge	.+10     	; 0x94f0 <Door+0x19e>
		__ticks = 1;
    94e6:	81 e0       	ldi	r24, 0x01	; 1
    94e8:	90 e0       	ldi	r25, 0x00	; 0
    94ea:	9e 83       	std	Y+6, r25	; 0x06
    94ec:	8d 83       	std	Y+5, r24	; 0x05
    94ee:	3f c0       	rjmp	.+126    	; 0x956e <Door+0x21c>
	else if (__tmp > 65535)
    94f0:	6f 81       	ldd	r22, Y+7	; 0x07
    94f2:	78 85       	ldd	r23, Y+8	; 0x08
    94f4:	89 85       	ldd	r24, Y+9	; 0x09
    94f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    94f8:	20 e0       	ldi	r18, 0x00	; 0
    94fa:	3f ef       	ldi	r19, 0xFF	; 255
    94fc:	4f e7       	ldi	r20, 0x7F	; 127
    94fe:	57 e4       	ldi	r21, 0x47	; 71
    9500:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    9504:	18 16       	cp	r1, r24
    9506:	4c f5       	brge	.+82     	; 0x955a <Door+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9508:	6b 85       	ldd	r22, Y+11	; 0x0b
    950a:	7c 85       	ldd	r23, Y+12	; 0x0c
    950c:	8d 85       	ldd	r24, Y+13	; 0x0d
    950e:	9e 85       	ldd	r25, Y+14	; 0x0e
    9510:	20 e0       	ldi	r18, 0x00	; 0
    9512:	30 e0       	ldi	r19, 0x00	; 0
    9514:	40 e2       	ldi	r20, 0x20	; 32
    9516:	51 e4       	ldi	r21, 0x41	; 65
    9518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    951c:	dc 01       	movw	r26, r24
    951e:	cb 01       	movw	r24, r22
    9520:	bc 01       	movw	r22, r24
    9522:	cd 01       	movw	r24, r26
    9524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    9528:	dc 01       	movw	r26, r24
    952a:	cb 01       	movw	r24, r22
    952c:	9e 83       	std	Y+6, r25	; 0x06
    952e:	8d 83       	std	Y+5, r24	; 0x05
    9530:	0f c0       	rjmp	.+30     	; 0x9550 <Door+0x1fe>
    9532:	80 e9       	ldi	r24, 0x90	; 144
    9534:	91 e0       	ldi	r25, 0x01	; 1
    9536:	9c 83       	std	Y+4, r25	; 0x04
    9538:	8b 83       	std	Y+3, r24	; 0x03
    953a:	8b 81       	ldd	r24, Y+3	; 0x03
    953c:	9c 81       	ldd	r25, Y+4	; 0x04
    953e:	01 97       	sbiw	r24, 0x01	; 1
    9540:	f1 f7       	brne	.-4      	; 0x953e <Door+0x1ec>
    9542:	9c 83       	std	Y+4, r25	; 0x04
    9544:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9546:	8d 81       	ldd	r24, Y+5	; 0x05
    9548:	9e 81       	ldd	r25, Y+6	; 0x06
    954a:	01 97       	sbiw	r24, 0x01	; 1
    954c:	9e 83       	std	Y+6, r25	; 0x06
    954e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9550:	8d 81       	ldd	r24, Y+5	; 0x05
    9552:	9e 81       	ldd	r25, Y+6	; 0x06
    9554:	00 97       	sbiw	r24, 0x00	; 0
    9556:	69 f7       	brne	.-38     	; 0x9532 <Door+0x1e0>
    9558:	14 c0       	rjmp	.+40     	; 0x9582 <Door+0x230>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    955a:	6f 81       	ldd	r22, Y+7	; 0x07
    955c:	78 85       	ldd	r23, Y+8	; 0x08
    955e:	89 85       	ldd	r24, Y+9	; 0x09
    9560:	9a 85       	ldd	r25, Y+10	; 0x0a
    9562:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    9566:	dc 01       	movw	r26, r24
    9568:	cb 01       	movw	r24, r22
    956a:	9e 83       	std	Y+6, r25	; 0x06
    956c:	8d 83       	std	Y+5, r24	; 0x05
    956e:	8d 81       	ldd	r24, Y+5	; 0x05
    9570:	9e 81       	ldd	r25, Y+6	; 0x06
    9572:	9a 83       	std	Y+2, r25	; 0x02
    9574:	89 83       	std	Y+1, r24	; 0x01
    9576:	89 81       	ldd	r24, Y+1	; 0x01
    9578:	9a 81       	ldd	r25, Y+2	; 0x02
    957a:	01 97       	sbiw	r24, 0x01	; 1
    957c:	f1 f7       	brne	.-4      	; 0x957a <Door+0x228>
    957e:	9a 83       	std	Y+2, r25	; 0x02
    9580:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(500);
  }

}
    9582:	6d 96       	adiw	r28, 0x1d	; 29
    9584:	0f b6       	in	r0, 0x3f	; 63
    9586:	f8 94       	cli
    9588:	de bf       	out	0x3e, r29	; 62
    958a:	0f be       	out	0x3f, r0	; 63
    958c:	cd bf       	out	0x3d, r28	; 61
    958e:	cf 91       	pop	r28
    9590:	df 91       	pop	r29
    9592:	08 95       	ret

00009594 <AC>:
void AC(u8 ACState)
{
    9594:	df 93       	push	r29
    9596:	cf 93       	push	r28
    9598:	00 d0       	rcall	.+0      	; 0x959a <AC+0x6>
    959a:	0f 92       	push	r0
    959c:	cd b7       	in	r28, 0x3d	; 61
    959e:	de b7       	in	r29, 0x3e	; 62
    95a0:	8b 83       	std	Y+3, r24	; 0x03
  if (ACState == 1)
    95a2:	8b 81       	ldd	r24, Y+3	; 0x03
    95a4:	81 30       	cpi	r24, 0x01	; 1
    95a6:	a1 f5       	brne	.+104    	; 0x9610 <AC+0x7c>
  {
	  u16 Temperature = 0;
    95a8:	1a 82       	std	Y+2, r1	; 0x02
    95aa:	19 82       	std	Y+1, r1	; 0x01
	   HLM35Read(&Temperature);
    95ac:	ce 01       	movw	r24, r28
    95ae:	01 96       	adiw	r24, 0x01	; 1
    95b0:	0e 94 a8 20 	call	0x4150	; 0x4150 <HLM35Read>
	  if (Temperature >= MAXTEMPERATURE)
    95b4:	89 81       	ldd	r24, Y+1	; 0x01
    95b6:	9a 81       	ldd	r25, Y+2	; 0x02
    95b8:	8a 31       	cpi	r24, 0x1A	; 26
    95ba:	91 05       	cpc	r25, r1
    95bc:	60 f0       	brcs	.+24     	; 0x95d6 <AC+0x42>
	  {
		  HDCMotorSetDirection(CW);
    95be:	80 e0       	ldi	r24, 0x00	; 0
    95c0:	0e 94 5f 31 	call	0x62be	; 0x62be <HDCMotorSetDirection>
		  HDCMotorSpeed(100);
    95c4:	60 e0       	ldi	r22, 0x00	; 0
    95c6:	70 e0       	ldi	r23, 0x00	; 0
    95c8:	88 ec       	ldi	r24, 0xC8	; 200
    95ca:	92 e4       	ldi	r25, 0x42	; 66
    95cc:	0e 94 90 31 	call	0x6320	; 0x6320 <HDCMotorSpeed>
		  HDCMotorStart();
    95d0:	0e 94 ab 31 	call	0x6356	; 0x6356 <HDCMotorStart>
    95d4:	0d c0       	rjmp	.+26     	; 0x95f0 <AC+0x5c>
	  }
	  else if (Temperature < MINTEMPERATURE)
    95d6:	89 81       	ldd	r24, Y+1	; 0x01
    95d8:	9a 81       	ldd	r25, Y+2	; 0x02
    95da:	85 31       	cpi	r24, 0x15	; 21
    95dc:	91 05       	cpc	r25, r1
    95de:	40 f4       	brcc	.+16     	; 0x95f0 <AC+0x5c>
	  {
		  HLED_ON(LED1);
    95e0:	81 e0       	ldi	r24, 0x01	; 1
    95e2:	0e 94 11 21 	call	0x4222	; 0x4222 <HLED_ON>
		  HLED_OFF(LED0);
    95e6:	80 e0       	ldi	r24, 0x00	; 0
    95e8:	0e 94 42 21 	call	0x4284	; 0x4284 <HLED_OFF>
		  HDCMotorStop();
    95ec:	0e 94 b4 31 	call	0x6368	; 0x6368 <HDCMotorStop>
	  }
	  HCLCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
    95f0:	81 e0       	ldi	r24, 0x01	; 1
    95f2:	0e 94 61 34 	call	0x68c2	; 0x68c2 <HCLCD_WriteCommand4Bit>
	 	 HCLCD_SetCursorPosition(HCLCD_LINE_0,0);
    95f6:	80 e0       	ldi	r24, 0x00	; 0
    95f8:	60 e0       	ldi	r22, 0x00	; 0
    95fa:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
	 	HCLCD_WriteString("AC is ON!");
    95fe:	89 e4       	ldi	r24, 0x49	; 73
    9600:	92 e0       	ldi	r25, 0x02	; 2
    9602:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <HCLCD_WriteString>
	 	HHC05_SendString("AC is ON!");
    9606:	89 e4       	ldi	r24, 0x49	; 73
    9608:	92 e0       	ldi	r25, 0x02	; 2
    960a:	0e 94 29 30 	call	0x6052	; 0x6052 <HHC05_SendString>
    960e:	11 c0       	rjmp	.+34     	; 0x9632 <AC+0x9e>
  }
  else
  {
	  HDCMotorStop();
    9610:	0e 94 b4 31 	call	0x6368	; 0x6368 <HDCMotorStop>
	  HCLCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
    9614:	81 e0       	ldi	r24, 0x01	; 1
    9616:	0e 94 61 34 	call	0x68c2	; 0x68c2 <HCLCD_WriteCommand4Bit>
	  HCLCD_SetCursorPosition(HCLCD_LINE_0,0);
    961a:	80 e0       	ldi	r24, 0x00	; 0
    961c:	60 e0       	ldi	r22, 0x00	; 0
    961e:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
	  HCLCD_WriteString("AC is OFF!");
    9622:	83 e5       	ldi	r24, 0x53	; 83
    9624:	92 e0       	ldi	r25, 0x02	; 2
    9626:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <HCLCD_WriteString>
	  HHC05_SendString("AC is OFF!");
    962a:	83 e5       	ldi	r24, 0x53	; 83
    962c:	92 e0       	ldi	r25, 0x02	; 2
    962e:	0e 94 29 30 	call	0x6052	; 0x6052 <HHC05_SendString>
  }
}
    9632:	0f 90       	pop	r0
    9634:	0f 90       	pop	r0
    9636:	0f 90       	pop	r0
    9638:	cf 91       	pop	r28
    963a:	df 91       	pop	r29
    963c:	08 95       	ret

0000963e <Relay>:
void Relay(u8 RelayState)
{
    963e:	df 93       	push	r29
    9640:	cf 93       	push	r28
    9642:	0f 92       	push	r0
    9644:	cd b7       	in	r28, 0x3d	; 61
    9646:	de b7       	in	r29, 0x3e	; 62
    9648:	89 83       	std	Y+1, r24	; 0x01
  if (RelayState == 1)
    964a:	89 81       	ldd	r24, Y+1	; 0x01
    964c:	81 30       	cpi	r24, 0x01	; 1
    964e:	59 f4       	brne	.+22     	; 0x9666 <Relay+0x28>
  {
	  HCLCD_WriteString("Relay ON!");
    9650:	8e e5       	ldi	r24, 0x5E	; 94
    9652:	92 e0       	ldi	r25, 0x02	; 2
    9654:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <HCLCD_WriteString>
	  HHC05_SendString("Relay ON!");
    9658:	8e e5       	ldi	r24, 0x5E	; 94
    965a:	92 e0       	ldi	r25, 0x02	; 2
    965c:	0e 94 29 30 	call	0x6052	; 0x6052 <HHC05_SendString>
    HRELAYON();
    9660:	0e 94 65 20 	call	0x40ca	; 0x40ca <HRELAYON>
    9664:	0d c0       	rjmp	.+26     	; 0x9680 <Relay+0x42>
  }
  else if (RelayState == 0)
    9666:	89 81       	ldd	r24, Y+1	; 0x01
    9668:	88 23       	and	r24, r24
    966a:	51 f4       	brne	.+20     	; 0x9680 <Relay+0x42>
  {
	  HCLCD_WriteString("Relay OFF!");
    966c:	88 e6       	ldi	r24, 0x68	; 104
    966e:	92 e0       	ldi	r25, 0x02	; 2
    9670:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <HCLCD_WriteString>
	  HHC05_SendString("Relay OFF!");
    9674:	88 e6       	ldi	r24, 0x68	; 104
    9676:	92 e0       	ldi	r25, 0x02	; 2
    9678:	0e 94 29 30 	call	0x6052	; 0x6052 <HHC05_SendString>
   HRELAYOFF();
    967c:	0e 94 71 20 	call	0x40e2	; 0x40e2 <HRELAYOFF>
  }
}
    9680:	0f 90       	pop	r0
    9682:	cf 91       	pop	r28
    9684:	df 91       	pop	r29
    9686:	08 95       	ret

00009688 <AppInit>:
void AppInit(void)
{
    9688:	df 93       	push	r29
    968a:	cf 93       	push	r28
    968c:	cd b7       	in	r28, 0x3d	; 61
    968e:	de b7       	in	r29, 0x3e	; 62
  HEEPROM_WriteByte('1', 0, 101);
    9690:	81 e3       	ldi	r24, 0x31	; 49
    9692:	60 e0       	ldi	r22, 0x00	; 0
    9694:	45 e6       	ldi	r20, 0x65	; 101
    9696:	0e 94 70 30 	call	0x60e0	; 0x60e0 <HEEPROM_WriteByte>
  HEEPROM_WriteByte('2', 0, 102);
    969a:	82 e3       	ldi	r24, 0x32	; 50
    969c:	60 e0       	ldi	r22, 0x00	; 0
    969e:	46 e6       	ldi	r20, 0x66	; 102
    96a0:	0e 94 70 30 	call	0x60e0	; 0x60e0 <HEEPROM_WriteByte>
  HEEPROM_WriteByte('3', 0, 103);
    96a4:	83 e3       	ldi	r24, 0x33	; 51
    96a6:	60 e0       	ldi	r22, 0x00	; 0
    96a8:	47 e6       	ldi	r20, 0x67	; 103
    96aa:	0e 94 70 30 	call	0x60e0	; 0x60e0 <HEEPROM_WriteByte>
  HEEPROM_WriteByte('1', 0, 104);
    96ae:	81 e3       	ldi	r24, 0x31	; 49
    96b0:	60 e0       	ldi	r22, 0x00	; 0
    96b2:	48 e6       	ldi	r20, 0x68	; 104
    96b4:	0e 94 70 30 	call	0x60e0	; 0x60e0 <HEEPROM_WriteByte>
  HEEPROM_WriteByte('2', 0, 105);
    96b8:	82 e3       	ldi	r24, 0x32	; 50
    96ba:	60 e0       	ldi	r22, 0x00	; 0
    96bc:	49 e6       	ldi	r20, 0x69	; 105
    96be:	0e 94 70 30 	call	0x60e0	; 0x60e0 <HEEPROM_WriteByte>
  HEEPROM_WriteByte('3', 0, 106);
    96c2:	83 e3       	ldi	r24, 0x33	; 51
    96c4:	60 e0       	ldi	r22, 0x00	; 0
    96c6:	4a e6       	ldi	r20, 0x6A	; 106
    96c8:	0e 94 70 30 	call	0x60e0	; 0x60e0 <HEEPROM_WriteByte>
  HEEPROM_WriteByte('4', 0, 107);
    96cc:	84 e3       	ldi	r24, 0x34	; 52
    96ce:	60 e0       	ldi	r22, 0x00	; 0
    96d0:	4b e6       	ldi	r20, 0x6B	; 107
    96d2:	0e 94 70 30 	call	0x60e0	; 0x60e0 <HEEPROM_WriteByte>
}
    96d6:	cf 91       	pop	r28
    96d8:	df 91       	pop	r29
    96da:	08 95       	ret

000096dc <Welcoming>:

void Welcoming(void)
{
    96dc:	df 93       	push	r29
    96de:	cf 93       	push	r28
    96e0:	cd b7       	in	r28, 0x3d	; 61
    96e2:	de b7       	in	r29, 0x3e	; 62
    96e4:	2e 97       	sbiw	r28, 0x0e	; 14
    96e6:	0f b6       	in	r0, 0x3f	; 63
    96e8:	f8 94       	cli
    96ea:	de bf       	out	0x3e, r29	; 62
    96ec:	0f be       	out	0x3f, r0	; 63
    96ee:	cd bf       	out	0x3d, r28	; 61
	HCLCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
    96f0:	81 e0       	ldi	r24, 0x01	; 1
    96f2:	0e 94 61 34 	call	0x68c2	; 0x68c2 <HCLCD_WriteCommand4Bit>
    HCLCD_SetCursorPosition(HCLCD_LINE_0,0);
    96f6:	80 e0       	ldi	r24, 0x00	; 0
    96f8:	60 e0       	ldi	r22, 0x00	; 0
    96fa:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
    HCLCD_WriteString("Welcome User!");
    96fe:	83 e7       	ldi	r24, 0x73	; 115
    9700:	92 e0       	ldi	r25, 0x02	; 2
    9702:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <HCLCD_WriteString>
    HHC05_SendString("Welcome User!");
    9706:	83 e7       	ldi	r24, 0x73	; 115
    9708:	92 e0       	ldi	r25, 0x02	; 2
    970a:	0e 94 29 30 	call	0x6052	; 0x6052 <HHC05_SendString>
    970e:	80 e0       	ldi	r24, 0x00	; 0
    9710:	90 e0       	ldi	r25, 0x00	; 0
    9712:	aa e7       	ldi	r26, 0x7A	; 122
    9714:	b4 e4       	ldi	r27, 0x44	; 68
    9716:	8b 87       	std	Y+11, r24	; 0x0b
    9718:	9c 87       	std	Y+12, r25	; 0x0c
    971a:	ad 87       	std	Y+13, r26	; 0x0d
    971c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    971e:	6b 85       	ldd	r22, Y+11	; 0x0b
    9720:	7c 85       	ldd	r23, Y+12	; 0x0c
    9722:	8d 85       	ldd	r24, Y+13	; 0x0d
    9724:	9e 85       	ldd	r25, Y+14	; 0x0e
    9726:	20 e0       	ldi	r18, 0x00	; 0
    9728:	30 e0       	ldi	r19, 0x00	; 0
    972a:	4a e7       	ldi	r20, 0x7A	; 122
    972c:	55 e4       	ldi	r21, 0x45	; 69
    972e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    9732:	dc 01       	movw	r26, r24
    9734:	cb 01       	movw	r24, r22
    9736:	8f 83       	std	Y+7, r24	; 0x07
    9738:	98 87       	std	Y+8, r25	; 0x08
    973a:	a9 87       	std	Y+9, r26	; 0x09
    973c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    973e:	6f 81       	ldd	r22, Y+7	; 0x07
    9740:	78 85       	ldd	r23, Y+8	; 0x08
    9742:	89 85       	ldd	r24, Y+9	; 0x09
    9744:	9a 85       	ldd	r25, Y+10	; 0x0a
    9746:	20 e0       	ldi	r18, 0x00	; 0
    9748:	30 e0       	ldi	r19, 0x00	; 0
    974a:	40 e8       	ldi	r20, 0x80	; 128
    974c:	5f e3       	ldi	r21, 0x3F	; 63
    974e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    9752:	88 23       	and	r24, r24
    9754:	2c f4       	brge	.+10     	; 0x9760 <Welcoming+0x84>
		__ticks = 1;
    9756:	81 e0       	ldi	r24, 0x01	; 1
    9758:	90 e0       	ldi	r25, 0x00	; 0
    975a:	9e 83       	std	Y+6, r25	; 0x06
    975c:	8d 83       	std	Y+5, r24	; 0x05
    975e:	3f c0       	rjmp	.+126    	; 0x97de <Welcoming+0x102>
	else if (__tmp > 65535)
    9760:	6f 81       	ldd	r22, Y+7	; 0x07
    9762:	78 85       	ldd	r23, Y+8	; 0x08
    9764:	89 85       	ldd	r24, Y+9	; 0x09
    9766:	9a 85       	ldd	r25, Y+10	; 0x0a
    9768:	20 e0       	ldi	r18, 0x00	; 0
    976a:	3f ef       	ldi	r19, 0xFF	; 255
    976c:	4f e7       	ldi	r20, 0x7F	; 127
    976e:	57 e4       	ldi	r21, 0x47	; 71
    9770:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    9774:	18 16       	cp	r1, r24
    9776:	4c f5       	brge	.+82     	; 0x97ca <Welcoming+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9778:	6b 85       	ldd	r22, Y+11	; 0x0b
    977a:	7c 85       	ldd	r23, Y+12	; 0x0c
    977c:	8d 85       	ldd	r24, Y+13	; 0x0d
    977e:	9e 85       	ldd	r25, Y+14	; 0x0e
    9780:	20 e0       	ldi	r18, 0x00	; 0
    9782:	30 e0       	ldi	r19, 0x00	; 0
    9784:	40 e2       	ldi	r20, 0x20	; 32
    9786:	51 e4       	ldi	r21, 0x41	; 65
    9788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    978c:	dc 01       	movw	r26, r24
    978e:	cb 01       	movw	r24, r22
    9790:	bc 01       	movw	r22, r24
    9792:	cd 01       	movw	r24, r26
    9794:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    9798:	dc 01       	movw	r26, r24
    979a:	cb 01       	movw	r24, r22
    979c:	9e 83       	std	Y+6, r25	; 0x06
    979e:	8d 83       	std	Y+5, r24	; 0x05
    97a0:	0f c0       	rjmp	.+30     	; 0x97c0 <Welcoming+0xe4>
    97a2:	80 e9       	ldi	r24, 0x90	; 144
    97a4:	91 e0       	ldi	r25, 0x01	; 1
    97a6:	9c 83       	std	Y+4, r25	; 0x04
    97a8:	8b 83       	std	Y+3, r24	; 0x03
    97aa:	8b 81       	ldd	r24, Y+3	; 0x03
    97ac:	9c 81       	ldd	r25, Y+4	; 0x04
    97ae:	01 97       	sbiw	r24, 0x01	; 1
    97b0:	f1 f7       	brne	.-4      	; 0x97ae <Welcoming+0xd2>
    97b2:	9c 83       	std	Y+4, r25	; 0x04
    97b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    97b6:	8d 81       	ldd	r24, Y+5	; 0x05
    97b8:	9e 81       	ldd	r25, Y+6	; 0x06
    97ba:	01 97       	sbiw	r24, 0x01	; 1
    97bc:	9e 83       	std	Y+6, r25	; 0x06
    97be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    97c0:	8d 81       	ldd	r24, Y+5	; 0x05
    97c2:	9e 81       	ldd	r25, Y+6	; 0x06
    97c4:	00 97       	sbiw	r24, 0x00	; 0
    97c6:	69 f7       	brne	.-38     	; 0x97a2 <Welcoming+0xc6>
    97c8:	14 c0       	rjmp	.+40     	; 0x97f2 <Welcoming+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    97ca:	6f 81       	ldd	r22, Y+7	; 0x07
    97cc:	78 85       	ldd	r23, Y+8	; 0x08
    97ce:	89 85       	ldd	r24, Y+9	; 0x09
    97d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    97d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    97d6:	dc 01       	movw	r26, r24
    97d8:	cb 01       	movw	r24, r22
    97da:	9e 83       	std	Y+6, r25	; 0x06
    97dc:	8d 83       	std	Y+5, r24	; 0x05
    97de:	8d 81       	ldd	r24, Y+5	; 0x05
    97e0:	9e 81       	ldd	r25, Y+6	; 0x06
    97e2:	9a 83       	std	Y+2, r25	; 0x02
    97e4:	89 83       	std	Y+1, r24	; 0x01
    97e6:	89 81       	ldd	r24, Y+1	; 0x01
    97e8:	9a 81       	ldd	r25, Y+2	; 0x02
    97ea:	01 97       	sbiw	r24, 0x01	; 1
    97ec:	f1 f7       	brne	.-4      	; 0x97ea <Welcoming+0x10e>
    97ee:	9a 83       	std	Y+2, r25	; 0x02
    97f0:	89 83       	std	Y+1, r24	; 0x01
   _delay_ms(1000);
 HCLCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
    97f2:	81 e0       	ldi	r24, 0x01	; 1
    97f4:	0e 94 61 34 	call	0x68c2	; 0x68c2 <HCLCD_WriteCommand4Bit>
  HCLCD_SetCursorPosition(HCLCD_LINE_0,0);
    97f8:	80 e0       	ldi	r24, 0x00	; 0
    97fa:	60 e0       	ldi	r22, 0x00	; 0
    97fc:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>

}
    9800:	2e 96       	adiw	r28, 0x0e	; 14
    9802:	0f b6       	in	r0, 0x3f	; 63
    9804:	f8 94       	cli
    9806:	de bf       	out	0x3e, r29	; 62
    9808:	0f be       	out	0x3f, r0	; 63
    980a:	cd bf       	out	0x3d, r28	; 61
    980c:	cf 91       	pop	r28
    980e:	df 91       	pop	r29
    9810:	08 95       	ret

00009812 <Reset>:
void Reset(u8* ACState, u8* DoorState, u8* RelayState)
{
    9812:	df 93       	push	r29
    9814:	cf 93       	push	r28
    9816:	00 d0       	rcall	.+0      	; 0x9818 <Reset+0x6>
    9818:	00 d0       	rcall	.+0      	; 0x981a <Reset+0x8>
    981a:	00 d0       	rcall	.+0      	; 0x981c <Reset+0xa>
    981c:	cd b7       	in	r28, 0x3d	; 61
    981e:	de b7       	in	r29, 0x3e	; 62
    9820:	9a 83       	std	Y+2, r25	; 0x02
    9822:	89 83       	std	Y+1, r24	; 0x01
    9824:	7c 83       	std	Y+4, r23	; 0x04
    9826:	6b 83       	std	Y+3, r22	; 0x03
    9828:	5e 83       	std	Y+6, r21	; 0x06
    982a:	4d 83       	std	Y+5, r20	; 0x05
  *ACState = 0;
    982c:	e9 81       	ldd	r30, Y+1	; 0x01
    982e:	fa 81       	ldd	r31, Y+2	; 0x02
    9830:	10 82       	st	Z, r1
  *DoorState = 0;
    9832:	eb 81       	ldd	r30, Y+3	; 0x03
    9834:	fc 81       	ldd	r31, Y+4	; 0x04
    9836:	10 82       	st	Z, r1
  *RelayState = 0;
    9838:	ed 81       	ldd	r30, Y+5	; 0x05
    983a:	fe 81       	ldd	r31, Y+6	; 0x06
    983c:	10 82       	st	Z, r1
  HDCMotorStop();
    983e:	0e 94 b4 31 	call	0x6368	; 0x6368 <HDCMotorStop>
  CloseTheDoor();
    9842:	0e 94 9a 49 	call	0x9334	; 0x9334 <CloseTheDoor>
  HRELAYOFF();
    9846:	0e 94 71 20 	call	0x40e2	; 0x40e2 <HRELAYOFF>
  HHC05_SendString("AC Off");
    984a:	81 e8       	ldi	r24, 0x81	; 129
    984c:	92 e0       	ldi	r25, 0x02	; 2
    984e:	0e 94 29 30 	call	0x6052	; 0x6052 <HHC05_SendString>
  HHC05_SendString("Door is closed");
    9852:	88 e8       	ldi	r24, 0x88	; 136
    9854:	92 e0       	ldi	r25, 0x02	; 2
    9856:	0e 94 29 30 	call	0x6052	; 0x6052 <HHC05_SendString>
  HHC05_SendString("Relay Off");
    985a:	87 e9       	ldi	r24, 0x97	; 151
    985c:	92 e0       	ldi	r25, 0x02	; 2
    985e:	0e 94 29 30 	call	0x6052	; 0x6052 <HHC05_SendString>
  HHC05_SendString("Resetting  the system...");
    9862:	81 ea       	ldi	r24, 0xA1	; 161
    9864:	92 e0       	ldi	r25, 0x02	; 2
    9866:	0e 94 29 30 	call	0x6052	; 0x6052 <HHC05_SendString>
  DeleteAll();
    986a:	0e 94 c4 47 	call	0x8f88	; 0x8f88 <DeleteAll>
  AppInit();
    986e:	0e 94 44 4b 	call	0x9688	; 0x9688 <AppInit>
}
    9872:	26 96       	adiw	r28, 0x06	; 6
    9874:	0f b6       	in	r0, 0x3f	; 63
    9876:	f8 94       	cli
    9878:	de bf       	out	0x3e, r29	; 62
    987a:	0f be       	out	0x3f, r0	; 63
    987c:	cd bf       	out	0x3d, r28	; 61
    987e:	cf 91       	pop	r28
    9880:	df 91       	pop	r29
    9882:	08 95       	ret

00009884 <main>:





int main(){
    9884:	0f 93       	push	r16
    9886:	1f 93       	push	r17
    9888:	df 93       	push	r29
    988a:	cf 93       	push	r28
    988c:	cd b7       	in	r28, 0x3d	; 61
    988e:	de b7       	in	r29, 0x3e	; 62
    9890:	c9 58       	subi	r28, 0x89	; 137
    9892:	d0 40       	sbci	r29, 0x00	; 0
    9894:	0f b6       	in	r0, 0x3f	; 63
    9896:	f8 94       	cli
    9898:	de bf       	out	0x3e, r29	; 62
    989a:	0f be       	out	0x3f, r0	; 63
    989c:	cd bf       	out	0x3d, r28	; 61

	 HCLCDInit4BitMode();
    989e:	0e 94 bd 31 	call	0x637a	; 0x637a <HCLCDInit4BitMode>
		  HKPD_Init();
    98a2:	0e 94 13 23 	call	0x4626	; 0x4626 <HKPD_Init>

		  //MTWI_MasterInit();
		  HDimmerLightInit();
    98a6:	0e 94 08 31 	call	0x6210	; 0x6210 <HDimmerLightInit>
		  I2C_Init();
    98aa:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <I2C_Init>
		  HHC05_Init();
    98ae:	0e 94 11 30 	call	0x6022	; 0x6022 <HHC05_Init>
		  HLM35Init();
    98b2:	0e 94 9f 20 	call	0x413e	; 0x413e <HLM35Init>
	      HDCMotorInit();
    98b6:	0e 94 4c 31 	call	0x6298	; 0x6298 <HDCMotorInit>
	      HServoInit();
    98ba:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <HServoInit>
		  HLED_Init(LED0);
    98be:	80 e0       	ldi	r24, 0x00	; 0
    98c0:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <HLED_Init>
		  HLED_Init(LED1);
    98c4:	81 e0       	ldi	r24, 0x01	; 1
    98c6:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <HLED_Init>
		  HBUZZERInit();
    98ca:	0e 94 9f 37 	call	0x6f3e	; 0x6f3e <HBUZZERInit>
		  HPushButton_Init();
    98ce:	0e 94 7d 20 	call	0x40fa	; 0x40fa <HPushButton_Init>
		  HRELAYInit();
    98d2:	0e 94 59 20 	call	0x40b2	; 0x40b2 <HRELAYInit>
		  DeleteAll();
    98d6:	0e 94 c4 47 	call	0x8f88	; 0x8f88 <DeleteAll>
		  AppInit();
    98da:	0e 94 44 4b 	call	0x9688	; 0x9688 <AppInit>


		  char NumberOfUsers = 0;
    98de:	fe 01       	movw	r30, r28
    98e0:	ea 58       	subi	r30, 0x8A	; 138
    98e2:	ff 4f       	sbci	r31, 0xFF	; 255
    98e4:	10 82       	st	Z, r1
		  NumberOfUsers = HEEPROM_ReadByte(0, 100);
    98e6:	80 e0       	ldi	r24, 0x00	; 0
    98e8:	64 e6       	ldi	r22, 0x64	; 100
    98ea:	0e 94 4b 30 	call	0x6096	; 0x6096 <HEEPROM_ReadByte>
    98ee:	fe 01       	movw	r30, r28
    98f0:	ea 58       	subi	r30, 0x8A	; 138
    98f2:	ff 4f       	sbci	r31, 0xFF	; 255
    98f4:	80 83       	st	Z, r24
		  u8 UserID   [IDLENGTH] = {1, 1, 1};
    98f6:	ce 01       	movw	r24, r28
    98f8:	89 58       	subi	r24, 0x89	; 137
    98fa:	9f 4f       	sbci	r25, 0xFF	; 255
    98fc:	cb 57       	subi	r28, 0x7B	; 123
    98fe:	df 4f       	sbci	r29, 0xFF	; 255
    9900:	99 83       	std	Y+1, r25	; 0x01
    9902:	88 83       	st	Y, r24
    9904:	c5 58       	subi	r28, 0x85	; 133
    9906:	d0 40       	sbci	r29, 0x00	; 0
    9908:	2a ea       	ldi	r18, 0xAA	; 170
    990a:	34 e0       	ldi	r19, 0x04	; 4
    990c:	c9 57       	subi	r28, 0x79	; 121
    990e:	df 4f       	sbci	r29, 0xFF	; 255
    9910:	39 83       	std	Y+1, r19	; 0x01
    9912:	28 83       	st	Y, r18
    9914:	c7 58       	subi	r28, 0x87	; 135
    9916:	d0 40       	sbci	r29, 0x00	; 0
    9918:	33 e0       	ldi	r19, 0x03	; 3
    991a:	c7 57       	subi	r28, 0x77	; 119
    991c:	df 4f       	sbci	r29, 0xFF	; 255
    991e:	38 83       	st	Y, r19
    9920:	c9 58       	subi	r28, 0x89	; 137
    9922:	d0 40       	sbci	r29, 0x00	; 0
    9924:	c9 57       	subi	r28, 0x79	; 121
    9926:	df 4f       	sbci	r29, 0xFF	; 255
    9928:	e8 81       	ld	r30, Y
    992a:	f9 81       	ldd	r31, Y+1	; 0x01
    992c:	c7 58       	subi	r28, 0x87	; 135
    992e:	d0 40       	sbci	r29, 0x00	; 0
    9930:	00 80       	ld	r0, Z
    9932:	c9 57       	subi	r28, 0x79	; 121
    9934:	df 4f       	sbci	r29, 0xFF	; 255
    9936:	28 81       	ld	r18, Y
    9938:	39 81       	ldd	r19, Y+1	; 0x01
    993a:	c7 58       	subi	r28, 0x87	; 135
    993c:	d0 40       	sbci	r29, 0x00	; 0
    993e:	2f 5f       	subi	r18, 0xFF	; 255
    9940:	3f 4f       	sbci	r19, 0xFF	; 255
    9942:	c9 57       	subi	r28, 0x79	; 121
    9944:	df 4f       	sbci	r29, 0xFF	; 255
    9946:	39 83       	std	Y+1, r19	; 0x01
    9948:	28 83       	st	Y, r18
    994a:	c7 58       	subi	r28, 0x87	; 135
    994c:	d0 40       	sbci	r29, 0x00	; 0
    994e:	cb 57       	subi	r28, 0x7B	; 123
    9950:	df 4f       	sbci	r29, 0xFF	; 255
    9952:	e8 81       	ld	r30, Y
    9954:	f9 81       	ldd	r31, Y+1	; 0x01
    9956:	c5 58       	subi	r28, 0x85	; 133
    9958:	d0 40       	sbci	r29, 0x00	; 0
    995a:	00 82       	st	Z, r0
    995c:	cb 57       	subi	r28, 0x7B	; 123
    995e:	df 4f       	sbci	r29, 0xFF	; 255
    9960:	28 81       	ld	r18, Y
    9962:	39 81       	ldd	r19, Y+1	; 0x01
    9964:	c5 58       	subi	r28, 0x85	; 133
    9966:	d0 40       	sbci	r29, 0x00	; 0
    9968:	2f 5f       	subi	r18, 0xFF	; 255
    996a:	3f 4f       	sbci	r19, 0xFF	; 255
    996c:	cb 57       	subi	r28, 0x7B	; 123
    996e:	df 4f       	sbci	r29, 0xFF	; 255
    9970:	39 83       	std	Y+1, r19	; 0x01
    9972:	28 83       	st	Y, r18
    9974:	c5 58       	subi	r28, 0x85	; 133
    9976:	d0 40       	sbci	r29, 0x00	; 0
    9978:	c7 57       	subi	r28, 0x77	; 119
    997a:	df 4f       	sbci	r29, 0xFF	; 255
    997c:	38 81       	ld	r19, Y
    997e:	c9 58       	subi	r28, 0x89	; 137
    9980:	d0 40       	sbci	r29, 0x00	; 0
    9982:	31 50       	subi	r19, 0x01	; 1
    9984:	c7 57       	subi	r28, 0x77	; 119
    9986:	df 4f       	sbci	r29, 0xFF	; 255
    9988:	38 83       	st	Y, r19
    998a:	c9 58       	subi	r28, 0x89	; 137
    998c:	d0 40       	sbci	r29, 0x00	; 0
    998e:	c7 57       	subi	r28, 0x77	; 119
    9990:	df 4f       	sbci	r29, 0xFF	; 255
    9992:	88 81       	ld	r24, Y
    9994:	c9 58       	subi	r28, 0x89	; 137
    9996:	d0 40       	sbci	r29, 0x00	; 0
    9998:	88 23       	and	r24, r24
    999a:	21 f6       	brne	.-120    	; 0x9924 <main+0xa0>
		  u8 UserPassword [PASSWORDLENGTH] = {1,1,5,5};
    999c:	fe 01       	movw	r30, r28
    999e:	e6 58       	subi	r30, 0x86	; 134
    99a0:	ff 4f       	sbci	r31, 0xFF	; 255
    99a2:	81 e0       	ldi	r24, 0x01	; 1
    99a4:	80 83       	st	Z, r24
    99a6:	fe 01       	movw	r30, r28
    99a8:	e6 58       	subi	r30, 0x86	; 134
    99aa:	ff 4f       	sbci	r31, 0xFF	; 255
    99ac:	81 e0       	ldi	r24, 0x01	; 1
    99ae:	81 83       	std	Z+1, r24	; 0x01
    99b0:	fe 01       	movw	r30, r28
    99b2:	e6 58       	subi	r30, 0x86	; 134
    99b4:	ff 4f       	sbci	r31, 0xFF	; 255
    99b6:	85 e0       	ldi	r24, 0x05	; 5
    99b8:	82 83       	std	Z+2, r24	; 0x02
    99ba:	fe 01       	movw	r30, r28
    99bc:	e6 58       	subi	r30, 0x86	; 134
    99be:	ff 4f       	sbci	r31, 0xFF	; 255
    99c0:	85 e0       	ldi	r24, 0x05	; 5
    99c2:	83 83       	std	Z+3, r24	; 0x03
		  u8 KeyPRESSEDBUTTON = 0;
    99c4:	fe 01       	movw	r30, r28
    99c6:	eb 58       	subi	r30, 0x8B	; 139
    99c8:	ff 4f       	sbci	r31, 0xFF	; 255
    99ca:	10 82       	st	Z, r1
		  u8 Trails = 0;
    99cc:	fe 01       	movw	r30, r28
    99ce:	ec 58       	subi	r30, 0x8C	; 140
    99d0:	ff 4f       	sbci	r31, 0xFF	; 255
    99d2:	10 82       	st	Z, r1
		  u8 DoorState = 0;
    99d4:	fe 01       	movw	r30, r28
    99d6:	e2 58       	subi	r30, 0x82	; 130
    99d8:	ff 4f       	sbci	r31, 0xFF	; 255
    99da:	10 82       	st	Z, r1
		  u8 ACState = 0;
    99dc:	fe 01       	movw	r30, r28
    99de:	e1 58       	subi	r30, 0x81	; 129
    99e0:	ff 4f       	sbci	r31, 0xFF	; 255
    99e2:	10 82       	st	Z, r1
		  u8 RelayState = 0;
    99e4:	fe 01       	movw	r30, r28
    99e6:	e0 58       	subi	r30, 0x80	; 128
    99e8:	ff 4f       	sbci	r31, 0xFF	; 255
    99ea:	10 82       	st	Z, r1
		  u8 TTLData = 0;
    99ec:	fe 01       	movw	r30, r28
    99ee:	ed 58       	subi	r30, 0x8D	; 141
    99f0:	ff 4f       	sbci	r31, 0xFF	; 255
    99f2:	10 82       	st	Z, r1
		  u8 AppState = WELCOME;
    99f4:	fe 01       	movw	r30, r28
    99f6:	ee 58       	subi	r30, 0x8E	; 142
    99f8:	ff 4f       	sbci	r31, 0xFF	; 255
    99fa:	10 82       	st	Z, r1
		  while (1)
		  {
		    switch (AppState)
    99fc:	fe 01       	movw	r30, r28
    99fe:	ee 58       	subi	r30, 0x8E	; 142
    9a00:	ff 4f       	sbci	r31, 0xFF	; 255
    9a02:	80 81       	ld	r24, Z
    9a04:	e8 2f       	mov	r30, r24
    9a06:	f0 e0       	ldi	r31, 0x00	; 0
    9a08:	cd 57       	subi	r28, 0x7D	; 125
    9a0a:	df 4f       	sbci	r29, 0xFF	; 255
    9a0c:	f9 83       	std	Y+1, r31	; 0x01
    9a0e:	e8 83       	st	Y, r30
    9a10:	c3 58       	subi	r28, 0x83	; 131
    9a12:	d0 40       	sbci	r29, 0x00	; 0
    9a14:	cd 57       	subi	r28, 0x7D	; 125
    9a16:	df 4f       	sbci	r29, 0xFF	; 255
    9a18:	28 81       	ld	r18, Y
    9a1a:	39 81       	ldd	r19, Y+1	; 0x01
    9a1c:	c3 58       	subi	r28, 0x83	; 131
    9a1e:	d0 40       	sbci	r29, 0x00	; 0
    9a20:	25 30       	cpi	r18, 0x05	; 5
    9a22:	31 05       	cpc	r19, r1
    9a24:	09 f4       	brne	.+2      	; 0x9a28 <main+0x1a4>
    9a26:	30 c7       	rjmp	.+3680   	; 0xa888 <main+0x1004>
    9a28:	cd 57       	subi	r28, 0x7D	; 125
    9a2a:	df 4f       	sbci	r29, 0xFF	; 255
    9a2c:	88 81       	ld	r24, Y
    9a2e:	99 81       	ldd	r25, Y+1	; 0x01
    9a30:	c3 58       	subi	r28, 0x83	; 131
    9a32:	d0 40       	sbci	r29, 0x00	; 0
    9a34:	86 30       	cpi	r24, 0x06	; 6
    9a36:	91 05       	cpc	r25, r1
    9a38:	ec f4       	brge	.+58     	; 0x9a74 <main+0x1f0>
    9a3a:	cd 57       	subi	r28, 0x7D	; 125
    9a3c:	df 4f       	sbci	r29, 0xFF	; 255
    9a3e:	e8 81       	ld	r30, Y
    9a40:	f9 81       	ldd	r31, Y+1	; 0x01
    9a42:	c3 58       	subi	r28, 0x83	; 131
    9a44:	d0 40       	sbci	r29, 0x00	; 0
    9a46:	e1 30       	cpi	r30, 0x01	; 1
    9a48:	f1 05       	cpc	r31, r1
    9a4a:	09 f4       	brne	.+2      	; 0x9a4e <main+0x1ca>
    9a4c:	2b c5       	rjmp	.+2646   	; 0xa4a4 <main+0xc20>
    9a4e:	cd 57       	subi	r28, 0x7D	; 125
    9a50:	df 4f       	sbci	r29, 0xFF	; 255
    9a52:	28 81       	ld	r18, Y
    9a54:	39 81       	ldd	r19, Y+1	; 0x01
    9a56:	c3 58       	subi	r28, 0x83	; 131
    9a58:	d0 40       	sbci	r29, 0x00	; 0
    9a5a:	22 30       	cpi	r18, 0x02	; 2
    9a5c:	31 05       	cpc	r19, r1
    9a5e:	09 f4       	brne	.+2      	; 0x9a62 <main+0x1de>
    9a60:	3d c7       	rjmp	.+3706   	; 0xa8dc <main+0x1058>
    9a62:	cd 57       	subi	r28, 0x7D	; 125
    9a64:	df 4f       	sbci	r29, 0xFF	; 255
    9a66:	88 81       	ld	r24, Y
    9a68:	99 81       	ldd	r25, Y+1	; 0x01
    9a6a:	c3 58       	subi	r28, 0x83	; 131
    9a6c:	d0 40       	sbci	r29, 0x00	; 0
    9a6e:	00 97       	sbiw	r24, 0x00	; 0
    9a70:	01 f1       	breq	.+64     	; 0x9ab2 <main+0x22e>
    9a72:	c4 cf       	rjmp	.-120    	; 0x99fc <main+0x178>
    9a74:	cd 57       	subi	r28, 0x7D	; 125
    9a76:	df 4f       	sbci	r29, 0xFF	; 255
    9a78:	e8 81       	ld	r30, Y
    9a7a:	f9 81       	ldd	r31, Y+1	; 0x01
    9a7c:	c3 58       	subi	r28, 0x83	; 131
    9a7e:	d0 40       	sbci	r29, 0x00	; 0
    9a80:	e1 33       	cpi	r30, 0x31	; 49
    9a82:	f1 05       	cpc	r31, r1
    9a84:	09 f4       	brne	.+2      	; 0x9a88 <main+0x204>
    9a86:	17 c1       	rjmp	.+558    	; 0x9cb6 <main+0x432>
    9a88:	cd 57       	subi	r28, 0x7D	; 125
    9a8a:	df 4f       	sbci	r29, 0xFF	; 255
    9a8c:	28 81       	ld	r18, Y
    9a8e:	39 81       	ldd	r19, Y+1	; 0x01
    9a90:	c3 58       	subi	r28, 0x83	; 131
    9a92:	d0 40       	sbci	r29, 0x00	; 0
    9a94:	22 33       	cpi	r18, 0x32	; 50
    9a96:	31 05       	cpc	r19, r1
    9a98:	09 f4       	brne	.+2      	; 0x9a9c <main+0x218>
    9a9a:	82 c3       	rjmp	.+1796   	; 0xa1a0 <main+0x91c>
    9a9c:	cd 57       	subi	r28, 0x7D	; 125
    9a9e:	df 4f       	sbci	r29, 0xFF	; 255
    9aa0:	88 81       	ld	r24, Y
    9aa2:	99 81       	ldd	r25, Y+1	; 0x01
    9aa4:	c3 58       	subi	r28, 0x83	; 131
    9aa6:	d0 40       	sbci	r29, 0x00	; 0
    9aa8:	80 33       	cpi	r24, 0x30	; 48
    9aaa:	91 05       	cpc	r25, r1
    9aac:	09 f4       	brne	.+2      	; 0x9ab0 <main+0x22c>
    9aae:	bd c0       	rjmp	.+378    	; 0x9c2a <main+0x3a6>
    9ab0:	a5 cf       	rjmp	.-182    	; 0x99fc <main+0x178>
		    {
		      case WELCOME :
		        Welcoming();
    9ab2:	0e 94 6e 4b 	call	0x96dc	; 0x96dc <Welcoming>
    9ab6:	fe 01       	movw	r30, r28
    9ab8:	e3 59       	subi	r30, 0x93	; 147
    9aba:	ff 4f       	sbci	r31, 0xFF	; 255
    9abc:	80 e0       	ldi	r24, 0x00	; 0
    9abe:	90 e0       	ldi	r25, 0x00	; 0
    9ac0:	aa ef       	ldi	r26, 0xFA	; 250
    9ac2:	b4 e4       	ldi	r27, 0x44	; 68
    9ac4:	80 83       	st	Z, r24
    9ac6:	91 83       	std	Z+1, r25	; 0x01
    9ac8:	a2 83       	std	Z+2, r26	; 0x02
    9aca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    9acc:	8e 01       	movw	r16, r28
    9ace:	07 59       	subi	r16, 0x97	; 151
    9ad0:	1f 4f       	sbci	r17, 0xFF	; 255
    9ad2:	fe 01       	movw	r30, r28
    9ad4:	e3 59       	subi	r30, 0x93	; 147
    9ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    9ad8:	60 81       	ld	r22, Z
    9ada:	71 81       	ldd	r23, Z+1	; 0x01
    9adc:	82 81       	ldd	r24, Z+2	; 0x02
    9ade:	93 81       	ldd	r25, Z+3	; 0x03
    9ae0:	20 e0       	ldi	r18, 0x00	; 0
    9ae2:	30 e0       	ldi	r19, 0x00	; 0
    9ae4:	4a e7       	ldi	r20, 0x7A	; 122
    9ae6:	55 e4       	ldi	r21, 0x45	; 69
    9ae8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    9aec:	dc 01       	movw	r26, r24
    9aee:	cb 01       	movw	r24, r22
    9af0:	f8 01       	movw	r30, r16
    9af2:	80 83       	st	Z, r24
    9af4:	91 83       	std	Z+1, r25	; 0x01
    9af6:	a2 83       	std	Z+2, r26	; 0x02
    9af8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    9afa:	fe 01       	movw	r30, r28
    9afc:	e7 59       	subi	r30, 0x97	; 151
    9afe:	ff 4f       	sbci	r31, 0xFF	; 255
    9b00:	60 81       	ld	r22, Z
    9b02:	71 81       	ldd	r23, Z+1	; 0x01
    9b04:	82 81       	ldd	r24, Z+2	; 0x02
    9b06:	93 81       	ldd	r25, Z+3	; 0x03
    9b08:	20 e0       	ldi	r18, 0x00	; 0
    9b0a:	30 e0       	ldi	r19, 0x00	; 0
    9b0c:	40 e8       	ldi	r20, 0x80	; 128
    9b0e:	5f e3       	ldi	r21, 0x3F	; 63
    9b10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    9b14:	88 23       	and	r24, r24
    9b16:	44 f4       	brge	.+16     	; 0x9b28 <main+0x2a4>
		__ticks = 1;
    9b18:	fe 01       	movw	r30, r28
    9b1a:	e9 59       	subi	r30, 0x99	; 153
    9b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    9b1e:	81 e0       	ldi	r24, 0x01	; 1
    9b20:	90 e0       	ldi	r25, 0x00	; 0
    9b22:	91 83       	std	Z+1, r25	; 0x01
    9b24:	80 83       	st	Z, r24
    9b26:	64 c0       	rjmp	.+200    	; 0x9bf0 <main+0x36c>
	else if (__tmp > 65535)
    9b28:	fe 01       	movw	r30, r28
    9b2a:	e7 59       	subi	r30, 0x97	; 151
    9b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    9b2e:	60 81       	ld	r22, Z
    9b30:	71 81       	ldd	r23, Z+1	; 0x01
    9b32:	82 81       	ldd	r24, Z+2	; 0x02
    9b34:	93 81       	ldd	r25, Z+3	; 0x03
    9b36:	20 e0       	ldi	r18, 0x00	; 0
    9b38:	3f ef       	ldi	r19, 0xFF	; 255
    9b3a:	4f e7       	ldi	r20, 0x7F	; 127
    9b3c:	57 e4       	ldi	r21, 0x47	; 71
    9b3e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    9b42:	18 16       	cp	r1, r24
    9b44:	0c f0       	brlt	.+2      	; 0x9b48 <main+0x2c4>
    9b46:	43 c0       	rjmp	.+134    	; 0x9bce <main+0x34a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9b48:	fe 01       	movw	r30, r28
    9b4a:	e3 59       	subi	r30, 0x93	; 147
    9b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    9b4e:	60 81       	ld	r22, Z
    9b50:	71 81       	ldd	r23, Z+1	; 0x01
    9b52:	82 81       	ldd	r24, Z+2	; 0x02
    9b54:	93 81       	ldd	r25, Z+3	; 0x03
    9b56:	20 e0       	ldi	r18, 0x00	; 0
    9b58:	30 e0       	ldi	r19, 0x00	; 0
    9b5a:	40 e2       	ldi	r20, 0x20	; 32
    9b5c:	51 e4       	ldi	r21, 0x41	; 65
    9b5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    9b62:	dc 01       	movw	r26, r24
    9b64:	cb 01       	movw	r24, r22
    9b66:	8e 01       	movw	r16, r28
    9b68:	09 59       	subi	r16, 0x99	; 153
    9b6a:	1f 4f       	sbci	r17, 0xFF	; 255
    9b6c:	bc 01       	movw	r22, r24
    9b6e:	cd 01       	movw	r24, r26
    9b70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    9b74:	dc 01       	movw	r26, r24
    9b76:	cb 01       	movw	r24, r22
    9b78:	f8 01       	movw	r30, r16
    9b7a:	91 83       	std	Z+1, r25	; 0x01
    9b7c:	80 83       	st	Z, r24
    9b7e:	1f c0       	rjmp	.+62     	; 0x9bbe <main+0x33a>
    9b80:	fe 01       	movw	r30, r28
    9b82:	eb 59       	subi	r30, 0x9B	; 155
    9b84:	ff 4f       	sbci	r31, 0xFF	; 255
    9b86:	80 e9       	ldi	r24, 0x90	; 144
    9b88:	91 e0       	ldi	r25, 0x01	; 1
    9b8a:	91 83       	std	Z+1, r25	; 0x01
    9b8c:	80 83       	st	Z, r24
    9b8e:	fe 01       	movw	r30, r28
    9b90:	eb 59       	subi	r30, 0x9B	; 155
    9b92:	ff 4f       	sbci	r31, 0xFF	; 255
    9b94:	80 81       	ld	r24, Z
    9b96:	91 81       	ldd	r25, Z+1	; 0x01
    9b98:	01 97       	sbiw	r24, 0x01	; 1
    9b9a:	f1 f7       	brne	.-4      	; 0x9b98 <main+0x314>
    9b9c:	fe 01       	movw	r30, r28
    9b9e:	eb 59       	subi	r30, 0x9B	; 155
    9ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    9ba2:	91 83       	std	Z+1, r25	; 0x01
    9ba4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9ba6:	de 01       	movw	r26, r28
    9ba8:	a9 59       	subi	r26, 0x99	; 153
    9baa:	bf 4f       	sbci	r27, 0xFF	; 255
    9bac:	fe 01       	movw	r30, r28
    9bae:	e9 59       	subi	r30, 0x99	; 153
    9bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    9bb2:	80 81       	ld	r24, Z
    9bb4:	91 81       	ldd	r25, Z+1	; 0x01
    9bb6:	01 97       	sbiw	r24, 0x01	; 1
    9bb8:	11 96       	adiw	r26, 0x01	; 1
    9bba:	9c 93       	st	X, r25
    9bbc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9bbe:	fe 01       	movw	r30, r28
    9bc0:	e9 59       	subi	r30, 0x99	; 153
    9bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    9bc4:	80 81       	ld	r24, Z
    9bc6:	91 81       	ldd	r25, Z+1	; 0x01
    9bc8:	00 97       	sbiw	r24, 0x00	; 0
    9bca:	d1 f6       	brne	.-76     	; 0x9b80 <main+0x2fc>
    9bcc:	28 c0       	rjmp	.+80     	; 0x9c1e <main+0x39a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9bce:	8e 01       	movw	r16, r28
    9bd0:	09 59       	subi	r16, 0x99	; 153
    9bd2:	1f 4f       	sbci	r17, 0xFF	; 255
    9bd4:	fe 01       	movw	r30, r28
    9bd6:	e7 59       	subi	r30, 0x97	; 151
    9bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    9bda:	60 81       	ld	r22, Z
    9bdc:	71 81       	ldd	r23, Z+1	; 0x01
    9bde:	82 81       	ldd	r24, Z+2	; 0x02
    9be0:	93 81       	ldd	r25, Z+3	; 0x03
    9be2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    9be6:	dc 01       	movw	r26, r24
    9be8:	cb 01       	movw	r24, r22
    9bea:	f8 01       	movw	r30, r16
    9bec:	91 83       	std	Z+1, r25	; 0x01
    9bee:	80 83       	st	Z, r24
    9bf0:	de 01       	movw	r26, r28
    9bf2:	ad 59       	subi	r26, 0x9D	; 157
    9bf4:	bf 4f       	sbci	r27, 0xFF	; 255
    9bf6:	fe 01       	movw	r30, r28
    9bf8:	e9 59       	subi	r30, 0x99	; 153
    9bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    9bfc:	80 81       	ld	r24, Z
    9bfe:	91 81       	ldd	r25, Z+1	; 0x01
    9c00:	11 96       	adiw	r26, 0x01	; 1
    9c02:	9c 93       	st	X, r25
    9c04:	8e 93       	st	-X, r24
    9c06:	fe 01       	movw	r30, r28
    9c08:	ed 59       	subi	r30, 0x9D	; 157
    9c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    9c0c:	80 81       	ld	r24, Z
    9c0e:	91 81       	ldd	r25, Z+1	; 0x01
    9c10:	01 97       	sbiw	r24, 0x01	; 1
    9c12:	f1 f7       	brne	.-4      	; 0x9c10 <main+0x38c>
    9c14:	fe 01       	movw	r30, r28
    9c16:	ed 59       	subi	r30, 0x9D	; 157
    9c18:	ff 4f       	sbci	r31, 0xFF	; 255
    9c1a:	91 83       	std	Z+1, r25	; 0x01
    9c1c:	80 83       	st	Z, r24
		        _delay_ms(2000);
		        AppState = FIRSTPAGE;
    9c1e:	fe 01       	movw	r30, r28
    9c20:	ee 58       	subi	r30, 0x8E	; 142
    9c22:	ff 4f       	sbci	r31, 0xFF	; 255
    9c24:	80 e3       	ldi	r24, 0x30	; 48
    9c26:	80 83       	st	Z, r24
    9c28:	e9 ce       	rjmp	.-558    	; 0x99fc <main+0x178>
		        break;
		      case FIRSTPAGE:
		    	HCLCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
    9c2a:	81 e0       	ldi	r24, 0x01	; 1
    9c2c:	0e 94 61 34 	call	0x68c2	; 0x68c2 <HCLCD_WriteCommand4Bit>
		    	HCLCD_SetCursorPosition(HCLCD_LINE_0,0);
    9c30:	80 e0       	ldi	r24, 0x00	; 0
    9c32:	60 e0       	ldi	r22, 0x00	; 0
    9c34:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
		        HCLCD_WriteString("    Welcome     ");
    9c38:	8a eb       	ldi	r24, 0xBA	; 186
    9c3a:	92 e0       	ldi	r25, 0x02	; 2
    9c3c:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <HCLCD_WriteString>
		        HHC05_SendString("Choose User using Keypad");
    9c40:	8b ec       	ldi	r24, 0xCB	; 203
    9c42:	92 e0       	ldi	r25, 0x02	; 2
    9c44:	0e 94 29 30 	call	0x6052	; 0x6052 <HHC05_SendString>
		        HCLCD_SetCursorPosition(HCLCD_LINE_1,0);
    9c48:	81 e0       	ldi	r24, 0x01	; 1
    9c4a:	60 e0       	ldi	r22, 0x00	; 0
    9c4c:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
		        HCLCD_WriteString("1:Admin 2:User");
    9c50:	84 ee       	ldi	r24, 0xE4	; 228
    9c52:	92 e0       	ldi	r25, 0x02	; 2
    9c54:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <HCLCD_WriteString>
		        HHC05_SendString("1:Admin 2:User");
    9c58:	84 ee       	ldi	r24, 0xE4	; 228
    9c5a:	92 e0       	ldi	r25, 0x02	; 2
    9c5c:	0e 94 29 30 	call	0x6052	; 0x6052 <HHC05_SendString>
		        KeyPRESSEDBUTTON = HKPD_GetPressedButton();
    9c60:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <HKPD_GetPressedButton>
    9c64:	fe 01       	movw	r30, r28
    9c66:	eb 58       	subi	r30, 0x8B	; 139
    9c68:	ff 4f       	sbci	r31, 0xFF	; 255
    9c6a:	80 83       	st	Z, r24
    9c6c:	1d c0       	rjmp	.+58     	; 0x9ca8 <main+0x424>
		        while (!KeyPRESSEDBUTTON)
		        {
		          KeyPRESSEDBUTTON = HKPD_GetPressedButton();
    9c6e:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <HKPD_GetPressedButton>
    9c72:	fe 01       	movw	r30, r28
    9c74:	eb 58       	subi	r30, 0x8B	; 139
    9c76:	ff 4f       	sbci	r31, 0xFF	; 255
    9c78:	80 83       	st	Z, r24
		          if (KeyPRESSEDBUTTON == '1')
    9c7a:	fe 01       	movw	r30, r28
    9c7c:	eb 58       	subi	r30, 0x8B	; 139
    9c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    9c80:	80 81       	ld	r24, Z
    9c82:	81 33       	cpi	r24, 0x31	; 49
    9c84:	31 f4       	brne	.+12     	; 0x9c92 <main+0x40e>
		          {
		            AppState = ADMINLOGINPAGE;
    9c86:	fe 01       	movw	r30, r28
    9c88:	ee 58       	subi	r30, 0x8E	; 142
    9c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    9c8c:	81 e3       	ldi	r24, 0x31	; 49
    9c8e:	80 83       	st	Z, r24
    9c90:	0b c0       	rjmp	.+22     	; 0x9ca8 <main+0x424>
		          }
		          else if (KeyPRESSEDBUTTON == '2')
    9c92:	fe 01       	movw	r30, r28
    9c94:	eb 58       	subi	r30, 0x8B	; 139
    9c96:	ff 4f       	sbci	r31, 0xFF	; 255
    9c98:	80 81       	ld	r24, Z
    9c9a:	82 33       	cpi	r24, 0x32	; 50
    9c9c:	29 f4       	brne	.+10     	; 0x9ca8 <main+0x424>
		          {
		            AppState = USERLOGINPAGE;
    9c9e:	fe 01       	movw	r30, r28
    9ca0:	ee 58       	subi	r30, 0x8E	; 142
    9ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    9ca4:	82 e3       	ldi	r24, 0x32	; 50
    9ca6:	80 83       	st	Z, r24
		        HHC05_SendString("Choose User using Keypad");
		        HCLCD_SetCursorPosition(HCLCD_LINE_1,0);
		        HCLCD_WriteString("1:Admin 2:User");
		        HHC05_SendString("1:Admin 2:User");
		        KeyPRESSEDBUTTON = HKPD_GetPressedButton();
		        while (!KeyPRESSEDBUTTON)
    9ca8:	fe 01       	movw	r30, r28
    9caa:	eb 58       	subi	r30, 0x8B	; 139
    9cac:	ff 4f       	sbci	r31, 0xFF	; 255
    9cae:	80 81       	ld	r24, Z
    9cb0:	88 23       	and	r24, r24
    9cb2:	e9 f2       	breq	.-70     	; 0x9c6e <main+0x3ea>
    9cb4:	a3 ce       	rjmp	.-698    	; 0x99fc <main+0x178>

		        }
		        break;

		      case ADMINLOGINPAGE:
		        Trails = 0;
    9cb6:	fe 01       	movw	r30, r28
    9cb8:	ec 58       	subi	r30, 0x8C	; 140
    9cba:	ff 4f       	sbci	r31, 0xFF	; 255
    9cbc:	10 82       	st	Z, r1
		        HCLCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
    9cbe:	81 e0       	ldi	r24, 0x01	; 1
    9cc0:	0e 94 61 34 	call	0x68c2	; 0x68c2 <HCLCD_WriteCommand4Bit>
		        HCLCD_SetCursorPosition(HCLCD_LINE_0,0);
    9cc4:	80 e0       	ldi	r24, 0x00	; 0
    9cc6:	60 e0       	ldi	r22, 0x00	; 0
    9cc8:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
		        HHC05_SendString("Welcome");
    9ccc:	83 ef       	ldi	r24, 0xF3	; 243
    9cce:	92 e0       	ldi	r25, 0x02	; 2
    9cd0:	0e 94 29 30 	call	0x6052	; 0x6052 <HHC05_SendString>
		        HCLCD_WriteString("Welcome");
    9cd4:	83 ef       	ldi	r24, 0xF3	; 243
    9cd6:	92 e0       	ldi	r25, 0x02	; 2
    9cd8:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <HCLCD_WriteString>
    9cdc:	fe 01       	movw	r30, r28
    9cde:	e1 5a       	subi	r30, 0xA1	; 161
    9ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    9ce2:	80 e0       	ldi	r24, 0x00	; 0
    9ce4:	90 e0       	ldi	r25, 0x00	; 0
    9ce6:	aa ef       	ldi	r26, 0xFA	; 250
    9ce8:	b4 e4       	ldi	r27, 0x44	; 68
    9cea:	80 83       	st	Z, r24
    9cec:	91 83       	std	Z+1, r25	; 0x01
    9cee:	a2 83       	std	Z+2, r26	; 0x02
    9cf0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    9cf2:	8e 01       	movw	r16, r28
    9cf4:	05 5a       	subi	r16, 0xA5	; 165
    9cf6:	1f 4f       	sbci	r17, 0xFF	; 255
    9cf8:	fe 01       	movw	r30, r28
    9cfa:	e1 5a       	subi	r30, 0xA1	; 161
    9cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    9cfe:	60 81       	ld	r22, Z
    9d00:	71 81       	ldd	r23, Z+1	; 0x01
    9d02:	82 81       	ldd	r24, Z+2	; 0x02
    9d04:	93 81       	ldd	r25, Z+3	; 0x03
    9d06:	20 e0       	ldi	r18, 0x00	; 0
    9d08:	30 e0       	ldi	r19, 0x00	; 0
    9d0a:	4a e7       	ldi	r20, 0x7A	; 122
    9d0c:	55 e4       	ldi	r21, 0x45	; 69
    9d0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    9d12:	dc 01       	movw	r26, r24
    9d14:	cb 01       	movw	r24, r22
    9d16:	f8 01       	movw	r30, r16
    9d18:	80 83       	st	Z, r24
    9d1a:	91 83       	std	Z+1, r25	; 0x01
    9d1c:	a2 83       	std	Z+2, r26	; 0x02
    9d1e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    9d20:	fe 01       	movw	r30, r28
    9d22:	e5 5a       	subi	r30, 0xA5	; 165
    9d24:	ff 4f       	sbci	r31, 0xFF	; 255
    9d26:	60 81       	ld	r22, Z
    9d28:	71 81       	ldd	r23, Z+1	; 0x01
    9d2a:	82 81       	ldd	r24, Z+2	; 0x02
    9d2c:	93 81       	ldd	r25, Z+3	; 0x03
    9d2e:	20 e0       	ldi	r18, 0x00	; 0
    9d30:	30 e0       	ldi	r19, 0x00	; 0
    9d32:	40 e8       	ldi	r20, 0x80	; 128
    9d34:	5f e3       	ldi	r21, 0x3F	; 63
    9d36:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    9d3a:	88 23       	and	r24, r24
    9d3c:	44 f4       	brge	.+16     	; 0x9d4e <main+0x4ca>
		__ticks = 1;
    9d3e:	fe 01       	movw	r30, r28
    9d40:	e7 5a       	subi	r30, 0xA7	; 167
    9d42:	ff 4f       	sbci	r31, 0xFF	; 255
    9d44:	81 e0       	ldi	r24, 0x01	; 1
    9d46:	90 e0       	ldi	r25, 0x00	; 0
    9d48:	91 83       	std	Z+1, r25	; 0x01
    9d4a:	80 83       	st	Z, r24
    9d4c:	64 c0       	rjmp	.+200    	; 0x9e16 <main+0x592>
	else if (__tmp > 65535)
    9d4e:	fe 01       	movw	r30, r28
    9d50:	e5 5a       	subi	r30, 0xA5	; 165
    9d52:	ff 4f       	sbci	r31, 0xFF	; 255
    9d54:	60 81       	ld	r22, Z
    9d56:	71 81       	ldd	r23, Z+1	; 0x01
    9d58:	82 81       	ldd	r24, Z+2	; 0x02
    9d5a:	93 81       	ldd	r25, Z+3	; 0x03
    9d5c:	20 e0       	ldi	r18, 0x00	; 0
    9d5e:	3f ef       	ldi	r19, 0xFF	; 255
    9d60:	4f e7       	ldi	r20, 0x7F	; 127
    9d62:	57 e4       	ldi	r21, 0x47	; 71
    9d64:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    9d68:	18 16       	cp	r1, r24
    9d6a:	0c f0       	brlt	.+2      	; 0x9d6e <main+0x4ea>
    9d6c:	43 c0       	rjmp	.+134    	; 0x9df4 <main+0x570>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9d6e:	fe 01       	movw	r30, r28
    9d70:	e1 5a       	subi	r30, 0xA1	; 161
    9d72:	ff 4f       	sbci	r31, 0xFF	; 255
    9d74:	60 81       	ld	r22, Z
    9d76:	71 81       	ldd	r23, Z+1	; 0x01
    9d78:	82 81       	ldd	r24, Z+2	; 0x02
    9d7a:	93 81       	ldd	r25, Z+3	; 0x03
    9d7c:	20 e0       	ldi	r18, 0x00	; 0
    9d7e:	30 e0       	ldi	r19, 0x00	; 0
    9d80:	40 e2       	ldi	r20, 0x20	; 32
    9d82:	51 e4       	ldi	r21, 0x41	; 65
    9d84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    9d88:	dc 01       	movw	r26, r24
    9d8a:	cb 01       	movw	r24, r22
    9d8c:	8e 01       	movw	r16, r28
    9d8e:	07 5a       	subi	r16, 0xA7	; 167
    9d90:	1f 4f       	sbci	r17, 0xFF	; 255
    9d92:	bc 01       	movw	r22, r24
    9d94:	cd 01       	movw	r24, r26
    9d96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    9d9a:	dc 01       	movw	r26, r24
    9d9c:	cb 01       	movw	r24, r22
    9d9e:	f8 01       	movw	r30, r16
    9da0:	91 83       	std	Z+1, r25	; 0x01
    9da2:	80 83       	st	Z, r24
    9da4:	1f c0       	rjmp	.+62     	; 0x9de4 <main+0x560>
    9da6:	fe 01       	movw	r30, r28
    9da8:	e9 5a       	subi	r30, 0xA9	; 169
    9daa:	ff 4f       	sbci	r31, 0xFF	; 255
    9dac:	80 e9       	ldi	r24, 0x90	; 144
    9dae:	91 e0       	ldi	r25, 0x01	; 1
    9db0:	91 83       	std	Z+1, r25	; 0x01
    9db2:	80 83       	st	Z, r24
    9db4:	fe 01       	movw	r30, r28
    9db6:	e9 5a       	subi	r30, 0xA9	; 169
    9db8:	ff 4f       	sbci	r31, 0xFF	; 255
    9dba:	80 81       	ld	r24, Z
    9dbc:	91 81       	ldd	r25, Z+1	; 0x01
    9dbe:	01 97       	sbiw	r24, 0x01	; 1
    9dc0:	f1 f7       	brne	.-4      	; 0x9dbe <main+0x53a>
    9dc2:	fe 01       	movw	r30, r28
    9dc4:	e9 5a       	subi	r30, 0xA9	; 169
    9dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    9dc8:	91 83       	std	Z+1, r25	; 0x01
    9dca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9dcc:	de 01       	movw	r26, r28
    9dce:	a7 5a       	subi	r26, 0xA7	; 167
    9dd0:	bf 4f       	sbci	r27, 0xFF	; 255
    9dd2:	fe 01       	movw	r30, r28
    9dd4:	e7 5a       	subi	r30, 0xA7	; 167
    9dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    9dd8:	80 81       	ld	r24, Z
    9dda:	91 81       	ldd	r25, Z+1	; 0x01
    9ddc:	01 97       	sbiw	r24, 0x01	; 1
    9dde:	11 96       	adiw	r26, 0x01	; 1
    9de0:	9c 93       	st	X, r25
    9de2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9de4:	fe 01       	movw	r30, r28
    9de6:	e7 5a       	subi	r30, 0xA7	; 167
    9de8:	ff 4f       	sbci	r31, 0xFF	; 255
    9dea:	80 81       	ld	r24, Z
    9dec:	91 81       	ldd	r25, Z+1	; 0x01
    9dee:	00 97       	sbiw	r24, 0x00	; 0
    9df0:	d1 f6       	brne	.-76     	; 0x9da6 <main+0x522>
    9df2:	27 c0       	rjmp	.+78     	; 0x9e42 <main+0x5be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9df4:	8e 01       	movw	r16, r28
    9df6:	07 5a       	subi	r16, 0xA7	; 167
    9df8:	1f 4f       	sbci	r17, 0xFF	; 255
    9dfa:	fe 01       	movw	r30, r28
    9dfc:	e5 5a       	subi	r30, 0xA5	; 165
    9dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    9e00:	60 81       	ld	r22, Z
    9e02:	71 81       	ldd	r23, Z+1	; 0x01
    9e04:	82 81       	ldd	r24, Z+2	; 0x02
    9e06:	93 81       	ldd	r25, Z+3	; 0x03
    9e08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    9e0c:	dc 01       	movw	r26, r24
    9e0e:	cb 01       	movw	r24, r22
    9e10:	f8 01       	movw	r30, r16
    9e12:	91 83       	std	Z+1, r25	; 0x01
    9e14:	80 83       	st	Z, r24
    9e16:	de 01       	movw	r26, r28
    9e18:	ab 5a       	subi	r26, 0xAB	; 171
    9e1a:	bf 4f       	sbci	r27, 0xFF	; 255
    9e1c:	fe 01       	movw	r30, r28
    9e1e:	e7 5a       	subi	r30, 0xA7	; 167
    9e20:	ff 4f       	sbci	r31, 0xFF	; 255
    9e22:	80 81       	ld	r24, Z
    9e24:	91 81       	ldd	r25, Z+1	; 0x01
    9e26:	8d 93       	st	X+, r24
    9e28:	9c 93       	st	X, r25
    9e2a:	fe 01       	movw	r30, r28
    9e2c:	eb 5a       	subi	r30, 0xAB	; 171
    9e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    9e30:	80 81       	ld	r24, Z
    9e32:	91 81       	ldd	r25, Z+1	; 0x01
    9e34:	01 97       	sbiw	r24, 0x01	; 1
    9e36:	f1 f7       	brne	.-4      	; 0x9e34 <main+0x5b0>
    9e38:	fe 01       	movw	r30, r28
    9e3a:	eb 5a       	subi	r30, 0xAB	; 171
    9e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    9e3e:	91 83       	std	Z+1, r25	; 0x01
    9e40:	80 83       	st	Z, r24
		        _delay_ms(2000);
		        HCLCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
    9e42:	81 e0       	ldi	r24, 0x01	; 1
    9e44:	0e 94 61 34 	call	0x68c2	; 0x68c2 <HCLCD_WriteCommand4Bit>
		       	HCLCD_SetCursorPosition(HCLCD_LINE_0,0);
    9e48:	80 e0       	ldi	r24, 0x00	; 0
    9e4a:	60 e0       	ldi	r22, 0x00	; 0
    9e4c:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
		       	HCLCD_WriteString("****Admin Mode****");
    9e50:	8b ef       	ldi	r24, 0xFB	; 251
    9e52:	92 e0       	ldi	r25, 0x02	; 2
    9e54:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <HCLCD_WriteString>
		    	HCLCD_SetCursorPosition(HCLCD_LINE_1,0);
    9e58:	81 e0       	ldi	r24, 0x01	; 1
    9e5a:	60 e0       	ldi	r22, 0x00	; 0
    9e5c:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
		    	HCLCD_WriteString("Use Bluetooth");
    9e60:	8e e0       	ldi	r24, 0x0E	; 14
    9e62:	93 e0       	ldi	r25, 0x03	; 3
    9e64:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <HCLCD_WriteString>
		    	HHC05_SendString("Use Bluetooth");
    9e68:	8e e0       	ldi	r24, 0x0E	; 14
    9e6a:	93 e0       	ldi	r25, 0x03	; 3
    9e6c:	0e 94 29 30 	call	0x6052	; 0x6052 <HHC05_SendString>
    9e70:	fe 01       	movw	r30, r28
    9e72:	ef 5a       	subi	r30, 0xAF	; 175
    9e74:	ff 4f       	sbci	r31, 0xFF	; 255
    9e76:	80 e0       	ldi	r24, 0x00	; 0
    9e78:	90 e8       	ldi	r25, 0x80	; 128
    9e7a:	ab e3       	ldi	r26, 0x3B	; 59
    9e7c:	b5 e4       	ldi	r27, 0x45	; 69
    9e7e:	80 83       	st	Z, r24
    9e80:	91 83       	std	Z+1, r25	; 0x01
    9e82:	a2 83       	std	Z+2, r26	; 0x02
    9e84:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    9e86:	8e 01       	movw	r16, r28
    9e88:	03 5b       	subi	r16, 0xB3	; 179
    9e8a:	1f 4f       	sbci	r17, 0xFF	; 255
    9e8c:	fe 01       	movw	r30, r28
    9e8e:	ef 5a       	subi	r30, 0xAF	; 175
    9e90:	ff 4f       	sbci	r31, 0xFF	; 255
    9e92:	60 81       	ld	r22, Z
    9e94:	71 81       	ldd	r23, Z+1	; 0x01
    9e96:	82 81       	ldd	r24, Z+2	; 0x02
    9e98:	93 81       	ldd	r25, Z+3	; 0x03
    9e9a:	20 e0       	ldi	r18, 0x00	; 0
    9e9c:	30 e0       	ldi	r19, 0x00	; 0
    9e9e:	4a e7       	ldi	r20, 0x7A	; 122
    9ea0:	55 e4       	ldi	r21, 0x45	; 69
    9ea2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    9ea6:	dc 01       	movw	r26, r24
    9ea8:	cb 01       	movw	r24, r22
    9eaa:	f8 01       	movw	r30, r16
    9eac:	80 83       	st	Z, r24
    9eae:	91 83       	std	Z+1, r25	; 0x01
    9eb0:	a2 83       	std	Z+2, r26	; 0x02
    9eb2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    9eb4:	fe 01       	movw	r30, r28
    9eb6:	e3 5b       	subi	r30, 0xB3	; 179
    9eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    9eba:	60 81       	ld	r22, Z
    9ebc:	71 81       	ldd	r23, Z+1	; 0x01
    9ebe:	82 81       	ldd	r24, Z+2	; 0x02
    9ec0:	93 81       	ldd	r25, Z+3	; 0x03
    9ec2:	20 e0       	ldi	r18, 0x00	; 0
    9ec4:	30 e0       	ldi	r19, 0x00	; 0
    9ec6:	40 e8       	ldi	r20, 0x80	; 128
    9ec8:	5f e3       	ldi	r21, 0x3F	; 63
    9eca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    9ece:	88 23       	and	r24, r24
    9ed0:	44 f4       	brge	.+16     	; 0x9ee2 <main+0x65e>
		__ticks = 1;
    9ed2:	fe 01       	movw	r30, r28
    9ed4:	e5 5b       	subi	r30, 0xB5	; 181
    9ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    9ed8:	81 e0       	ldi	r24, 0x01	; 1
    9eda:	90 e0       	ldi	r25, 0x00	; 0
    9edc:	91 83       	std	Z+1, r25	; 0x01
    9ede:	80 83       	st	Z, r24
    9ee0:	64 c0       	rjmp	.+200    	; 0x9faa <main+0x726>
	else if (__tmp > 65535)
    9ee2:	fe 01       	movw	r30, r28
    9ee4:	e3 5b       	subi	r30, 0xB3	; 179
    9ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    9ee8:	60 81       	ld	r22, Z
    9eea:	71 81       	ldd	r23, Z+1	; 0x01
    9eec:	82 81       	ldd	r24, Z+2	; 0x02
    9eee:	93 81       	ldd	r25, Z+3	; 0x03
    9ef0:	20 e0       	ldi	r18, 0x00	; 0
    9ef2:	3f ef       	ldi	r19, 0xFF	; 255
    9ef4:	4f e7       	ldi	r20, 0x7F	; 127
    9ef6:	57 e4       	ldi	r21, 0x47	; 71
    9ef8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    9efc:	18 16       	cp	r1, r24
    9efe:	0c f0       	brlt	.+2      	; 0x9f02 <main+0x67e>
    9f00:	43 c0       	rjmp	.+134    	; 0x9f88 <main+0x704>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    9f02:	fe 01       	movw	r30, r28
    9f04:	ef 5a       	subi	r30, 0xAF	; 175
    9f06:	ff 4f       	sbci	r31, 0xFF	; 255
    9f08:	60 81       	ld	r22, Z
    9f0a:	71 81       	ldd	r23, Z+1	; 0x01
    9f0c:	82 81       	ldd	r24, Z+2	; 0x02
    9f0e:	93 81       	ldd	r25, Z+3	; 0x03
    9f10:	20 e0       	ldi	r18, 0x00	; 0
    9f12:	30 e0       	ldi	r19, 0x00	; 0
    9f14:	40 e2       	ldi	r20, 0x20	; 32
    9f16:	51 e4       	ldi	r21, 0x41	; 65
    9f18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    9f1c:	dc 01       	movw	r26, r24
    9f1e:	cb 01       	movw	r24, r22
    9f20:	8e 01       	movw	r16, r28
    9f22:	05 5b       	subi	r16, 0xB5	; 181
    9f24:	1f 4f       	sbci	r17, 0xFF	; 255
    9f26:	bc 01       	movw	r22, r24
    9f28:	cd 01       	movw	r24, r26
    9f2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    9f2e:	dc 01       	movw	r26, r24
    9f30:	cb 01       	movw	r24, r22
    9f32:	f8 01       	movw	r30, r16
    9f34:	91 83       	std	Z+1, r25	; 0x01
    9f36:	80 83       	st	Z, r24
    9f38:	1f c0       	rjmp	.+62     	; 0x9f78 <main+0x6f4>
    9f3a:	fe 01       	movw	r30, r28
    9f3c:	e7 5b       	subi	r30, 0xB7	; 183
    9f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    9f40:	80 e9       	ldi	r24, 0x90	; 144
    9f42:	91 e0       	ldi	r25, 0x01	; 1
    9f44:	91 83       	std	Z+1, r25	; 0x01
    9f46:	80 83       	st	Z, r24
    9f48:	fe 01       	movw	r30, r28
    9f4a:	e7 5b       	subi	r30, 0xB7	; 183
    9f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    9f4e:	80 81       	ld	r24, Z
    9f50:	91 81       	ldd	r25, Z+1	; 0x01
    9f52:	01 97       	sbiw	r24, 0x01	; 1
    9f54:	f1 f7       	brne	.-4      	; 0x9f52 <main+0x6ce>
    9f56:	fe 01       	movw	r30, r28
    9f58:	e7 5b       	subi	r30, 0xB7	; 183
    9f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    9f5c:	91 83       	std	Z+1, r25	; 0x01
    9f5e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9f60:	de 01       	movw	r26, r28
    9f62:	a5 5b       	subi	r26, 0xB5	; 181
    9f64:	bf 4f       	sbci	r27, 0xFF	; 255
    9f66:	fe 01       	movw	r30, r28
    9f68:	e5 5b       	subi	r30, 0xB5	; 181
    9f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    9f6c:	80 81       	ld	r24, Z
    9f6e:	91 81       	ldd	r25, Z+1	; 0x01
    9f70:	01 97       	sbiw	r24, 0x01	; 1
    9f72:	11 96       	adiw	r26, 0x01	; 1
    9f74:	9c 93       	st	X, r25
    9f76:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9f78:	fe 01       	movw	r30, r28
    9f7a:	e5 5b       	subi	r30, 0xB5	; 181
    9f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    9f7e:	80 81       	ld	r24, Z
    9f80:	91 81       	ldd	r25, Z+1	; 0x01
    9f82:	00 97       	sbiw	r24, 0x00	; 0
    9f84:	d1 f6       	brne	.-76     	; 0x9f3a <main+0x6b6>
    9f86:	00 c1       	rjmp	.+512    	; 0xa188 <main+0x904>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    9f88:	8e 01       	movw	r16, r28
    9f8a:	05 5b       	subi	r16, 0xB5	; 181
    9f8c:	1f 4f       	sbci	r17, 0xFF	; 255
    9f8e:	fe 01       	movw	r30, r28
    9f90:	e3 5b       	subi	r30, 0xB3	; 179
    9f92:	ff 4f       	sbci	r31, 0xFF	; 255
    9f94:	60 81       	ld	r22, Z
    9f96:	71 81       	ldd	r23, Z+1	; 0x01
    9f98:	82 81       	ldd	r24, Z+2	; 0x02
    9f9a:	93 81       	ldd	r25, Z+3	; 0x03
    9f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    9fa0:	dc 01       	movw	r26, r24
    9fa2:	cb 01       	movw	r24, r22
    9fa4:	f8 01       	movw	r30, r16
    9fa6:	91 83       	std	Z+1, r25	; 0x01
    9fa8:	80 83       	st	Z, r24
    9faa:	de 01       	movw	r26, r28
    9fac:	a9 5b       	subi	r26, 0xB9	; 185
    9fae:	bf 4f       	sbci	r27, 0xFF	; 255
    9fb0:	fe 01       	movw	r30, r28
    9fb2:	e5 5b       	subi	r30, 0xB5	; 181
    9fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    9fb6:	80 81       	ld	r24, Z
    9fb8:	91 81       	ldd	r25, Z+1	; 0x01
    9fba:	11 96       	adiw	r26, 0x01	; 1
    9fbc:	9c 93       	st	X, r25
    9fbe:	8e 93       	st	-X, r24
    9fc0:	fe 01       	movw	r30, r28
    9fc2:	e9 5b       	subi	r30, 0xB9	; 185
    9fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    9fc6:	80 81       	ld	r24, Z
    9fc8:	91 81       	ldd	r25, Z+1	; 0x01
    9fca:	01 97       	sbiw	r24, 0x01	; 1
    9fcc:	f1 f7       	brne	.-4      	; 0x9fca <main+0x746>
    9fce:	fe 01       	movw	r30, r28
    9fd0:	e9 5b       	subi	r30, 0xB9	; 185
    9fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    9fd4:	91 83       	std	Z+1, r25	; 0x01
    9fd6:	80 83       	st	Z, r24
    9fd8:	d7 c0       	rjmp	.+430    	; 0xa188 <main+0x904>
		        _delay_ms(3000);

		        while (Trails < MAXTRIALS)
		        {
		          HHC05_SendString("Enter UserName");
    9fda:	8c e1       	ldi	r24, 0x1C	; 28
    9fdc:	93 e0       	ldi	r25, 0x03	; 3
    9fde:	0e 94 29 30 	call	0x6052	; 0x6052 <HHC05_SendString>
		          InputID(&UserID, ADMINMODE);
    9fe2:	ce 01       	movw	r24, r28
    9fe4:	89 58       	subi	r24, 0x89	; 137
    9fe6:	9f 4f       	sbci	r25, 0xFF	; 255
    9fe8:	68 e0       	ldi	r22, 0x08	; 8
    9fea:	0e 94 57 38 	call	0x70ae	; 0x70ae <InputID>
		          HHC05_SendString("Enter Password");
    9fee:	8b e2       	ldi	r24, 0x2B	; 43
    9ff0:	93 e0       	ldi	r25, 0x03	; 3
    9ff2:	0e 94 29 30 	call	0x6052	; 0x6052 <HHC05_SendString>
		          InputPassword(UserPassword, ADMINMODE);
    9ff6:	ce 01       	movw	r24, r28
    9ff8:	86 58       	subi	r24, 0x86	; 134
    9ffa:	9f 4f       	sbci	r25, 0xFF	; 255
    9ffc:	68 e0       	ldi	r22, 0x08	; 8
    9ffe:	0e 94 bd 39 	call	0x737a	; 0x737a <InputPassword>

		          if (AdminLogin(UserID, UserPassword) == 0)
    a002:	ce 01       	movw	r24, r28
    a004:	89 58       	subi	r24, 0x89	; 137
    a006:	9f 4f       	sbci	r25, 0xFF	; 255
    a008:	9e 01       	movw	r18, r28
    a00a:	26 58       	subi	r18, 0x86	; 134
    a00c:	3f 4f       	sbci	r19, 0xFF	; 255
    a00e:	b9 01       	movw	r22, r18
    a010:	0e 94 13 3b 	call	0x7626	; 0x7626 <AdminLogin>
    a014:	88 23       	and	r24, r24
    a016:	31 f4       	brne	.+12     	; 0xa024 <main+0x7a0>
		          {
		            AppState = ADMINSECONDPAGE;
    a018:	fe 01       	movw	r30, r28
    a01a:	ee 58       	subi	r30, 0x8E	; 142
    a01c:	ff 4f       	sbci	r31, 0xFF	; 255
    a01e:	81 e0       	ldi	r24, 0x01	; 1
    a020:	80 83       	st	Z, r24
    a022:	b9 c0       	rjmp	.+370    	; 0xa196 <main+0x912>
		            break;
		          }
		          else
		          {
		            Trails++;
    a024:	de 01       	movw	r26, r28
    a026:	ac 58       	subi	r26, 0x8C	; 140
    a028:	bf 4f       	sbci	r27, 0xFF	; 255
    a02a:	fe 01       	movw	r30, r28
    a02c:	ec 58       	subi	r30, 0x8C	; 140
    a02e:	ff 4f       	sbci	r31, 0xFF	; 255
    a030:	80 81       	ld	r24, Z
    a032:	8f 5f       	subi	r24, 0xFF	; 255
    a034:	8c 93       	st	X, r24
		            if (Trails == MAXTRIALS)
    a036:	fe 01       	movw	r30, r28
    a038:	ec 58       	subi	r30, 0x8C	; 140
    a03a:	ff 4f       	sbci	r31, 0xFF	; 255
    a03c:	80 81       	ld	r24, Z
    a03e:	83 30       	cpi	r24, 0x03	; 3
    a040:	09 f0       	breq	.+2      	; 0xa044 <main+0x7c0>
    a042:	a2 c0       	rjmp	.+324    	; 0xa188 <main+0x904>
		            {
		              HBUZZERON();
    a044:	0e 94 ab 37 	call	0x6f56	; 0x6f56 <HBUZZERON>
		              CloseTheDoor();
    a048:	0e 94 9a 49 	call	0x9334	; 0x9334 <CloseTheDoor>
		              KeyPRESSEDBUTTON = HKPD_GetPressedButton();
    a04c:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <HKPD_GetPressedButton>
    a050:	fe 01       	movw	r30, r28
    a052:	eb 58       	subi	r30, 0x8B	; 139
    a054:	ff 4f       	sbci	r31, 0xFF	; 255
    a056:	80 83       	st	Z, r24
		              while (1)
		              {
		                if (HKPD_GetPressedButton() == PRESSEDBUTTON)
    a058:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <HKPD_GetPressedButton>
    a05c:	81 30       	cpi	r24, 0x01	; 1
    a05e:	e1 f7       	brne	.-8      	; 0xa058 <main+0x7d4>
    a060:	fe 01       	movw	r30, r28
    a062:	ed 5b       	subi	r30, 0xBD	; 189
    a064:	ff 4f       	sbci	r31, 0xFF	; 255
    a066:	80 e0       	ldi	r24, 0x00	; 0
    a068:	90 e0       	ldi	r25, 0x00	; 0
    a06a:	a8 ec       	ldi	r26, 0xC8	; 200
    a06c:	b2 e4       	ldi	r27, 0x42	; 66
    a06e:	80 83       	st	Z, r24
    a070:	91 83       	std	Z+1, r25	; 0x01
    a072:	a2 83       	std	Z+2, r26	; 0x02
    a074:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    a076:	8e 01       	movw	r16, r28
    a078:	01 5c       	subi	r16, 0xC1	; 193
    a07a:	1f 4f       	sbci	r17, 0xFF	; 255
    a07c:	fe 01       	movw	r30, r28
    a07e:	ed 5b       	subi	r30, 0xBD	; 189
    a080:	ff 4f       	sbci	r31, 0xFF	; 255
    a082:	60 81       	ld	r22, Z
    a084:	71 81       	ldd	r23, Z+1	; 0x01
    a086:	82 81       	ldd	r24, Z+2	; 0x02
    a088:	93 81       	ldd	r25, Z+3	; 0x03
    a08a:	20 e0       	ldi	r18, 0x00	; 0
    a08c:	30 e0       	ldi	r19, 0x00	; 0
    a08e:	4a e7       	ldi	r20, 0x7A	; 122
    a090:	55 e4       	ldi	r21, 0x45	; 69
    a092:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    a096:	dc 01       	movw	r26, r24
    a098:	cb 01       	movw	r24, r22
    a09a:	f8 01       	movw	r30, r16
    a09c:	80 83       	st	Z, r24
    a09e:	91 83       	std	Z+1, r25	; 0x01
    a0a0:	a2 83       	std	Z+2, r26	; 0x02
    a0a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    a0a4:	fe 01       	movw	r30, r28
    a0a6:	ff 96       	adiw	r30, 0x3f	; 63
    a0a8:	60 81       	ld	r22, Z
    a0aa:	71 81       	ldd	r23, Z+1	; 0x01
    a0ac:	82 81       	ldd	r24, Z+2	; 0x02
    a0ae:	93 81       	ldd	r25, Z+3	; 0x03
    a0b0:	20 e0       	ldi	r18, 0x00	; 0
    a0b2:	30 e0       	ldi	r19, 0x00	; 0
    a0b4:	40 e8       	ldi	r20, 0x80	; 128
    a0b6:	5f e3       	ldi	r21, 0x3F	; 63
    a0b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    a0bc:	88 23       	and	r24, r24
    a0be:	2c f4       	brge	.+10     	; 0xa0ca <main+0x846>
		__ticks = 1;
    a0c0:	81 e0       	ldi	r24, 0x01	; 1
    a0c2:	90 e0       	ldi	r25, 0x00	; 0
    a0c4:	9e af       	std	Y+62, r25	; 0x3e
    a0c6:	8d af       	std	Y+61, r24	; 0x3d
    a0c8:	46 c0       	rjmp	.+140    	; 0xa156 <main+0x8d2>
	else if (__tmp > 65535)
    a0ca:	fe 01       	movw	r30, r28
    a0cc:	ff 96       	adiw	r30, 0x3f	; 63
    a0ce:	60 81       	ld	r22, Z
    a0d0:	71 81       	ldd	r23, Z+1	; 0x01
    a0d2:	82 81       	ldd	r24, Z+2	; 0x02
    a0d4:	93 81       	ldd	r25, Z+3	; 0x03
    a0d6:	20 e0       	ldi	r18, 0x00	; 0
    a0d8:	3f ef       	ldi	r19, 0xFF	; 255
    a0da:	4f e7       	ldi	r20, 0x7F	; 127
    a0dc:	57 e4       	ldi	r21, 0x47	; 71
    a0de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    a0e2:	18 16       	cp	r1, r24
    a0e4:	64 f5       	brge	.+88     	; 0xa13e <main+0x8ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a0e6:	fe 01       	movw	r30, r28
    a0e8:	ed 5b       	subi	r30, 0xBD	; 189
    a0ea:	ff 4f       	sbci	r31, 0xFF	; 255
    a0ec:	60 81       	ld	r22, Z
    a0ee:	71 81       	ldd	r23, Z+1	; 0x01
    a0f0:	82 81       	ldd	r24, Z+2	; 0x02
    a0f2:	93 81       	ldd	r25, Z+3	; 0x03
    a0f4:	20 e0       	ldi	r18, 0x00	; 0
    a0f6:	30 e0       	ldi	r19, 0x00	; 0
    a0f8:	40 e2       	ldi	r20, 0x20	; 32
    a0fa:	51 e4       	ldi	r21, 0x41	; 65
    a0fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    a100:	dc 01       	movw	r26, r24
    a102:	cb 01       	movw	r24, r22
    a104:	bc 01       	movw	r22, r24
    a106:	cd 01       	movw	r24, r26
    a108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    a10c:	dc 01       	movw	r26, r24
    a10e:	cb 01       	movw	r24, r22
    a110:	9e af       	std	Y+62, r25	; 0x3e
    a112:	8d af       	std	Y+61, r24	; 0x3d
    a114:	0f c0       	rjmp	.+30     	; 0xa134 <main+0x8b0>
    a116:	80 e9       	ldi	r24, 0x90	; 144
    a118:	91 e0       	ldi	r25, 0x01	; 1
    a11a:	9c af       	std	Y+60, r25	; 0x3c
    a11c:	8b af       	std	Y+59, r24	; 0x3b
    a11e:	8b ad       	ldd	r24, Y+59	; 0x3b
    a120:	9c ad       	ldd	r25, Y+60	; 0x3c
    a122:	01 97       	sbiw	r24, 0x01	; 1
    a124:	f1 f7       	brne	.-4      	; 0xa122 <main+0x89e>
    a126:	9c af       	std	Y+60, r25	; 0x3c
    a128:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a12a:	8d ad       	ldd	r24, Y+61	; 0x3d
    a12c:	9e ad       	ldd	r25, Y+62	; 0x3e
    a12e:	01 97       	sbiw	r24, 0x01	; 1
    a130:	9e af       	std	Y+62, r25	; 0x3e
    a132:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a134:	8d ad       	ldd	r24, Y+61	; 0x3d
    a136:	9e ad       	ldd	r25, Y+62	; 0x3e
    a138:	00 97       	sbiw	r24, 0x00	; 0
    a13a:	69 f7       	brne	.-38     	; 0xa116 <main+0x892>
    a13c:	16 c0       	rjmp	.+44     	; 0xa16a <main+0x8e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a13e:	fe 01       	movw	r30, r28
    a140:	ff 96       	adiw	r30, 0x3f	; 63
    a142:	60 81       	ld	r22, Z
    a144:	71 81       	ldd	r23, Z+1	; 0x01
    a146:	82 81       	ldd	r24, Z+2	; 0x02
    a148:	93 81       	ldd	r25, Z+3	; 0x03
    a14a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    a14e:	dc 01       	movw	r26, r24
    a150:	cb 01       	movw	r24, r22
    a152:	9e af       	std	Y+62, r25	; 0x3e
    a154:	8d af       	std	Y+61, r24	; 0x3d
    a156:	8d ad       	ldd	r24, Y+61	; 0x3d
    a158:	9e ad       	ldd	r25, Y+62	; 0x3e
    a15a:	9a af       	std	Y+58, r25	; 0x3a
    a15c:	89 af       	std	Y+57, r24	; 0x39
    a15e:	89 ad       	ldd	r24, Y+57	; 0x39
    a160:	9a ad       	ldd	r25, Y+58	; 0x3a
    a162:	01 97       	sbiw	r24, 0x01	; 1
    a164:	f1 f7       	brne	.-4      	; 0xa162 <main+0x8de>
    a166:	9a af       	std	Y+58, r25	; 0x3a
    a168:	89 af       	std	Y+57, r24	; 0x39
		                {
		                  _delay_ms(100);
		                  if (HKPD_GetPressedButton() == PRESSEDBUTTON)
    a16a:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <HKPD_GetPressedButton>
    a16e:	81 30       	cpi	r24, 0x01	; 1
    a170:	09 f0       	breq	.+2      	; 0xa174 <main+0x8f0>
    a172:	72 cf       	rjmp	.-284    	; 0xa058 <main+0x7d4>
		                  {
		                    while (HKPD_GetPressedButton() == PRESSEDBUTTON);
    a174:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <HKPD_GetPressedButton>
    a178:	81 30       	cpi	r24, 0x01	; 1
    a17a:	e1 f3       	breq	.-8      	; 0xa174 <main+0x8f0>
		                    HBUZZEROFF();
    a17c:	0e 94 b7 37 	call	0x6f6e	; 0x6f6e <HBUZZEROFF>
		                    AppState = WELCOME;
    a180:	fe 01       	movw	r30, r28
    a182:	ee 58       	subi	r30, 0x8E	; 142
    a184:	ff 4f       	sbci	r31, 0xFF	; 255
    a186:	10 82       	st	Z, r1
		    	HCLCD_SetCursorPosition(HCLCD_LINE_1,0);
		    	HCLCD_WriteString("Use Bluetooth");
		    	HHC05_SendString("Use Bluetooth");
		        _delay_ms(3000);

		        while (Trails < MAXTRIALS)
    a188:	fe 01       	movw	r30, r28
    a18a:	ec 58       	subi	r30, 0x8C	; 140
    a18c:	ff 4f       	sbci	r31, 0xFF	; 255
    a18e:	80 81       	ld	r24, Z
    a190:	83 30       	cpi	r24, 0x03	; 3
    a192:	08 f4       	brcc	.+2      	; 0xa196 <main+0x912>
    a194:	22 cf       	rjmp	.-444    	; 0x9fda <main+0x756>
		                }
		              }
		            }
		          }
		        }
		        Trails = 0;
    a196:	fe 01       	movw	r30, r28
    a198:	ec 58       	subi	r30, 0x8C	; 140
    a19a:	ff 4f       	sbci	r31, 0xFF	; 255
    a19c:	10 82       	st	Z, r1
    a19e:	2e cc       	rjmp	.-1956   	; 0x99fc <main+0x178>
		        break;

		      case USERLOGINPAGE:
		        Trails = 0;
    a1a0:	fe 01       	movw	r30, r28
    a1a2:	ec 58       	subi	r30, 0x8C	; 140
    a1a4:	ff 4f       	sbci	r31, 0xFF	; 255
    a1a6:	10 82       	st	Z, r1
		        HCLCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
    a1a8:	81 e0       	ldi	r24, 0x01	; 1
    a1aa:	0e 94 61 34 	call	0x68c2	; 0x68c2 <HCLCD_WriteCommand4Bit>
		        HCLCD_SetCursorPosition(HCLCD_LINE_0,0);
    a1ae:	80 e0       	ldi	r24, 0x00	; 0
    a1b0:	60 e0       	ldi	r22, 0x00	; 0
    a1b2:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
		        HCLCD_WriteString("Welcome User");
    a1b6:	8a e3       	ldi	r24, 0x3A	; 58
    a1b8:	93 e0       	ldi	r25, 0x03	; 3
    a1ba:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <HCLCD_WriteString>
    a1be:	80 e0       	ldi	r24, 0x00	; 0
    a1c0:	90 e0       	ldi	r25, 0x00	; 0
    a1c2:	aa ef       	ldi	r26, 0xFA	; 250
    a1c4:	b4 e4       	ldi	r27, 0x44	; 68
    a1c6:	8d ab       	std	Y+53, r24	; 0x35
    a1c8:	9e ab       	std	Y+54, r25	; 0x36
    a1ca:	af ab       	std	Y+55, r26	; 0x37
    a1cc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    a1ce:	6d a9       	ldd	r22, Y+53	; 0x35
    a1d0:	7e a9       	ldd	r23, Y+54	; 0x36
    a1d2:	8f a9       	ldd	r24, Y+55	; 0x37
    a1d4:	98 ad       	ldd	r25, Y+56	; 0x38
    a1d6:	20 e0       	ldi	r18, 0x00	; 0
    a1d8:	30 e0       	ldi	r19, 0x00	; 0
    a1da:	4a e7       	ldi	r20, 0x7A	; 122
    a1dc:	55 e4       	ldi	r21, 0x45	; 69
    a1de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    a1e2:	dc 01       	movw	r26, r24
    a1e4:	cb 01       	movw	r24, r22
    a1e6:	89 ab       	std	Y+49, r24	; 0x31
    a1e8:	9a ab       	std	Y+50, r25	; 0x32
    a1ea:	ab ab       	std	Y+51, r26	; 0x33
    a1ec:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    a1ee:	69 a9       	ldd	r22, Y+49	; 0x31
    a1f0:	7a a9       	ldd	r23, Y+50	; 0x32
    a1f2:	8b a9       	ldd	r24, Y+51	; 0x33
    a1f4:	9c a9       	ldd	r25, Y+52	; 0x34
    a1f6:	20 e0       	ldi	r18, 0x00	; 0
    a1f8:	30 e0       	ldi	r19, 0x00	; 0
    a1fa:	40 e8       	ldi	r20, 0x80	; 128
    a1fc:	5f e3       	ldi	r21, 0x3F	; 63
    a1fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    a202:	88 23       	and	r24, r24
    a204:	2c f4       	brge	.+10     	; 0xa210 <main+0x98c>
		__ticks = 1;
    a206:	81 e0       	ldi	r24, 0x01	; 1
    a208:	90 e0       	ldi	r25, 0x00	; 0
    a20a:	98 ab       	std	Y+48, r25	; 0x30
    a20c:	8f a7       	std	Y+47, r24	; 0x2f
    a20e:	3f c0       	rjmp	.+126    	; 0xa28e <main+0xa0a>
	else if (__tmp > 65535)
    a210:	69 a9       	ldd	r22, Y+49	; 0x31
    a212:	7a a9       	ldd	r23, Y+50	; 0x32
    a214:	8b a9       	ldd	r24, Y+51	; 0x33
    a216:	9c a9       	ldd	r25, Y+52	; 0x34
    a218:	20 e0       	ldi	r18, 0x00	; 0
    a21a:	3f ef       	ldi	r19, 0xFF	; 255
    a21c:	4f e7       	ldi	r20, 0x7F	; 127
    a21e:	57 e4       	ldi	r21, 0x47	; 71
    a220:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    a224:	18 16       	cp	r1, r24
    a226:	4c f5       	brge	.+82     	; 0xa27a <main+0x9f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a228:	6d a9       	ldd	r22, Y+53	; 0x35
    a22a:	7e a9       	ldd	r23, Y+54	; 0x36
    a22c:	8f a9       	ldd	r24, Y+55	; 0x37
    a22e:	98 ad       	ldd	r25, Y+56	; 0x38
    a230:	20 e0       	ldi	r18, 0x00	; 0
    a232:	30 e0       	ldi	r19, 0x00	; 0
    a234:	40 e2       	ldi	r20, 0x20	; 32
    a236:	51 e4       	ldi	r21, 0x41	; 65
    a238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    a23c:	dc 01       	movw	r26, r24
    a23e:	cb 01       	movw	r24, r22
    a240:	bc 01       	movw	r22, r24
    a242:	cd 01       	movw	r24, r26
    a244:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    a248:	dc 01       	movw	r26, r24
    a24a:	cb 01       	movw	r24, r22
    a24c:	98 ab       	std	Y+48, r25	; 0x30
    a24e:	8f a7       	std	Y+47, r24	; 0x2f
    a250:	0f c0       	rjmp	.+30     	; 0xa270 <main+0x9ec>
    a252:	80 e9       	ldi	r24, 0x90	; 144
    a254:	91 e0       	ldi	r25, 0x01	; 1
    a256:	9e a7       	std	Y+46, r25	; 0x2e
    a258:	8d a7       	std	Y+45, r24	; 0x2d
    a25a:	8d a5       	ldd	r24, Y+45	; 0x2d
    a25c:	9e a5       	ldd	r25, Y+46	; 0x2e
    a25e:	01 97       	sbiw	r24, 0x01	; 1
    a260:	f1 f7       	brne	.-4      	; 0xa25e <main+0x9da>
    a262:	9e a7       	std	Y+46, r25	; 0x2e
    a264:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a266:	8f a5       	ldd	r24, Y+47	; 0x2f
    a268:	98 a9       	ldd	r25, Y+48	; 0x30
    a26a:	01 97       	sbiw	r24, 0x01	; 1
    a26c:	98 ab       	std	Y+48, r25	; 0x30
    a26e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a270:	8f a5       	ldd	r24, Y+47	; 0x2f
    a272:	98 a9       	ldd	r25, Y+48	; 0x30
    a274:	00 97       	sbiw	r24, 0x00	; 0
    a276:	69 f7       	brne	.-38     	; 0xa252 <main+0x9ce>
    a278:	09 c1       	rjmp	.+530    	; 0xa48c <main+0xc08>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a27a:	69 a9       	ldd	r22, Y+49	; 0x31
    a27c:	7a a9       	ldd	r23, Y+50	; 0x32
    a27e:	8b a9       	ldd	r24, Y+51	; 0x33
    a280:	9c a9       	ldd	r25, Y+52	; 0x34
    a282:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    a286:	dc 01       	movw	r26, r24
    a288:	cb 01       	movw	r24, r22
    a28a:	98 ab       	std	Y+48, r25	; 0x30
    a28c:	8f a7       	std	Y+47, r24	; 0x2f
    a28e:	8f a5       	ldd	r24, Y+47	; 0x2f
    a290:	98 a9       	ldd	r25, Y+48	; 0x30
    a292:	9c a7       	std	Y+44, r25	; 0x2c
    a294:	8b a7       	std	Y+43, r24	; 0x2b
    a296:	8b a5       	ldd	r24, Y+43	; 0x2b
    a298:	9c a5       	ldd	r25, Y+44	; 0x2c
    a29a:	01 97       	sbiw	r24, 0x01	; 1
    a29c:	f1 f7       	brne	.-4      	; 0xa29a <main+0xa16>
    a29e:	9c a7       	std	Y+44, r25	; 0x2c
    a2a0:	8b a7       	std	Y+43, r24	; 0x2b
    a2a2:	f4 c0       	rjmp	.+488    	; 0xa48c <main+0xc08>
		        _delay_ms(2000);
		        while (Trails < MAXTRIALS)
		        {
		        HCLCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
    a2a4:	81 e0       	ldi	r24, 0x01	; 1
    a2a6:	0e 94 61 34 	call	0x68c2	; 0x68c2 <HCLCD_WriteCommand4Bit>
		        HCLCD_SetCursorPosition(HCLCD_LINE_0,0);
    a2aa:	80 e0       	ldi	r24, 0x00	; 0
    a2ac:	60 e0       	ldi	r22, 0x00	; 0
    a2ae:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
		          HCLCD_WriteString("Enter Username");
    a2b2:	87 e4       	ldi	r24, 0x47	; 71
    a2b4:	93 e0       	ldi	r25, 0x03	; 3
    a2b6:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <HCLCD_WriteString>
		          InputID(UserID, USERMODE);
    a2ba:	ce 01       	movw	r24, r28
    a2bc:	89 58       	subi	r24, 0x89	; 137
    a2be:	9f 4f       	sbci	r25, 0xFF	; 255
    a2c0:	69 e0       	ldi	r22, 0x09	; 9
    a2c2:	0e 94 57 38 	call	0x70ae	; 0x70ae <InputID>
		          HCLCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
    a2c6:	81 e0       	ldi	r24, 0x01	; 1
    a2c8:	0e 94 61 34 	call	0x68c2	; 0x68c2 <HCLCD_WriteCommand4Bit>
		          HCLCD_SetCursorPosition(HCLCD_LINE_0,0);
    a2cc:	80 e0       	ldi	r24, 0x00	; 0
    a2ce:	60 e0       	ldi	r22, 0x00	; 0
    a2d0:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
		          HCLCD_WriteString("Enter Password");
    a2d4:	8b e2       	ldi	r24, 0x2B	; 43
    a2d6:	93 e0       	ldi	r25, 0x03	; 3
    a2d8:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <HCLCD_WriteString>
		          InputPassword(UserPassword, USERMODE);
    a2dc:	ce 01       	movw	r24, r28
    a2de:	86 58       	subi	r24, 0x86	; 134
    a2e0:	9f 4f       	sbci	r25, 0xFF	; 255
    a2e2:	69 e0       	ldi	r22, 0x09	; 9
    a2e4:	0e 94 bd 39 	call	0x737a	; 0x737a <InputPassword>
		          u8 LoginResult = UserLogin(UserID, UserPassword);
    a2e8:	ce 01       	movw	r24, r28
    a2ea:	89 58       	subi	r24, 0x89	; 137
    a2ec:	9f 4f       	sbci	r25, 0xFF	; 255
    a2ee:	9e 01       	movw	r18, r28
    a2f0:	26 58       	subi	r18, 0x86	; 134
    a2f2:	3f 4f       	sbci	r19, 0xFF	; 255
    a2f4:	b9 01       	movw	r22, r18
    a2f6:	0e 94 69 3f 	call	0x7ed2	; 0x7ed2 <UserLogin>
    a2fa:	fe 01       	movw	r30, r28
    a2fc:	ef 58       	subi	r30, 0x8F	; 143
    a2fe:	ff 4f       	sbci	r31, 0xFF	; 255
    a300:	80 83       	st	Z, r24

		          if (LoginResult == 0)
    a302:	fe 01       	movw	r30, r28
    a304:	ef 58       	subi	r30, 0x8F	; 143
    a306:	ff 4f       	sbci	r31, 0xFF	; 255
    a308:	80 81       	ld	r24, Z
    a30a:	88 23       	and	r24, r24
    a30c:	31 f4       	brne	.+12     	; 0xa31a <main+0xa96>
		          {
		            AppState = USERSECONDPAGE;
    a30e:	fe 01       	movw	r30, r28
    a310:	ee 58       	subi	r30, 0x8E	; 142
    a312:	ff 4f       	sbci	r31, 0xFF	; 255
    a314:	82 e0       	ldi	r24, 0x02	; 2
    a316:	80 83       	st	Z, r24
    a318:	c0 c0       	rjmp	.+384    	; 0xa49a <main+0xc16>
		            break;
		          }
		          else if (LoginResult == 2)
    a31a:	fe 01       	movw	r30, r28
    a31c:	ef 58       	subi	r30, 0x8F	; 143
    a31e:	ff 4f       	sbci	r31, 0xFF	; 255
    a320:	80 81       	ld	r24, Z
    a322:	82 30       	cpi	r24, 0x02	; 2
    a324:	31 f4       	brne	.+12     	; 0xa332 <main+0xaae>
		          {
		            AppState = FIRSTPAGE;
    a326:	fe 01       	movw	r30, r28
    a328:	ee 58       	subi	r30, 0x8E	; 142
    a32a:	ff 4f       	sbci	r31, 0xFF	; 255
    a32c:	80 e3       	ldi	r24, 0x30	; 48
    a32e:	80 83       	st	Z, r24
    a330:	b4 c0       	rjmp	.+360    	; 0xa49a <main+0xc16>
		            break;
		          }
		          else if (LoginResult == 1)
    a332:	fe 01       	movw	r30, r28
    a334:	ef 58       	subi	r30, 0x8F	; 143
    a336:	ff 4f       	sbci	r31, 0xFF	; 255
    a338:	80 81       	ld	r24, Z
    a33a:	81 30       	cpi	r24, 0x01	; 1
    a33c:	09 f0       	breq	.+2      	; 0xa340 <main+0xabc>
    a33e:	a6 c0       	rjmp	.+332    	; 0xa48c <main+0xc08>
		          {
		            Trails++;
    a340:	de 01       	movw	r26, r28
    a342:	ac 58       	subi	r26, 0x8C	; 140
    a344:	bf 4f       	sbci	r27, 0xFF	; 255
    a346:	fe 01       	movw	r30, r28
    a348:	ec 58       	subi	r30, 0x8C	; 140
    a34a:	ff 4f       	sbci	r31, 0xFF	; 255
    a34c:	80 81       	ld	r24, Z
    a34e:	8f 5f       	subi	r24, 0xFF	; 255
    a350:	8c 93       	st	X, r24
		            if (Trails == MAXTRIALS)
    a352:	fe 01       	movw	r30, r28
    a354:	ec 58       	subi	r30, 0x8C	; 140
    a356:	ff 4f       	sbci	r31, 0xFF	; 255
    a358:	80 81       	ld	r24, Z
    a35a:	83 30       	cpi	r24, 0x03	; 3
    a35c:	09 f0       	breq	.+2      	; 0xa360 <main+0xadc>
    a35e:	96 c0       	rjmp	.+300    	; 0xa48c <main+0xc08>
		            {
		              HBUZZERON();
    a360:	0e 94 ab 37 	call	0x6f56	; 0x6f56 <HBUZZERON>
		              CloseTheDoor();
    a364:	0e 94 9a 49 	call	0x9334	; 0x9334 <CloseTheDoor>
		              HCLCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
    a368:	81 e0       	ldi	r24, 0x01	; 1
    a36a:	0e 94 61 34 	call	0x68c2	; 0x68c2 <HCLCD_WriteCommand4Bit>
		             HCLCD_SetCursorPosition(HCLCD_LINE_0,0);
    a36e:	80 e0       	ldi	r24, 0x00	; 0
    a370:	60 e0       	ldi	r22, 0x00	; 0
    a372:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
		              KeyPRESSEDBUTTON = HKPD_GetPressedButton();
    a376:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <HKPD_GetPressedButton>
    a37a:	fe 01       	movw	r30, r28
    a37c:	eb 58       	subi	r30, 0x8B	; 139
    a37e:	ff 4f       	sbci	r31, 0xFF	; 255
    a380:	80 83       	st	Z, r24
		              while (1)
		              {
		                if (HKPD_GetPressedButton() == PRESSEDBUTTON)
    a382:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <HKPD_GetPressedButton>
    a386:	81 30       	cpi	r24, 0x01	; 1
    a388:	e1 f7       	brne	.-8      	; 0xa382 <main+0xafe>
    a38a:	80 e0       	ldi	r24, 0x00	; 0
    a38c:	90 e0       	ldi	r25, 0x00	; 0
    a38e:	a8 ec       	ldi	r26, 0xC8	; 200
    a390:	b2 e4       	ldi	r27, 0x42	; 66
    a392:	8f a3       	std	Y+39, r24	; 0x27
    a394:	98 a7       	std	Y+40, r25	; 0x28
    a396:	a9 a7       	std	Y+41, r26	; 0x29
    a398:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    a39a:	6f a1       	ldd	r22, Y+39	; 0x27
    a39c:	78 a5       	ldd	r23, Y+40	; 0x28
    a39e:	89 a5       	ldd	r24, Y+41	; 0x29
    a3a0:	9a a5       	ldd	r25, Y+42	; 0x2a
    a3a2:	20 e0       	ldi	r18, 0x00	; 0
    a3a4:	30 e0       	ldi	r19, 0x00	; 0
    a3a6:	4a e7       	ldi	r20, 0x7A	; 122
    a3a8:	55 e4       	ldi	r21, 0x45	; 69
    a3aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    a3ae:	dc 01       	movw	r26, r24
    a3b0:	cb 01       	movw	r24, r22
    a3b2:	8b a3       	std	Y+35, r24	; 0x23
    a3b4:	9c a3       	std	Y+36, r25	; 0x24
    a3b6:	ad a3       	std	Y+37, r26	; 0x25
    a3b8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    a3ba:	6b a1       	ldd	r22, Y+35	; 0x23
    a3bc:	7c a1       	ldd	r23, Y+36	; 0x24
    a3be:	8d a1       	ldd	r24, Y+37	; 0x25
    a3c0:	9e a1       	ldd	r25, Y+38	; 0x26
    a3c2:	20 e0       	ldi	r18, 0x00	; 0
    a3c4:	30 e0       	ldi	r19, 0x00	; 0
    a3c6:	40 e8       	ldi	r20, 0x80	; 128
    a3c8:	5f e3       	ldi	r21, 0x3F	; 63
    a3ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    a3ce:	88 23       	and	r24, r24
    a3d0:	2c f4       	brge	.+10     	; 0xa3dc <main+0xb58>
		__ticks = 1;
    a3d2:	81 e0       	ldi	r24, 0x01	; 1
    a3d4:	90 e0       	ldi	r25, 0x00	; 0
    a3d6:	9a a3       	std	Y+34, r25	; 0x22
    a3d8:	89 a3       	std	Y+33, r24	; 0x21
    a3da:	3f c0       	rjmp	.+126    	; 0xa45a <main+0xbd6>
	else if (__tmp > 65535)
    a3dc:	6b a1       	ldd	r22, Y+35	; 0x23
    a3de:	7c a1       	ldd	r23, Y+36	; 0x24
    a3e0:	8d a1       	ldd	r24, Y+37	; 0x25
    a3e2:	9e a1       	ldd	r25, Y+38	; 0x26
    a3e4:	20 e0       	ldi	r18, 0x00	; 0
    a3e6:	3f ef       	ldi	r19, 0xFF	; 255
    a3e8:	4f e7       	ldi	r20, 0x7F	; 127
    a3ea:	57 e4       	ldi	r21, 0x47	; 71
    a3ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    a3f0:	18 16       	cp	r1, r24
    a3f2:	4c f5       	brge	.+82     	; 0xa446 <main+0xbc2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a3f4:	6f a1       	ldd	r22, Y+39	; 0x27
    a3f6:	78 a5       	ldd	r23, Y+40	; 0x28
    a3f8:	89 a5       	ldd	r24, Y+41	; 0x29
    a3fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    a3fc:	20 e0       	ldi	r18, 0x00	; 0
    a3fe:	30 e0       	ldi	r19, 0x00	; 0
    a400:	40 e2       	ldi	r20, 0x20	; 32
    a402:	51 e4       	ldi	r21, 0x41	; 65
    a404:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    a408:	dc 01       	movw	r26, r24
    a40a:	cb 01       	movw	r24, r22
    a40c:	bc 01       	movw	r22, r24
    a40e:	cd 01       	movw	r24, r26
    a410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    a414:	dc 01       	movw	r26, r24
    a416:	cb 01       	movw	r24, r22
    a418:	9a a3       	std	Y+34, r25	; 0x22
    a41a:	89 a3       	std	Y+33, r24	; 0x21
    a41c:	0f c0       	rjmp	.+30     	; 0xa43c <main+0xbb8>
    a41e:	80 e9       	ldi	r24, 0x90	; 144
    a420:	91 e0       	ldi	r25, 0x01	; 1
    a422:	98 a3       	std	Y+32, r25	; 0x20
    a424:	8f 8f       	std	Y+31, r24	; 0x1f
    a426:	8f 8d       	ldd	r24, Y+31	; 0x1f
    a428:	98 a1       	ldd	r25, Y+32	; 0x20
    a42a:	01 97       	sbiw	r24, 0x01	; 1
    a42c:	f1 f7       	brne	.-4      	; 0xa42a <main+0xba6>
    a42e:	98 a3       	std	Y+32, r25	; 0x20
    a430:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a432:	89 a1       	ldd	r24, Y+33	; 0x21
    a434:	9a a1       	ldd	r25, Y+34	; 0x22
    a436:	01 97       	sbiw	r24, 0x01	; 1
    a438:	9a a3       	std	Y+34, r25	; 0x22
    a43a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a43c:	89 a1       	ldd	r24, Y+33	; 0x21
    a43e:	9a a1       	ldd	r25, Y+34	; 0x22
    a440:	00 97       	sbiw	r24, 0x00	; 0
    a442:	69 f7       	brne	.-38     	; 0xa41e <main+0xb9a>
    a444:	14 c0       	rjmp	.+40     	; 0xa46e <main+0xbea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a446:	6b a1       	ldd	r22, Y+35	; 0x23
    a448:	7c a1       	ldd	r23, Y+36	; 0x24
    a44a:	8d a1       	ldd	r24, Y+37	; 0x25
    a44c:	9e a1       	ldd	r25, Y+38	; 0x26
    a44e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    a452:	dc 01       	movw	r26, r24
    a454:	cb 01       	movw	r24, r22
    a456:	9a a3       	std	Y+34, r25	; 0x22
    a458:	89 a3       	std	Y+33, r24	; 0x21
    a45a:	89 a1       	ldd	r24, Y+33	; 0x21
    a45c:	9a a1       	ldd	r25, Y+34	; 0x22
    a45e:	9e 8f       	std	Y+30, r25	; 0x1e
    a460:	8d 8f       	std	Y+29, r24	; 0x1d
    a462:	8d 8d       	ldd	r24, Y+29	; 0x1d
    a464:	9e 8d       	ldd	r25, Y+30	; 0x1e
    a466:	01 97       	sbiw	r24, 0x01	; 1
    a468:	f1 f7       	brne	.-4      	; 0xa466 <main+0xbe2>
    a46a:	9e 8f       	std	Y+30, r25	; 0x1e
    a46c:	8d 8f       	std	Y+29, r24	; 0x1d
		                {
		                  _delay_ms(100);
		                  if (HKPD_GetPressedButton() == PRESSEDBUTTON)
    a46e:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <HKPD_GetPressedButton>
    a472:	81 30       	cpi	r24, 0x01	; 1
    a474:	09 f0       	breq	.+2      	; 0xa478 <main+0xbf4>
    a476:	85 cf       	rjmp	.-246    	; 0xa382 <main+0xafe>
		                  {
		                    while (HKPD_GetPressedButton() == PRESSEDBUTTON);
    a478:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <HKPD_GetPressedButton>
    a47c:	81 30       	cpi	r24, 0x01	; 1
    a47e:	e1 f3       	breq	.-8      	; 0xa478 <main+0xbf4>
		                    HBUZZEROFF();
    a480:	0e 94 b7 37 	call	0x6f6e	; 0x6f6e <HBUZZEROFF>
		                    AppState = WELCOME;
    a484:	fe 01       	movw	r30, r28
    a486:	ee 58       	subi	r30, 0x8E	; 142
    a488:	ff 4f       	sbci	r31, 0xFF	; 255
    a48a:	10 82       	st	Z, r1
		        Trails = 0;
		        HCLCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
		        HCLCD_SetCursorPosition(HCLCD_LINE_0,0);
		        HCLCD_WriteString("Welcome User");
		        _delay_ms(2000);
		        while (Trails < MAXTRIALS)
    a48c:	fe 01       	movw	r30, r28
    a48e:	ec 58       	subi	r30, 0x8C	; 140
    a490:	ff 4f       	sbci	r31, 0xFF	; 255
    a492:	80 81       	ld	r24, Z
    a494:	83 30       	cpi	r24, 0x03	; 3
    a496:	08 f4       	brcc	.+2      	; 0xa49a <main+0xc16>
    a498:	05 cf       	rjmp	.-502    	; 0xa2a4 <main+0xa20>
		                }
		              }
		            }
		          }
		        }
		        Trails = 0;
    a49a:	fe 01       	movw	r30, r28
    a49c:	ec 58       	subi	r30, 0x8C	; 140
    a49e:	ff 4f       	sbci	r31, 0xFF	; 255
    a4a0:	10 82       	st	Z, r1
    a4a2:	ac ca       	rjmp	.-2728   	; 0x99fc <main+0x178>
		        break;

		      case ADMINSECONDPAGE:
		        TTLData = 0;
    a4a4:	fe 01       	movw	r30, r28
    a4a6:	ed 58       	subi	r30, 0x8D	; 141
    a4a8:	ff 4f       	sbci	r31, 0xFF	; 255
    a4aa:	10 82       	st	Z, r1
		        TTLData=  HHC05_RecieveData();
    a4ac:	0e 94 3d 30 	call	0x607a	; 0x607a <HHC05_RecieveData>
    a4b0:	fe 01       	movw	r30, r28
    a4b2:	ed 58       	subi	r30, 0x8D	; 141
    a4b4:	ff 4f       	sbci	r31, 0xFF	; 255
    a4b6:	80 83       	st	Z, r24
		        switch (TTLData)
    a4b8:	fe 01       	movw	r30, r28
    a4ba:	ed 58       	subi	r30, 0x8D	; 141
    a4bc:	ff 4f       	sbci	r31, 0xFF	; 255
    a4be:	80 81       	ld	r24, Z
    a4c0:	28 2f       	mov	r18, r24
    a4c2:	30 e0       	ldi	r19, 0x00	; 0
    a4c4:	cf 57       	subi	r28, 0x7F	; 127
    a4c6:	df 4f       	sbci	r29, 0xFF	; 255
    a4c8:	39 83       	std	Y+1, r19	; 0x01
    a4ca:	28 83       	st	Y, r18
    a4cc:	c1 58       	subi	r28, 0x81	; 129
    a4ce:	d0 40       	sbci	r29, 0x00	; 0
    a4d0:	cf 57       	subi	r28, 0x7F	; 127
    a4d2:	df 4f       	sbci	r29, 0xFF	; 255
    a4d4:	88 81       	ld	r24, Y
    a4d6:	99 81       	ldd	r25, Y+1	; 0x01
    a4d8:	c1 58       	subi	r28, 0x81	; 129
    a4da:	d0 40       	sbci	r29, 0x00	; 0
    a4dc:	89 34       	cpi	r24, 0x49	; 73
    a4de:	91 05       	cpc	r25, r1
    a4e0:	09 f4       	brne	.+2      	; 0xa4e4 <main+0xc60>
    a4e2:	cc c1       	rjmp	.+920    	; 0xa87c <main+0xff8>
    a4e4:	cf 57       	subi	r28, 0x7F	; 127
    a4e6:	df 4f       	sbci	r29, 0xFF	; 255
    a4e8:	e8 81       	ld	r30, Y
    a4ea:	f9 81       	ldd	r31, Y+1	; 0x01
    a4ec:	c1 58       	subi	r28, 0x81	; 129
    a4ee:	d0 40       	sbci	r29, 0x00	; 0
    a4f0:	ea 34       	cpi	r30, 0x4A	; 74
    a4f2:	f1 05       	cpc	r31, r1
    a4f4:	9c f5       	brge	.+102    	; 0xa55c <main+0xcd8>
    a4f6:	cf 57       	subi	r28, 0x7F	; 127
    a4f8:	df 4f       	sbci	r29, 0xFF	; 255
    a4fa:	28 81       	ld	r18, Y
    a4fc:	39 81       	ldd	r19, Y+1	; 0x01
    a4fe:	c1 58       	subi	r28, 0x81	; 129
    a500:	d0 40       	sbci	r29, 0x00	; 0
    a502:	22 34       	cpi	r18, 0x42	; 66
    a504:	31 05       	cpc	r19, r1
    a506:	09 f4       	brne	.+2      	; 0xa50a <main+0xc86>
    a508:	62 c0       	rjmp	.+196    	; 0xa5ce <main+0xd4a>
    a50a:	cf 57       	subi	r28, 0x7F	; 127
    a50c:	df 4f       	sbci	r29, 0xFF	; 255
    a50e:	88 81       	ld	r24, Y
    a510:	99 81       	ldd	r25, Y+1	; 0x01
    a512:	c1 58       	subi	r28, 0x81	; 129
    a514:	d0 40       	sbci	r29, 0x00	; 0
    a516:	83 34       	cpi	r24, 0x43	; 67
    a518:	91 05       	cpc	r25, r1
    a51a:	5c f4       	brge	.+22     	; 0xa532 <main+0xcae>
    a51c:	cf 57       	subi	r28, 0x7F	; 127
    a51e:	df 4f       	sbci	r29, 0xFF	; 255
    a520:	e8 81       	ld	r30, Y
    a522:	f9 81       	ldd	r31, Y+1	; 0x01
    a524:	c1 58       	subi	r28, 0x81	; 129
    a526:	d0 40       	sbci	r29, 0x00	; 0
    a528:	e1 34       	cpi	r30, 0x41	; 65
    a52a:	f1 05       	cpc	r31, r1
    a52c:	09 f4       	brne	.+2      	; 0xa530 <main+0xcac>
    a52e:	49 c0       	rjmp	.+146    	; 0xa5c2 <main+0xd3e>
    a530:	65 ca       	rjmp	.-2870   	; 0x99fc <main+0x178>
    a532:	cf 57       	subi	r28, 0x7F	; 127
    a534:	df 4f       	sbci	r29, 0xFF	; 255
    a536:	28 81       	ld	r18, Y
    a538:	39 81       	ldd	r19, Y+1	; 0x01
    a53a:	c1 58       	subi	r28, 0x81	; 129
    a53c:	d0 40       	sbci	r29, 0x00	; 0
    a53e:	23 34       	cpi	r18, 0x43	; 67
    a540:	31 05       	cpc	r19, r1
    a542:	09 f4       	brne	.+2      	; 0xa546 <main+0xcc2>
    a544:	db c0       	rjmp	.+438    	; 0xa6fc <main+0xe78>
    a546:	cf 57       	subi	r28, 0x7F	; 127
    a548:	df 4f       	sbci	r29, 0xFF	; 255
    a54a:	88 81       	ld	r24, Y
    a54c:	99 81       	ldd	r25, Y+1	; 0x01
    a54e:	c1 58       	subi	r28, 0x81	; 129
    a550:	d0 40       	sbci	r29, 0x00	; 0
    a552:	84 34       	cpi	r24, 0x44	; 68
    a554:	91 05       	cpc	r25, r1
    a556:	09 f4       	brne	.+2      	; 0xa55a <main+0xcd6>
    a558:	82 c1       	rjmp	.+772    	; 0xa85e <main+0xfda>
    a55a:	50 ca       	rjmp	.-2912   	; 0x99fc <main+0x178>
    a55c:	cf 57       	subi	r28, 0x7F	; 127
    a55e:	df 4f       	sbci	r29, 0xFF	; 255
    a560:	e8 81       	ld	r30, Y
    a562:	f9 81       	ldd	r31, Y+1	; 0x01
    a564:	c1 58       	subi	r28, 0x81	; 129
    a566:	d0 40       	sbci	r29, 0x00	; 0
    a568:	e2 35       	cpi	r30, 0x52	; 82
    a56a:	f1 05       	cpc	r31, r1
    a56c:	09 f4       	brne	.+2      	; 0xa570 <main+0xcec>
    a56e:	7d c1       	rjmp	.+762    	; 0xa86a <main+0xfe6>
    a570:	cf 57       	subi	r28, 0x7F	; 127
    a572:	df 4f       	sbci	r29, 0xFF	; 255
    a574:	28 81       	ld	r18, Y
    a576:	39 81       	ldd	r19, Y+1	; 0x01
    a578:	c1 58       	subi	r28, 0x81	; 129
    a57a:	d0 40       	sbci	r29, 0x00	; 0
    a57c:	23 35       	cpi	r18, 0x53	; 83
    a57e:	31 05       	cpc	r19, r1
    a580:	5c f4       	brge	.+22     	; 0xa598 <main+0xd14>
    a582:	cf 57       	subi	r28, 0x7F	; 127
    a584:	df 4f       	sbci	r29, 0xFF	; 255
    a586:	88 81       	ld	r24, Y
    a588:	99 81       	ldd	r25, Y+1	; 0x01
    a58a:	c1 58       	subi	r28, 0x81	; 129
    a58c:	d0 40       	sbci	r29, 0x00	; 0
    a58e:	8c 34       	cpi	r24, 0x4C	; 76
    a590:	91 05       	cpc	r25, r1
    a592:	09 f4       	brne	.+2      	; 0xa596 <main+0xd12>
    a594:	70 c1       	rjmp	.+736    	; 0xa876 <main+0xff2>
    a596:	32 ca       	rjmp	.-2972   	; 0x99fc <main+0x178>
    a598:	cf 57       	subi	r28, 0x7F	; 127
    a59a:	df 4f       	sbci	r29, 0xFF	; 255
    a59c:	e8 81       	ld	r30, Y
    a59e:	f9 81       	ldd	r31, Y+1	; 0x01
    a5a0:	c1 58       	subi	r28, 0x81	; 129
    a5a2:	d0 40       	sbci	r29, 0x00	; 0
    a5a4:	e3 35       	cpi	r30, 0x53	; 83
    a5a6:	f1 05       	cpc	r31, r1
    a5a8:	09 f4       	brne	.+2      	; 0xa5ac <main+0xd28>
    a5aa:	48 c1       	rjmp	.+656    	; 0xa83c <main+0xfb8>
    a5ac:	cf 57       	subi	r28, 0x7F	; 127
    a5ae:	df 4f       	sbci	r29, 0xFF	; 255
    a5b0:	28 81       	ld	r18, Y
    a5b2:	39 81       	ldd	r19, Y+1	; 0x01
    a5b4:	c1 58       	subi	r28, 0x81	; 129
    a5b6:	d0 40       	sbci	r29, 0x00	; 0
    a5b8:	25 35       	cpi	r18, 0x55	; 85
    a5ba:	31 05       	cpc	r19, r1
    a5bc:	09 f4       	brne	.+2      	; 0xa5c0 <main+0xd3c>
    a5be:	38 c1       	rjmp	.+624    	; 0xa830 <main+0xfac>
    a5c0:	1d ca       	rjmp	.-3014   	; 0x99fc <main+0x178>
		        {
		          //   A/C Switch
		          case 'A':    ACSwitch(&ACState);
    a5c2:	ce 01       	movw	r24, r28
    a5c4:	81 58       	subi	r24, 0x81	; 129
    a5c6:	9f 4f       	sbci	r25, 0xFF	; 255
    a5c8:	0e 94 e7 47 	call	0x8fce	; 0x8fce <ACSwitch>
    a5cc:	17 ca       	rjmp	.-3026   	; 0x99fc <main+0x178>
		          break;
		          //  Add user
		          case 'B':
		        	 HCLCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
    a5ce:	81 e0       	ldi	r24, 0x01	; 1
    a5d0:	0e 94 61 34 	call	0x68c2	; 0x68c2 <HCLCD_WriteCommand4Bit>
		        	 HCLCD_SetCursorPosition(HCLCD_LINE_0,0);
    a5d4:	80 e0       	ldi	r24, 0x00	; 0
    a5d6:	60 e0       	ldi	r22, 0x00	; 0
    a5d8:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
		        	HCLCD_WriteString("Use the KeyPad");
    a5dc:	86 e5       	ldi	r24, 0x56	; 86
    a5de:	93 e0       	ldi	r25, 0x03	; 3
    a5e0:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <HCLCD_WriteString>
		            HHC05_SendString("Use the KeyPad");
    a5e4:	86 e5       	ldi	r24, 0x56	; 86
    a5e6:	93 e0       	ldi	r25, 0x03	; 3
    a5e8:	0e 94 29 30 	call	0x6052	; 0x6052 <HHC05_SendString>
    a5ec:	80 e0       	ldi	r24, 0x00	; 0
    a5ee:	90 e8       	ldi	r25, 0x80	; 128
    a5f0:	ab e3       	ldi	r26, 0x3B	; 59
    a5f2:	b5 e4       	ldi	r27, 0x45	; 69
    a5f4:	89 8f       	std	Y+25, r24	; 0x19
    a5f6:	9a 8f       	std	Y+26, r25	; 0x1a
    a5f8:	ab 8f       	std	Y+27, r26	; 0x1b
    a5fa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    a5fc:	69 8d       	ldd	r22, Y+25	; 0x19
    a5fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    a600:	8b 8d       	ldd	r24, Y+27	; 0x1b
    a602:	9c 8d       	ldd	r25, Y+28	; 0x1c
    a604:	20 e0       	ldi	r18, 0x00	; 0
    a606:	30 e0       	ldi	r19, 0x00	; 0
    a608:	4a e7       	ldi	r20, 0x7A	; 122
    a60a:	55 e4       	ldi	r21, 0x45	; 69
    a60c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    a610:	dc 01       	movw	r26, r24
    a612:	cb 01       	movw	r24, r22
    a614:	8d 8b       	std	Y+21, r24	; 0x15
    a616:	9e 8b       	std	Y+22, r25	; 0x16
    a618:	af 8b       	std	Y+23, r26	; 0x17
    a61a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    a61c:	6d 89       	ldd	r22, Y+21	; 0x15
    a61e:	7e 89       	ldd	r23, Y+22	; 0x16
    a620:	8f 89       	ldd	r24, Y+23	; 0x17
    a622:	98 8d       	ldd	r25, Y+24	; 0x18
    a624:	20 e0       	ldi	r18, 0x00	; 0
    a626:	30 e0       	ldi	r19, 0x00	; 0
    a628:	40 e8       	ldi	r20, 0x80	; 128
    a62a:	5f e3       	ldi	r21, 0x3F	; 63
    a62c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    a630:	88 23       	and	r24, r24
    a632:	2c f4       	brge	.+10     	; 0xa63e <main+0xdba>
		__ticks = 1;
    a634:	81 e0       	ldi	r24, 0x01	; 1
    a636:	90 e0       	ldi	r25, 0x00	; 0
    a638:	9c 8b       	std	Y+20, r25	; 0x14
    a63a:	8b 8b       	std	Y+19, r24	; 0x13
    a63c:	3f c0       	rjmp	.+126    	; 0xa6bc <main+0xe38>
	else if (__tmp > 65535)
    a63e:	6d 89       	ldd	r22, Y+21	; 0x15
    a640:	7e 89       	ldd	r23, Y+22	; 0x16
    a642:	8f 89       	ldd	r24, Y+23	; 0x17
    a644:	98 8d       	ldd	r25, Y+24	; 0x18
    a646:	20 e0       	ldi	r18, 0x00	; 0
    a648:	3f ef       	ldi	r19, 0xFF	; 255
    a64a:	4f e7       	ldi	r20, 0x7F	; 127
    a64c:	57 e4       	ldi	r21, 0x47	; 71
    a64e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    a652:	18 16       	cp	r1, r24
    a654:	4c f5       	brge	.+82     	; 0xa6a8 <main+0xe24>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a656:	69 8d       	ldd	r22, Y+25	; 0x19
    a658:	7a 8d       	ldd	r23, Y+26	; 0x1a
    a65a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    a65c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    a65e:	20 e0       	ldi	r18, 0x00	; 0
    a660:	30 e0       	ldi	r19, 0x00	; 0
    a662:	40 e2       	ldi	r20, 0x20	; 32
    a664:	51 e4       	ldi	r21, 0x41	; 65
    a666:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    a66a:	dc 01       	movw	r26, r24
    a66c:	cb 01       	movw	r24, r22
    a66e:	bc 01       	movw	r22, r24
    a670:	cd 01       	movw	r24, r26
    a672:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    a676:	dc 01       	movw	r26, r24
    a678:	cb 01       	movw	r24, r22
    a67a:	9c 8b       	std	Y+20, r25	; 0x14
    a67c:	8b 8b       	std	Y+19, r24	; 0x13
    a67e:	0f c0       	rjmp	.+30     	; 0xa69e <main+0xe1a>
    a680:	80 e9       	ldi	r24, 0x90	; 144
    a682:	91 e0       	ldi	r25, 0x01	; 1
    a684:	9a 8b       	std	Y+18, r25	; 0x12
    a686:	89 8b       	std	Y+17, r24	; 0x11
    a688:	89 89       	ldd	r24, Y+17	; 0x11
    a68a:	9a 89       	ldd	r25, Y+18	; 0x12
    a68c:	01 97       	sbiw	r24, 0x01	; 1
    a68e:	f1 f7       	brne	.-4      	; 0xa68c <main+0xe08>
    a690:	9a 8b       	std	Y+18, r25	; 0x12
    a692:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a694:	8b 89       	ldd	r24, Y+19	; 0x13
    a696:	9c 89       	ldd	r25, Y+20	; 0x14
    a698:	01 97       	sbiw	r24, 0x01	; 1
    a69a:	9c 8b       	std	Y+20, r25	; 0x14
    a69c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a69e:	8b 89       	ldd	r24, Y+19	; 0x13
    a6a0:	9c 89       	ldd	r25, Y+20	; 0x14
    a6a2:	00 97       	sbiw	r24, 0x00	; 0
    a6a4:	69 f7       	brne	.-38     	; 0xa680 <main+0xdfc>
    a6a6:	14 c0       	rjmp	.+40     	; 0xa6d0 <main+0xe4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a6a8:	6d 89       	ldd	r22, Y+21	; 0x15
    a6aa:	7e 89       	ldd	r23, Y+22	; 0x16
    a6ac:	8f 89       	ldd	r24, Y+23	; 0x17
    a6ae:	98 8d       	ldd	r25, Y+24	; 0x18
    a6b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    a6b4:	dc 01       	movw	r26, r24
    a6b6:	cb 01       	movw	r24, r22
    a6b8:	9c 8b       	std	Y+20, r25	; 0x14
    a6ba:	8b 8b       	std	Y+19, r24	; 0x13
    a6bc:	8b 89       	ldd	r24, Y+19	; 0x13
    a6be:	9c 89       	ldd	r25, Y+20	; 0x14
    a6c0:	98 8b       	std	Y+16, r25	; 0x10
    a6c2:	8f 87       	std	Y+15, r24	; 0x0f
    a6c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    a6c6:	98 89       	ldd	r25, Y+16	; 0x10
    a6c8:	01 97       	sbiw	r24, 0x01	; 1
    a6ca:	f1 f7       	brne	.-4      	; 0xa6c8 <main+0xe44>
    a6cc:	98 8b       	std	Y+16, r25	; 0x10
    a6ce:	8f 87       	std	Y+15, r24	; 0x0f
		            _delay_ms(3000);
		            InputID(UserID, USERMODE);
    a6d0:	ce 01       	movw	r24, r28
    a6d2:	89 58       	subi	r24, 0x89	; 137
    a6d4:	9f 4f       	sbci	r25, 0xFF	; 255
    a6d6:	69 e0       	ldi	r22, 0x09	; 9
    a6d8:	0e 94 57 38 	call	0x70ae	; 0x70ae <InputID>
		            InputPassword(UserPassword, USERMODE);
    a6dc:	ce 01       	movw	r24, r28
    a6de:	86 58       	subi	r24, 0x86	; 134
    a6e0:	9f 4f       	sbci	r25, 0xFF	; 255
    a6e2:	69 e0       	ldi	r22, 0x09	; 9
    a6e4:	0e 94 bd 39 	call	0x737a	; 0x737a <InputPassword>
		            AddUser(UserID, UserPassword);
    a6e8:	ce 01       	movw	r24, r28
    a6ea:	89 58       	subi	r24, 0x89	; 137
    a6ec:	9f 4f       	sbci	r25, 0xFF	; 255
    a6ee:	9e 01       	movw	r18, r28
    a6f0:	26 58       	subi	r18, 0x86	; 134
    a6f2:	3f 4f       	sbci	r19, 0xFF	; 255
    a6f4:	b9 01       	movw	r22, r18
    a6f6:	0e 94 19 41 	call	0x8232	; 0x8232 <AddUser>
    a6fa:	80 c9       	rjmp	.-3328   	; 0x99fc <main+0x178>
		            break;
		          // Remove user
		          case 'C':
		            NumberOfUsers = HEEPROM_ReadByte(0, 100);
    a6fc:	80 e0       	ldi	r24, 0x00	; 0
    a6fe:	64 e6       	ldi	r22, 0x64	; 100
    a700:	0e 94 4b 30 	call	0x6096	; 0x6096 <HEEPROM_ReadByte>
    a704:	fe 01       	movw	r30, r28
    a706:	ea 58       	subi	r30, 0x8A	; 138
    a708:	ff 4f       	sbci	r31, 0xFF	; 255
    a70a:	80 83       	st	Z, r24
		            HCLCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
    a70c:	81 e0       	ldi	r24, 0x01	; 1
    a70e:	0e 94 61 34 	call	0x68c2	; 0x68c2 <HCLCD_WriteCommand4Bit>
		           	HCLCD_SetCursorPosition(HCLCD_LINE_0,0);
    a712:	80 e0       	ldi	r24, 0x00	; 0
    a714:	60 e0       	ldi	r22, 0x00	; 0
    a716:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
		           	HCLCD_WriteString("Use Bluetooth");
    a71a:	8e e0       	ldi	r24, 0x0E	; 14
    a71c:	93 e0       	ldi	r25, 0x03	; 3
    a71e:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <HCLCD_WriteString>
		            HHC05_SendString("Use Bluetooth");
    a722:	8e e0       	ldi	r24, 0x0E	; 14
    a724:	93 e0       	ldi	r25, 0x03	; 3
    a726:	0e 94 29 30 	call	0x6052	; 0x6052 <HHC05_SendString>
    a72a:	80 e0       	ldi	r24, 0x00	; 0
    a72c:	90 e8       	ldi	r25, 0x80	; 128
    a72e:	ab e3       	ldi	r26, 0x3B	; 59
    a730:	b5 e4       	ldi	r27, 0x45	; 69
    a732:	8b 87       	std	Y+11, r24	; 0x0b
    a734:	9c 87       	std	Y+12, r25	; 0x0c
    a736:	ad 87       	std	Y+13, r26	; 0x0d
    a738:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    a73a:	6b 85       	ldd	r22, Y+11	; 0x0b
    a73c:	7c 85       	ldd	r23, Y+12	; 0x0c
    a73e:	8d 85       	ldd	r24, Y+13	; 0x0d
    a740:	9e 85       	ldd	r25, Y+14	; 0x0e
    a742:	20 e0       	ldi	r18, 0x00	; 0
    a744:	30 e0       	ldi	r19, 0x00	; 0
    a746:	4a e7       	ldi	r20, 0x7A	; 122
    a748:	55 e4       	ldi	r21, 0x45	; 69
    a74a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    a74e:	dc 01       	movw	r26, r24
    a750:	cb 01       	movw	r24, r22
    a752:	8f 83       	std	Y+7, r24	; 0x07
    a754:	98 87       	std	Y+8, r25	; 0x08
    a756:	a9 87       	std	Y+9, r26	; 0x09
    a758:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    a75a:	6f 81       	ldd	r22, Y+7	; 0x07
    a75c:	78 85       	ldd	r23, Y+8	; 0x08
    a75e:	89 85       	ldd	r24, Y+9	; 0x09
    a760:	9a 85       	ldd	r25, Y+10	; 0x0a
    a762:	20 e0       	ldi	r18, 0x00	; 0
    a764:	30 e0       	ldi	r19, 0x00	; 0
    a766:	40 e8       	ldi	r20, 0x80	; 128
    a768:	5f e3       	ldi	r21, 0x3F	; 63
    a76a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    a76e:	88 23       	and	r24, r24
    a770:	2c f4       	brge	.+10     	; 0xa77c <main+0xef8>
		__ticks = 1;
    a772:	81 e0       	ldi	r24, 0x01	; 1
    a774:	90 e0       	ldi	r25, 0x00	; 0
    a776:	9e 83       	std	Y+6, r25	; 0x06
    a778:	8d 83       	std	Y+5, r24	; 0x05
    a77a:	3f c0       	rjmp	.+126    	; 0xa7fa <main+0xf76>
	else if (__tmp > 65535)
    a77c:	6f 81       	ldd	r22, Y+7	; 0x07
    a77e:	78 85       	ldd	r23, Y+8	; 0x08
    a780:	89 85       	ldd	r24, Y+9	; 0x09
    a782:	9a 85       	ldd	r25, Y+10	; 0x0a
    a784:	20 e0       	ldi	r18, 0x00	; 0
    a786:	3f ef       	ldi	r19, 0xFF	; 255
    a788:	4f e7       	ldi	r20, 0x7F	; 127
    a78a:	57 e4       	ldi	r21, 0x47	; 71
    a78c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    a790:	18 16       	cp	r1, r24
    a792:	4c f5       	brge	.+82     	; 0xa7e6 <main+0xf62>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    a794:	6b 85       	ldd	r22, Y+11	; 0x0b
    a796:	7c 85       	ldd	r23, Y+12	; 0x0c
    a798:	8d 85       	ldd	r24, Y+13	; 0x0d
    a79a:	9e 85       	ldd	r25, Y+14	; 0x0e
    a79c:	20 e0       	ldi	r18, 0x00	; 0
    a79e:	30 e0       	ldi	r19, 0x00	; 0
    a7a0:	40 e2       	ldi	r20, 0x20	; 32
    a7a2:	51 e4       	ldi	r21, 0x41	; 65
    a7a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    a7a8:	dc 01       	movw	r26, r24
    a7aa:	cb 01       	movw	r24, r22
    a7ac:	bc 01       	movw	r22, r24
    a7ae:	cd 01       	movw	r24, r26
    a7b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    a7b4:	dc 01       	movw	r26, r24
    a7b6:	cb 01       	movw	r24, r22
    a7b8:	9e 83       	std	Y+6, r25	; 0x06
    a7ba:	8d 83       	std	Y+5, r24	; 0x05
    a7bc:	0f c0       	rjmp	.+30     	; 0xa7dc <main+0xf58>
    a7be:	80 e9       	ldi	r24, 0x90	; 144
    a7c0:	91 e0       	ldi	r25, 0x01	; 1
    a7c2:	9c 83       	std	Y+4, r25	; 0x04
    a7c4:	8b 83       	std	Y+3, r24	; 0x03
    a7c6:	8b 81       	ldd	r24, Y+3	; 0x03
    a7c8:	9c 81       	ldd	r25, Y+4	; 0x04
    a7ca:	01 97       	sbiw	r24, 0x01	; 1
    a7cc:	f1 f7       	brne	.-4      	; 0xa7ca <main+0xf46>
    a7ce:	9c 83       	std	Y+4, r25	; 0x04
    a7d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    a7d2:	8d 81       	ldd	r24, Y+5	; 0x05
    a7d4:	9e 81       	ldd	r25, Y+6	; 0x06
    a7d6:	01 97       	sbiw	r24, 0x01	; 1
    a7d8:	9e 83       	std	Y+6, r25	; 0x06
    a7da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    a7dc:	8d 81       	ldd	r24, Y+5	; 0x05
    a7de:	9e 81       	ldd	r25, Y+6	; 0x06
    a7e0:	00 97       	sbiw	r24, 0x00	; 0
    a7e2:	69 f7       	brne	.-38     	; 0xa7be <main+0xf3a>
    a7e4:	14 c0       	rjmp	.+40     	; 0xa80e <main+0xf8a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    a7e6:	6f 81       	ldd	r22, Y+7	; 0x07
    a7e8:	78 85       	ldd	r23, Y+8	; 0x08
    a7ea:	89 85       	ldd	r24, Y+9	; 0x09
    a7ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    a7ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    a7f2:	dc 01       	movw	r26, r24
    a7f4:	cb 01       	movw	r24, r22
    a7f6:	9e 83       	std	Y+6, r25	; 0x06
    a7f8:	8d 83       	std	Y+5, r24	; 0x05
    a7fa:	8d 81       	ldd	r24, Y+5	; 0x05
    a7fc:	9e 81       	ldd	r25, Y+6	; 0x06
    a7fe:	9a 83       	std	Y+2, r25	; 0x02
    a800:	89 83       	std	Y+1, r24	; 0x01
    a802:	89 81       	ldd	r24, Y+1	; 0x01
    a804:	9a 81       	ldd	r25, Y+2	; 0x02
    a806:	01 97       	sbiw	r24, 0x01	; 1
    a808:	f1 f7       	brne	.-4      	; 0xa806 <main+0xf82>
    a80a:	9a 83       	std	Y+2, r25	; 0x02
    a80c:	89 83       	std	Y+1, r24	; 0x01
		            _delay_ms(3000);
		            InputID(UserID, ADMINMODE);
    a80e:	ce 01       	movw	r24, r28
    a810:	89 58       	subi	r24, 0x89	; 137
    a812:	9f 4f       	sbci	r25, 0xFF	; 255
    a814:	68 e0       	ldi	r22, 0x08	; 8
    a816:	0e 94 57 38 	call	0x70ae	; 0x70ae <InputID>
		            DeleteUser(NumberOfUsers, UserID);
    a81a:	fe 01       	movw	r30, r28
    a81c:	ea 58       	subi	r30, 0x8A	; 138
    a81e:	ff 4f       	sbci	r31, 0xFF	; 255
    a820:	9e 01       	movw	r18, r28
    a822:	29 58       	subi	r18, 0x89	; 137
    a824:	3f 4f       	sbci	r19, 0xFF	; 255
    a826:	80 81       	ld	r24, Z
    a828:	b9 01       	movw	r22, r18
    a82a:	0e 94 e6 45 	call	0x8bcc	; 0x8bcc <DeleteUser>
    a82e:	e6 c8       	rjmp	.-3636   	; 0x99fc <main+0x178>
		            break;
		            //  User Mode
		       	   case 'U':     AppState = USERLOGINPAGE;
    a830:	fe 01       	movw	r30, r28
    a832:	ee 58       	subi	r30, 0x8E	; 142
    a834:	ff 4f       	sbci	r31, 0xFF	; 255
    a836:	82 e3       	ldi	r24, 0x32	; 50
    a838:	80 83       	st	Z, r24
    a83a:	e0 c8       	rjmp	.-3648   	; 0x99fc <main+0x178>
		       	   break;
		       	       // Reset Mode
		       	  case 'S': Reset(&ACState, &DoorState, &RelayState);
    a83c:	ce 01       	movw	r24, r28
    a83e:	81 58       	subi	r24, 0x81	; 129
    a840:	9f 4f       	sbci	r25, 0xFF	; 255
    a842:	9e 01       	movw	r18, r28
    a844:	22 58       	subi	r18, 0x82	; 130
    a846:	3f 4f       	sbci	r19, 0xFF	; 255
    a848:	ae 01       	movw	r20, r28
    a84a:	40 58       	subi	r20, 0x80	; 128
    a84c:	5f 4f       	sbci	r21, 0xFF	; 255
    a84e:	b9 01       	movw	r22, r18
    a850:	0e 94 09 4c 	call	0x9812	; 0x9812 <Reset>
		       	  AppState = WELCOME;
    a854:	fe 01       	movw	r30, r28
    a856:	ee 58       	subi	r30, 0x8E	; 142
    a858:	ff 4f       	sbci	r31, 0xFF	; 255
    a85a:	10 82       	st	Z, r1
    a85c:	cf c8       	rjmp	.-3682   	; 0x99fc <main+0x178>
		       	   break;
		          //   Door Switch
		          case 'D':   DoorSwitch(&DoorState);
    a85e:	ce 01       	movw	r24, r28
    a860:	82 58       	subi	r24, 0x82	; 130
    a862:	9f 4f       	sbci	r25, 0xFF	; 255
    a864:	0e 94 29 48 	call	0x9052	; 0x9052 <DoorSwitch>
    a868:	c9 c8       	rjmp	.-3694   	; 0x99fc <main+0x178>
		          break;
		          //   Relay Switch
		          case 'R':   RelaySwitch(&RelayState);
    a86a:	ce 01       	movw	r24, r28
    a86c:	80 58       	subi	r24, 0x80	; 128
    a86e:	9f 4f       	sbci	r25, 0xFF	; 255
    a870:	0e 94 5a 49 	call	0x92b4	; 0x92b4 <RelaySwitch>
    a874:	c3 c8       	rjmp	.-3706   	; 0x99fc <main+0x178>
		          break;
		          //Dimmer
		          case 'L':
		        	 HDimmerLightStart(); break;
    a876:	0e 94 3a 31 	call	0x6274	; 0x6274 <HDimmerLightStart>
    a87a:	c0 c8       	rjmp	.-3712   	; 0x99fc <main+0x178>



		        		          break;
		          //I -> Idle State (OK)
		          case 'I':   AppState = IDLE_STATE;
    a87c:	fe 01       	movw	r30, r28
    a87e:	ee 58       	subi	r30, 0x8E	; 142
    a880:	ff 4f       	sbci	r31, 0xFF	; 255
    a882:	85 e0       	ldi	r24, 0x05	; 5
    a884:	80 83       	st	Z, r24
    a886:	ba c8       	rjmp	.-3724   	; 0x99fc <main+0x178>
		          break;
		          default:   break;
		        }
		        break;
		      case IDLE_STATE:
		    	  TTLData = HHC05_RecieveData();
    a888:	0e 94 3d 30 	call	0x607a	; 0x607a <HHC05_RecieveData>
    a88c:	fe 01       	movw	r30, r28
    a88e:	ed 58       	subi	r30, 0x8D	; 141
    a890:	ff 4f       	sbci	r31, 0xFF	; 255
    a892:	80 83       	st	Z, r24
    a894:	18 c0       	rjmp	.+48     	; 0xa8c6 <main+0x1042>
		        while (!TTLData)
		        {
		        TTLData=HHC05_RecieveData();
    a896:	0e 94 3d 30 	call	0x607a	; 0x607a <HHC05_RecieveData>
    a89a:	fe 01       	movw	r30, r28
    a89c:	ed 58       	subi	r30, 0x8D	; 141
    a89e:	ff 4f       	sbci	r31, 0xFF	; 255
    a8a0:	80 83       	st	Z, r24
		          AC(ACState);
    a8a2:	fe 01       	movw	r30, r28
    a8a4:	e1 58       	subi	r30, 0x81	; 129
    a8a6:	ff 4f       	sbci	r31, 0xFF	; 255
    a8a8:	80 81       	ld	r24, Z
    a8aa:	0e 94 ca 4a 	call	0x9594	; 0x9594 <AC>
		          Relay(RelayState);
    a8ae:	fe 01       	movw	r30, r28
    a8b0:	e0 58       	subi	r30, 0x80	; 128
    a8b2:	ff 4f       	sbci	r31, 0xFF	; 255
    a8b4:	80 81       	ld	r24, Z
    a8b6:	0e 94 1f 4b 	call	0x963e	; 0x963e <Relay>
		          Door(DoorState);
    a8ba:	fe 01       	movw	r30, r28
    a8bc:	e2 58       	subi	r30, 0x82	; 130
    a8be:	ff 4f       	sbci	r31, 0xFF	; 255
    a8c0:	80 81       	ld	r24, Z
    a8c2:	0e 94 a9 49 	call	0x9352	; 0x9352 <Door>
		          default:   break;
		        }
		        break;
		      case IDLE_STATE:
		    	  TTLData = HHC05_RecieveData();
		        while (!TTLData)
    a8c6:	fe 01       	movw	r30, r28
    a8c8:	ed 58       	subi	r30, 0x8D	; 141
    a8ca:	ff 4f       	sbci	r31, 0xFF	; 255
    a8cc:	80 81       	ld	r24, Z
    a8ce:	88 23       	and	r24, r24
    a8d0:	11 f3       	breq	.-60     	; 0xa896 <main+0x1012>
		        TTLData=HHC05_RecieveData();
		          AC(ACState);
		          Relay(RelayState);
		          Door(DoorState);
		        }
		        AppState = WELCOME;
    a8d2:	fe 01       	movw	r30, r28
    a8d4:	ee 58       	subi	r30, 0x8E	; 142
    a8d6:	ff 4f       	sbci	r31, 0xFF	; 255
    a8d8:	10 82       	st	Z, r1
    a8da:	90 c8       	rjmp	.-3808   	; 0x99fc <main+0x178>

		        break;

		      case USERSECONDPAGE :
		    	HCLCD_WriteCommand4Bit(DISPLAY_CLEAR_COMMAND);
    a8dc:	81 e0       	ldi	r24, 0x01	; 1
    a8de:	0e 94 61 34 	call	0x68c2	; 0x68c2 <HCLCD_WriteCommand4Bit>
		        HCLCD_SetCursorPosition(HCLCD_LINE_0,0);
    a8e2:	80 e0       	ldi	r24, 0x00	; 0
    a8e4:	60 e0       	ldi	r22, 0x00	; 0
    a8e6:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
		        HCLCD_WriteString("1:Relay ON?");
    a8ea:	85 e6       	ldi	r24, 0x65	; 101
    a8ec:	93 e0       	ldi	r25, 0x03	; 3
    a8ee:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <HCLCD_WriteString>
		        HCLCD_SetCursorPosition(HCLCD_LINE_1,0);
    a8f2:	81 e0       	ldi	r24, 0x01	; 1
    a8f4:	60 e0       	ldi	r22, 0x00	; 0
    a8f6:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <HCLCD_SetCursorPosition>
		        HCLCD_WriteString("2:AcSwitch  3:OK");
    a8fa:	81 e7       	ldi	r24, 0x71	; 113
    a8fc:	93 e0       	ldi	r25, 0x03	; 3
    a8fe:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <HCLCD_WriteString>
		        KeyPRESSEDBUTTON = HKPD_GetPressedButton();
    a902:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <HKPD_GetPressedButton>
    a906:	fe 01       	movw	r30, r28
    a908:	eb 58       	subi	r30, 0x8B	; 139
    a90a:	ff 4f       	sbci	r31, 0xFF	; 255
    a90c:	80 83       	st	Z, r24
    a90e:	29 c0       	rjmp	.+82     	; 0xa962 <main+0x10de>
		        while (!KeyPRESSEDBUTTON)
		        {
		          KeyPRESSEDBUTTON = HKPD_GetPressedButton();
    a910:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <HKPD_GetPressedButton>
    a914:	fe 01       	movw	r30, r28
    a916:	eb 58       	subi	r30, 0x8B	; 139
    a918:	ff 4f       	sbci	r31, 0xFF	; 255
    a91a:	80 83       	st	Z, r24
		          if (KeyPRESSEDBUTTON == '1')
    a91c:	fe 01       	movw	r30, r28
    a91e:	eb 58       	subi	r30, 0x8B	; 139
    a920:	ff 4f       	sbci	r31, 0xFF	; 255
    a922:	80 81       	ld	r24, Z
    a924:	81 33       	cpi	r24, 0x31	; 49
    a926:	31 f4       	brne	.+12     	; 0xa934 <main+0x10b0>
		          {
		            RelaySwitch(&RelayState);
    a928:	ce 01       	movw	r24, r28
    a92a:	80 58       	subi	r24, 0x80	; 128
    a92c:	9f 4f       	sbci	r25, 0xFF	; 255
    a92e:	0e 94 5a 49 	call	0x92b4	; 0x92b4 <RelaySwitch>
    a932:	17 c0       	rjmp	.+46     	; 0xa962 <main+0x10de>
		          }
		          else if (KeyPRESSEDBUTTON == '2')
    a934:	fe 01       	movw	r30, r28
    a936:	eb 58       	subi	r30, 0x8B	; 139
    a938:	ff 4f       	sbci	r31, 0xFF	; 255
    a93a:	80 81       	ld	r24, Z
    a93c:	82 33       	cpi	r24, 0x32	; 50
    a93e:	31 f4       	brne	.+12     	; 0xa94c <main+0x10c8>
		          {
		            ACSwitch(&ACState);
    a940:	ce 01       	movw	r24, r28
    a942:	81 58       	subi	r24, 0x81	; 129
    a944:	9f 4f       	sbci	r25, 0xFF	; 255
    a946:	0e 94 e7 47 	call	0x8fce	; 0x8fce <ACSwitch>
    a94a:	0b c0       	rjmp	.+22     	; 0xa962 <main+0x10de>
		          }
		          else if (KeyPRESSEDBUTTON == '3')
    a94c:	fe 01       	movw	r30, r28
    a94e:	eb 58       	subi	r30, 0x8B	; 139
    a950:	ff 4f       	sbci	r31, 0xFF	; 255
    a952:	80 81       	ld	r24, Z
    a954:	83 33       	cpi	r24, 0x33	; 51
    a956:	29 f4       	brne	.+10     	; 0xa962 <main+0x10de>
		          {
		            AppState = IDLE_STATE;
    a958:	fe 01       	movw	r30, r28
    a95a:	ee 58       	subi	r30, 0x8E	; 142
    a95c:	ff 4f       	sbci	r31, 0xFF	; 255
    a95e:	85 e0       	ldi	r24, 0x05	; 5
    a960:	80 83       	st	Z, r24
		        HCLCD_SetCursorPosition(HCLCD_LINE_0,0);
		        HCLCD_WriteString("1:Relay ON?");
		        HCLCD_SetCursorPosition(HCLCD_LINE_1,0);
		        HCLCD_WriteString("2:AcSwitch  3:OK");
		        KeyPRESSEDBUTTON = HKPD_GetPressedButton();
		        while (!KeyPRESSEDBUTTON)
    a962:	fe 01       	movw	r30, r28
    a964:	eb 58       	subi	r30, 0x8B	; 139
    a966:	ff 4f       	sbci	r31, 0xFF	; 255
    a968:	80 81       	ld	r24, Z
    a96a:	88 23       	and	r24, r24
    a96c:	89 f2       	breq	.-94     	; 0xa910 <main+0x108c>
    a96e:	46 c8       	rjmp	.-3956   	; 0x99fc <main+0x178>

0000a970 <__mulsi3>:
    a970:	62 9f       	mul	r22, r18
    a972:	d0 01       	movw	r26, r0
    a974:	73 9f       	mul	r23, r19
    a976:	f0 01       	movw	r30, r0
    a978:	82 9f       	mul	r24, r18
    a97a:	e0 0d       	add	r30, r0
    a97c:	f1 1d       	adc	r31, r1
    a97e:	64 9f       	mul	r22, r20
    a980:	e0 0d       	add	r30, r0
    a982:	f1 1d       	adc	r31, r1
    a984:	92 9f       	mul	r25, r18
    a986:	f0 0d       	add	r31, r0
    a988:	83 9f       	mul	r24, r19
    a98a:	f0 0d       	add	r31, r0
    a98c:	74 9f       	mul	r23, r20
    a98e:	f0 0d       	add	r31, r0
    a990:	65 9f       	mul	r22, r21
    a992:	f0 0d       	add	r31, r0
    a994:	99 27       	eor	r25, r25
    a996:	72 9f       	mul	r23, r18
    a998:	b0 0d       	add	r27, r0
    a99a:	e1 1d       	adc	r30, r1
    a99c:	f9 1f       	adc	r31, r25
    a99e:	63 9f       	mul	r22, r19
    a9a0:	b0 0d       	add	r27, r0
    a9a2:	e1 1d       	adc	r30, r1
    a9a4:	f9 1f       	adc	r31, r25
    a9a6:	bd 01       	movw	r22, r26
    a9a8:	cf 01       	movw	r24, r30
    a9aa:	11 24       	eor	r1, r1
    a9ac:	08 95       	ret

0000a9ae <__divmodhi4>:
    a9ae:	97 fb       	bst	r25, 7
    a9b0:	09 2e       	mov	r0, r25
    a9b2:	07 26       	eor	r0, r23
    a9b4:	0a d0       	rcall	.+20     	; 0xa9ca <__divmodhi4_neg1>
    a9b6:	77 fd       	sbrc	r23, 7
    a9b8:	04 d0       	rcall	.+8      	; 0xa9c2 <__divmodhi4_neg2>
    a9ba:	49 d0       	rcall	.+146    	; 0xaa4e <__udivmodhi4>
    a9bc:	06 d0       	rcall	.+12     	; 0xa9ca <__divmodhi4_neg1>
    a9be:	00 20       	and	r0, r0
    a9c0:	1a f4       	brpl	.+6      	; 0xa9c8 <__divmodhi4_exit>

0000a9c2 <__divmodhi4_neg2>:
    a9c2:	70 95       	com	r23
    a9c4:	61 95       	neg	r22
    a9c6:	7f 4f       	sbci	r23, 0xFF	; 255

0000a9c8 <__divmodhi4_exit>:
    a9c8:	08 95       	ret

0000a9ca <__divmodhi4_neg1>:
    a9ca:	f6 f7       	brtc	.-4      	; 0xa9c8 <__divmodhi4_exit>
    a9cc:	90 95       	com	r25
    a9ce:	81 95       	neg	r24
    a9d0:	9f 4f       	sbci	r25, 0xFF	; 255
    a9d2:	08 95       	ret

0000a9d4 <__udivmodsi4>:
    a9d4:	a1 e2       	ldi	r26, 0x21	; 33
    a9d6:	1a 2e       	mov	r1, r26
    a9d8:	aa 1b       	sub	r26, r26
    a9da:	bb 1b       	sub	r27, r27
    a9dc:	fd 01       	movw	r30, r26
    a9de:	0d c0       	rjmp	.+26     	; 0xa9fa <__udivmodsi4_ep>

0000a9e0 <__udivmodsi4_loop>:
    a9e0:	aa 1f       	adc	r26, r26
    a9e2:	bb 1f       	adc	r27, r27
    a9e4:	ee 1f       	adc	r30, r30
    a9e6:	ff 1f       	adc	r31, r31
    a9e8:	a2 17       	cp	r26, r18
    a9ea:	b3 07       	cpc	r27, r19
    a9ec:	e4 07       	cpc	r30, r20
    a9ee:	f5 07       	cpc	r31, r21
    a9f0:	20 f0       	brcs	.+8      	; 0xa9fa <__udivmodsi4_ep>
    a9f2:	a2 1b       	sub	r26, r18
    a9f4:	b3 0b       	sbc	r27, r19
    a9f6:	e4 0b       	sbc	r30, r20
    a9f8:	f5 0b       	sbc	r31, r21

0000a9fa <__udivmodsi4_ep>:
    a9fa:	66 1f       	adc	r22, r22
    a9fc:	77 1f       	adc	r23, r23
    a9fe:	88 1f       	adc	r24, r24
    aa00:	99 1f       	adc	r25, r25
    aa02:	1a 94       	dec	r1
    aa04:	69 f7       	brne	.-38     	; 0xa9e0 <__udivmodsi4_loop>
    aa06:	60 95       	com	r22
    aa08:	70 95       	com	r23
    aa0a:	80 95       	com	r24
    aa0c:	90 95       	com	r25
    aa0e:	9b 01       	movw	r18, r22
    aa10:	ac 01       	movw	r20, r24
    aa12:	bd 01       	movw	r22, r26
    aa14:	cf 01       	movw	r24, r30
    aa16:	08 95       	ret

0000aa18 <__divmodsi4>:
    aa18:	97 fb       	bst	r25, 7
    aa1a:	09 2e       	mov	r0, r25
    aa1c:	05 26       	eor	r0, r21
    aa1e:	0e d0       	rcall	.+28     	; 0xaa3c <__divmodsi4_neg1>
    aa20:	57 fd       	sbrc	r21, 7
    aa22:	04 d0       	rcall	.+8      	; 0xaa2c <__divmodsi4_neg2>
    aa24:	d7 df       	rcall	.-82     	; 0xa9d4 <__udivmodsi4>
    aa26:	0a d0       	rcall	.+20     	; 0xaa3c <__divmodsi4_neg1>
    aa28:	00 1c       	adc	r0, r0
    aa2a:	38 f4       	brcc	.+14     	; 0xaa3a <__divmodsi4_exit>

0000aa2c <__divmodsi4_neg2>:
    aa2c:	50 95       	com	r21
    aa2e:	40 95       	com	r20
    aa30:	30 95       	com	r19
    aa32:	21 95       	neg	r18
    aa34:	3f 4f       	sbci	r19, 0xFF	; 255
    aa36:	4f 4f       	sbci	r20, 0xFF	; 255
    aa38:	5f 4f       	sbci	r21, 0xFF	; 255

0000aa3a <__divmodsi4_exit>:
    aa3a:	08 95       	ret

0000aa3c <__divmodsi4_neg1>:
    aa3c:	f6 f7       	brtc	.-4      	; 0xaa3a <__divmodsi4_exit>
    aa3e:	90 95       	com	r25
    aa40:	80 95       	com	r24
    aa42:	70 95       	com	r23
    aa44:	61 95       	neg	r22
    aa46:	7f 4f       	sbci	r23, 0xFF	; 255
    aa48:	8f 4f       	sbci	r24, 0xFF	; 255
    aa4a:	9f 4f       	sbci	r25, 0xFF	; 255
    aa4c:	08 95       	ret

0000aa4e <__udivmodhi4>:
    aa4e:	aa 1b       	sub	r26, r26
    aa50:	bb 1b       	sub	r27, r27
    aa52:	51 e1       	ldi	r21, 0x11	; 17
    aa54:	07 c0       	rjmp	.+14     	; 0xaa64 <__udivmodhi4_ep>

0000aa56 <__udivmodhi4_loop>:
    aa56:	aa 1f       	adc	r26, r26
    aa58:	bb 1f       	adc	r27, r27
    aa5a:	a6 17       	cp	r26, r22
    aa5c:	b7 07       	cpc	r27, r23
    aa5e:	10 f0       	brcs	.+4      	; 0xaa64 <__udivmodhi4_ep>
    aa60:	a6 1b       	sub	r26, r22
    aa62:	b7 0b       	sbc	r27, r23

0000aa64 <__udivmodhi4_ep>:
    aa64:	88 1f       	adc	r24, r24
    aa66:	99 1f       	adc	r25, r25
    aa68:	5a 95       	dec	r21
    aa6a:	a9 f7       	brne	.-22     	; 0xaa56 <__udivmodhi4_loop>
    aa6c:	80 95       	com	r24
    aa6e:	90 95       	com	r25
    aa70:	bc 01       	movw	r22, r24
    aa72:	cd 01       	movw	r24, r26
    aa74:	08 95       	ret

0000aa76 <__prologue_saves__>:
    aa76:	2f 92       	push	r2
    aa78:	3f 92       	push	r3
    aa7a:	4f 92       	push	r4
    aa7c:	5f 92       	push	r5
    aa7e:	6f 92       	push	r6
    aa80:	7f 92       	push	r7
    aa82:	8f 92       	push	r8
    aa84:	9f 92       	push	r9
    aa86:	af 92       	push	r10
    aa88:	bf 92       	push	r11
    aa8a:	cf 92       	push	r12
    aa8c:	df 92       	push	r13
    aa8e:	ef 92       	push	r14
    aa90:	ff 92       	push	r15
    aa92:	0f 93       	push	r16
    aa94:	1f 93       	push	r17
    aa96:	cf 93       	push	r28
    aa98:	df 93       	push	r29
    aa9a:	cd b7       	in	r28, 0x3d	; 61
    aa9c:	de b7       	in	r29, 0x3e	; 62
    aa9e:	ca 1b       	sub	r28, r26
    aaa0:	db 0b       	sbc	r29, r27
    aaa2:	0f b6       	in	r0, 0x3f	; 63
    aaa4:	f8 94       	cli
    aaa6:	de bf       	out	0x3e, r29	; 62
    aaa8:	0f be       	out	0x3f, r0	; 63
    aaaa:	cd bf       	out	0x3d, r28	; 61
    aaac:	09 94       	ijmp

0000aaae <__epilogue_restores__>:
    aaae:	2a 88       	ldd	r2, Y+18	; 0x12
    aab0:	39 88       	ldd	r3, Y+17	; 0x11
    aab2:	48 88       	ldd	r4, Y+16	; 0x10
    aab4:	5f 84       	ldd	r5, Y+15	; 0x0f
    aab6:	6e 84       	ldd	r6, Y+14	; 0x0e
    aab8:	7d 84       	ldd	r7, Y+13	; 0x0d
    aaba:	8c 84       	ldd	r8, Y+12	; 0x0c
    aabc:	9b 84       	ldd	r9, Y+11	; 0x0b
    aabe:	aa 84       	ldd	r10, Y+10	; 0x0a
    aac0:	b9 84       	ldd	r11, Y+9	; 0x09
    aac2:	c8 84       	ldd	r12, Y+8	; 0x08
    aac4:	df 80       	ldd	r13, Y+7	; 0x07
    aac6:	ee 80       	ldd	r14, Y+6	; 0x06
    aac8:	fd 80       	ldd	r15, Y+5	; 0x05
    aaca:	0c 81       	ldd	r16, Y+4	; 0x04
    aacc:	1b 81       	ldd	r17, Y+3	; 0x03
    aace:	aa 81       	ldd	r26, Y+2	; 0x02
    aad0:	b9 81       	ldd	r27, Y+1	; 0x01
    aad2:	ce 0f       	add	r28, r30
    aad4:	d1 1d       	adc	r29, r1
    aad6:	0f b6       	in	r0, 0x3f	; 63
    aad8:	f8 94       	cli
    aada:	de bf       	out	0x3e, r29	; 62
    aadc:	0f be       	out	0x3f, r0	; 63
    aade:	cd bf       	out	0x3d, r28	; 61
    aae0:	ed 01       	movw	r28, r26
    aae2:	08 95       	ret

0000aae4 <_exit>:
    aae4:	f8 94       	cli

0000aae6 <__stop_program>:
    aae6:	ff cf       	rjmp	.-2      	; 0xaae6 <__stop_program>
